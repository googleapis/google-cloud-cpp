name: Windows-Builds

on:
  workflow_call:
    inputs:
      checkout-ref:
        required: true
        description: "The ref we want to compile"
        type: string
      full-matrix:
        required: true
        description: "Run the full matrix"
        type: boolean

permissions:
  contents: read

jobs:
  bazel:
    # We only run the Bazel tests post-merge. macOS builds are expensive, and
    # the Bazel tests are unlikely to fail given that (1) we have macOS+CMake
    # builds below, and (2) we have Linux+Bazel tests elsewhere.
    if: ${{ inputs.full-matrix }}
    name: bazel + ${{ matrix.msvc }} + ${{ matrix.compilation_mode }} + ${{ matrix.shard }}
    runs-on:
      group: cpp-runners
      labels: ${{ endsWith(matrix.msvc, '-2019') && 'windows-2019' || 'windows-2022' }}
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      # Continue other builds even if one fails
      fail-fast: false
      matrix:
        msvc: [ msvc-2019 ]
        # - dbg creates very large debugging files and GHA has limited storage.
        # - fastbuild also takes too much storage.
        compilation_mode: [ opt ]
        shard: [ Core, Compute, Other ]
        include:
        - shard: Core
          targets:
          - //google/cloud:all
          # - //generator/...  # Does not build on Windows
          # - //docfx/...      # Does not build on Windows
          - +//google/cloud/bigtable/...
          - +//google/cloud/pubsub/...
          - +//google/cloud/pubsublite/...
          - +//google/cloud/spanner/...
          - +//google/cloud/storage/...
        - shard: Compute
          targets:
          - //google/cloud/compute/...
        - shard: Other
          targets:
          - //...
          # From Core
          - -//google/cloud:all
          - -//generator/...
          - -//docfx/...
          - -//google/cloud/bigtable/...
          - -//google/cloud/pubsub/...
          - -//google/cloud/pubsublite/...
          - -//google/cloud/spanner/...
          - -//google/cloud/storage/...
          # From Compute
          - -//google/cloud/compute/...
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.checkout-ref }}
    - uses: google-github-actions/auth@v1
      with:
        create_credentials_file: true
        credentials_json: ${{ secrets.BUILD_CACHE_KEY }}
    # go/github-actions#gha-bestpractices explains why we use a SHA instead of
    # a named version for this runner. We could avoid using this runner with the
    # ideas from:
    #   https://github.com/microsoft/vswhere/wiki/Find-VC
    # Note that in other runners the publisher is GitHub. If we trust GitHub
    # to run the VM, we should trust their runners.
    - uses: ilammy/msvc-dev-cmd@cec98b9d092141f74527d0afa6feb2af698cfe89 # @v1.21.1
    - name: Build google-cloud-cpp
      shell: bash
      run: |
        # Having `/usr/bin/link` in the path will conflict with the MSVC linker.
        rm -f /usr/bin/link >/dev/null 2>&1
        # Bazel creates really long paths, sometimes exceeding the MSVC limits.
        # Using a short name like this avoids the problem in most cases.
        mkdir -p 'c:\b' || true
        export BAZEL_ROOT='c:\b'
        ci/gha/builds/windows-bazel.sh ${{ matrix.compilation_mode }} ${{ join(matrix.targets, ' ') }}
    env:
      USE_BAZEL_VERSION: 6.2.1
      BAZEL_REMOTE_CACHE: https://storage.googleapis.com/cloud-cpp-gha-cache/bazel-cache/${{ matrix.msvc }}/${{ matrix.compliation_mode }}

  cmake:
    name: cmake + ${{ matrix.msvc }} + ${{ matrix.build_type }} + ${{ matrix.shard }}
    runs-on:
      group: cpp-runners
      labels: ${{ endsWith(matrix.msvc, '-2019') && 'windows-2019' || 'windows-2022' }}
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      # Continue other builds even if one fails
      fail-fast: false
      matrix:
        exclude-from-full-trick: [ true ]
        msvc: [ msvc-2022, msvc-2019 ]
        build_type: [ Debug, Release ]
        vcpkg_triplet: [ x64-windows ]
        shard: [Core, Compute, Other]
        exclude:
        # On pull requests skip the MSVC 2019 builds. These rarely contain This contains all the
        # hand-crafted code. The other shards are unlikely to catch problems, as
        # (1) this is largely generated code, (2) we have other builds that test
        # this code on Linux.
        # Do not run MSVC 2019 builds with pull requests. Running builds is
        # expensive, and these rarely catch any problems.
        - exclude-from-full-trick: ${{ ! inputs.full-matrix }}
          msvc: ${{ 'windows-2019' }}
        - exclude-from-full-trick: ${{ ! inputs.full-matrix }}
          msvc: msvc-2019
        - exclude-from-full-trick: ${{ ! inputs.full-matrix }}
          shard: Compute
        - exclude-from-full-trick: ${{ ! inputs.full-matrix }}
          shard: Other
        # Compute is (currently) a single `.lib` file. This file is too large in
        # Debug mode. MSVC uses COFF:
        #     https://en.wikipedia.org/wiki/COFF
        # and COFF offsets are 32-bits. No library or program can exceed this
        # limit:
        #     https://learn.microsoft.com/en-us/cpp/error-messages/tool-errors/linker-tools-error-lnk1248
        - build_type: Debug
          shard: Compute
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.checkout-ref }}
    - uses: google-github-actions/auth@v1
      with:
        create_credentials_file: true
        credentials_json: ${{ secrets.BUILD_CACHE_KEY }}
    - uses: actions/setup-python@v4
      id: py311
      with:
        python-version: '3.11'
    - uses: google-github-actions/setup-gcloud@v1
    - name: Dynamic Configuration
      id: dynamic
      shell: bash
      run: |
        echo "vcpkg-version=$(cat ci/etc/vcpkg-version.txt)" >> "${GITHUB_OUTPUT}"
        core_features=(bigtable pubsub pubsublite spanner storage)
        if [[ "${{ matrix.shard }}" == "Core" ]]; then
          features="$(printf ",%s" "${core_features[@]}")"
          echo "features=${features:1}" >> "${GITHUB_OUTPUT}"
        elsif [[ "${{matrix.shard}}" == "Compute" ]]; then
          echo "features=compute" >> "${GITHUB_OUTPUT}"
        else
          skipped_features=("${core_features[@]}")
          skipped_features+=(compute)
          # We use vcpkg in this build, which ships with Protobuf v21.x.
          # Both `asset` and `channel` require Protobuf >= 23.x to compile on
          # Windows.
          skipped_features+=(asset channel)
          skipped="$(printf ",-%s" "${skipped_features[@]}")"
          echo "features=__ga_libraries__,__experimental_libraries__,${skipped:2}" >> "${GITHUB_OUTPUT}"
        fi
    - name: Download and Install sccache
      working-directory: "${{runner.temp}}"
      shell: bash
      run: |
        curl -fsSL https://github.com/mozilla/sccache/releases/download/v0.5.4/sccache-v0.5.4-x86_64-pc-windows-msvc.tar.gz | \
          tar -zxf - --strip-components=1
        chmod +x sccache.exe
        mv sccache.exe /c/Users/runneradmin/.cargo/bin
    - name: Download and Install vcpkg
      shell: bash
      run: |
        cd "${TEMP}"
        mkdir -p .build/vcpkg
        curl -fsSL "https://github.com/microsoft/vcpkg/archive/${{ steps.dynamic.outputs.vcpkg-version }}.tar.gz" |
            tar -C .build/vcpkg --strip-components=1 -zxf -
        .build/vcpkg/bootstrap-vcpkg.sh -disableMetrics
    # go/github-actions#gha-bestpractices explains why we use a SHA instead of
    # a named version for this runner. We could avoid using this runner with the
    # ideas from:
    #   https://github.com/microsoft/vswhere/wiki/Find-VC
    # Note that in other runners the publisher is GitHub. If we trust GitHub
    # to run the VM, we should trust their runners.
    - uses: ilammy/msvc-dev-cmd@cec98b9d092141f74527d0afa6feb2af698cfe89 # @v1.21.1
    - name: Build google-cloud-cpp
      shell: bash
      run: |
        export VCPKG_ROOT="${TEMP}/.build/vcpkg"
        export CLOUDSDK_PYTHON="${{ steps.py311.outputs.python-path }}"
        # Put the CMake output in a directory with more space and keep it short
        # to avoid running into the MSVC limits.
        export CMAKE_OUT='c:\b'
        echo DEBUG DEBUG DEBUG ci/gha/builds/windows-cmake.sh ${{ matrix.build_type }} ${{ steps.dynamic.outputs.features }}
    env:
      SCCACHE_GCS_BUCKET: cloud-cpp-gha-cache
      SCCACHE_GCS_KEY_PREFIX: sccache/${{ matrix.msvc }}/${{ matrix.build_type }}
      SCCACHE_GCS_RW_MODE: READ_WRITE
      SCCACHE_IGNORE_SERVER_IO_ERROR: 1
      VCPKG_BINARY_SOURCES: x-gcs,gs://cloud-cpp-gha-cache/vcpkg-cache/${{ matrix.msvc }},readwrite
      VCPKG_TRIPLET: ${{ matrix.vcpkg_triplet }}
