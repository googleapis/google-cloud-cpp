name: "Build and Test"

# Build on pull requests and pushes to `main`. The PR builds will be
# non-blocking for now, but that is configured elsewhere.
on:
  pull_request:
  push:
    branches: [ 'main' ]

jobs:
  # Compiles and runs unit tests with macOS and Bazel
  # TODO(coryan) - currently it is just testing the runner
  macos-bazel:
    runs-on: 'macos-12'
    steps:
      - uses: 'actions/checkout@v3'
      - uses: 'bazelbuild/setup-bazelisk@v2'
      - name: dump machine info
        run: |
          printf "%10s %s\n" "host:" "$(date -u -R)"
          printf "%10s %s\n" "kernel:" "$(uname -v)"
          printf "%10s %s\n" "os:" "$(sw_vers | xargs)"
          printf "%10s %s\n" "arch:" "$(arch)"
          printf "%10s %s\n" "cpus:" "$(sysctl -n hw.logicalcpu)"
          printf "%10s %s\n" "mem:" "$(($(sysctl -n hw.memsize) / 1024 / 1024 / 1024)) GB"
          printf "%10s %s\n" "term:" "${TERM-}"
          printf "%10s %s\n" "bash:" "$(bash --version 2>&1 | head -1)"
          printf "%10s %s\n" "clang:" "$(clang --version 2>&1 | head -1)"
          printf "%10s %s\n" "brew:" "$(brew --version 2>&1 | head -1)"
          printf "%10s %s\n" "branch:" "${BRANCH}"
          printf "%10s %s\n" "bazelisk:" "$(bazelisk version 2>&1 | head -1)"
          printf "%10s %s\n" "bazel:" "$(bazelisk --batch version 2>&1 | head -1)"
          printf "%10s %s\n" "=========="
          du -sh
          printf "%10s %s\n" "=========="
          df -h
      - name: run bazel fetch
        run: |
          bazelisk fetch //...
      - name: run bazel build
        run: |
          bazelisk build //google/cloud/storage/...

  # Compiles and runs unit tests with macOS and Bazel
  # TODO(coryan) - currently it is just testing the XL runner
  macos-bazel-xl:
    runs-on: 'macos-12-xl'
    steps:
      - uses: 'actions/checkout@v3'
      - uses: 'bazelbuild/setup-bazelisk@v2'
      - id: 'auth'
        if: '!github.event.pull_request.head.repo.fork'
        name: 'Authenticate to GCP'
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: 'true'
          workload_identity_provider: 'projects/49427430084/locations/global/workloadIdentityPools/github-wif-pool/providers/github-wif-provider'
          service_account: 'github-actions@cloud-cpp-identity-federation.iam.gserviceaccount.com'
      - name: dump machine info
        run: |
          printf "%10s %s\n" "host:" "$(date -u -R)"
          printf "%10s %s\n" "kernel:" "$(uname -v)"
          printf "%10s %s\n" "os:" "$(sw_vers | xargs)"
          printf "%10s %s\n" "arch:" "$(arch)"
          printf "%10s %s\n" "cpus:" "$(sysctl -n hw.logicalcpu)"
          printf "%10s %s\n" "mem:" "$(($(sysctl -n hw.memsize) / 1024 / 1024 / 1024)) GB"
          printf "%10s %s\n" "term:" "${TERM-}"
          printf "%10s %s\n" "bash:" "$(bash --version 2>&1 | head -1)"
          printf "%10s %s\n" "clang:" "$(clang --version 2>&1 | head -1)"
          printf "%10s %s\n" "brew:" "$(brew --version 2>&1 | head -1)"
          printf "%10s %s\n" "branch:" "${BRANCH}"
          printf "%10s %s\n" "bazelisk:" "$(bazelisk version 2>&1 | head -1)"
          printf "%10s %s\n" "bazel:" "$(bazelisk --batch version 2>&1 | head -1)"
          printf "%10s %s\n" "=========="
          du -sh
          printf "%10s %s\n" "=========="
          df -h
      - name: run bazel fetch
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "${{ steps.auth.outputs.credentials_file_path }}"
        run: |
          bazelisk fetch --remote_cache=https://storage.googleapis.com/cloud-cpp-gha-cache/bazel/${{ github.job }} //...
      - name: run bazel build
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "${{ steps.auth.outputs.credentials_file_path }}"
        run: |
          bazelisk build --remote_cache=https://storage.googleapis.com/cloud-cpp-gha-cache/bazel/${{ github.job }} //google/cloud/storage/...
