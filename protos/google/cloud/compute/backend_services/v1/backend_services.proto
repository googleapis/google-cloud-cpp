// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20230920

syntax = "proto3";

package google.cloud.cpp.compute.backend_services.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/cloud/compute/v1/internal/common_000.proto";
import "google/cloud/compute/v1/internal/common_007.proto";
import "google/cloud/compute/v1/internal/common_011.proto";
import "google/cloud/compute/v1/internal/common_016.proto";
import "google/cloud/compute/v1/internal/common_046.proto";
import "google/cloud/compute/v1/internal/common_107.proto";
import "google/cloud/compute/v1/internal/common_110.proto";
import "google/cloud/extended_operations.proto";

// Service for the backendServices resource.
// https://cloud.google.com/compute/docs/reference/rest/v1/backendServices
service BackendServices {
  option (google.api.default_host) = "compute.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/cloud-platform,"
      "https://www.googleapis.com/auth/compute,"
      "https://www.googleapis.com/auth/compute.readonly";

  // Adds a key for validating requests with signed URLs for this backend
  // service.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/addSignedUrlKey
  rpc AddSignedUrlKey(AddSignedUrlKeyRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{backend_service}/addSignedUrlKey"
      body: "signed_url_key_resource"
    };
    option (google.api.method_signature) =
        "project,backend_service,signed_url_key_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Retrieves the list of all BackendService resources, regional and global,
  // available to the specified project.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/aggregatedList
  rpc AggregatedListBackendServices(AggregatedListBackendServicesRequest)
      returns (google.cloud.cpp.compute.v1.BackendServiceAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/backendServices"
    };
    option (google.api.method_signature) = "project";
  }

  // Deletes the specified BackendService resource.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/delete
  rpc DeleteBackendService(DeleteBackendServiceRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/backendServices/{backend_service}"
    };
    option (google.api.method_signature) = "project,backend_service";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Deletes a key for validating requests with signed URLs for this backend
  // service.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/deleteSignedUrlKey
  rpc DeleteSignedUrlKey(DeleteSignedUrlKeyRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{backend_service}/deleteSignedUrlKey"
      body: "*"
    };
    option (google.api.method_signature) = "project,backend_service,key_name";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Returns the specified BackendService resource.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/get
  rpc GetBackendService(GetBackendServiceRequest)
      returns (google.cloud.cpp.compute.v1.BackendService) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/backendServices/{backend_service}"
    };
    option (google.api.method_signature) = "project,backend_service";
  }

  // Gets the most recent health check results for this BackendService. Example
  // request body: { "group":
  // "/zones/us-east1-b/instanceGroups/lb-backend-example" }
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/getHealth
  rpc GetHealth(GetHealthRequest)
      returns (google.cloud.cpp.compute.v1.BackendServiceGroupHealth) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{backend_service}/getHealth"
      body: "resource_group_reference_resource"
    };
    option (google.api.method_signature) =
        "project,backend_service,resource_group_reference_resource";
  }

  // Gets the access control policy for a resource. May be empty if no such
  // policy or resource exists.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/getIamPolicy
  rpc GetIamPolicy(GetIamPolicyRequest)
      returns (google.cloud.cpp.compute.v1.Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/backendServices/{resource}/getIamPolicy"
    };
    option (google.api.method_signature) = "project,resource";
  }

  // Creates a BackendService resource in the specified project using the data
  // included in the request. For more information, see Backend services
  // overview .
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/insert
  rpc InsertBackendService(InsertBackendServiceRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices"
      body: "backend_service_resource"
    };
    option (google.api.method_signature) = "project,backend_service_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Retrieves the list of BackendService resources available to the specified
  // project.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/list
  rpc ListBackendServices(ListBackendServicesRequest)
      returns (google.cloud.cpp.compute.v1.BackendServiceList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/backendServices"
    };
    option (google.api.method_signature) = "project";
  }

  // Patches the specified BackendService resource with the data included in the
  // request. For more information, see Backend services overview. This method
  // supports PATCH semantics and uses the JSON merge patch format and
  // processing rules.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/patch
  rpc PatchBackendService(PatchBackendServiceRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/backendServices/{backend_service}"
      body: "backend_service_resource"
    };
    option (google.api.method_signature) =
        "project,backend_service,backend_service_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Sets the edge security policy for the specified backend service.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/setEdgeSecurityPolicy
  rpc SetEdgeSecurityPolicy(SetEdgeSecurityPolicyRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{backend_service}/setEdgeSecurityPolicy"
      body: "security_policy_reference_resource"
    };
    option (google.api.method_signature) =
        "project,backend_service,security_policy_reference_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Sets the access control policy on the specified resource. Replaces any
  // existing policy.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/setIamPolicy
  rpc SetIamPolicy(SetIamPolicyRequest)
      returns (google.cloud.cpp.compute.v1.Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{resource}/setIamPolicy"
      body: "global_set_policy_request_resource"
    };
    option (google.api.method_signature) =
        "project,resource,global_set_policy_request_resource";
  }

  // Sets the Google Cloud Armor security policy for the specified backend
  // service. For more information, see Google Cloud Armor Overview
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/setSecurityPolicy
  rpc SetSecurityPolicy(SetSecurityPolicyRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{backend_service}/setSecurityPolicy"
      body: "security_policy_reference_resource"
    };
    option (google.api.method_signature) =
        "project,backend_service,security_policy_reference_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Updates the specified BackendService resource with the data included in the
  // request. For more information, see Backend services overview.
  // https://cloud.google.com/compute/docs/reference/rest/v1/backendServices/update
  rpc UpdateBackendService(UpdateBackendServiceRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/global/backendServices/{backend_service}"
      body: "backend_service_resource"
    };
    option (google.api.method_signature) =
        "project,backend_service,backend_service_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }
}

// Request message for AddSignedUrlKey.
message AddSignedUrlKeyRequest {
  // Name of the BackendService resource to which the Signed URL Key should be
  // added. The name should conform to RFC1035.
  string backend_service = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "backendService"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3 [json_name = "requestId"];

  // The SignedUrlKey for this request.
  optional google.cloud.cpp.compute.v1.SignedUrlKey signed_url_key_resource = 4
      [json_name = "__json_request_body"];
}

// Request message for AggregatedListBackendServices.
message AggregatedListBackendServicesRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. These two types of filter expressions cannot be mixed in
  // one request. If you want to use AIP-160, your expression must specify the
  // field name, an operator, and the value that you want to use for filtering.
  // The value must be a string, a number, or a boolean. The operator must be
  // either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are
  // filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:*`
  // comparison can be used to test whether a key has been defined. For example,
  // to find all objects with `owner` label use: ``` labels.owner:* ``` You can
  // also filter nested fields. For example, you could specify
  // `scheduling.automaticRestart = false` to include instances only if they are
  // not scheduled for automatic restarts. You can use filtering on nested
  // fields to filter based on resource labels. To filter on multiple
  // expressions, provide each separate expression within parentheses. For
  // example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel
  // Skylake") ``` By default, each expression is an `AND` expression. However,
  // you can include `AND` and `OR` expressions explicitly. For example: ```
  // (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`. You cannot combine constraints on multiple fields
  // using regular expressions.
  optional string filter = 1 [json_name = "filter"];

  // Indicates whether every visible scope for each scope type (zone, region,
  // global) should be included in the response. For new resource types added
  // after this field, the flag has no effect as new resource types will always
  // include every visible scope for each scope type in response. For resource
  // types which predate this field, if this flag is omitted or false, only
  // scopes of the scope types where the resource type is expected to be found
  // will be included.
  optional bool include_all_scopes = 2 [json_name = "includeAllScopes"];

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 3 [json_name = "maxResults"];

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 4 [json_name = "orderBy"];

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 5 [json_name = "pageToken"];

  // Name of the project scoping this request.
  string project = 6
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 7 [json_name = "returnPartialSuccess"];

  optional string service_project_number = 8
      [json_name = "serviceProjectNumber"];
}

// Request message for DeleteBackendService.
message DeleteBackendServiceRequest {
  // Name of the BackendService resource to delete.
  string backend_service = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "backendService"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3 [json_name = "requestId"];
}

// Request message for DeleteSignedUrlKey.
message DeleteSignedUrlKeyRequest {
  // Name of the BackendService resource to which the Signed URL Key should be
  // added. The name should conform to RFC1035.
  string backend_service = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "backendService"];

  // The name of the Signed URL Key to delete.
  string key_name = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "keyName"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4 [json_name = "requestId"];
}

// Request message for GetBackendService.
message GetBackendServiceRequest {
  // Name of the BackendService resource to return.
  string backend_service = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "backendService"];

  // Project ID for this request.
  string project = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];
}

// Request message for GetHealth.
message GetHealthRequest {
  // Name of the BackendService resource to which the queried instance belongs.
  string backend_service = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "backendService"];

  string project = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // The ResourceGroupReference for this request.
  optional google.cloud.cpp.compute.v1.ResourceGroupReference
      resource_group_reference_resource = 3 [json_name = "__json_request_body"];
}

// Request message for GetIamPolicy.
message GetIamPolicyRequest {
  // Requested IAM Policy version.
  optional int32 options_requested_policy_version = 1
      [json_name = "optionsRequestedPolicyVersion"];

  // Project ID for this request.
  string project = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // Name or id of the resource for this request.
  string resource = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "resource"];
}

// Request message for InsertBackendService.
message InsertBackendServiceRequest {
  // The BackendService for this request.
  optional google.cloud.cpp.compute.v1.BackendService backend_service_resource =
      1 [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3 [json_name = "requestId"];
}

// Request message for ListBackendServices.
message ListBackendServicesRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. These two types of filter expressions cannot be mixed in
  // one request. If you want to use AIP-160, your expression must specify the
  // field name, an operator, and the value that you want to use for filtering.
  // The value must be a string, a number, or a boolean. The operator must be
  // either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are
  // filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:*`
  // comparison can be used to test whether a key has been defined. For example,
  // to find all objects with `owner` label use: ``` labels.owner:* ``` You can
  // also filter nested fields. For example, you could specify
  // `scheduling.automaticRestart = false` to include instances only if they are
  // not scheduled for automatic restarts. You can use filtering on nested
  // fields to filter based on resource labels. To filter on multiple
  // expressions, provide each separate expression within parentheses. For
  // example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel
  // Skylake") ``` By default, each expression is an `AND` expression. However,
  // you can include `AND` and `OR` expressions explicitly. For example: ```
  // (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`. You cannot combine constraints on multiple fields
  // using regular expressions.
  optional string filter = 1 [json_name = "filter"];

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 2 [json_name = "maxResults"];

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 3 [json_name = "orderBy"];

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 4 [json_name = "pageToken"];

  // Project ID for this request.
  string project = 5
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 6 [json_name = "returnPartialSuccess"];
}

// Request message for PatchBackendService.
message PatchBackendServiceRequest {
  // Name of the BackendService resource to patch.
  string backend_service = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "backendService"];

  // The BackendService for this request.
  optional google.cloud.cpp.compute.v1.BackendService backend_service_resource =
      2 [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4 [json_name = "requestId"];
}

// Request message for SetEdgeSecurityPolicy.
message SetEdgeSecurityPolicyRequest {
  // Name of the BackendService resource to which the edge security policy
  // should be set. The name should conform to RFC1035.
  string backend_service = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "backendService"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3 [json_name = "requestId"];

  // The SecurityPolicyReference for this request.
  optional google.cloud.cpp.compute.v1.SecurityPolicyReference
      security_policy_reference_resource = 4
      [json_name = "__json_request_body"];
}

// Request message for SetIamPolicy.
message SetIamPolicyRequest {
  // The GlobalSetPolicyRequest for this request.
  optional google.cloud.cpp.compute.v1.GlobalSetPolicyRequest
      global_set_policy_request_resource = 1
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // Name or id of the resource for this request.
  string resource = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "resource"];
}

// Request message for SetSecurityPolicy.
message SetSecurityPolicyRequest {
  // Name of the BackendService resource to which the security policy should be
  // set. The name should conform to RFC1035.
  string backend_service = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "backendService"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3 [json_name = "requestId"];

  // The SecurityPolicyReference for this request.
  optional google.cloud.cpp.compute.v1.SecurityPolicyReference
      security_policy_reference_resource = 4
      [json_name = "__json_request_body"];
}

// Request message for UpdateBackendService.
message UpdateBackendServiceRequest {
  // Name of the BackendService resource to update.
  string backend_service = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "backendService"];

  // The BackendService for this request.
  optional google.cloud.cpp.compute.v1.BackendService backend_service_resource =
      2 [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4 [json_name = "requestId"];
}
