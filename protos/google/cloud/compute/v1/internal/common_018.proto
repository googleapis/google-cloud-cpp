// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20250126

syntax = "proto3";

package google.cloud.cpp.compute.v1;

import "google/cloud/compute/v1/internal/common_006.proto";

// Represents a regional resource-based commitment resource. Creating this
// commitment resource means that you are purchasing a resource-based committed
// use contract, with an explicit start and end time. You can purchase
// resource-based commitments for both hardware and software resources. For more
// information, read Resource-based committed use discounts
message Commitment {
  // Specifies whether to automatically renew the commitment at the end of its
  // current term. The default value is false. If you set the field to true,
  // each time your commitment reaches the end of its term, Compute Engine
  // automatically renews it for another term. You can update this field anytime
  // before the commitment expires. For example, if the commitment is set to
  // expire at 12 AM UTC-8 on January 3, 2027, you can update this field until
  // 11:59 PM UTC-8 on January 2, 2027.
  optional bool auto_renew = 1 [json_name = "autoRenew"];

  // The category of the commitment; specifies whether the commitment is for
  // hardware or software resources. Category MACHINE specifies that you are
  // committing to hardware machine resources such as VCPU or MEMORY, listed in
  // resources. Category LICENSE specifies that you are committing to software
  // licenses, listed in licenseResources. Note that if you specify MACHINE
  // commitments, then you must also specify a type to indicate the machine
  // series of the hardware resource that you are committing to.
  // CATEGORY_UNSPECIFIED:
  // LICENSE:
  // MACHINE:
  optional string category = 2 [json_name = "category"];

  // [Output Only] Creation timestamp in RFC3339 text format.
  optional string creation_timestamp = 3 [json_name = "creationTimestamp"];

  // [Input Only] Optional, specifies the requested commitment end time in
  // RFC3339 text format. Use this option when the desired commitment's end date
  // is later than the start date + term duration.
  optional string custom_end_timestamp = 22 [json_name = "customEndTimestamp"];

  // An optional description of the commitment. You can provide this property
  // when you create the resource.
  optional string description = 4 [json_name = "description"];

  // [Output Only] Commitment end time in RFC3339 text format.
  optional string end_timestamp = 5 [json_name = "endTimestamp"];

  repeated string existing_reservations = 21
      [json_name = "existingReservations"];

  // [Output Only] The unique identifier for the resource. This identifier is
  // defined by the server.
  optional string id = 6 [json_name = "id"];

  // [Output Only] Type of the resource. Always compute#commitment for
  // commitments.
  optional string kind = 7 [json_name = "kind"];

  // The license specification required as part of a license commitment.
  optional LicenseResourceCommitment license_resource = 8
      [json_name = "licenseResource"];

  // The list of source commitments that you are merging to create the new
  // merged commitment. For more information, see Merging commitments.
  repeated string merge_source_commitments = 9
      [json_name = "mergeSourceCommitments"];

  // Name of the commitment. You must specify a name when you purchase the
  // commitment. The name must be 1-63 characters long, and comply with RFC1035.
  // Specifically, the name must be 1-63 characters long and match the regular
  // expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
  // must be a lowercase letter, and all following characters must be a dash,
  // lowercase letter, or digit, except the last character, which cannot be a
  // dash.
  optional string name = 10 [json_name = "name"];

  // The minimum time duration that you commit to purchasing resources. The plan
  // that you choose determines the preset term length of the commitment (which
  // is 1 year or 3 years) and affects the discount rate that you receive for
  // your resources. Committing to a longer time duration typically gives you a
  // higher discount rate. The supported values for this field are TWELVE_MONTH
  // (1 year), and THIRTY_SIX_MONTH (3 years).
  // INVALID:
  // THIRTY_SIX_MONTH:
  // TWELVE_MONTH:
  optional string plan = 11 [json_name = "plan"];

  // [Output Only] URL of the region where the commitment and committed
  // resources are located.
  optional string region = 12 [json_name = "region"];

  // The list of new reservations that you want to create and attach to this
  // commitment. You must attach reservations to your commitment if your
  // commitment specifies any GPUs or Local SSD disks. For more information, see
  // Attach reservations to resource-based commitments. Specify this property
  // only if you want to create new reservations to attach. To attach existing
  // reservations, specify the existingReservations property instead.
  repeated Reservation reservations = 13 [json_name = "reservations"];

  // [Output Only] Status information for Commitment resource.
  optional CommitmentResourceStatus resource_status = 23
      [json_name = "resourceStatus"];

  // The list of all the hardware resources, with their types and amounts, that
  // you want to commit to. Specify as a separate entry in the list for each
  // individual resource type.
  repeated ResourceCommitment resources = 14 [json_name = "resources"];

  // [Output Only] Server-defined URL for the resource.
  optional string self_link = 15 [json_name = "selfLink"];

  // The source commitment from which you are transferring resources to create
  // the new split commitment. For more information, see Split commitments.
  optional string split_source_commitment = 16
      [json_name = "splitSourceCommitment"];

  // [Output Only] Commitment start time in RFC3339 text format.
  optional string start_timestamp = 17 [json_name = "startTimestamp"];

  // [Output Only] Status of the commitment with regards to eventual expiration
  // (each commitment has an end date defined). Status can be one of the
  // following values: NOT_YET_ACTIVE, ACTIVE, or EXPIRED.
  // ACTIVE:
  // CANCELLED: Deprecate CANCELED status. Will use separate status to
  // differentiate cancel by mergeCud or manual cancellation.
  // CREATING:
  // EXPIRED:
  // NOT_YET_ACTIVE:
  optional string status = 18 [json_name = "status"];

  // [Output Only] An optional, human-readable explanation of the status.
  optional string status_message = 19 [json_name = "statusMessage"];

  // The type of commitment; specifies the machine series for which you want to
  // commit to purchasing resources. The choice of machine series affects the
  // discount rate and the eligible resource types. The type must be one of the
  // following: ACCELERATOR_OPTIMIZED, ACCELERATOR_OPTIMIZED_A3,
  // ACCELERATOR_OPTIMIZED_A3_MEGA, COMPUTE_OPTIMIZED, COMPUTE_OPTIMIZED_C2D,
  // COMPUTE_OPTIMIZED_C3, COMPUTE_OPTIMIZED_C3D, COMPUTE_OPTIMIZED_H3,
  // GENERAL_PURPOSE, GENERAL_PURPOSE_C4, GENERAL_PURPOSE_E2,
  // GENERAL_PURPOSE_N2, GENERAL_PURPOSE_N2D, GENERAL_PURPOSE_N4,
  // GENERAL_PURPOSE_T2D, GRAPHICS_OPTIMIZED, MEMORY_OPTIMIZED,
  // MEMORY_OPTIMIZED_M3, MEMORY_OPTIMIZED_X4, STORAGE_OPTIMIZED_Z3. For
  // example, type MEMORY_OPTIMIZED specifies a commitment that applies only to
  // eligible resources of memory optimized M1 and M2 machine series. Type
  // GENERAL_PURPOSE specifies a commitment that applies only to eligible
  // resources of general purpose N1 machine series.
  // ACCELERATOR_OPTIMIZED:
  // ACCELERATOR_OPTIMIZED_A3:
  // ACCELERATOR_OPTIMIZED_A3_MEGA:
  // ACCELERATOR_OPTIMIZED_A3_ULTRA:
  // COMPUTE_OPTIMIZED:
  // COMPUTE_OPTIMIZED_C2D:
  // COMPUTE_OPTIMIZED_C3:
  // COMPUTE_OPTIMIZED_C3D:
  // COMPUTE_OPTIMIZED_H3:
  // GENERAL_PURPOSE:
  // GENERAL_PURPOSE_C4:
  // GENERAL_PURPOSE_C4A:
  // GENERAL_PURPOSE_E2:
  // GENERAL_PURPOSE_N2:
  // GENERAL_PURPOSE_N2D:
  // GENERAL_PURPOSE_N4:
  // GENERAL_PURPOSE_T2D:
  // GRAPHICS_OPTIMIZED:
  // MEMORY_OPTIMIZED:
  // MEMORY_OPTIMIZED_M3:
  // MEMORY_OPTIMIZED_X4_16TB:
  // MEMORY_OPTIMIZED_X4_24TB:
  // MEMORY_OPTIMIZED_X4_32TB:
  // STORAGE_OPTIMIZED_Z3:
  // TYPE_UNSPECIFIED: Note for internal users: When adding a new enum Type for
  // v1, make sure to also add it in the comment for the `optional Type type`
  // definition. This ensures that the public documentation displays the new
  // enum Type.
  optional string type = 20 [json_name = "type"];
}

message CommitmentAggregatedList {
  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 1 [json_name = "id"];

  // A list of CommitmentsScopedList resources.
  map<string, CommitmentsScopedList> items = 2 [json_name = "items"];

  // [Output Only] Type of resource. Always compute#commitmentAggregatedList for
  // aggregated lists of commitments.
  optional string kind = 3 [json_name = "kind"];

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 4 [json_name = "nextPageToken"];

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 5 [json_name = "selfLink"];

  // [Output Only] Unreachable resources.
  repeated string unreachables = 6 [json_name = "unreachables"];

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // QUOTA_INFO_UNAVAILABLE: Quota information is not available to client
    // requests (e.g: regions.list).
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1 [json_name = "code"];

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1 [json_name = "key"];

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2 [json_name = "value"];
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2 [json_name = "data"];

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3 [json_name = "message"];
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 7 [json_name = "warning"];
}

// Contains a list of Commitment resources.
message CommitmentList {
  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 1 [json_name = "id"];

  // A list of Commitment resources.
  repeated Commitment items = 2 [json_name = "items"];

  // [Output Only] Type of resource. Always compute#commitmentList for lists of
  // commitments.
  optional string kind = 3 [json_name = "kind"];

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 4 [json_name = "nextPageToken"];

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 5 [json_name = "selfLink"];

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // QUOTA_INFO_UNAVAILABLE: Quota information is not available to client
    // requests (e.g: regions.list).
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1 [json_name = "code"];

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1 [json_name = "key"];

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2 [json_name = "value"];
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2 [json_name = "data"];

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3 [json_name = "message"];
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 6 [json_name = "warning"];
}

// [Output Only] Contains output only fields.
message CommitmentResourceStatus {
  // [Output Only] Indicates the end time of customer's eligibility to send
  // custom term requests in RFC3339 text format. Term extension requests that
  // (not the end time in the request) after this time will be rejected.
  optional string custom_term_eligibility_end_timestamp = 1
      [json_name = "customTermEligibilityEndTimestamp"];
}

message CommitmentsScopedList {
  // [Output Only] The list of commitments contained in this scope.
  repeated Commitment commitments = 1 [json_name = "commitments"];

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // QUOTA_INFO_UNAVAILABLE: Quota information is not available to client
    // requests (e.g: regions.list).
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1 [json_name = "code"];

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1 [json_name = "key"];

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2 [json_name = "value"];
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2 [json_name = "data"];

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3 [json_name = "message"];
  }

  // [Output Only] Informational warning which replaces the list of commitments
  // when the list is empty.
  optional Warning warning = 2 [json_name = "warning"];
}

// Commitment for a particular license resource.
message LicenseResourceCommitment {
  // The number of licenses you plan to purchase.
  optional string amount = 1 [json_name = "amount"];

  // The number of cores per license.
  optional string cores_per_license = 2 [json_name = "coresPerLicense"];

  // The applicable license URI.
  optional string license = 3 [json_name = "license"];
}

// Commitment for a particular hardware resource (a commitment is composed of
// one or more of these).
message ResourceCommitment {
  // Name of the accelerator type or GPU resource. Specify this field only when
  // the type of hardware resource is ACCELERATOR.
  optional string accelerator_type = 1 [json_name = "acceleratorType"];

  // The quantity of the hardware resource that you want to commit to purchasing
  // (in a type-dependent unit). - For vCPUs, you must specify an integer value.
  // - For memory, you specify the amount of MB that you want. The value you
  // specify must be a multiple of 256 MB, with up to 6.5 GB of memory per every
  // vCPU. - For GPUs, you must specify an integer value. - For Local SSD disks,
  // you must specify the amount in GB. The size of a single Local SSD disk is
  // 375 GB.
  optional string amount = 2 [json_name = "amount"];

  // The type of hardware resource that you want to specify. You can specify any
  // of the following values: - VCPU - MEMORY - LOCAL_SSD - ACCELERATOR Specify
  // as a separate entry in the list for each individual resource type.
  // ACCELERATOR:
  // LOCAL_SSD:
  // MEMORY:
  // UNSPECIFIED:
  // VCPU:
  optional string type = 3 [json_name = "type"];
}
