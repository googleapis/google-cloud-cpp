// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20240220

syntax = "proto3";

package google.cloud.cpp.compute.v1;

import "google/cloud/compute/v1/internal/common_020.proto";

// A transient resource used in compute.disks.bulkInsert and
// compute.regionDisks.bulkInsert. It is only used to process requests and is
// not persisted.
message BulkInsertDiskResource {
  // The URL of the DiskConsistencyGroupPolicy for the group of disks to clone.
  // This may be a full or partial URL, such as: -
  // https://www.googleapis.com/compute/v1/projects/project/regions/region
  // /resourcePolicies/resourcePolicy -
  // projects/project/regions/region/resourcePolicies/resourcePolicy -
  // regions/region/resourcePolicies/resourcePolicy
  optional string source_consistency_group_policy = 1
      [json_name = "sourceConsistencyGroupPolicy"];
}

// Represents a Persistent Disk resource. Google Compute Engine has two Disk
// resources: * [Zonal](/compute/docs/reference/rest/v1/disks) *
// [Regional](/compute/docs/reference/rest/v1/regionDisks) Persistent disks are
// required for running your VM instances. Create both boot and non-boot (data)
// persistent disks. For more information, read Persistent Disks. For more
// storage options, read Storage options. The disks resource represents a zonal
// persistent disk. For more information, read Zonal persistent disks. The
// regionDisks resource represents a regional persistent disk. For more
// information, read Regional resources.
message Disk {
  // The architecture of the disk. Valid values are ARM64 or X86_64.
  // ARCHITECTURE_UNSPECIFIED: Default value indicating Architecture is not set.
  // ARM64: Machines with architecture ARM64
  // X86_64: Machines with architecture X86_64
  optional string architecture = 1 [json_name = "architecture"];

  // Disk asynchronously replicated into this disk.
  optional DiskAsyncReplication async_primary_disk = 39
      [json_name = "asyncPrimaryDisk"];

  // [Output Only] A list of disks this disk is asynchronously replicated to.
  map<string, DiskAsyncReplicationList> async_secondary_disks = 40
      [json_name = "asyncSecondaryDisks"];

  // [Output Only] Creation timestamp in RFC3339 text format.
  optional string creation_timestamp = 2 [json_name = "creationTimestamp"];

  // An optional description of this resource. Provide this property when you
  // create the resource.
  optional string description = 3 [json_name = "description"];

  // Encrypts the disk using a customer-supplied encryption key or a
  // customer-managed encryption key. Encryption keys do not protect access to
  // metadata of the disk. After you encrypt a disk with a customer-supplied
  // key, you must provide the same key if you use the disk later. For example,
  // to create a disk snapshot, to create a disk image, to create a machine
  // image, or to attach the disk to a virtual machine. After you encrypt a disk
  // with a customer-managed key, the diskEncryptionKey.kmsKeyName is set to a
  // key *version* name once the disk is created. The disk is encrypted with
  // this version of the key. In the response, diskEncryptionKey.kmsKeyName
  // appears in the following format: "diskEncryptionKey.kmsKeyName":
  // "projects/kms_project_id/locations/region/keyRings/
  // key_region/cryptoKeys/key /cryptoKeysVersions/version If you do not provide
  // an encryption key when creating the disk, then the disk is encrypted using
  // an automatically generated key and you don't need to provide a key to use
  // the disk later.
  optional CustomerEncryptionKey disk_encryption_key = 4
      [json_name = "diskEncryptionKey"];

  // Whether this disk is using confidential compute mode.
  optional bool enable_confidential_compute = 45
      [json_name = "enableConfidentialCompute"];

  // A list of features to enable on the guest operating system. Applicable only
  // for bootable images. Read Enabling guest operating system features to see a
  // list of available options.
  repeated GuestOsFeature guest_os_features = 5 [json_name = "guestOsFeatures"];

  // [Output Only] The unique identifier for the resource. This identifier is
  // defined by the server.
  optional string id = 6 [json_name = "id"];

  // [Output Only] Type of the resource. Always compute#disk for disks.
  optional string kind = 7 [json_name = "kind"];

  // A fingerprint for the labels being applied to this disk, which is
  // essentially a hash of the labels set used for optimistic locking. The
  // fingerprint is initially generated by Compute Engine and changes after
  // every request to modify or update labels. You must always provide an
  // up-to-date fingerprint hash in order to update or change labels, otherwise
  // the request will fail with error 412 conditionNotMet. To see the latest
  // fingerprint, make a get() request to retrieve a disk.
  optional string label_fingerprint = 8 [json_name = "labelFingerprint"];

  // Labels to apply to this disk. These can be later modified by the setLabels
  // method.
  map<string, string> labels = 9 [json_name = "labels"];

  // [Output Only] Last attach timestamp in RFC3339 text format.
  optional string last_attach_timestamp = 10
      [json_name = "lastAttachTimestamp"];

  // [Output Only] Last detach timestamp in RFC3339 text format.
  optional string last_detach_timestamp = 11
      [json_name = "lastDetachTimestamp"];

  // Integer license codes indicating which licenses are attached to this disk.
  repeated string license_codes = 12 [json_name = "licenseCodes"];

  // A list of publicly visible licenses. Reserved for Google's use.
  repeated string licenses = 13 [json_name = "licenses"];

  // An opaque location hint used to place the disk close to other resources.
  // This field is for use by internal tools that use the public API.
  optional string location_hint = 14 [json_name = "locationHint"];

  // Name of the resource. Provided by the client when the resource is created.
  // The name must be 1-63 characters long, and comply with RFC1035.
  // Specifically, the name must be 1-63 characters long and match the regular
  // expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
  // must be a lowercase letter, and all following characters must be a dash,
  // lowercase letter, or digit, except the last character, which cannot be a
  // dash.
  optional string name = 15 [json_name = "name"];

  // Internal use only.
  optional string options = 16 [json_name = "options"];

  // Input only. [Input Only] Additional params passed with the request, but not
  // persisted as part of resource payload.
  optional DiskParams params = 17 [json_name = "params"];

  // Physical block size of the persistent disk, in bytes. If not present in a
  // request, a default value is used. The currently supported size is 4096,
  // other sizes may be added in the future. If an unsupported value is
  // requested, the error message will list the supported values for the
  // caller's project.
  optional string physical_block_size_bytes = 18
      [json_name = "physicalBlockSizeBytes"];

  // Indicates how many IOPS to provision for the disk. This sets the number of
  // I/O operations per second that the disk can handle. Values must be between
  // 10,000 and 120,000. For more details, see the Extreme persistent disk
  // documentation.
  optional string provisioned_iops = 19 [json_name = "provisionedIops"];

  // Indicates how much throughput to provision for the disk. This sets the
  // number of throughput mb per second that the disk can handle. Values must be
  // greater than or equal to 1.
  optional string provisioned_throughput = 41
      [json_name = "provisionedThroughput"];

  // [Output Only] URL of the region where the disk resides. Only applicable for
  // regional resources. You must specify this field as part of the HTTP request
  // URL. It is not settable as a field in the request body.
  optional string region = 20 [json_name = "region"];

  // URLs of the zones where the disk should be replicated to. Only applicable
  // for regional resources.
  repeated string replica_zones = 21 [json_name = "replicaZones"];

  // Resource policies applied to this disk for automatic snapshot creations.
  repeated string resource_policies = 22 [json_name = "resourcePolicies"];

  // [Output Only] Status information for the disk resource.
  optional DiskResourceStatus resource_status = 42
      [json_name = "resourceStatus"];

  // Output only. Reserved for future use.
  optional bool satisfies_pzi = 46 [json_name = "satisfiesPzi"];

  // [Output Only] Reserved for future use.
  optional bool satisfies_pzs = 23 [json_name = "satisfiesPzs"];

  // [Output Only] Server-defined fully-qualified URL for this resource.
  optional string self_link = 24 [json_name = "selfLink"];

  // Size, in GB, of the persistent disk. You can specify this field when
  // creating a persistent disk using the sourceImage, sourceSnapshot, or
  // sourceDisk parameter, or specify it alone to create an empty persistent
  // disk. If you specify this field along with a source, the value of sizeGb
  // must not be less than the size of the source. Acceptable values are greater
  // than 0.
  optional string size_gb = 25 [json_name = "sizeGb"];

  // [Output Only] URL of the DiskConsistencyGroupPolicy for a secondary disk
  // that was created using a consistency group.
  optional string source_consistency_group_policy = 43
      [json_name = "sourceConsistencyGroupPolicy"];

  // [Output Only] ID of the DiskConsistencyGroupPolicy for a secondary disk
  // that was created using a consistency group.
  optional string source_consistency_group_policy_id = 44
      [json_name = "sourceConsistencyGroupPolicyId"];

  // The source disk used to create this disk. You can provide this as a partial
  // or full URL to the resource. For example, the following are valid values: -
  // https://www.googleapis.com/compute/v1/projects/project/zones/zone
  // /disks/disk -
  // https://www.googleapis.com/compute/v1/projects/project/regions/region
  // /disks/disk - projects/project/zones/zone/disks/disk -
  // projects/project/regions/region/disks/disk - zones/zone/disks/disk -
  // regions/region/disks/disk
  optional string source_disk = 26 [json_name = "sourceDisk"];

  // [Output Only] The unique ID of the disk used to create this disk. This
  // value identifies the exact disk that was used to create this persistent
  // disk. For example, if you created the persistent disk from a disk that was
  // later deleted and recreated under the same name, the source disk ID would
  // identify the exact version of the disk that was used.
  optional string source_disk_id = 27 [json_name = "sourceDiskId"];

  // The source image used to create this disk. If the source image is deleted,
  // this field will not be set. To create a disk with one of the public
  // operating system images, specify the image by its family name. For example,
  // specify family/debian-9 to use the latest Debian 9 image:
  // projects/debian-cloud/global/images/family/debian-9 Alternatively, use a
  // specific version of a public operating system image:
  // projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a
  // disk with a custom image that you created, specify the image name in the
  // following format: global/images/my-custom-image You can also specify a
  // custom image by its image family, which returns the latest version of the
  // image in that family. Replace the image name with family/family-name:
  // global/images/family/my-image-family
  optional string source_image = 28 [json_name = "sourceImage"];

  // The customer-supplied encryption key of the source image. Required if the
  // source image is protected by a customer-supplied encryption key.
  optional CustomerEncryptionKey source_image_encryption_key = 29
      [json_name = "sourceImageEncryptionKey"];

  // [Output Only] The ID value of the image used to create this disk. This
  // value identifies the exact image that was used to create this persistent
  // disk. For example, if you created the persistent disk from an image that
  // was later deleted and recreated under the same name, the source image ID
  // would identify the exact version of the image that was used.
  optional string source_image_id = 30 [json_name = "sourceImageId"];

  // The source instant snapshot used to create this disk. You can provide this
  // as a partial or full URL to the resource. For example, the following are
  // valid values: -
  // https://www.googleapis.com/compute/v1/projects/project/zones/zone
  // /instantSnapshots/instantSnapshot -
  // projects/project/zones/zone/instantSnapshots/instantSnapshot -
  // zones/zone/instantSnapshots/instantSnapshot
  optional string source_instant_snapshot = 47
      [json_name = "sourceInstantSnapshot"];

  // [Output Only] The unique ID of the instant snapshot used to create this
  // disk. This value identifies the exact instant snapshot that was used to
  // create this persistent disk. For example, if you created the persistent
  // disk from an instant snapshot that was later deleted and recreated under
  // the same name, the source instant snapshot ID would identify the exact
  // version of the instant snapshot that was used.
  optional string source_instant_snapshot_id = 48
      [json_name = "sourceInstantSnapshotId"];

  // The source snapshot used to create this disk. You can provide this as a
  // partial or full URL to the resource. For example, the following are valid
  // values: - https://www.googleapis.com/compute/v1/projects/project
  // /global/snapshots/snapshot - projects/project/global/snapshots/snapshot -
  // global/snapshots/snapshot
  optional string source_snapshot = 31 [json_name = "sourceSnapshot"];

  // The customer-supplied encryption key of the source snapshot. Required if
  // the source snapshot is protected by a customer-supplied encryption key.
  optional CustomerEncryptionKey source_snapshot_encryption_key = 32
      [json_name = "sourceSnapshotEncryptionKey"];

  // [Output Only] The unique ID of the snapshot used to create this disk. This
  // value identifies the exact snapshot that was used to create this persistent
  // disk. For example, if you created the persistent disk from a snapshot that
  // was later deleted and recreated under the same name, the source snapshot ID
  // would identify the exact version of the snapshot that was used.
  optional string source_snapshot_id = 33 [json_name = "sourceSnapshotId"];

  // The full Google Cloud Storage URI where the disk image is stored. This file
  // must be a gzip-compressed tarball whose name ends in .tar.gz or virtual
  // machine disk whose name ends in vmdk. Valid URIs may start with gs:// or
  // https://storage.googleapis.com/. This flag is not optimized for creating
  // multiple disks from a source storage object. To create many disks from a
  // source storage object, use gcloud compute images import instead.
  optional string source_storage_object = 34
      [json_name = "sourceStorageObject"];

  // [Output Only] The status of disk creation. - CREATING: Disk is
  // provisioning. - RESTORING: Source data is being copied into the disk. -
  // FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING:
  // Disk is deleting.
  // CREATING: Disk is provisioning
  // DELETING: Disk is deleting.
  // FAILED: Disk creation failed.
  // READY: Disk is ready for use.
  // RESTORING: Source data is being copied into the disk.
  optional string status = 35 [json_name = "status"];

  // URL of the disk type resource describing which disk type to use to create
  // the disk. Provide this when creating the disk. For example:
  // projects/project /zones/zone/diskTypes/pd-ssd . See Persistent disk types.
  optional string type = 36 [json_name = "type"];

  // [Output Only] Links to the users of the disk (attached instances) in form:
  // projects/project/zones/zone/instances/instance
  repeated string users = 37 [json_name = "users"];

  // [Output Only] URL of the zone where the disk resides. You must specify this
  // field as part of the HTTP request URL. It is not settable as a field in the
  // request body.
  optional string zone = 38 [json_name = "zone"];
}

message DiskAsyncReplication {
  // [Output Only] URL of the DiskConsistencyGroupPolicy if replication was
  // started on the disk as a member of a group.
  optional string consistency_group_policy = 1
      [json_name = "consistencyGroupPolicy"];

  // [Output Only] ID of the DiskConsistencyGroupPolicy if replication was
  // started on the disk as a member of a group.
  optional string consistency_group_policy_id = 2
      [json_name = "consistencyGroupPolicyId"];

  // The other disk asynchronously replicated to or from the current disk. You
  // can provide this as a partial or full URL to the resource. For example, the
  // following are valid values: -
  // https://www.googleapis.com/compute/v1/projects/project/zones/zone
  // /disks/disk - projects/project/zones/zone/disks/disk -
  // zones/zone/disks/disk
  optional string disk = 3 [json_name = "disk"];

  // [Output Only] The unique ID of the other disk asynchronously replicated to
  // or from the current disk. This value identifies the exact disk that was
  // used to create this replication. For example, if you started replicating
  // the persistent disk from a disk that was later deleted and recreated under
  // the same name, the disk ID would identify the exact version of the disk
  // that was used.
  optional string disk_id = 4 [json_name = "diskId"];
}

message DiskAsyncReplicationList {
  optional DiskAsyncReplication async_replication_disk = 1
      [json_name = "asyncReplicationDisk"];
}

// A list of Disk resources.
message DiskList {
  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 1 [json_name = "id"];

  // A list of Disk resources.
  repeated Disk items = 2 [json_name = "items"];

  // [Output Only] Type of resource. Always compute#diskList for lists of disks.
  optional string kind = 3 [json_name = "kind"];

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 4 [json_name = "nextPageToken"];

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 5 [json_name = "selfLink"];

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1 [json_name = "code"];

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1 [json_name = "key"];

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2 [json_name = "value"];
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2 [json_name = "data"];

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3 [json_name = "message"];
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 6 [json_name = "warning"];
}

// Additional disk params.
message DiskParams {
  // Resource manager tags to be bound to the disk. Tag keys and values have the
  // same definition as resource manager tags. Keys must be in the format
  // `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The
  // field is ignored (both PUT & PATCH) when empty.
  map<string, string> resource_manager_tags = 1
      [json_name = "resourceManagerTags"];
}

message DiskResourceStatus {
  optional DiskResourceStatusAsyncReplicationStatus async_primary_disk = 1
      [json_name = "asyncPrimaryDisk"];

  // Key: disk, value: AsyncReplicationStatus message
  map<string, DiskResourceStatusAsyncReplicationStatus> async_secondary_disks =
      2 [json_name = "asyncSecondaryDisks"];
}

message DiskResourceStatusAsyncReplicationStatus {
  // ACTIVE: Replication is active.
  // CREATED: Secondary disk is created and is waiting for replication to start.
  // STARTING: Replication is starting.
  // STATE_UNSPECIFIED:
  // STOPPED: Replication is stopped.
  // STOPPING: Replication is stopping.
  optional string state = 1 [json_name = "state"];
}

// A transient resource used in compute.disks.stopGroupAsyncReplication and
// compute.regionDisks.stopGroupAsyncReplication. It is only used to process
// requests and is not persisted.
message DisksStopGroupAsyncReplicationResource {
  // The URL of the DiskConsistencyGroupPolicy for the group of disks to stop.
  // This may be a full or partial URL, such as: -
  // https://www.googleapis.com/compute/v1/projects/project/regions/region
  // /resourcePolicies/resourcePolicy -
  // projects/project/regions/region/resourcePolicies/resourcePolicy -
  // regions/region/resourcePolicies/resourcePolicy
  optional string resource_policy = 1 [json_name = "resourcePolicy"];
}
