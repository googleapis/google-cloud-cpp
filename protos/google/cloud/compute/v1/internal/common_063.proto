// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20231003

syntax = "proto3";

package google.cloud.cpp.compute.v1;

// Represents an Interconnect resource. An Interconnect resource is a dedicated
// connection between the Google Cloud network and your on-premises network. For
// more information, read the Dedicated Interconnect Overview.
message Interconnect {
  // Administrative status of the interconnect. When this is set to true, the
  // Interconnect is functional and can carry traffic. When set to false, no
  // packets can be carried over the interconnect and no BGP routes are
  // exchanged over it. By default, the status is set to true.
  optional bool admin_enabled = 1 [json_name = "adminEnabled"];

  // [Output only] List of features available for this Interconnect connection,
  // which can take one of the following values: - MACSEC If present then the
  // Interconnect connection is provisioned on MACsec capable hardware ports. If
  // not present then the Interconnect connection is provisioned on non-MACsec
  // capable ports and MACsec isn't supported and enabling MACsec fails.
  repeated string available_features = 27 [json_name = "availableFeatures"];

  // [Output Only] A list of CircuitInfo objects, that describe the individual
  // circuits in this LAG.
  repeated InterconnectCircuitInfo circuit_infos = 2
      [json_name = "circuitInfos"];

  // [Output Only] Creation timestamp in RFC3339 text format.
  optional string creation_timestamp = 3 [json_name = "creationTimestamp"];

  // Customer name, to put in the Letter of Authorization as the party
  // authorized to request a crossconnect.
  optional string customer_name = 4 [json_name = "customerName"];

  // An optional description of this resource. Provide this property when you
  // create the resource.
  optional string description = 5 [json_name = "description"];

  // [Output Only] A list of outages expected for this Interconnect.
  repeated InterconnectOutageNotification expected_outages = 6
      [json_name = "expectedOutages"];

  // [Output Only] IP address configured on the Google side of the Interconnect
  // link. This can be used only for ping tests.
  optional string google_ip_address = 7 [json_name = "googleIpAddress"];

  // [Output Only] Google reference ID to be used when raising support tickets
  // with Google or otherwise to debug backend connectivity issues.
  optional string google_reference_id = 8 [json_name = "googleReferenceId"];

  // [Output Only] The unique identifier for the resource. This identifier is
  // defined by the server.
  optional string id = 9 [json_name = "id"];

  // [Output Only] A list of the URLs of all InterconnectAttachments configured
  // to use this Interconnect.
  repeated string interconnect_attachments = 10
      [json_name = "interconnectAttachments"];

  // Type of interconnect, which can take one of the following values: -
  // PARTNER: A partner-managed interconnection shared between customers though
  // a partner. - DEDICATED: A dedicated physical interconnection with the
  // customer. Note that a value IT_PRIVATE has been deprecated in favor of
  // DEDICATED.
  // DEDICATED: A dedicated physical interconnection with the customer.
  // IT_PRIVATE: [Deprecated] A private, physical interconnection with the
  // customer.
  // PARTNER: A partner-managed interconnection shared between customers via
  // partner.
  optional string interconnect_type = 11 [json_name = "interconnectType"];

  // [Output Only] Type of the resource. Always compute#interconnect for
  // interconnects.
  optional string kind = 12 [json_name = "kind"];

  // A fingerprint for the labels being applied to this Interconnect, which is
  // essentially a hash of the labels set used for optimistic locking. The
  // fingerprint is initially generated by Compute Engine and changes after
  // every request to modify or update labels. You must always provide an
  // up-to-date fingerprint hash in order to update or change labels, otherwise
  // the request will fail with error 412 conditionNotMet. To see the latest
  // fingerprint, make a get() request to retrieve an Interconnect.
  optional string label_fingerprint = 24 [json_name = "labelFingerprint"];

  // Labels for this resource. These can only be added or modified by the
  // setLabels method. Each label key/value pair must comply with RFC1035. Label
  // values may be empty.
  map<string, string> labels = 25 [json_name = "labels"];

  // Type of link requested, which can take one of the following values: -
  // LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics -
  // LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this
  // field indicates the speed of each of the links in the bundle, not the speed
  // of the entire bundle.
  // LINK_TYPE_ETHERNET_100G_LR: 100G Ethernet, LR Optics.
  // LINK_TYPE_ETHERNET_10G_LR: 10G Ethernet, LR Optics. [(rate_bps) =
  // 10000000000];
  optional string link_type = 13 [json_name = "linkType"];

  // URL of the InterconnectLocation object that represents where this
  // connection is to be provisioned.
  optional string location = 14 [json_name = "location"];

  // Configuration that enables Media Access Control security (MACsec) on the
  // Cloud Interconnect connection between Google and your on-premises router.
  optional InterconnectMacsec macsec = 28 [json_name = "macsec"];

  // Enable or disable MACsec on this Interconnect connection. MACsec enablement
  // fails if the MACsec object is not specified.
  optional bool macsec_enabled = 29 [json_name = "macsecEnabled"];

  // Name of the resource. Provided by the client when the resource is created.
  // The name must be 1-63 characters long, and comply with RFC1035.
  // Specifically, the name must be 1-63 characters long and match the regular
  // expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
  // must be a lowercase letter, and all following characters must be a dash,
  // lowercase letter, or digit, except the last character, which cannot be a
  // dash.
  optional string name = 15 [json_name = "name"];

  // Email address to contact the customer NOC for operations and maintenance
  // notifications regarding this Interconnect. If specified, this will be used
  // for notifications in addition to all other forms described, such as Cloud
  // Monitoring logs alerting and Cloud Notifications. This field is required
  // for users who sign up for Cloud Interconnect using workforce identity
  // federation.
  optional string noc_contact_email = 16 [json_name = "nocContactEmail"];

  // [Output Only] The current status of this Interconnect's functionality,
  // which can take one of the following values: - OS_ACTIVE: A valid
  // Interconnect, which is turned up and is ready to use. Attachments may be
  // provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that
  // has not completed turnup. No attachments may be provisioned on this
  // Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing
  // internal maintenance. No attachments may be provisioned or updated on this
  // Interconnect.
  // OS_ACTIVE: The interconnect is valid, turned up, and ready to use.
  // Attachments may be provisioned on this interconnect.
  // OS_UNPROVISIONED: The interconnect has not completed turnup. No attachments
  // may be provisioned on this interconnect.
  optional string operational_status = 17 [json_name = "operationalStatus"];

  // [Output Only] IP address configured on the customer side of the
  // Interconnect link. The customer should configure this IP address during
  // turnup when prompted by Google NOC. This can be used only for ping tests.
  optional string peer_ip_address = 18 [json_name = "peerIpAddress"];

  // [Output Only] Number of links actually provisioned in this interconnect.
  optional int32 provisioned_link_count = 19
      [json_name = "provisionedLinkCount"];

  // Indicates that this is a Cross-Cloud Interconnect. This field specifies the
  // location outside of Google's network that the interconnect is connected to.
  optional string remote_location = 26 [json_name = "remoteLocation"];

  // Optional. List of features requested for this Interconnect connection,
  // which can take one of the following values: - MACSEC If specified then the
  // connection is created on MACsec capable hardware ports. If not specified,
  // the default value is false, which allocates non-MACsec capable ports first
  // if available. This parameter can be provided only with Interconnect INSERT.
  // It isn't valid for Interconnect PATCH.
  repeated string requested_features = 30 [json_name = "requestedFeatures"];

  // Target number of physical links in the link bundle, as requested by the
  // customer.
  optional int32 requested_link_count = 20 [json_name = "requestedLinkCount"];

  // [Output Only] Reserved for future use.
  optional bool satisfies_pzs = 21 [json_name = "satisfiesPzs"];

  // [Output Only] Server-defined URL for the resource.
  optional string self_link = 22 [json_name = "selfLink"];

  // [Output Only] The current state of Interconnect functionality, which can
  // take one of the following values: - ACTIVE: The Interconnect is valid,
  // turned up and ready to use. Attachments may be provisioned on this
  // Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup.
  // No attachments may be provisioned on this Interconnect. -
  // UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No
  // attachments may be provisioned or updated on this Interconnect.
  // ACTIVE: The interconnect is valid, turned up, and ready to use. Attachments
  // may be provisioned on this interconnect.
  // UNPROVISIONED: The interconnect has not completed turnup. No attachments
  // may be provisioned on this interconnect.
  optional string state = 23 [json_name = "state"];
}

// Describes a single physical circuit between the Customer and Google.
// CircuitInfo objects are created by Google, so all fields are output only.
message InterconnectCircuitInfo {
  // Customer-side demarc ID for this circuit.
  optional string customer_demarc_id = 1 [json_name = "customerDemarcId"];

  // Google-assigned unique ID for this circuit. Assigned at circuit turn-up.
  optional string google_circuit_id = 2 [json_name = "googleCircuitId"];

  // Google-side demarc ID for this circuit. Assigned at circuit turn-up and
  // provided by Google to the customer in the LOA.
  optional string google_demarc_id = 3 [json_name = "googleDemarcId"];
}

// Diagnostics information about the Interconnect connection, which contains
// detailed and current technical information about Google's side of the
// connection.
message InterconnectDiagnostics {
  // A list of InterconnectDiagnostics.ARPEntry objects, describing individual
  // neighbors currently seen by the Google router in the ARP cache for the
  // Interconnect. This will be empty when the Interconnect is not bundled.
  repeated InterconnectDiagnosticsARPEntry arp_caches = 1
      [json_name = "arpCaches"];

  // The aggregation type of the bundle interface.
  // BUNDLE_AGGREGATION_TYPE_LACP: LACP is enabled.
  // BUNDLE_AGGREGATION_TYPE_STATIC: LACP is disabled.
  optional string bundle_aggregation_type = 2
      [json_name = "bundleAggregationType"];

  // The operational status of the bundle interface.
  // BUNDLE_OPERATIONAL_STATUS_DOWN: If bundleAggregationType is LACP: LACP is
  // not established and/or all links in the bundle have DOWN operational
  // status. If bundleAggregationType is STATIC: one or more links in the bundle
  // has DOWN operational status.
  // BUNDLE_OPERATIONAL_STATUS_UP: If bundleAggregationType is LACP: LACP is
  // established and at least one link in the bundle has UP operational status.
  // If bundleAggregationType is STATIC: all links in the bundle (typically just
  // one) have UP operational status.
  optional string bundle_operational_status = 3
      [json_name = "bundleOperationalStatus"];

  // A list of InterconnectDiagnostics.LinkStatus objects, describing the status
  // for each link on the Interconnect.
  repeated InterconnectDiagnosticsLinkStatus links = 4 [json_name = "links"];

  // The MAC address of the Interconnect's bundle interface.
  optional string mac_address = 5 [json_name = "macAddress"];
}

// Describing the ARP neighbor entries seen on this link
message InterconnectDiagnosticsARPEntry {
  // The IP address of this ARP neighbor.
  optional string ip_address = 1 [json_name = "ipAddress"];

  // The MAC address of this ARP neighbor.
  optional string mac_address = 2 [json_name = "macAddress"];
}

message InterconnectDiagnosticsLinkLACPStatus {
  // System ID of the port on Google's side of the LACP exchange.
  optional string google_system_id = 1 [json_name = "googleSystemId"];

  // System ID of the port on the neighbor's side of the LACP exchange.
  optional string neighbor_system_id = 2 [json_name = "neighborSystemId"];

  // The state of a LACP link, which can take one of the following values: -
  // ACTIVE: The link is configured and active within the bundle. - DETACHED:
  // The link is not configured within the bundle. This means that the rest of
  // the object should be empty.
  // ACTIVE: The link is configured and active within the bundle.
  // DETACHED: The link is not configured within the bundle, this means the rest
  // of the object should be empty.
  optional string state = 3 [json_name = "state"];
}

message InterconnectDiagnosticsLinkOpticalPower {
  // The status of the current value when compared to the warning and alarm
  // levels for the receiving or transmitting transceiver. Possible states
  // include: - OK: The value has not crossed a warning threshold. -
  // LOW_WARNING: The value has crossed below the low warning threshold. -
  // HIGH_WARNING: The value has crossed above the high warning threshold. -
  // LOW_ALARM: The value has crossed below the low alarm threshold. -
  // HIGH_ALARM: The value has crossed above the high alarm threshold.
  // HIGH_ALARM: The value has crossed above the high alarm threshold.
  // HIGH_WARNING: The value of the current optical power has crossed above the
  // high warning threshold.
  // LOW_ALARM: The value of the current optical power has crossed below the low
  // alarm threshold.
  // LOW_WARNING: The value of the current optical power has crossed below the
  // low warning threshold.
  // OK: The value of the current optical power has not crossed a warning
  // threshold.
  optional string state = 1 [json_name = "state"];

  // Value of the current receiving or transmitting optical power, read in dBm.
  // Take a known good optical value, give it a 10% margin and trigger warnings
  // relative to that value. In general, a -7dBm warning and a -11dBm alarm are
  // good optical value estimates for most links.
  optional float value = 2 [json_name = "value"];
}

message InterconnectDiagnosticsLinkStatus {
  // A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP
  // neighbor entries seen on this link. This will be empty if the link is
  // bundled
  repeated InterconnectDiagnosticsARPEntry arp_caches = 1
      [json_name = "arpCaches"];

  // The unique ID for this link assigned during turn up by Google.
  optional string circuit_id = 2 [json_name = "circuitId"];

  // The Demarc address assigned by Google and provided in the LoA.
  optional string google_demarc = 3 [json_name = "googleDemarc"];

  optional InterconnectDiagnosticsLinkLACPStatus lacp_status = 4
      [json_name = "lacpStatus"];

  // Describes the status of MACsec encryption on this link.
  optional InterconnectDiagnosticsMacsecStatus macsec = 8
      [json_name = "macsec"];

  // The operational status of the link.
  // LINK_OPERATIONAL_STATUS_DOWN: The interface is unable to communicate with
  // the remote end.
  // LINK_OPERATIONAL_STATUS_UP: The interface has low level communication with
  // the remote end.
  optional string operational_status = 5 [json_name = "operationalStatus"];

  // An InterconnectDiagnostics.LinkOpticalPower object, describing the current
  // value and status of the received light level.
  optional InterconnectDiagnosticsLinkOpticalPower receiving_optical_power = 6
      [json_name = "receivingOpticalPower"];

  // An InterconnectDiagnostics.LinkOpticalPower object, describing the current
  // value and status of the transmitted light level.
  optional InterconnectDiagnosticsLinkOpticalPower transmitting_optical_power =
      7 [json_name = "transmittingOpticalPower"];
}

// Describes the status of MACsec encryption on the link.
message InterconnectDiagnosticsMacsecStatus {
  // Indicates the Connectivity Association Key Name (CKN) currently being used
  // if MACsec is operational.
  optional string ckn = 1 [json_name = "ckn"];

  // Indicates whether or not MACsec is operational on this link.
  optional bool operational = 2 [json_name = "operational"];
}

// Response to the list request, and contains a list of interconnects.
message InterconnectList {
  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 1 [json_name = "id"];

  // A list of Interconnect resources.
  repeated Interconnect items = 2 [json_name = "items"];

  // [Output Only] Type of resource. Always compute#interconnectList for lists
  // of interconnects.
  optional string kind = 3 [json_name = "kind"];

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 4 [json_name = "nextPageToken"];

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 5 [json_name = "selfLink"];

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1 [json_name = "code"];

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1 [json_name = "key"];

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2 [json_name = "value"];
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2 [json_name = "data"];

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3 [json_name = "message"];
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 6 [json_name = "warning"];
}

// Configuration information for enabling Media Access Control security (MACsec)
// on this Cloud Interconnect connection between Google and your on-premises
// router.
message InterconnectMacsec {
  // If set to true, the Interconnect connection is configured with a
  // should-secure MACsec security policy, that allows the Google router to
  // fallback to cleartext traffic if the MKA session cannot be established. By
  // default, the Interconnect connection is configured with a must-secure
  // security policy that drops all traffic if the MKA session cannot be
  // established with your router.
  optional bool fail_open = 1 [json_name = "failOpen"];

  // Required. A keychain placeholder describing a set of named key objects
  // along with their start times. A MACsec CKN/CAK is generated for each key in
  // the key chain. Google router automatically picks the key with the most
  // recent startTime when establishing or re-establishing a MACsec secure link.
  repeated InterconnectMacsecPreSharedKey pre_shared_keys = 2
      [json_name = "preSharedKeys"];
}

// MACsec configuration information for the Interconnect connection. Contains
// the generated Connectivity Association Key Name (CKN) and the key (CAK) for
// this Interconnect connection.
message InterconnectMacsecConfig {
  // A keychain placeholder describing a set of named key objects along with
  // their start times. A MACsec CKN/CAK is generated for each key in the key
  // chain. Google router automatically picks the key with the most recent
  // startTime when establishing or re-establishing a MACsec secure link.
  repeated InterconnectMacsecConfigPreSharedKey pre_shared_keys = 1
      [json_name = "preSharedKeys"];
}

// Describes a pre-shared key used to setup MACsec in static connectivity
// association key (CAK) mode.
message InterconnectMacsecConfigPreSharedKey {
  // An auto-generated Connectivity Association Key (CAK) for this key.
  optional string cak = 1 [json_name = "cak"];

  // An auto-generated Connectivity Association Key Name (CKN) for this key.
  optional string ckn = 2 [json_name = "ckn"];

  // User provided name for this pre-shared key.
  optional string name = 3 [json_name = "name"];

  // User provided timestamp on or after which this key is valid.
  optional string start_time = 4 [json_name = "startTime"];
}

// Describes a pre-shared key used to setup MACsec in static connectivity
// association key (CAK) mode.
message InterconnectMacsecPreSharedKey {
  // Required. A name for this pre-shared key. The name must be 1-63 characters
  // long, and comply with RFC1035. Specifically, the name must be 1-63
  // characters long and match the regular expression
  // `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a
  // lowercase letter, and all following characters must be a dash, lowercase
  // letter, or digit, except the last character, which cannot be a dash.
  optional string name = 1 [json_name = "name"];

  // A RFC3339 timestamp on or after which the key is valid. startTime can be in
  // the future. If the keychain has a single key, startTime can be omitted. If
  // the keychain has multiple keys, startTime is mandatory for each key. The
  // start times of keys must be in increasing order. The start times of two
  // consecutive keys must be at least 6 hours apart.
  optional string start_time = 2 [json_name = "startTime"];
}

// Description of a planned outage on this Interconnect.
message InterconnectOutageNotification {
  // If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs
  // that will be affected.
  repeated string affected_circuits = 1 [json_name = "affectedCircuits"];

  // A description about the purpose of the outage.
  optional string description = 2 [json_name = "description"];

  // Scheduled end time for the outage (milliseconds since Unix epoch).
  optional string end_time = 3 [json_name = "endTime"];

  // Form this outage is expected to take, which can take one of the following
  // values: - OUTAGE: The Interconnect may be completely out of service for
  // some or all of the specified window. - PARTIAL_OUTAGE: Some circuits
  // comprising the Interconnect as a whole should remain up, but with reduced
  // bandwidth. Note that the versions of this enum prefixed with "IT_" have
  // been deprecated in favor of the unprefixed values.
  // IT_OUTAGE: [Deprecated] The Interconnect may be completely out of service
  // for some or all of the specified window.
  // IT_PARTIAL_OUTAGE: [Deprecated] Some circuits comprising the Interconnect
  // will be out of service during the expected window. The interconnect as a
  // whole should remain up, albeit with reduced bandwidth.
  // OUTAGE: The Interconnect may be completely out of service for some or all
  // of the specified window.
  // PARTIAL_OUTAGE: Some circuits comprising the Interconnect will be out of
  // service during the expected window. The interconnect as a whole should
  // remain up, albeit with reduced bandwidth.
  optional string issue_type = 4 [json_name = "issueType"];

  // Unique identifier for this outage notification.
  optional string name = 5 [json_name = "name"];

  // The party that generated this notification, which can take the following
  // value: - GOOGLE: this notification as generated by Google. Note that the
  // value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
  // GOOGLE: This notification was generated by Google.
  // NSRC_GOOGLE: [Deprecated] This notification was generated by Google.
  optional string source = 6 [json_name = "source"];

  // Scheduled start time for the outage (milliseconds since Unix epoch).
  optional string start_time = 7 [json_name = "startTime"];

  // State of this notification, which can take one of the following values: -
  // ACTIVE: This outage notification is active. The event could be in the past,
  // present, or future. See start_time and end_time for scheduling. -
  // CANCELLED: The outage associated with this notification was cancelled
  // before the outage was due to start. - COMPLETED: The outage associated with
  // this notification is complete. Note that the versions of this enum prefixed
  // with "NS_" have been deprecated in favor of the unprefixed values.
  // ACTIVE: This outage notification is active. The event could be in the
  // future, present, or past. See start_time and end_time for scheduling.
  // CANCELLED: The outage associated with this notification was cancelled
  // before the outage was due to start.
  // COMPLETED: The outage associated with this notification is complete.
  // NS_ACTIVE: [Deprecated] This outage notification is active. The event could
  // be in the future, present, or past. See start_time and end_time for
  // scheduling.
  // NS_CANCELED: [Deprecated] The outage associated with this notification was
  // canceled before the outage was due to start.
  optional string state = 8 [json_name = "state"];
}

// Response for the InterconnectsGetDiagnosticsRequest.
message InterconnectsGetDiagnosticsResponse {
  optional InterconnectDiagnostics result = 1 [json_name = "result"];
}

// Response for the InterconnectsGetMacsecConfigRequest.
message InterconnectsGetMacsecConfigResponse {
  // end_interface: MixerGetResponseWithEtagBuilder
  optional string etag = 1 [json_name = "etag"];

  optional InterconnectMacsecConfig result = 2 [json_name = "result"];
}
