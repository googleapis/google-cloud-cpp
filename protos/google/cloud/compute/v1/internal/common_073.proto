// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20250511

syntax = "proto3";

package google.cloud.cpp.compute.v1;

import "google/cloud/compute/v1/internal/common_072.proto";

// An interconnect group resource allows customers to create, analyze, and
// expand their redundant connections.
message InterconnectGroup {
  optional InterconnectGroupConfigured configured = 1
      [json_name = "configured"];

  // [Output Only] Creation timestamp in RFC3339 text format.
  optional string creation_timestamp = 2 [json_name = "creationTimestamp"];

  // An optional description of this resource. Provide this property when you
  // create the resource.
  optional string description = 3 [json_name = "description"];

  // Opaque system-generated token that uniquely identifies the configuration.
  // If provided when patching a configuration in update mode, the provided
  // token must match the current token or the update is rejected. This provides
  // a reliable means of doing read-modify-write (optimistic locking) as
  // described by API 154.
  optional string etag = 4 [json_name = "etag"];

  // [Output Only] The unique identifier for the resource type. The server
  // generates this identifier.
  optional string id = 5 [json_name = "id"];

  optional InterconnectGroupIntent intent = 6 [json_name = "intent"];

  // Interconnects in the InterconnectGroup. Keys are arbitrary user-specified
  // strings. Users are encouraged, but not required, to use their preferred
  // format for resource links as keys. Note that there are add-members and
  // remove-members methods in gcloud. The size of this map is limited by an
  // "Interconnects per group" quota.
  map<string, InterconnectGroupInterconnect> interconnects = 7
      [json_name = "interconnects"];

  // [Output Only] Type of the resource. Always compute#InterconnectGroup
  optional string kind = 8 [json_name = "kind"];

  // Name of the resource. Provided by the client when the resource is created.
  // The name must be 1-63 characters long, and comply with RFC1035.
  // Specifically, the name must be 1-63 characters long and match the regular
  // expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
  // must be a lowercase letter, and all following characters must be a dash,
  // lowercase letter, or digit, except the last character, which cannot be a
  // dash.
  optional string name = 9 [json_name = "name"];

  optional InterconnectGroupPhysicalStructure physical_structure = 10
      [json_name = "physicalStructure"];

  // [Output Only] Server-defined URL for the resource.
  optional string self_link = 11 [json_name = "selfLink"];
}

// [Output Only] The status of the group as configured. This has the same
// structure as the operational field reported by the OperationalStatus method,
// but does not take into account the operational status of each resource.
message InterconnectGroupConfigured {
  optional InterconnectGroupConfiguredTopologyCapability topology_capability = 1
      [json_name = "topologyCapability"];
}

// [Output Only] How reliable this topology is configured to be, and why this
// group does or does not meet the requirements for the intended capability.
message InterconnectGroupConfiguredTopologyCapability {
  repeated
      InterconnectGroupConfiguredTopologyCapabilityIntendedCapabilityBlockers
          intended_capability_blockers = 1
      [json_name = "intendedCapabilityBlockers"];

  // NO_SLA:
  // PRODUCTION_CRITICAL:
  // PRODUCTION_NON_CRITICAL:
  // UNSPECIFIED:
  optional string supported_sla = 2 [json_name = "supportedSla"];
}

// [Output Only] Reasons why configuration.topologyCapability.sla differs from
// intent.topologyCapability. This list is empty if and only if those are the
// same.
message
InterconnectGroupConfiguredTopologyCapabilityIntendedCapabilityBlockers {
  // INCOMPATIBLE_METROS:
  // NOT_AVAILABLE:
  // NO_INTERCONNECTS:
  // NO_INTERCONNECTS_IN_METRO_AND_ZONE:
  // OTHER:
  // UNSPECIFIED:
  optional string blocker_type = 1 [json_name = "blockerType"];

  // [Output Only] The url of Google Cloud public documentation explaining this
  // requirement. This is set for every type of requirement.
  optional string documentation_link = 2 [json_name = "documentationLink"];

  // [Output Only] A human-readable explanation of this requirement and why it's
  // not met. This is set for every type of requirement.
  optional string explanation = 3 [json_name = "explanation"];

  // [Output Only] Facilities used to explain this blocker in more detail. Like
  // physicalStructure.metros.facilities.facility, this is a numeric string like
  // "5467".
  repeated string facilities = 4 [json_name = "facilities"];

  // [Output Only] Interconnects used to explain this blocker in more detail.
  repeated string interconnects = 5 [json_name = "interconnects"];

  // [Output Only] Metros used to explain this blocker in more detail. These are
  // three-letter lowercase strings like "iad". A blocker like
  // INCOMPATIBLE_METROS will specify the problematic metros in this field.
  repeated string metros = 6 [json_name = "metros"];

  // [Output Only] Zones used to explain this blocker in more detail. Zone names
  // are "zone1" and/or "zone2".
  repeated string zones = 7 [json_name = "zones"];
}

// The user's intent for this group. This is the only required field besides the
// name that must be specified on group creation.
message InterconnectGroupIntent {
  // NO_SLA:
  // PRODUCTION_CRITICAL:
  // PRODUCTION_NON_CRITICAL:
  // UNSPECIFIED:
  optional string topology_capability = 1 [json_name = "topologyCapability"];
}

// An Interconnect in this InterconnectGroup.
message InterconnectGroupInterconnect {
  // The URL of an Interconnect in this group. All Interconnects in the group
  // are unique.
  optional string interconnect = 1 [json_name = "interconnect"];
}

// [Output Only] An analysis of the physical layout of Interconnects in this
// group. Every Interconnect in the group is shown once in this structure.
message InterconnectGroupPhysicalStructure {
  repeated InterconnectGroupPhysicalStructureMetros metros = 1
      [json_name = "metros"];
}

// [Output Only] The metros Interconnects in this group are in.
message InterconnectGroupPhysicalStructureMetros {
  repeated InterconnectGroupPhysicalStructureMetrosFacilities facilities = 1
      [json_name = "facilities"];

  // [Output Only] The name of the metro, as a three-letter lowercase string
  // like "iad". This is the first component of the location of Interconnects
  // underneath this.
  optional string metro = 2 [json_name = "metro"];
}

// [Output Only] The facilities Interconnects in this metro are present in.
message InterconnectGroupPhysicalStructureMetrosFacilities {
  // [Output Only] The ID of this facility, as a numeric string like "5467".
  // This is the third component of the location of Interconnects in this
  // facility.
  optional string facility = 1 [json_name = "facility"];

  repeated InterconnectGroupPhysicalStructureMetrosFacilitiesZones zones = 2
      [json_name = "zones"];
}

// [Output Only] The zones that Interconnects in this facility are present in.
message InterconnectGroupPhysicalStructureMetrosFacilitiesZones {
  // [Output Only] URLs of Interconnects in this redundancy group in the given
  // metro, facility, and zone.
  repeated string interconnects = 1 [json_name = "interconnects"];

  // [Output Only] The name of the zone, either "zone1" or "zone2". This is the
  // second component of the location of Interconnects in this facility.
  optional string zone = 2 [json_name = "zone"];
}

message InterconnectGroupsCreateMembers {
  // How to behave when configured.topologyCapability.supportedSLA would not
  // equal intent.topologyCapability after this call.
  // CREATE:
  // REJECT:
  // UNSPECIFIED:
  optional string intent_mismatch_behavior = 1
      [json_name = "intentMismatchBehavior"];

  repeated InterconnectGroupsCreateMembersInterconnectInput interconnects = 2
      [json_name = "interconnects"];

  // Parameters for the Interconnects to create.
  optional InterconnectGroupsCreateMembersInterconnectInput
      template_interconnect = 3 [json_name = "templateInterconnect"];
}

// LINT.IfChange
message InterconnectGroupsCreateMembersInterconnectInput {
  // Administrative status of the interconnect. When this is set to true, the
  // Interconnect is functional and can carry traffic. When set to false, no
  // packets can be carried over the interconnect and no BGP routes are
  // exchanged over it. By default, the status is set to true.
  optional bool admin_enabled = 1 [json_name = "adminEnabled"];

  // Customer name, to put in the Letter of Authorization as the party
  // authorized to request a crossconnect.
  optional string customer_name = 2 [json_name = "customerName"];

  // An optional description of this resource. Provide this property when you
  // create the resource.
  optional string description = 3 [json_name = "description"];

  // A zone-free location to use for all Interconnects created in this call,
  // like "iad-1234".
  optional string facility = 4 [json_name = "facility"];

  // Type of interconnect, which can take one of the following values: -
  // PARTNER: A partner-managed interconnection shared between customers though
  // a partner. - DEDICATED: A dedicated physical interconnection with the
  // customer. Note that a value IT_PRIVATE has been deprecated in favor of
  // DEDICATED.
  // DEDICATED: A dedicated physical interconnection with the customer.
  // IT_PRIVATE: [Deprecated] A private, physical interconnection with the
  // customer.
  // PARTNER: A partner-managed interconnection shared between customers via
  // partner.
  optional string interconnect_type = 5 [json_name = "interconnectType"];

  // Type of link requested, which can take one of the following values: -
  // LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics -
  // LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. -
  // LINK_TYPE_ETHERNET_400G_LR4: A 400G Ethernet with LR4 optics. Note that
  // this field indicates the speed of each of the links in the bundle, not the
  // speed of the entire bundle.
  // LINK_TYPE_ETHERNET_100G_LR: 100G Ethernet, LR Optics.
  // LINK_TYPE_ETHERNET_10G_LR: 10G Ethernet, LR Optics. [(rate_bps) =
  // 10000000000];
  // LINK_TYPE_ETHERNET_400G_LR4: 400G Ethernet, LR4 Optics.
  optional string link_type = 6 [json_name = "linkType"];

  // Name of the Interconnects to be created. This must be specified on the
  // template and/or on each individual interconnect. The name, if not empty,
  // must be 1-63 characters long, and comply with RFC1035. Specifically, any
  // nonempty name must be 1-63 characters long and match the regular expression
  // `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a
  // lowercase letter, and all following characters must be a dash, lowercase
  // letter, or digit, except the last character, which cannot be a dash.
  optional string name = 7 [json_name = "name"];

  // Email address to contact the customer NOC for operations and maintenance
  // notifications regarding this Interconnect. If specified, this will be used
  // for notifications in addition to all other forms described, such as Cloud
  // Monitoring logs alerting and Cloud Notifications. This field is required
  // for users who sign up for Cloud Interconnect using workforce identity
  // federation.
  optional string noc_contact_email = 8 [json_name = "nocContactEmail"];

  // Indicates that this is a Cross-Cloud Interconnect. This field specifies the
  // location outside of Google's network that the interconnect is connected to.
  optional string remote_location = 9 [json_name = "remoteLocation"];

  // Optional. List of features requested for this Interconnect connection,
  // which can take one of the following values: - IF_MACSEC If specified then
  // the connection is created on MACsec capable hardware ports. If not
  // specified, the default value is false, which allocates non-MACsec capable
  // ports first if available. This parameter can be provided only with
  // Interconnect INSERT. It isn't valid for Interconnect PATCH.
  repeated string requested_features = 10 [json_name = "requestedFeatures"];

  // Target number of physical links in the link bundle, as requested by the
  // customer.
  optional int32 requested_link_count = 11 [json_name = "requestedLinkCount"];
}

message InterconnectGroupsCreateMembersRequest {
  optional InterconnectGroupsCreateMembers request = 1 [json_name = "request"];
}

// Response for the InterconnectGroupsGetOperationalStatusResponse.
message InterconnectGroupsGetOperationalStatusResponse {
  optional string etag = 1 [json_name = "etag"];

  optional InterconnectGroupsOperationalStatus result = 2
      [json_name = "result"];
}

message InterconnectGroupsListResponse {
  optional string etag = 1 [json_name = "etag"];

  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 2 [json_name = "id"];

  // A list of InterconnectGroup resources.
  repeated InterconnectGroup items = 3 [json_name = "items"];

  optional string kind = 4 [json_name = "kind"];

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 5 [json_name = "nextPageToken"];

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 6 [json_name = "selfLink"];

  // [Output Only] Unreachable resources. end_interface:
  // MixerListResponseWithEtagBuilder
  repeated string unreachables = 7 [json_name = "unreachables"];

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // QUOTA_INFO_UNAVAILABLE: Quota information is not available to client
    // requests (e.g: regions.list).
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1 [json_name = "code"];

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1 [json_name = "key"];

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2 [json_name = "value"];
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2 [json_name = "data"];

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3 [json_name = "message"];
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 8 [json_name = "warning"];
}

// Request to get the status of the interconnect group with extra detail.
message InterconnectGroupsOperationalStatus {
  // The configuration analysis, as returned by Get.
  optional InterconnectGroupConfigured configured = 1
      [json_name = "configured"];

  // Summarizes the status of the group.
  // DEGRADED:
  // FULLY_DOWN:
  // FULLY_UP:
  // GROUPS_STATUS_UNSPECIFIED:
  optional string group_status = 2 [json_name = "groupStatus"];

  // The intent of the resource, as returned by Get.
  optional InterconnectGroupIntent intent = 3 [json_name = "intent"];

  repeated InterconnectGroupsOperationalStatusInterconnectStatus
      interconnect_statuses = 4 [json_name = "interconnectStatuses"];

  // The operational state of the group, including only active Interconnects.
  optional InterconnectGroupConfigured operational = 5
      [json_name = "operational"];
}

// The status of one Interconnect in the group. The order is arbitrary.
message InterconnectGroupsOperationalStatusInterconnectStatus {
  // Whether the Interconnect is enabled.
  optional bool admin_enabled = 1 [json_name = "adminEnabled"];

  // The diagnostics of the Interconnect, as returned by the existing
  // get-diagnostics method.
  optional InterconnectDiagnostics diagnostics = 2 [json_name = "diagnostics"];

  // The URL of the Interconnect being described.
  optional string interconnect = 3 [json_name = "interconnect"];

  // Whether this interconnect is participating in the redundant configuration.
  // ACTIVE:
  // INACTIVE:
  // IS_ACTIVE_UNSPECIFIED:
  optional string is_active = 4 [json_name = "isActive"];
}
