// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20231110

syntax = "proto3";

package google.cloud.cpp.compute.v1;

// Represents an external VPN gateway. External VPN gateway is the on-premises
// VPN gateway(s) or another cloud provider's VPN gateway that connects to your
// Google Cloud VPN gateway. To create a highly available VPN from Google Cloud
// Platform to your VPN gateway or another cloud provider's VPN gateway, you
// must create a external VPN gateway resource with information about the other
// gateway. For more information about using external VPN gateways, see Creating
// an HA VPN gateway and tunnel pair to a peer VPN.
message ExternalVpnGateway {
  // [Output Only] Creation timestamp in RFC3339 text format.
  optional string creation_timestamp = 1 [json_name = "creationTimestamp"];

  // An optional description of this resource. Provide this property when you
  // create the resource.
  optional string description = 2 [json_name = "description"];

  // [Output Only] The unique identifier for the resource. This identifier is
  // defined by the server.
  optional string id = 3 [json_name = "id"];

  // A list of interfaces for this external VPN gateway. If your peer-side
  // gateway is an on-premises gateway and non-AWS cloud providers' gateway, at
  // most two interfaces can be provided for an external VPN gateway. If your
  // peer side is an AWS virtual private gateway, four interfaces should be
  // provided for an external VPN gateway.
  repeated ExternalVpnGatewayInterface interfaces = 4
      [json_name = "interfaces"];

  // [Output Only] Type of the resource. Always compute#externalVpnGateway for
  // externalVpnGateways.
  optional string kind = 5 [json_name = "kind"];

  // A fingerprint for the labels being applied to this ExternalVpnGateway,
  // which is essentially a hash of the labels set used for optimistic locking.
  // The fingerprint is initially generated by Compute Engine and changes after
  // every request to modify or update labels. You must always provide an
  // up-to-date fingerprint hash in order to update or change labels, otherwise
  // the request will fail with error 412 conditionNotMet. To see the latest
  // fingerprint, make a get() request to retrieve an ExternalVpnGateway.
  optional string label_fingerprint = 6 [json_name = "labelFingerprint"];

  // Labels for this resource. These can only be added or modified by the
  // setLabels method. Each label key/value pair must comply with RFC1035. Label
  // values may be empty.
  map<string, string> labels = 7 [json_name = "labels"];

  // Name of the resource. Provided by the client when the resource is created.
  // The name must be 1-63 characters long, and comply with RFC1035.
  // Specifically, the name must be 1-63 characters long and match the regular
  // expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
  // must be a lowercase letter, and all following characters must be a dash,
  // lowercase letter, or digit, except the last character, which cannot be a
  // dash.
  optional string name = 8 [json_name = "name"];

  // Indicates the user-supplied redundancy type of this external VPN gateway.
  // FOUR_IPS_REDUNDANCY: The external VPN gateway has four public IP addresses;
  // at the time of writing this API, the AWS virtual private gateway is an
  // example which has four public IP addresses for high availability
  // connections; there should be two VPN connections in the AWS virtual private
  // gateway , each AWS VPN connection has two public IP addresses; please make
  // sure to put two public IP addresses from one AWS VPN connection into
  // interfaces 0 and 1 of this external VPN gateway, and put the other two
  // public IP addresses from another AWS VPN connection into interfaces 2 and 3
  // of this external VPN gateway. When displaying highly available
  // configuration status for the VPN tunnels connected to FOUR_IPS_REDUNDANCY
  // external VPN gateway, Google will always detect whether interfaces 0 and 1
  // are connected on one interface of HA Cloud VPN gateway, and detect whether
  // interfaces 2 and 3 are connected to another interface of the HA Cloud VPN
  // gateway.
  // SINGLE_IP_INTERNALLY_REDUNDANT: The external VPN gateway has only one
  // public IP address which internally provide redundancy or failover.
  // TWO_IPS_REDUNDANCY: The external VPN gateway has two public IP addresses
  // which are redundant with each other, the following two types of setup on
  // your on-premises side would have this type of redundancy: (1) Two separate
  // on-premises gateways, each with one public IP address, the two on-premises
  // gateways are redundant with each other. (2) A single on-premise gateway
  // with two public IP addresses that are redundant with eatch other.
  optional string redundancy_type = 9 [json_name = "redundancyType"];

  // [Output Only] Server-defined URL for the resource.
  optional string self_link = 10 [json_name = "selfLink"];
}

// The interface for the external VPN gateway.
message ExternalVpnGatewayInterface {
  // The numeric ID of this interface. The allowed input values for this id for
  // different redundancy types of external VPN gateway: -
  // SINGLE_IP_INTERNALLY_REDUNDANT - 0 - TWO_IPS_REDUNDANCY - 0, 1 -
  // FOUR_IPS_REDUNDANCY - 0, 1, 2, 3
  optional uint32 id = 1 [json_name = "id"];

  // IP address of the interface in the external VPN gateway. Only IPv4 is
  // supported. This IP address can be either from your on-premise gateway or
  // another Cloud provider's VPN gateway, it cannot be an IP address from
  // Google Compute Engine.
  optional string ip_address = 2 [json_name = "ipAddress"];
}

// Response to the list request, and contains a list of externalVpnGateways.
message ExternalVpnGatewayList {
  optional string etag = 1 [json_name = "etag"];

  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 2 [json_name = "id"];

  // A list of ExternalVpnGateway resources.
  repeated ExternalVpnGateway items = 3 [json_name = "items"];

  // [Output Only] Type of resource. Always compute#externalVpnGatewayList for
  // lists of externalVpnGateways.
  optional string kind = 4 [json_name = "kind"];

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 5 [json_name = "nextPageToken"];

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 6 [json_name = "selfLink"];

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1 [json_name = "code"];

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1 [json_name = "key"];

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2 [json_name = "value"];
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2 [json_name = "data"];

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3 [json_name = "message"];
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 7 [json_name = "warning"];
}
