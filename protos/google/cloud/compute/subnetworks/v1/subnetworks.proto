// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20231003

syntax = "proto3";

package google.cloud.cpp.compute.subnetworks.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/cloud/compute/v1/internal/common_007.proto";
import "google/cloud/compute/v1/internal/common_016.proto";
import "google/cloud/compute/v1/internal/common_099.proto";
import "google/cloud/compute/v1/internal/common_118.proto";
import "google/cloud/compute/v1/internal/common_131.proto";
import "google/cloud/extended_operations.proto";

// Service for the subnetworks resource.
// https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks
service Subnetworks {
  option (google.api.default_host) = "compute.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/cloud-platform,"
      "https://www.googleapis.com/auth/compute,"
      "https://www.googleapis.com/auth/compute.readonly";

  // Retrieves an aggregated list of subnetworks.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/aggregatedList
  rpc AggregatedListSubnetworks(AggregatedListSubnetworksRequest)
      returns (google.cloud.cpp.compute.v1.SubnetworkAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/subnetworks"
    };
    option (google.api.method_signature) = "project";
  }

  // Deletes the specified subnetwork.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/delete
  rpc DeleteSubnetwork(DeleteSubnetworkRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}"
    };
    option (google.api.method_signature) = "project,region,subnetwork";
    option (google.cloud.operation_service) = "RegionOperations";
  }

  // Expands the IP CIDR range of the subnetwork to a specified value.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/expandIpCidrRange
  rpc ExpandIpCidrRange(ExpandIpCidrRangeRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange"
      body: "subnetworks_expand_ip_cidr_range_request_resource"
    };
    option (google.api.method_signature) =
        "project,region,subnetwork,subnetworks_expand_ip_cidr_range_request_resource";
    option (google.cloud.operation_service) = "RegionOperations";
  }

  // Returns the specified subnetwork.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/get
  rpc GetSubnetwork(GetSubnetworkRequest)
      returns (google.cloud.cpp.compute.v1.Subnetwork) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}"
    };
    option (google.api.method_signature) = "project,region,subnetwork";
  }

  // Gets the access control policy for a resource. May be empty if no such
  // policy or resource exists.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/getIamPolicy
  rpc GetIamPolicy(GetIamPolicyRequest)
      returns (google.cloud.cpp.compute.v1.Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy"
    };
    option (google.api.method_signature) = "project,region,resource";
  }

  // Creates a subnetwork in the specified project using the data included in
  // the request.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/insert
  rpc InsertSubnetwork(InsertSubnetworkRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks"
      body: "subnetwork_resource"
    };
    option (google.api.method_signature) = "project,region,subnetwork_resource";
    option (google.cloud.operation_service) = "RegionOperations";
  }

  // Retrieves a list of subnetworks available to the specified project.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/list
  rpc ListSubnetworks(ListSubnetworksRequest)
      returns (google.cloud.cpp.compute.v1.SubnetworkList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/subnetworks"
    };
    option (google.api.method_signature) = "project,region";
  }

  // Retrieves an aggregated list of all usable subnetworks in the project.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/listUsable
  rpc ListUsable(ListUsableRequest)
      returns (google.cloud.cpp.compute.v1.UsableSubnetworksAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/subnetworks/listUsable"
    };
    option (google.api.method_signature) = "project";
  }

  // Patches the specified subnetwork with the data included in the request.
  // Only certain fields can be updated with a patch request as indicated in the
  // field descriptions. You must specify the current fingerprint of the
  // subnetwork resource being patched.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/patch
  rpc PatchSubnetwork(PatchSubnetworkRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}"
      body: "subnetwork_resource"
    };
    option (google.api.method_signature) =
        "project,region,subnetwork,subnetwork_resource";
    option (google.cloud.operation_service) = "RegionOperations";
  }

  // Sets the access control policy on the specified resource. Replaces any
  // existing policy.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/setIamPolicy
  rpc SetIamPolicy(SetIamPolicyRequest)
      returns (google.cloud.cpp.compute.v1.Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy"
      body: "region_set_policy_request_resource"
    };
    option (google.api.method_signature) =
        "project,region,resource,region_set_policy_request_resource";
  }

  // Set whether VMs in this subnet can access Google services without assigning
  // external IP addresses through Private Google Access.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/setPrivateIpGoogleAccess
  rpc SetPrivateIpGoogleAccess(SetPrivateIpGoogleAccessRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess"
      body: "subnetworks_set_private_ip_google_access_request_resource"
    };
    option (google.api.method_signature) =
        "project,region,subnetwork,subnetworks_set_private_ip_google_access_request_resource";
    option (google.cloud.operation_service) = "RegionOperations";
  }

  // Returns permissions that a caller has on the specified resource.
  // https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/testIamPermissions
  rpc TestIamPermissions(TestIamPermissionsRequest)
      returns (google.cloud.cpp.compute.v1.TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
    option (google.api.method_signature) =
        "project,region,resource,test_permissions_request_resource";
  }
}

// Request message for AggregatedListSubnetworks.
message AggregatedListSubnetworksRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. These two types of filter expressions cannot be mixed in
  // one request. If you want to use AIP-160, your expression must specify the
  // field name, an operator, and the value that you want to use for filtering.
  // The value must be a string, a number, or a boolean. The operator must be
  // either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are
  // filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:*`
  // comparison can be used to test whether a key has been defined. For example,
  // to find all objects with `owner` label use: ``` labels.owner:* ``` You can
  // also filter nested fields. For example, you could specify
  // `scheduling.automaticRestart = false` to include instances only if they are
  // not scheduled for automatic restarts. You can use filtering on nested
  // fields to filter based on resource labels. To filter on multiple
  // expressions, provide each separate expression within parentheses. For
  // example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel
  // Skylake") ``` By default, each expression is an `AND` expression. However,
  // you can include `AND` and `OR` expressions explicitly. For example: ```
  // (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`. You cannot combine constraints on multiple fields
  // using regular expressions.
  optional string filter = 1 [json_name = "filter"];

  // Indicates whether every visible scope for each scope type (zone, region,
  // global) should be included in the response. For new resource types added
  // after this field, the flag has no effect as new resource types will always
  // include every visible scope for each scope type in response. For resource
  // types which predate this field, if this flag is omitted or false, only
  // scopes of the scope types where the resource type is expected to be found
  // will be included.
  optional bool include_all_scopes = 2 [json_name = "includeAllScopes"];

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 3 [json_name = "maxResults"];

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 4 [json_name = "orderBy"];

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 5 [json_name = "pageToken"];

  // Project ID for this request.
  string project = 6
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 7 [json_name = "returnPartialSuccess"];

  optional string service_project_number = 8
      [json_name = "serviceProjectNumber"];
}

// Request message for DeleteSubnetwork.
message DeleteSubnetworkRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // Name of the region scoping this request.
  string region = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "region",
    json_name = "region"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3 [json_name = "requestId"];

  // Name of the Subnetwork resource to delete.
  string subnetwork = 4
      [(google.api.field_behavior) = REQUIRED, json_name = "subnetwork"];
}

// Request message for ExpandIpCidrRange.
message ExpandIpCidrRangeRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // Name of the region scoping this request.
  string region = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "region",
    json_name = "region"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3 [json_name = "requestId"];

  // Name of the Subnetwork resource to update.
  string subnetwork = 4
      [(google.api.field_behavior) = REQUIRED, json_name = "subnetwork"];

  // The SubnetworksExpandIpCidrRangeRequest for this request.
  optional google.cloud.cpp.compute.v1.SubnetworksExpandIpCidrRangeRequest
      subnetworks_expand_ip_cidr_range_request_resource = 5
      [json_name = "__json_request_body"];
}

// Request message for GetIamPolicy.
message GetIamPolicyRequest {
  // Requested IAM Policy version.
  optional int32 options_requested_policy_version = 1
      [json_name = "optionsRequestedPolicyVersion"];

  // Project ID for this request.
  string project = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // The name of the region for this request.
  string region = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "region"];

  // Name or id of the resource for this request.
  string resource = 4
      [(google.api.field_behavior) = REQUIRED, json_name = "resource"];
}

// Request message for GetSubnetwork.
message GetSubnetworkRequest {
  // Project ID for this request.
  string project = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // Name of the region scoping this request.
  string region = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "region"];

  // Name of the Subnetwork resource to return.
  string subnetwork = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "subnetwork"];
}

// Request message for InsertSubnetwork.
message InsertSubnetworkRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // Name of the region scoping this request.
  string region = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "region",
    json_name = "region"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3 [json_name = "requestId"];

  // The Subnetwork for this request.
  optional google.cloud.cpp.compute.v1.Subnetwork subnetwork_resource = 4
      [json_name = "__json_request_body"];
}

// Request message for ListSubnetworks.
message ListSubnetworksRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. These two types of filter expressions cannot be mixed in
  // one request. If you want to use AIP-160, your expression must specify the
  // field name, an operator, and the value that you want to use for filtering.
  // The value must be a string, a number, or a boolean. The operator must be
  // either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are
  // filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:*`
  // comparison can be used to test whether a key has been defined. For example,
  // to find all objects with `owner` label use: ``` labels.owner:* ``` You can
  // also filter nested fields. For example, you could specify
  // `scheduling.automaticRestart = false` to include instances only if they are
  // not scheduled for automatic restarts. You can use filtering on nested
  // fields to filter based on resource labels. To filter on multiple
  // expressions, provide each separate expression within parentheses. For
  // example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel
  // Skylake") ``` By default, each expression is an `AND` expression. However,
  // you can include `AND` and `OR` expressions explicitly. For example: ```
  // (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`. You cannot combine constraints on multiple fields
  // using regular expressions.
  optional string filter = 1 [json_name = "filter"];

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 2 [json_name = "maxResults"];

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 3 [json_name = "orderBy"];

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 4 [json_name = "pageToken"];

  // Project ID for this request.
  string project = 5
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // Name of the region scoping this request.
  string region = 6
      [(google.api.field_behavior) = REQUIRED, json_name = "region"];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 7 [json_name = "returnPartialSuccess"];
}

// Request message for ListUsable.
message ListUsableRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. These two types of filter expressions cannot be mixed in
  // one request. If you want to use AIP-160, your expression must specify the
  // field name, an operator, and the value that you want to use for filtering.
  // The value must be a string, a number, or a boolean. The operator must be
  // either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are
  // filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:*`
  // comparison can be used to test whether a key has been defined. For example,
  // to find all objects with `owner` label use: ``` labels.owner:* ``` You can
  // also filter nested fields. For example, you could specify
  // `scheduling.automaticRestart = false` to include instances only if they are
  // not scheduled for automatic restarts. You can use filtering on nested
  // fields to filter based on resource labels. To filter on multiple
  // expressions, provide each separate expression within parentheses. For
  // example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel
  // Skylake") ``` By default, each expression is an `AND` expression. However,
  // you can include `AND` and `OR` expressions explicitly. For example: ```
  // (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`. You cannot combine constraints on multiple fields
  // using regular expressions.
  optional string filter = 1 [json_name = "filter"];

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 2 [json_name = "maxResults"];

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 3 [json_name = "orderBy"];

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 4 [json_name = "pageToken"];

  // Project ID for this request.
  string project = 5
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 6 [json_name = "returnPartialSuccess"];
}

// Request message for PatchSubnetwork.
message PatchSubnetworkRequest {
  // The drain timeout specifies the upper bound in seconds on the amount of
  // time allowed to drain connections from the current ACTIVE subnetwork to the
  // current BACKUP subnetwork. The drain timeout is only applicable when the
  // following conditions are true: - the subnetwork being patched has purpose =
  // INTERNAL_HTTPS_LOAD_BALANCER - the subnetwork being patched has role =
  // BACKUP - the patch request is setting the role to ACTIVE. Note that after
  // this patch operation the roles of the ACTIVE and BACKUP subnetworks will be
  // swapped.
  optional int32 drain_timeout_seconds = 1 [json_name = "drainTimeoutSeconds"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // Name of the region scoping this request.
  string region = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "region",
    json_name = "region"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4 [json_name = "requestId"];

  // Name of the Subnetwork resource to patch.
  string subnetwork = 5
      [(google.api.field_behavior) = REQUIRED, json_name = "subnetwork"];

  // The Subnetwork for this request.
  optional google.cloud.cpp.compute.v1.Subnetwork subnetwork_resource = 6
      [json_name = "__json_request_body"];
}

// Request message for SetIamPolicy.
message SetIamPolicyRequest {
  // Project ID for this request.
  string project = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // The name of the region for this request.
  string region = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "region"];

  // The RegionSetPolicyRequest for this request.
  optional google.cloud.cpp.compute.v1.RegionSetPolicyRequest
      region_set_policy_request_resource = 3
      [json_name = "__json_request_body"];

  // Name or id of the resource for this request.
  string resource = 4
      [(google.api.field_behavior) = REQUIRED, json_name = "resource"];
}

// Request message for SetPrivateIpGoogleAccess.
message SetPrivateIpGoogleAccessRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project",
    json_name = "project"
  ];

  // Name of the region scoping this request.
  string region = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "region",
    json_name = "region"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3 [json_name = "requestId"];

  // Name of the Subnetwork resource.
  string subnetwork = 4
      [(google.api.field_behavior) = REQUIRED, json_name = "subnetwork"];

  // The SubnetworksSetPrivateIpGoogleAccessRequest for this request.
  optional
      google.cloud.cpp.compute.v1.SubnetworksSetPrivateIpGoogleAccessRequest
          subnetworks_set_private_ip_google_access_request_resource = 5
      [json_name = "__json_request_body"];
}

// Request message for TestIamPermissions.
message TestIamPermissionsRequest {
  // Project ID for this request.
  string project = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "project"];

  // The name of the region for this request.
  string region = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "region"];

  // Name or id of the resource for this request.
  string resource = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "resource"];

  // The TestPermissionsRequest for this request.
  optional google.cloud.cpp.compute.v1.TestPermissionsRequest
      test_permissions_request_resource = 4 [json_name = "__json_request_body"];
}
