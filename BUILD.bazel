# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(default_visibility = ["//visibility:public"])

licenses(["notice"])  # Apache 2.0

exports_files([
    "LICENSE",
])

EXPERIMENTAL_LIBRARIES = [
    # Introduced circa 2022-08-17
    "apikeys",
    # This is WIP, it needs a number of hand-crafted APIs.
    "pubsublite",
]

TRANSITION_LIBRARIES = [
    # Promoted to GA circa 2022-10-12
    "batch",
]

GA_LIBRARIES = [
    "accessapproval",
    "accesscontextmanager",
    "apigateway",
    "apigeeconnect",
    "appengine",
    "artifactregistry",
    "asset",
    "assuredworkloads",
    "automl",
    "baremetalsolution",
    "beyondcorp",
    "billing",
    "binaryauthorization",
    "certificatemanager",
    "channel",
    "cloudbuild",
    "composer",
    "contactcenterinsights",
    "container",
    "containeranalysis",
    "datacatalog",
    "datamigration",
    "dataplex",
    "dataproc",
    "datastream",
    "debugger",
    "deploy",
    "dialogflow_cx",
    "dialogflow_es",
    "dlp",
    "documentai",
    "edgecontainer",
    "eventarc",
    "filestore",
    "functions",
    "gameservices",
    "gkehub",
    "iap",
    "ids",
    "iot",
    "kms",
    "language",
    "logging",
    "managedidentities",
    "memcache",
    "monitoring",
    "networkconnectivity",
    "networkmanagement",
    "notebooks",
    "optimization",
    "orgpolicy",
    "osconfig",
    "oslogin",
    "policytroubleshooter",
    "privateca",
    "profiler",
    "recommender",
    "redis",
    "resourcemanager",
    "resourcesettings",
    "retail",
    "run",
    "scheduler",
    "secretmanager",
    "securitycenter",
    "servicecontrol",
    "servicedirectory",
    "servicemanagement",
    "serviceusage",
    "shell",
    "speech",
    "storagetransfer",
    "talent",
    "tasks",
    "texttospeech",
    "tpu",
    "trace",
    "translate",
    "video",
    "videointelligence",
    "vision",
    "vmmigration",
    "vpcaccess",
    "webrisk",
    "websecurityscanner",
    "workflows",
]

[cc_library(
    name = "experimental-{library}".format(library = library),
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}".format(library = library),
    ],
) for library in EXPERIMENTAL_LIBRARIES]

[cc_library(
    name = "experimental-{library}_mocks".format(library = library),
    testonly = True,
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}_mocks".format(library = library),
    ],
) for library in EXPERIMENTAL_LIBRARIES]

[cc_library(
    name = "experimental-{library}".format(library = library),
    deprecation = "this library is now GA, please use //:{library} instead.".format(library = library),
    tags = ["manual"],
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}".format(library = library),
    ],
) for library in TRANSITION_LIBRARIES]

[cc_library(
    name = "experimental-{library}_mocks".format(library = library),
    testonly = True,
    deprecation = "this library is now GA, please use //:{library}_mocks instead.".format(library = library),
    tags = ["manual"],
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}_mocks".format(library = library),
    ],
) for library in TRANSITION_LIBRARIES]

[cc_library(
    name = "{library}".format(library = library),
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}".format(library = library),
    ],
) for library in GA_LIBRARIES + TRANSITION_LIBRARIES]

[cc_library(
    name = "{library}_mocks".format(library = library),
    testonly = True,
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}_mocks".format(library = library),
    ],
) for library in GA_LIBRARIES + TRANSITION_LIBRARIES]

cc_library(
    name = "bigquery",
    deps = [
        "//google/cloud/bigquery:google_cloud_cpp_bigquery",
    ],
)

cc_library(
    name = "bigquery-mocks",
    testonly = True,
    deprecation = "please use //:bigquery_mocks instead.",
    tags = ["manual"],
    deps = [
        "//google/cloud/bigquery:google_cloud_cpp_bigquery_mocks",
    ],
)

cc_library(
    name = "bigquery_mocks",
    testonly = True,
    deps = [
        "//google/cloud/bigquery:google_cloud_cpp_bigquery_mocks",
    ],
)

cc_library(
    name = "bigtable",
    deps = [
        "//google/cloud/bigtable:bigtable_client_internal",
    ],
)

cc_library(
    name = "iam",
    deps = [
        "//google/cloud/iam:google_cloud_cpp_iam",
    ],
)

cc_library(
    name = "iam-mocks",
    testonly = True,
    deprecation = "please use //:iam_mocks instead.",
    tags = ["manual"],
    deps = [
        "//google/cloud/iam:google_cloud_cpp_iam_mocks",
    ],
)

cc_library(
    name = "iam_mocks",
    testonly = True,
    deps = [
        "//google/cloud/iam:google_cloud_cpp_iam_mocks",
    ],
)

cc_library(
    name = "pubsub",
    deps = [
        "//google/cloud/pubsub:google_cloud_cpp_pubsub",
    ],
)

cc_library(
    name = "pubsub_mocks",
    testonly = True,
    deps = [
        "//google/cloud/pubsub:google_cloud_cpp_pubsub_mocks",
    ],
)

cc_library(
    name = "spanner",
    deps = [
        "//google/cloud/spanner:google_cloud_cpp_spanner",
    ],
)

cc_library(
    name = "spanner_mocks",
    testonly = True,
    deps = [
        "//google/cloud/spanner:google_cloud_cpp_spanner_mocks",
    ],
)

cc_library(
    name = "storage",
    deps = [
        "//google/cloud/storage:google_cloud_cpp_storage",
    ],
)

cc_library(
    name = "experimental-storage-grpc",
    tags = ["manual"],
    deps = [
        "//google/cloud/storage:google_cloud_cpp_storage_grpc",
    ],
)

cc_library(
    name = "common",
    deps = [
        "//google/cloud:google_cloud_cpp_common_private",
    ],
)

cc_library(
    name = "grpc_utils",
    deps = [
        "//google/cloud:google_cloud_cpp_grpc_utils_private",
    ],
)

cc_library(
    name = "mocks",
    testonly = True,
    deps = [
        "//google/cloud:google_cloud_cpp_mocks",
    ],
)

cc_library(
    name = "rest_internal",
    deps = [
        "//google/cloud:google_cloud_cpp_rest_internal",
    ],
)

cc_library(
    name = "rest_protobuf_internal",
    deps = [
        "//google/cloud:google_cloud_cpp_rest_protobuf_internal",
    ],
)
