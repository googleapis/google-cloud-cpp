# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(default_visibility = ["//visibility:public"])

licenses(["notice"])  # Apache 2.0

exports_files([
    "LICENSE",
])

load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load(":libraries.bzl", "GOOGLE_CLOUD_CPP_EXPERIMENTAL_LIBRARIES", "GOOGLE_CLOUD_CPP_GA_LIBRARIES", "GOOGLE_CLOUD_CPP_TRANSITION_LIBRARIES")

EXPERIMENTAL_LIBRARIES = GOOGLE_CLOUD_CPP_EXPERIMENTAL_LIBRARIES

TRANSITION_LIBRARIES = GOOGLE_CLOUD_CPP_TRANSITION_LIBRARIES

GA_LIBRARIES = GOOGLE_CLOUD_CPP_GA_LIBRARIES

[cc_library(
    name = "experimental-{library}".format(library = library),
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}".format(library = library),
    ],
) for library in EXPERIMENTAL_LIBRARIES]

[cc_library(
    name = "experimental-{library}_mocks".format(library = library),
    testonly = True,
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}_mocks".format(library = library),
    ],
) for library in EXPERIMENTAL_LIBRARIES]

[cc_library(
    name = "experimental-{library}".format(library = library),
    deprecation = "this library is now GA, please use //:{library} instead.".format(library = library),
    tags = ["manual"],
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}".format(library = library),
    ],
) for library in TRANSITION_LIBRARIES]

[cc_library(
    name = "experimental-{library}_mocks".format(library = library),
    testonly = True,
    deprecation = "this library is now GA, please use //:{library}_mocks instead.".format(library = library),
    tags = ["manual"],
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}_mocks".format(library = library),
    ],
) for library in TRANSITION_LIBRARIES]

[cc_library(
    name = "{library}".format(library = library),
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}".format(library = library),
    ],
) for library in GA_LIBRARIES + TRANSITION_LIBRARIES]

[cc_library(
    name = "{library}_mocks".format(library = library),
    testonly = True,
    deps = [
        "//google/cloud/{library}:google_cloud_cpp_{library}_mocks".format(library = library),
    ],
) for library in GA_LIBRARIES + TRANSITION_LIBRARIES]

cc_library(
    name = "bigquery-mocks",
    testonly = True,
    deprecation = "please use //:bigquery_mocks instead.",
    tags = ["manual"],
    deps = [
        "//google/cloud/bigquery:google_cloud_cpp_bigquery_mocks",
    ],
)

cc_library(
    name = "iam-mocks",
    testonly = True,
    deprecation = "please use //:iam_mocks instead.",
    tags = ["manual"],
    deps = [
        "//google/cloud/iam:google_cloud_cpp_iam_mocks",
    ],
)

bool_flag(
    name = "enable-ctype-cord-workaround",
    build_setting_default = False,
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "experimental-storage-grpc",
    tags = ["manual"],
    deps = [
        "//google/cloud/storage:google_cloud_cpp_storage_grpc",
    ],
)

cc_library(
    name = "common",
    deps = [
        "//google/cloud:google_cloud_cpp_common_private",
    ],
)

cc_library(
    name = "grpc_utils",
    deps = [
        "//google/cloud:google_cloud_cpp_grpc_utils_private",
    ],
)

cc_library(
    name = "mocks",
    testonly = True,
    deps = [
        "//google/cloud:google_cloud_cpp_mocks",
    ],
)

cc_library(
    name = "oauth2",
    testonly = True,
    deps = [
        "//google/cloud/oauth2:google_cloud_cpp_oauth2",
    ],
)

cc_library(
    name = "experimental-opentelemetry",
    deps = [
        "//google/cloud/opentelemetry:google_cloud_cpp_opentelemetry",
    ],
)

cc_library(
    name = "experimental-bigquery-rest",
    deps = [
        "//google/cloud/bigquery:google_cloud_cpp_bigquery_rest",
    ],
)

bool_flag(
    name = "enable-experimental-opentelemetry",
    build_setting_default = False,
    visibility = ["//:__subpackages__"],
)
