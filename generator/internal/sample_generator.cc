// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "generator/internal/sample_generator.h"

namespace google {
namespace cloud {
namespace generator_internal {

SampleGenerator::SampleGenerator(
    google::protobuf::ServiceDescriptor const* service_descriptor,
    VarsDictionary service_vars,
    std::map<std::string, VarsDictionary> service_method_vars,
    google::protobuf::compiler::GeneratorContext* context)
    : ServiceCodeGenerator("client_samples_cc_path", service_descriptor,
                           std::move(service_vars),
                           std::move(service_method_vars), context) {}

Status SampleGenerator::GenerateCc() { return {}; }

Status SampleGenerator::GenerateHeader() {
  HeaderPrint(CopyrightLicenseFileHeader());
  HeaderPrint(R"""(
// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: $proto_file_name$

)""");

  HeaderLocalIncludes({
      vars("client_header_path"),
      "google/cloud/common_options.h",
      "google/cloud/testing_util/example_driver.h",
  });
  HeaderSystemIncludes({"iostream", "string", "vector"});

  HeaderPrint(R"""(
namespace {

void SetClientEndpoint(std::vector<std::string> const& argv) {
  if (!argv.empty()) {
    throw google::cloud::testing_util::Usage{"set-client-endpoint"};
  }
  //! [set-client-endpoint]
  // This configuration is common with Private Google Access:
  //     https://cloud.google.com/vpc/docs/private-google-access
  auto options = google::cloud::Options{}.set<google::cloud::EndpointOption>(
      "private.googleapis.com");
  auto client = google::cloud::$product_namespace$::$client_class_name$(
      google::cloud::$product_namespace$::Make$connection_class_name$(options));
  // Use the `client` object as usual
  //! [set-client-endpoint]
}

// main-dox-marker: $client_class_name$
void AutoRun(std::vector<std::string> const& argv) {
  if (!argv.empty()) throw google::cloud::testing_util::Usage{"auto"};

  std::cout << "\nRunning SetClientEndpoint() example" << std::endl;
  SetClientEndpoint({});
}

}  // namespace

int main(int argc, char* argv[]) {  // NOLINT(bugprone-exception-escape)
  google::cloud::testing_util::Example example({
      {"set-client-endpoint", SetClientEndpoint},
      {"auto", AutoRun},
  });
  return example.Run(argc, argv);
}
)""");

  return {};
}

}  // namespace generator_internal
}  // namespace cloud
}  // namespace google
