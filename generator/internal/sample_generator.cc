// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "generator/internal/sample_generator.h"

namespace google {
namespace cloud {
namespace generator_internal {

SampleGenerator::SampleGenerator(
    google::protobuf::ServiceDescriptor const* service_descriptor,
    VarsDictionary service_vars,
    std::map<std::string, VarsDictionary> service_method_vars,
    google::protobuf::compiler::GeneratorContext* context)
    : ServiceCodeGenerator("client_samples_cc_path", service_descriptor,
                           std::move(service_vars),
                           std::move(service_method_vars), context) {}

Status SampleGenerator::GenerateCc() { return {}; }

Status SampleGenerator::GenerateHeader() {
  auto endpoint_location_style = EndpointLocationStyle();

  HeaderPrint(CopyrightLicenseFileHeader());
  HeaderPrint(R"""(
// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: $proto_file_name$

)""");

  HeaderLocalIncludes({
      vars("client_header_path"),
      "google/cloud/common_options.h",
      "google/cloud/credentials.h",
      "google/cloud/internal/getenv.h",
      "google/cloud/testing_util/example_driver.h",
      IsExperimental() ? "google/cloud/experimental_tag.h" : "",
  });
  HeaderSystemIncludes({"iostream", "fstream", "string", "vector"});

  HeaderPrint(R"""(
// clang-format off
// main-dox-marker: $product_namespace$::$client_class_name$
// clang-format on
namespace {

void SetClientEndpoint(std::vector<std::string> const& argv) {
  if (!argv.empty()) {
    throw google::cloud::testing_util::Usage{"set-client-endpoint"};
  }
  //! [set-client-endpoint]
  // This configuration is common with Private Google Access:
  //     https://cloud.google.com/vpc/docs/private-google-access
  auto options = google::cloud::Options{}.set<google::cloud::EndpointOption>(
      "private.googleapis.com");
  auto client = google::cloud::$product_namespace$::$client_class_name$()""");
  if (IsExperimental()) HeaderPrint("google::cloud::ExperimentalTag{},");
  if (HasGenerateGrpcTransport()) {
    HeaderPrint(R"""(
      google::cloud::$product_namespace$::Make$connection_class_name$()""");
  } else {
    HeaderPrint(R"""(
      google::cloud::$product_namespace$::Make$connection_class_name$Rest()""");
  }
  if (IsExperimental()) HeaderPrint("google::cloud::ExperimentalTag{},");
  switch (endpoint_location_style) {
    case ServiceConfiguration::LOCATION_DEPENDENT:
      HeaderPrint(R"""("unused", )""");
      break;
    case ServiceConfiguration::LOCATION_DEPENDENT_COMPAT:
    default:
      break;
  }
  HeaderPrint(R"""(options));
  //! [set-client-endpoint]
}

void WithServiceAccount(std::vector<std::string> const& argv) {
  if (argv.size() != 1 || argv[0] == "--help") {
    throw google::cloud::testing_util::Usage{"with-service-account <keyfile>"};
  }
  //! [with-service-account]
  [](std::string const& keyfile) {
    auto is = std::ifstream(keyfile);
    is.exceptions(std::ios::badbit);  // Minimal error handling in examples
    auto contents = std::string(std::istreambuf_iterator<char>(is.rdbuf()), {});
    auto options =
        google::cloud::Options{}.set<google::cloud::UnifiedCredentialsOption>(
            google::cloud::MakeServiceAccountCredentials(contents));
    return google::cloud::$product_namespace$::$client_class_name$()""");
  if (IsExperimental()) HeaderPrint("google::cloud::ExperimentalTag{},");
  if (HasGenerateGrpcTransport()) {
    HeaderPrint(R"""(
      google::cloud::$product_namespace$::Make$connection_class_name$()""");
  } else {
    HeaderPrint(R"""(
      google::cloud::$product_namespace$::Make$connection_class_name$Rest()""");
  }
  if (IsExperimental()) HeaderPrint("google::cloud::ExperimentalTag{},");
  switch (endpoint_location_style) {
    case ServiceConfiguration::LOCATION_DEPENDENT:
      HeaderPrint(R"""("us-west1" /* regional service region */, )""");
      break;
    case ServiceConfiguration::LOCATION_DEPENDENT_COMPAT:
    default:
      break;
  }
  HeaderPrint(R"""(options));
  }
  //! [with-service-account]
  (argv.at(0));
}

void AutoRun(std::vector<std::string> const& argv) {
  namespace examples = ::google::cloud::testing_util;
  using ::google::cloud::internal::GetEnv;
  if (!argv.empty()) throw examples::Usage{"auto"};
  examples::CheckEnvironmentVariablesAreSet({
    "GOOGLE_CLOUD_CPP_TEST_SERVICE_ACCOUNT_KEYFILE"
  });
  auto const keyfile =
      GetEnv("GOOGLE_CLOUD_CPP_TEST_SERVICE_ACCOUNT_KEYFILE").value();

  std::cout << "\nRunning SetClientEndpoint() example" << std::endl;
  SetClientEndpoint({});

  std::cout << "\nRunning WithServiceAccount() example" << std::endl;
  WithServiceAccount({keyfile});
}

}  // namespace

int main(int argc, char* argv[]) {  // NOLINT(bugprone-exception-escape)
  google::cloud::testing_util::Example example({
      {"set-client-endpoint", SetClientEndpoint},
      {"with-service-account", WithServiceAccount},
      {"auto", AutoRun},
  });
  return example.Run(argc, argv);
}
)""");

  return {};
}

}  // namespace generator_internal
}  // namespace cloud
}  // namespace google
