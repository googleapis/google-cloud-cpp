// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "generator/internal/stub_rest_generator.h"
#include "absl/memory/memory.h"
#include "absl/strings/str_split.h"
#include "generator/internal/codegen_utils.h"
#include "generator/internal/predicate_utils.h"
#include "generator/internal/printer.h"
#include <google/protobuf/descriptor.h>

namespace google {
namespace cloud {
namespace generator_internal {

StubRestGenerator::StubRestGenerator(
    google::protobuf::ServiceDescriptor const* service_descriptor,
    VarsDictionary service_vars,
    std::map<std::string, VarsDictionary> service_method_vars,
    google::protobuf::compiler::GeneratorContext* context)
    : ServiceCodeGenerator("stub_rest_header_path", "stub_rest_cc_path",
                           service_descriptor, std::move(service_vars),
                           std::move(service_method_vars), context) {}

Status StubRestGenerator::GenerateHeader() {
  HeaderPrint(CopyrightLicenseFileHeader());
  HeaderPrint(  // clang-format off
    "\n"
    "// Generated by the Codegen C++ plugin.\n"
    "// If you make any local changes, they will be lost.\n"
    "// source: $proto_file_name$\n"
    "\n"
    "#ifndef $header_include_guard$\n"
    "#define $header_include_guard$\n");
  // clang-format on

  HeaderPrint("\n");
  HeaderLocalIncludes({"google/cloud/internal/rest_client.h",
                       "google/cloud/internal/rest_context.h",
                       "google/cloud/status_or.h", "google/cloud/version.h"});
  std::vector<std::string> additional_pb_header_paths =
      absl::StrSplit(vars("additional_pb_header_paths"), absl::ByChar(','));
  HeaderSystemIncludes(additional_pb_header_paths);
  HeaderSystemIncludes(
      {vars("proto_header_path"),
       HasLongrunningMethod() ? "google/longrunning/operations.pb.h" : "",
       "memory"});

  auto result = HeaderOpenNamespaces(NamespaceType::kInternal);
  if (!result.ok()) return result;

  // Abstract interface Stub base class
  HeaderPrint(  // clang-format off
    "\n"
    "class $stub_rest_class_name$ {\n"
    " public:\n"
    "  virtual ~$stub_rest_class_name$() = default;\n");
  // clang-format on

  for (auto const& method : methods()) {
    HeaderPrintMethod(
        method,
        {MethodPattern(
             {{IsResponseTypeEmpty,
               // clang-format off
    "\n  virtual Status $method_name$(\n",
    "\n  virtual StatusOr<$response_type$> $method_name$(\n"},
   {"    rest_internal::RestContext& rest_context,\n"
    "    $request_type$ const& request) = 0;\n"
                  // clang-format on
              }},
             All(HasHttpAnnotation, IsNonStreaming,
                 Not(IsLongrunningOperation))),
         MethodPattern({{R"""(
  virtual StatusOr<google::longrunning::Operation> $method_name$(
      rest_internal::RestContext& rest_context,
      $request_type$ const& request) = 0;
)"""}},
                       And(HasHttpAnnotation, IsLongrunningOperation))},
        __FILE__, __LINE__);
  }

  // close abstract interface Stub base class
  HeaderPrint("};\n");

  // default stub class
  HeaderPrint(  // clang-format off
    "\n"
    "class Default$stub_rest_class_name$ : public $stub_rest_class_name$ {\n"
    " public:\n"
    "  ~Default$stub_rest_class_name$() override = default;\n");
                // clang-format on
  HeaderPrint(  // clang-format off
    "\n"
    "  explicit Default$stub_rest_class_name$(Options options);\n"
    "  Default$stub_rest_class_name$(\n"
    "      std::shared_ptr<rest_internal::RestClient> rest_client,\n"
    "      Options options);\n");
  // clang-format on

  for (auto const& method : methods()) {
    HeaderPrintMethod(
        method,
        {MethodPattern({{IsResponseTypeEmpty,
                         // clang-format off
    "\n  Status\n",
    "\n  StatusOr<$response_type$>\n"},
    {"  $method_name$(\n"
    "    rest_internal::RestContext& rest_context,\n"
    "    $request_type$ const& request) override;\n"}},
                       // clang-format on
                       All(HasHttpAnnotation, IsNonStreaming,
                           Not(IsLongrunningOperation))),
         MethodPattern({{R"""(
  StatusOr<google::longrunning::Operation> $method_name$(
      rest_internal::RestContext& rest_context,
      $request_type$ const& request) override;
)"""}},
                       And(HasHttpAnnotation, IsLongrunningOperation))},
        __FILE__, __LINE__);
  }

  // private members and close default stub class definition
  HeaderPrint(  // clang-format off
    "\n"
    " private:\n"
    "  std::shared_ptr<rest_internal::RestClient> rest_client_;\n"
    "  Options options_;\n");
  // clang-format on
  HeaderPrint("};\n");

  HeaderCloseNamespaces();
  // close header guard
  HeaderPrint("\n#endif  // $header_include_guard$\n");
  return {};
}

Status StubRestGenerator::GenerateCc() {
  CcPrint(CopyrightLicenseFileHeader());
  CcPrint(  // clang-format off
    "\n"
    "// Generated by the Codegen C++ plugin.\n"
    "// If you make any local changes, they will be lost.\n"
    "// source: $proto_file_name$\n");
  // clang-format on

  CcPrint("\n");
  CcLocalIncludes({vars("stub_rest_header_path"),
                   "google/cloud/internal/absl_str_cat_quiet.h",
                   "google/cloud/internal/rest_stub_helpers.h",
                   "google/cloud/status_or.h"});
  CcSystemIncludes(
      {vars("proto_header_path"),
       HasLongrunningMethod() ? "google/longrunning/operations.pb.h" : "",
       "memory"});

  auto result = CcOpenNamespaces(NamespaceType::kInternal);
  if (!result.ok()) return result;

  CcPrint(  // clang-format off
    "\n"
    "Default$stub_rest_class_name$::Default$stub_rest_class_name$(Options options)\n"
    "    : rest_client_(rest_internal::MakePooledRestClient(\n"
    "          \"https://$service_endpoint$\", options)),\n"
    "      options_(std::move(options)) {}\n"
    "\n"
    "Default$stub_rest_class_name$::Default$stub_rest_class_name$(\n"
    "    std::shared_ptr<rest_internal::RestClient> rest_client, Options options)\n"
    "    : rest_client_(std::move(rest_client)), options_(std::move(options)) {}\n");
  // clang-format on

  // default stub class member methods
  for (auto const& method : methods()) {
    CcPrintMethod(
        method,
        {
            MethodPattern(
                {{IsResponseTypeEmpty,
                  // clang-format off
    "\nStatus\n",
    "\nStatusOr<$response_type$>\n"},
   {"Default$stub_rest_class_name$::$method_name$(\n"
    "      rest_internal::RestContext& rest_context,\n"
    "      $request_type$ const& request) {\n"},
    {IsResponseTypeEmpty,
    "  return rest_internal::$method_http_verb$(\n",
    "  return rest_internal::$method_http_verb$<$response_type$>(\n"},
   {"      *rest_client_, rest_context, request,\n"},
   {"      $method_rest_path$$method_http_query_parameters$);\n"},
   {"}\n"}
   },
                // clang-format on
                And(HasHttpAnnotation, IsNonStreaming)),
        },
        __FILE__, __LINE__);
  }

  CcCloseNamespaces();
  return {};
}

}  // namespace generator_internal
}  // namespace cloud
}  // namespace google
