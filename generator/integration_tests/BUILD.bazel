# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@grpc//bazel:cc_grpc_library.bzl", "cc_grpc_library")
load("@protobuf//bazel:cc_proto_library.bzl", "cc_proto_library")
load("@protobuf//bazel:proto_library.bzl", "proto_library")

package(default_visibility = ["//visibility:private"])

licenses(["notice"])  # Apache 2.0

proto_library(
    name = "google_cloud_cpp_generator_testing_proto",
    srcs = [
        "backup.proto",
        "common.proto",
        "test.proto",
        "test2.proto",
        "test_deprecated.proto",
        "test_request_id.proto",
    ],
    deps = [
        "@googleapis//google/api:annotations_proto",
        "@googleapis//google/api:client_proto",
        "@googleapis//google/api:field_behavior_proto",
        "@googleapis//google/api:field_info_proto",
        "@googleapis//google/api:resource_proto",
        "@googleapis//google/api:routing_proto",
        "@googleapis//google/iam/v1:iam_policy_proto",
        "@googleapis//google/iam/v1:policy_proto",
        "@googleapis//google/longrunning:operations_proto",
        "@googleapis//google/rpc:status_proto",
        "@protobuf//:any_proto",
        "@protobuf//:duration_proto",
        "@protobuf//:empty_proto",
        "@protobuf//:field_mask_proto",
        "@protobuf//:struct_proto",
        "@protobuf//:timestamp_proto",
    ],
)

cc_proto_library(
    name = "google_cloud_cpp_generator_testing_cc_proto",
    deps = [":google_cloud_cpp_generator_testing_proto"],
)

cc_grpc_library(
    name = "google_cloud_cpp_generator_testing_cc_grpc",
    srcs = [":google_cloud_cpp_generator_testing_proto"],
    grpc_only = True,
    deps = [":google_cloud_cpp_generator_testing_cc_proto"],
)

filegroup(
    name = "golden_srcs",
    srcs = glob(
        [
            "golden/v1/internal/*_sources.cc",
            "golden/v1/internal/streaming.cc",
        ],
        allow_empty = True,
    ),
)

filegroup(
    name = "golden_hdrs",
    srcs = glob(
        include = [
            "golden/*.h",
            "golden/mocks/*.h",
            "golden/v1/*.cc",
            "golden/v1/*.h",
            "golden/v1/internal/*.cc",
            "golden/v1/internal/*.h",
            "golden/v1/mocks/*.h",
        ],
        exclude = [
            "golden/v1/internal/*_sources.cc",
        ],
    ),
)

cc_library(
    name = "google_cloud_cpp_generator_golden",
    srcs = [":golden_srcs"],
    hdrs = [":golden_hdrs"],
    copts = [
        "-I$(BINDIR)",
    ],
    visibility = [":__subpackages__"],
    deps = [
        ":google_cloud_cpp_generator_testing_cc_grpc",
        ":google_cloud_cpp_generator_testing_cc_proto",
        "//:common",
        "//:grpc_utils",
        "//google/cloud:google_cloud_cpp_rest_internal",
        "//google/cloud:google_cloud_cpp_rest_protobuf_internal",
        "@abseil-cpp//absl/strings",
        "@googleapis//google/longrunning:longrunning_cc_grpc",
    ],
)

filegroup(
    name = "test_mocks",
    srcs = glob(["tests/mock_*.h"]),
)

[cc_test(
    name = test.replace("/", "_").replace(".cc", ""),
    srcs = [
        test,
        ":test_mocks",
    ],
    copts = [
        "-I$(BINDIR)",
    ],
    deps = [
        ":google_cloud_cpp_generator_golden",
        "//:common",
        "//:mocks",
        "//google/cloud/testing_util:google_cloud_cpp_testing_grpc_private",
        "//google/cloud/testing_util:google_cloud_cpp_testing_private",
        "//google/cloud/testing_util:google_cloud_cpp_testing_rest_private",
        "@googletest//:gtest_main",
    ],
) for test in glob(["tests/*.cc"])]

[cc_test(
    name = sample.replace("/", "_").replace(".cc", ""),
    srcs = [sample],
    copts = [
        "-I$(BINDIR)",
    ],
    tags = ["integration-test"],
    deps = [
        ":google_cloud_cpp_generator_golden",
        "//google/cloud/testing_util:google_cloud_cpp_testing_private",
    ],
) for sample in glob(["golden/v1/samples/*.cc"])]

[cc_test(
    name = benchmark.replace("/", "_").replace(".cc", ""),
    srcs = [benchmark],
    copts = [
        "-I$(BINDIR)",
    ],
    tags = ["benchmark"],
    deps = [
        ":google_cloud_cpp_generator_golden",
        "@com_google_benchmark//:benchmark_main",
    ],
) for benchmark in glob(["benchmarks/*.cc"])]
