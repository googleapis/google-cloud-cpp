// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/integration_tests/test_deprecated.proto

#ifndef GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_V1_INTERNAL_DEPRECATED_REST_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_V1_INTERNAL_DEPRECATED_REST_CONNECTION_IMPL_H

#include "generator/integration_tests/golden/v1/deprecated_connection.h"
#include "generator/integration_tests/golden/v1/deprecated_connection_idempotency_policy.h"
#include "generator/integration_tests/golden/v1/deprecated_options.h"
#include "generator/integration_tests/golden/v1/internal/deprecated_rest_stub.h"
#include "generator/integration_tests/golden/v1/internal/deprecated_retry_traits.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace golden_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class DeprecatedServiceRestConnectionImpl
    : public golden_v1::DeprecatedServiceConnection {
 public:
  ~DeprecatedServiceRestConnectionImpl() override = default;

  DeprecatedServiceRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<golden_v1_internal::DeprecatedServiceRestStub> stub,
    Options options);

  Options options() override { return options_; }

  Status
  Noop(google::test::deprecated::v1::DeprecatedServiceRequest const& request) override;

 private:
  static std::unique_ptr<golden_v1::DeprecatedServiceRetryPolicy>
  retry_policy(Options const& options) {
    return options.get<golden_v1::DeprecatedServiceRetryPolicyOption>()->clone();
  }

  static std::unique_ptr<BackoffPolicy> backoff_policy(Options const& options) {
    return options.get<golden_v1::DeprecatedServiceBackoffPolicyOption>()->clone();
  }

  static std::unique_ptr<golden_v1::DeprecatedServiceConnectionIdempotencyPolicy>
  idempotency_policy(Options const& options) {
    return options.get<golden_v1::DeprecatedServiceConnectionIdempotencyPolicyOption>()->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<golden_v1_internal::DeprecatedServiceRestStub> stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace golden_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_V1_INTERNAL_DEPRECATED_REST_CONNECTION_IMPL_H
