// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/integration_tests/test.proto

#include "generator/integration_tests/golden/v1/internal/golden_thing_admin_rest_stub_factory.h"
#include "generator/integration_tests/golden/v1/internal/golden_thing_admin_rest_logging_decorator.h"
#include "generator/integration_tests/golden/v1/internal/golden_thing_admin_rest_metadata_decorator.h"
#include "generator/integration_tests/golden/v1/internal/golden_thing_admin_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/algorithm.h"
#include "google/cloud/log.h"
#include "google/cloud/options.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace golden_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<GoldenThingAdminRestStub>
CreateDefaultGoldenThingAdminRestStub(Options const& options) {
  Options opts = options;
  if (!opts.has<UnifiedCredentialsOption>()) {
    opts.set<UnifiedCredentialsOption>(MakeGoogleDefaultCredentials());
  }
  if (!opts.has<rest_internal::LongrunningEndpointOption>()) {
    opts.set<rest_internal::LongrunningEndpointOption>(
        "longrunning.googleapis.com");
  }
  std::shared_ptr<GoldenThingAdminRestStub> stub =
      std::make_shared<DefaultGoldenThingAdminRestStub>(std::move(opts));
  stub = std::make_shared<GoldenThingAdminRestMetadata>(std::move(stub));
  if (internal::Contains(
      options.get<TracingComponentsOption>(), "rpc")) {
    GCP_LOG(INFO) << "Enabled logging for REST rpc calls";
    stub = std::make_shared<GoldenThingAdminRestLogging>(
        std::move(stub),
        options.get<RestTracingOptionsOption>(),
        options.get<TracingComponentsOption>());
  }
  return stub;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace golden_v1_internal
}  // namespace cloud
}  // namespace google
