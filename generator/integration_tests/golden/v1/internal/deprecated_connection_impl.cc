// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/integration_tests/test_deprecated.proto

#include "generator/integration_tests/golden/v1/internal/deprecated_connection_impl.h"
#include "generator/integration_tests/golden/v1/internal/deprecated_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace golden_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace {

std::unique_ptr<golden_v1::DeprecatedServiceRetryPolicy>
retry_policy(Options const& options) {
  return options.get<golden_v1::DeprecatedServiceRetryPolicyOption>()->clone();
}

std::unique_ptr<BackoffPolicy>
backoff_policy(Options const& options) {
  return options.get<golden_v1::DeprecatedServiceBackoffPolicyOption>()->clone();
}

std::unique_ptr<golden_v1::DeprecatedServiceConnectionIdempotencyPolicy>
idempotency_policy(Options const& options) {
  return options.get<golden_v1::DeprecatedServiceConnectionIdempotencyPolicyOption>()->clone();
}

} // namespace

DeprecatedServiceConnectionImpl::DeprecatedServiceConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<golden_v1_internal::DeprecatedServiceStub> stub,
    Options options)
  : background_(std::move(background)), stub_(std::move(stub)),
    options_(internal::MergeOptions(
        std::move(options),
        DeprecatedServiceConnection::options())) {}

Status
DeprecatedServiceConnectionImpl::Noop(google::test::deprecated::v1::DeprecatedServiceRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->Noop(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::test::deprecated::v1::DeprecatedServiceRequest const& request) {
        return stub_->Noop(context, options, request);
      },
      *current, request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace golden_v1_internal
}  // namespace cloud
}  // namespace google
