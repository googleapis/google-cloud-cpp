// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/integration_tests/test2.proto

#ifndef GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_V1_GOLDEN_REST_ONLY_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_V1_GOLDEN_REST_ONLY_CONNECTION_H

#include "generator/integration_tests/golden/v1/golden_rest_only_connection_idempotency_policy.h"
#include "generator/integration_tests/golden/v1/internal/golden_rest_only_retry_traits.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/internal/retry_policy_impl.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <generator/integration_tests/test2.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace golden_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using GoldenRestOnlyRetryPolicy = ::google::cloud::internal::TraitBasedRetryPolicy<
    golden_v1_internal::GoldenRestOnlyRetryTraits>;

using GoldenRestOnlyLimitedTimeRetryPolicy = ::google::cloud::internal::LimitedTimeRetryPolicy<
    golden_v1_internal::GoldenRestOnlyRetryTraits>;

using GoldenRestOnlyLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        golden_v1_internal::GoldenRestOnlyRetryTraits>;

/**
 * The `GoldenRestOnlyConnection` object for `GoldenRestOnlyClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `GoldenRestOnlyClient`. This allows users to inject custom behavior
 * (e.g., with a Google Mock object) when writing tests that use objects of type
 * `GoldenRestOnlyClient`.
 *
 * To create a concrete instance, see `MakeGoldenRestOnlyConnection()`.
 *
 * For mocking, see `golden_v1_mocks::MockGoldenRestOnlyConnection`.
 */
class GoldenRestOnlyConnection {
 public:
  virtual ~GoldenRestOnlyConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual Status
  Noop(google::protobuf::Empty const& request);
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace golden_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_V1_GOLDEN_REST_ONLY_CONNECTION_H
