// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/integration_tests/test.proto

#ifndef GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_V1_MOCKS_MOCK_GOLDEN_THING_ADMIN_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_V1_MOCKS_MOCK_GOLDEN_THING_ADMIN_CONNECTION_H

#include "generator/integration_tests/golden/v1/golden_thing_admin_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace golden_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `GoldenThingAdminConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `GoldenThingAdminClient`. To do so,
 * construct an object of type `GoldenThingAdminClient` with an instance of this
 * class. Then use the Google Test framework functions to program the behavior
 * of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockGoldenThingAdminConnection : public golden_v1::GoldenThingAdminConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD((StreamRange<google::test::admin::database::v1::Database>),
  ListDatabases,
  (google::test::admin::database::v1::ListDatabasesRequest request), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateDatabase(Matcher<google::test::admin::database::v1::CreateDatabaseRequest const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::Database>>,
  CreateDatabase,
  (google::test::admin::database::v1::CreateDatabaseRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateDatabase(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
  CreateDatabase, (NoAwaitTag,
    google::test::admin::database::v1::CreateDatabaseRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateDatabase(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::Database>>,
  CreateDatabase, (
    google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(StatusOr<google::test::admin::database::v1::Database>,
  GetDatabase,
  (google::test::admin::database::v1::GetDatabaseRequest const& request), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateDatabaseDdl(Matcher<google::test::admin::database::v1::UpdateDatabaseDdlRequest const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::UpdateDatabaseDdlMetadata>>,
  UpdateDatabaseDdl,
  (google::test::admin::database::v1::UpdateDatabaseDdlRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateDatabaseDdl(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
  UpdateDatabaseDdl, (NoAwaitTag,
    google::test::admin::database::v1::UpdateDatabaseDdlRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateDatabaseDdl(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::UpdateDatabaseDdlMetadata>>,
  UpdateDatabaseDdl, (
    google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(Status,
  DropDatabase,
  (google::test::admin::database::v1::DropDatabaseRequest const& request), (override));

  MOCK_METHOD(StatusOr<google::test::admin::database::v1::GetDatabaseDdlResponse>,
  GetDatabaseDdl,
  (google::test::admin::database::v1::GetDatabaseDdlRequest const& request), (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>,
  SetIamPolicy,
  (google::iam::v1::SetIamPolicyRequest const& request), (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>,
  GetIamPolicy,
  (google::iam::v1::GetIamPolicyRequest const& request), (override));

  MOCK_METHOD(StatusOr<google::iam::v1::TestIamPermissionsResponse>,
  TestIamPermissions,
  (google::iam::v1::TestIamPermissionsRequest const& request), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateBackup(Matcher<google::test::admin::database::v1::CreateBackupRequest const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::Backup>>,
  CreateBackup,
  (google::test::admin::database::v1::CreateBackupRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateBackup(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
  CreateBackup, (NoAwaitTag,
    google::test::admin::database::v1::CreateBackupRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateBackup(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::Backup>>,
  CreateBackup, (
    google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(StatusOr<google::test::admin::database::v1::Backup>,
  GetBackup,
  (google::test::admin::database::v1::GetBackupRequest const& request), (override));

  MOCK_METHOD(StatusOr<google::test::admin::database::v1::Backup>,
  UpdateBackup,
  (google::test::admin::database::v1::UpdateBackupRequest const& request), (override));

  MOCK_METHOD(Status,
  DeleteBackup,
  (google::test::admin::database::v1::DeleteBackupRequest const& request), (override));

  MOCK_METHOD((StreamRange<google::test::admin::database::v1::Backup>),
  ListBackups,
  (google::test::admin::database::v1::ListBackupsRequest request), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, RestoreDatabase(Matcher<google::test::admin::database::v1::RestoreDatabaseRequest const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::Database>>,
  RestoreDatabase,
  (google::test::admin::database::v1::RestoreDatabaseRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, RestoreDatabase(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
  RestoreDatabase, (NoAwaitTag,
    google::test::admin::database::v1::RestoreDatabaseRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, RestoreDatabase(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::Database>>,
  RestoreDatabase, (
    google::longrunning::Operation const& operation), (override));

  MOCK_METHOD((StreamRange<google::longrunning::Operation>),
  ListDatabaseOperations,
  (google::test::admin::database::v1::ListDatabaseOperationsRequest request), (override));

  MOCK_METHOD((StreamRange<google::longrunning::Operation>),
  ListBackupOperations,
  (google::test::admin::database::v1::ListBackupOperationsRequest request), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, LongRunningWithoutRouting(Matcher<google::test::admin::database::v1::RestoreDatabaseRequest const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::Database>>,
  LongRunningWithoutRouting,
  (google::test::admin::database::v1::RestoreDatabaseRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, LongRunningWithoutRouting(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
  LongRunningWithoutRouting, (NoAwaitTag,
    google::test::admin::database::v1::RestoreDatabaseRequest const& request), (override));


  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, LongRunningWithoutRouting(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::Database>>,
  LongRunningWithoutRouting, (
    google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(StatusOr<google::cloud::location::Location>,
  GetLocation,
  (google::cloud::location::GetLocationRequest const& request), (override));

  MOCK_METHOD((StreamRange<google::longrunning::Operation>),
  ListOperations,
  (google::longrunning::ListOperationsRequest request), (override));

  MOCK_METHOD(future<StatusOr<google::test::admin::database::v1::Database>>,
  AsyncGetDatabase,
  (google::test::admin::database::v1::GetDatabaseRequest const& request), (override));

  MOCK_METHOD(future<Status>,
  AsyncDropDatabase,
  (google::test::admin::database::v1::DropDatabaseRequest const& request), (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace golden_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_V1_MOCKS_MOCK_GOLDEN_THING_ADMIN_CONNECTION_H
