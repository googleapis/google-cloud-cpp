// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/integration_tests/test.proto

#include "generator/integration_tests/golden/internal/golden_thing_admin_rest_stub.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <generator/integration_tests/test.pb.h>
#include <google/longrunning/operations.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace golden_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultGoldenThingAdminRestStub::DefaultGoldenThingAdminRestStub(Options options)
    : rest_client_(rest_internal::MakePooledRestClient(
          "https://test.googleapis.com", options)),
      options_(std::move(options)) {}

DefaultGoldenThingAdminRestStub::DefaultGoldenThingAdminRestStub(
    std::shared_ptr<rest_internal::RestClient> rest_client, Options options)
    : rest_client_(std::move(rest_client)), options_(std::move(options)) {}

StatusOr<google::test::admin::database::v1::ListDatabasesResponse>
DefaultGoldenThingAdminRestStub::ListDatabases(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::ListDatabasesRequest const& request) {
  return rest_internal::Get<google::test::admin::database::v1::ListDatabasesResponse>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.parent(),"/databases"),
{std::make_pair("page_size", std::to_string(request.page_size())),
std::make_pair("page_token", request.page_token())});
}

StatusOr<google::longrunning::Operation>
DefaultGoldenThingAdminRestStub::CreateDatabase(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::CreateDatabaseRequest const& request) {
  return rest_internal::Post<google::longrunning::Operation>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.parent(),"/databases"));
}

StatusOr<google::test::admin::database::v1::Database>
DefaultGoldenThingAdminRestStub::GetDatabase(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::GetDatabaseRequest const& request) {
  return rest_internal::Get<google::test::admin::database::v1::Database>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.name(),""),
{});
}

StatusOr<google::longrunning::Operation>
DefaultGoldenThingAdminRestStub::UpdateDatabaseDdl(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::UpdateDatabaseDdlRequest const& request) {
  return rest_internal::Patch<google::longrunning::Operation>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.database(),"/ddl"));
}

Status DefaultGoldenThingAdminRestStub::DropDatabase(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::DropDatabaseRequest const& request) {
  return rest_internal::Delete(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.database(),""));
}

StatusOr<google::test::admin::database::v1::GetDatabaseDdlResponse>
DefaultGoldenThingAdminRestStub::GetDatabaseDdl(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::GetDatabaseDdlRequest const& request) {
  return rest_internal::Get<google::test::admin::database::v1::GetDatabaseDdlResponse>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.database(),"/ddl"),
{});
}

StatusOr<google::iam::v1::Policy>
DefaultGoldenThingAdminRestStub::SetIamPolicy(
      google::cloud::rest_internal::RestContext& rest_context,
      google::iam::v1::SetIamPolicyRequest const& request) {
  return rest_internal::Post<google::iam::v1::Policy>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.resource(),":setIamPolicy"));
}

StatusOr<google::iam::v1::Policy>
DefaultGoldenThingAdminRestStub::GetIamPolicy(
      google::cloud::rest_internal::RestContext& rest_context,
      google::iam::v1::GetIamPolicyRequest const& request) {
  return rest_internal::Post<google::iam::v1::Policy>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.resource(),":getIamPolicy"));
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DefaultGoldenThingAdminRestStub::TestIamPermissions(
      google::cloud::rest_internal::RestContext& rest_context,
      google::iam::v1::TestIamPermissionsRequest const& request) {
  return rest_internal::Post<google::iam::v1::TestIamPermissionsResponse>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.resource(),":testIamPermissions"));
}

StatusOr<google::longrunning::Operation>
DefaultGoldenThingAdminRestStub::CreateBackup(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::CreateBackupRequest const& request) {
  return rest_internal::Post<google::longrunning::Operation>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.parent(),"/backups"));
}

StatusOr<google::test::admin::database::v1::Backup>
DefaultGoldenThingAdminRestStub::GetBackup(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::GetBackupRequest const& request) {
  return rest_internal::Get<google::test::admin::database::v1::Backup>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.name(),""),
{});
}

StatusOr<google::test::admin::database::v1::Backup>
DefaultGoldenThingAdminRestStub::UpdateBackup(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::UpdateBackupRequest const& request) {
  return rest_internal::Patch<google::test::admin::database::v1::Backup>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.backup().name(),""));
}

Status DefaultGoldenThingAdminRestStub::DeleteBackup(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::DeleteBackupRequest const& request) {
  return rest_internal::Delete(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.name(),""));
}

StatusOr<google::test::admin::database::v1::ListBackupsResponse>
DefaultGoldenThingAdminRestStub::ListBackups(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::ListBackupsRequest const& request) {
  return rest_internal::Get<google::test::admin::database::v1::ListBackupsResponse>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.parent(),"/backups"),
{std::make_pair("filter", request.filter()),
std::make_pair("page_size", std::to_string(request.page_size())),
std::make_pair("page_token", request.page_token())});
}

StatusOr<google::longrunning::Operation>
DefaultGoldenThingAdminRestStub::RestoreDatabase(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::RestoreDatabaseRequest const& request) {
  return rest_internal::Post<google::longrunning::Operation>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.parent(),"/databases:restore"));
}

StatusOr<google::test::admin::database::v1::ListDatabaseOperationsResponse>
DefaultGoldenThingAdminRestStub::ListDatabaseOperations(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::ListDatabaseOperationsRequest const& request) {
  return rest_internal::Get<google::test::admin::database::v1::ListDatabaseOperationsResponse>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.parent(),"/databaseOperations"),
{std::make_pair("filter", request.filter()),
std::make_pair("page_size", std::to_string(request.page_size())),
std::make_pair("page_token", request.page_token())});
}

StatusOr<google::test::admin::database::v1::ListBackupOperationsResponse>
DefaultGoldenThingAdminRestStub::ListBackupOperations(
      google::cloud::rest_internal::RestContext& rest_context,
      google::test::admin::database::v1::ListBackupOperationsRequest const& request) {
  return rest_internal::Get<google::test::admin::database::v1::ListBackupOperationsResponse>(
      *rest_client_, rest_context, request,
      absl::StrCat("/v1/",request.parent(),"/backupOperations"),
{std::make_pair("filter", request.filter()),
std::make_pair("page_size", std::to_string(request.page_size())),
std::make_pair("page_token", request.page_token())});
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace golden_internal
}  // namespace cloud
}  // namespace google
