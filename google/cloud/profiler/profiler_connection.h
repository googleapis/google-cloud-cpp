// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/devtools/cloudprofiler/v2/profiler.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CLOUDPROFILER_PROFILER_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CLOUDPROFILER_PROFILER_CONNECTION_H

#include "google/cloud/cloudprofiler/internal/profiler_retry_traits.h"
#include "google/cloud/cloudprofiler/internal/profiler_stub.h"
#include "google/cloud/cloudprofiler/profiler_connection_idempotency_policy.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace cloudprofiler {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ProfilerServiceRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        cloudprofiler_internal::ProfilerServiceRetryTraits>;

using ProfilerServiceLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        cloudprofiler_internal::ProfilerServiceRetryTraits>;

using ProfilerServiceLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        cloudprofiler_internal::ProfilerServiceRetryTraits>;

class ProfilerServiceConnection {
 public:
  virtual ~ProfilerServiceConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StatusOr<google::devtools::cloudprofiler::v2::Profile> CreateProfile(
      google::devtools::cloudprofiler::v2::CreateProfileRequest const& request);

  virtual StatusOr<google::devtools::cloudprofiler::v2::Profile>
  CreateOfflineProfile(
      google::devtools::cloudprofiler::v2::CreateOfflineProfileRequest const&
          request);

  virtual StatusOr<google::devtools::cloudprofiler::v2::Profile> UpdateProfile(
      google::devtools::cloudprofiler::v2::UpdateProfileRequest const& request);
};

std::shared_ptr<ProfilerServiceConnection> MakeProfilerServiceConnection(
    Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudprofiler
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace cloudprofiler_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<cloudprofiler::ProfilerServiceConnection>
MakeProfilerServiceConnection(std::shared_ptr<ProfilerServiceStub> stub,
                              Options options);

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudprofiler_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CLOUDPROFILER_PROFILER_CONNECTION_H
