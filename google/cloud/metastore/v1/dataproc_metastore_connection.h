// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/metastore/v1/metastore.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_METASTORE_V1_DATAPROC_METASTORE_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_METASTORE_V1_DATAPROC_METASTORE_CONNECTION_H

#include "google/cloud/metastore/v1/dataproc_metastore_connection_idempotency_policy.h"
#include "google/cloud/metastore/v1/internal/dataproc_metastore_retry_traits.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/internal/retry_policy_impl.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/cloud/metastore/v1/metastore.pb.h>
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace metastore_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using DataprocMetastoreRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        metastore_v1_internal::DataprocMetastoreRetryTraits>;

using DataprocMetastoreLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        metastore_v1_internal::DataprocMetastoreRetryTraits>;

using DataprocMetastoreLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        metastore_v1_internal::DataprocMetastoreRetryTraits>;

/**
 * The `DataprocMetastoreConnection` object for `DataprocMetastoreClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `DataprocMetastoreClient`. This allows users to inject custom
 * behavior (e.g., with a Google Mock object) when writing tests that use
 * objects of type `DataprocMetastoreClient`.
 *
 * To create a concrete instance, see `MakeDataprocMetastoreConnection()`.
 *
 * For mocking, see `metastore_v1_mocks::MockDataprocMetastoreConnection`.
 */
class DataprocMetastoreConnection {
 public:
  virtual ~DataprocMetastoreConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StreamRange<google::cloud::metastore::v1::Service> ListServices(
      google::cloud::metastore::v1::ListServicesRequest request);

  virtual StatusOr<google::cloud::metastore::v1::Service> GetService(
      google::cloud::metastore::v1::GetServiceRequest const& request);

  virtual future<StatusOr<google::cloud::metastore::v1::Service>> CreateService(
      google::cloud::metastore::v1::CreateServiceRequest const& request);

  virtual future<StatusOr<google::cloud::metastore::v1::Service>> UpdateService(
      google::cloud::metastore::v1::UpdateServiceRequest const& request);

  virtual future<StatusOr<google::cloud::metastore::v1::OperationMetadata>>
  DeleteService(
      google::cloud::metastore::v1::DeleteServiceRequest const& request);

  virtual StreamRange<google::cloud::metastore::v1::MetadataImport>
  ListMetadataImports(
      google::cloud::metastore::v1::ListMetadataImportsRequest request);

  virtual StatusOr<google::cloud::metastore::v1::MetadataImport>
  GetMetadataImport(
      google::cloud::metastore::v1::GetMetadataImportRequest const& request);

  virtual future<StatusOr<google::cloud::metastore::v1::MetadataImport>>
  CreateMetadataImport(
      google::cloud::metastore::v1::CreateMetadataImportRequest const& request);

  virtual future<StatusOr<google::cloud::metastore::v1::MetadataImport>>
  UpdateMetadataImport(
      google::cloud::metastore::v1::UpdateMetadataImportRequest const& request);

  virtual future<StatusOr<google::cloud::metastore::v1::MetadataExport>>
  ExportMetadata(
      google::cloud::metastore::v1::ExportMetadataRequest const& request);

  virtual future<StatusOr<google::cloud::metastore::v1::Restore>>
  RestoreService(
      google::cloud::metastore::v1::RestoreServiceRequest const& request);

  virtual StreamRange<google::cloud::metastore::v1::Backup> ListBackups(
      google::cloud::metastore::v1::ListBackupsRequest request);

  virtual StatusOr<google::cloud::metastore::v1::Backup> GetBackup(
      google::cloud::metastore::v1::GetBackupRequest const& request);

  virtual future<StatusOr<google::cloud::metastore::v1::Backup>> CreateBackup(
      google::cloud::metastore::v1::CreateBackupRequest const& request);

  virtual future<StatusOr<google::cloud::metastore::v1::OperationMetadata>>
  DeleteBackup(
      google::cloud::metastore::v1::DeleteBackupRequest const& request);
};

/**
 * A factory function to construct an object of type
 * `DataprocMetastoreConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of
 * DataprocMetastoreClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `DataprocMetastoreConnection`. Expected options are any of the types
 * in the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * - `google::cloud::metastore_v1::DataprocMetastorePolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `DataprocMetastoreConnection` created
 * by this function.
 */
std::shared_ptr<DataprocMetastoreConnection> MakeDataprocMetastoreConnection(
    Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace metastore_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_METASTORE_V1_DATAPROC_METASTORE_CONNECTION_H
