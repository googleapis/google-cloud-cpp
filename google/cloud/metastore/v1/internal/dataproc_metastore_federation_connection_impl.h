// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/metastore/v1/metastore_federation.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_METASTORE_V1_INTERNAL_DATAPROC_METASTORE_FEDERATION_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_METASTORE_V1_INTERNAL_DATAPROC_METASTORE_FEDERATION_CONNECTION_IMPL_H

#include "google/cloud/metastore/v1/dataproc_metastore_federation_connection.h"
#include "google/cloud/metastore/v1/dataproc_metastore_federation_connection_idempotency_policy.h"
#include "google/cloud/metastore/v1/dataproc_metastore_federation_options.h"
#include "google/cloud/metastore/v1/internal/dataproc_metastore_federation_retry_traits.h"
#include "google/cloud/metastore/v1/internal/dataproc_metastore_federation_stub.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace metastore_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class DataprocMetastoreFederationConnectionImpl
    : public metastore_v1::DataprocMetastoreFederationConnection {
 public:
  ~DataprocMetastoreFederationConnectionImpl() override = default;

  DataprocMetastoreFederationConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<metastore_v1_internal::DataprocMetastoreFederationStub>
          stub,
      Options options);

  Options options() override { return options_; }

  StreamRange<google::cloud::metastore::v1::Federation> ListFederations(
      google::cloud::metastore::v1::ListFederationsRequest request) override;

  StatusOr<google::cloud::metastore::v1::Federation> GetFederation(
      google::cloud::metastore::v1::GetFederationRequest const& request)
      override;

  future<StatusOr<google::cloud::metastore::v1::Federation>> CreateFederation(
      google::cloud::metastore::v1::CreateFederationRequest const& request)
      override;

  future<StatusOr<google::cloud::metastore::v1::Federation>> UpdateFederation(
      google::cloud::metastore::v1::UpdateFederationRequest const& request)
      override;

  future<StatusOr<google::cloud::metastore::v1::OperationMetadata>>
  DeleteFederation(google::cloud::metastore::v1::DeleteFederationRequest const&
                       request) override;

 private:
  std::unique_ptr<metastore_v1::DataprocMetastoreFederationRetryPolicy>
  retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            metastore_v1::DataprocMetastoreFederationRetryPolicyOption>()) {
      return options
          .get<metastore_v1::DataprocMetastoreFederationRetryPolicyOption>()
          ->clone();
    }
    return options_
        .get<metastore_v1::DataprocMetastoreFederationRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            metastore_v1::DataprocMetastoreFederationBackoffPolicyOption>()) {
      return options
          .get<metastore_v1::DataprocMetastoreFederationBackoffPolicyOption>()
          ->clone();
    }
    return options_
        .get<metastore_v1::DataprocMetastoreFederationBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<
      metastore_v1::DataprocMetastoreFederationConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            metastore_v1::
                DataprocMetastoreFederationConnectionIdempotencyPolicyOption>()) {
      return options
          .get<
              metastore_v1::
                  DataprocMetastoreFederationConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<metastore_v1::
                 DataprocMetastoreFederationConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<PollingPolicy> polling_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            metastore_v1::DataprocMetastoreFederationPollingPolicyOption>()) {
      return options
          .get<metastore_v1::DataprocMetastoreFederationPollingPolicyOption>()
          ->clone();
    }
    return options_
        .get<metastore_v1::DataprocMetastoreFederationPollingPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<metastore_v1_internal::DataprocMetastoreFederationStub> stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace metastore_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_METASTORE_V1_INTERNAL_DATAPROC_METASTORE_FEDERATION_CONNECTION_IMPL_H
