// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/pubsub/v1/pubsub.proto

#include "google/cloud/pubsub/v1/subscriber_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace pubsub_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

SubscriberConnectionIdempotencyPolicy::~SubscriberConnectionIdempotencyPolicy() = default;

std::unique_ptr<SubscriberConnectionIdempotencyPolicy>
SubscriberConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<SubscriberConnectionIdempotencyPolicy>(*this);
}

Idempotency SubscriberConnectionIdempotencyPolicy::CreateSubscription(google::pubsub::v1::Subscription const&) {
  return Idempotency::kIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::GetSubscription(google::pubsub::v1::GetSubscriptionRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::UpdateSubscription(google::pubsub::v1::UpdateSubscriptionRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::ListSubscriptions(google::pubsub::v1::ListSubscriptionsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::DeleteSubscription(google::pubsub::v1::DeleteSubscriptionRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::Pull(google::pubsub::v1::PullRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::ModifyPushConfig(google::pubsub::v1::ModifyPushConfigRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::GetSnapshot(google::pubsub::v1::GetSnapshotRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::ListSnapshots(google::pubsub::v1::ListSnapshotsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::CreateSnapshot(google::pubsub::v1::CreateSnapshotRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::UpdateSnapshot(google::pubsub::v1::UpdateSnapshotRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::DeleteSnapshot(google::pubsub::v1::DeleteSnapshotRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency SubscriberConnectionIdempotencyPolicy::Seek(google::pubsub::v1::SeekRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<SubscriberConnectionIdempotencyPolicy>
    MakeDefaultSubscriberConnectionIdempotencyPolicy() {
  return std::make_unique<SubscriberConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace pubsub_v1
}  // namespace cloud
}  // namespace google
