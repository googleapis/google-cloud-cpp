// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/pubsub/v1/pubsub.proto

#include "google/cloud/pubsub/v1/internal/publisher_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace pubsub_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

PublisherTracingConnection::PublisherTracingConnection(
    std::shared_ptr<pubsub_v1::PublisherConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::pubsub::v1::Topic>
PublisherTracingConnection::CreateTopic(google::pubsub::v1::Topic const& request) {
  auto span = internal::MakeSpan("pubsub_v1::PublisherConnection::CreateTopic");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateTopic(request));
}

StatusOr<google::pubsub::v1::Topic>
PublisherTracingConnection::UpdateTopic(google::pubsub::v1::UpdateTopicRequest const& request) {
  auto span = internal::MakeSpan("pubsub_v1::PublisherConnection::UpdateTopic");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateTopic(request));
}

StatusOr<google::pubsub::v1::PublishResponse>
PublisherTracingConnection::Publish(google::pubsub::v1::PublishRequest const& request) {
  auto span = internal::MakeSpan("pubsub_v1::PublisherConnection::Publish");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->Publish(request));
}

StatusOr<google::pubsub::v1::Topic>
PublisherTracingConnection::GetTopic(google::pubsub::v1::GetTopicRequest const& request) {
  auto span = internal::MakeSpan("pubsub_v1::PublisherConnection::GetTopic");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetTopic(request));
}

StreamRange<google::pubsub::v1::Topic>
PublisherTracingConnection::ListTopics(google::pubsub::v1::ListTopicsRequest request) {
  auto span = internal::MakeSpan("pubsub_v1::PublisherConnection::ListTopics");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListTopics(std::move(request));
  return internal::MakeTracedStreamRange<google::pubsub::v1::Topic>(
        std::move(span), std::move(sr));
}

StreamRange<std::string>
PublisherTracingConnection::ListTopicSubscriptions(google::pubsub::v1::ListTopicSubscriptionsRequest request) {
  auto span = internal::MakeSpan("pubsub_v1::PublisherConnection::ListTopicSubscriptions");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListTopicSubscriptions(std::move(request));
  return internal::MakeTracedStreamRange<std::string>(
        std::move(span), std::move(sr));
}

StreamRange<std::string>
PublisherTracingConnection::ListTopicSnapshots(google::pubsub::v1::ListTopicSnapshotsRequest request) {
  auto span = internal::MakeSpan("pubsub_v1::PublisherConnection::ListTopicSnapshots");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListTopicSnapshots(std::move(request));
  return internal::MakeTracedStreamRange<std::string>(
        std::move(span), std::move(sr));
}

Status
PublisherTracingConnection::DeleteTopic(google::pubsub::v1::DeleteTopicRequest const& request) {
  auto span = internal::MakeSpan("pubsub_v1::PublisherConnection::DeleteTopic");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteTopic(request));
}

StatusOr<google::pubsub::v1::DetachSubscriptionResponse>
PublisherTracingConnection::DetachSubscription(google::pubsub::v1::DetachSubscriptionRequest const& request) {
  auto span = internal::MakeSpan("pubsub_v1::PublisherConnection::DetachSubscription");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DetachSubscription(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<pubsub_v1::PublisherConnection>
MakePublisherTracingConnection(
    std::shared_ptr<pubsub_v1::PublisherConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<PublisherTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace pubsub_v1_internal
}  // namespace cloud
}  // namespace google
