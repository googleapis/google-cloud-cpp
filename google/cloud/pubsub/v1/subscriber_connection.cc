// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/pubsub/v1/pubsub.proto

#include "google/cloud/pubsub/v1/subscriber_connection.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/pubsub/v1/internal/subscriber_connection_impl.h"
#include "google/cloud/pubsub/v1/internal/subscriber_option_defaults.h"
#include "google/cloud/pubsub/v1/internal/subscriber_stub_factory.h"
#include "google/cloud/pubsub/v1/internal/subscriber_tracing_connection.h"
#include "google/cloud/pubsub/v1/subscriber_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace pubsub_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SubscriberConnection::~SubscriberConnection() = default;

StatusOr<google::pubsub::v1::Subscription>
SubscriberConnection::CreateSubscription(
    google::pubsub::v1::Subscription const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::pubsub::v1::Subscription>
SubscriberConnection::GetSubscription(
    google::pubsub::v1::GetSubscriptionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::pubsub::v1::Subscription>
SubscriberConnection::UpdateSubscription(
    google::pubsub::v1::UpdateSubscriptionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::pubsub::v1::Subscription> SubscriberConnection::ListSubscriptions(
    google::pubsub::v1::ListSubscriptionsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::pubsub::v1::Subscription>>();
}

Status
SubscriberConnection::DeleteSubscription(
    google::pubsub::v1::DeleteSubscriptionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::pubsub::v1::PullResponse>
SubscriberConnection::Pull(
    google::pubsub::v1::PullRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::unique_ptr<::google::cloud::AsyncStreamingReadWriteRpc<
    google::pubsub::v1::StreamingPullRequest,
    google::pubsub::v1::StreamingPullResponse>>
SubscriberConnection::AsyncStreamingPull() {
  return std::make_unique<
      ::google::cloud::internal::AsyncStreamingReadWriteRpcError<
          google::pubsub::v1::StreamingPullRequest,
          google::pubsub::v1::StreamingPullResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

Status
SubscriberConnection::ModifyPushConfig(
    google::pubsub::v1::ModifyPushConfigRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::pubsub::v1::Snapshot>
SubscriberConnection::GetSnapshot(
    google::pubsub::v1::GetSnapshotRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::pubsub::v1::Snapshot> SubscriberConnection::ListSnapshots(
    google::pubsub::v1::ListSnapshotsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::pubsub::v1::Snapshot>>();
}

StatusOr<google::pubsub::v1::Snapshot>
SubscriberConnection::CreateSnapshot(
    google::pubsub::v1::CreateSnapshotRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::pubsub::v1::Snapshot>
SubscriberConnection::UpdateSnapshot(
    google::pubsub::v1::UpdateSnapshotRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status
SubscriberConnection::DeleteSnapshot(
    google::pubsub::v1::DeleteSnapshotRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::pubsub::v1::SeekResponse>
SubscriberConnection::Seek(
    google::pubsub::v1::SeekRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<SubscriberConnection> MakeSubscriberConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
      UnifiedCredentialsOptionList,
      SubscriberPolicyOptionList>(options, __func__);
  options = pubsub_v1_internal::SubscriberDefaultOptions(
      std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = pubsub_v1_internal::CreateDefaultSubscriberStub(
    background->cq(), options);
  return pubsub_v1_internal::MakeSubscriberTracingConnection(
      std::make_shared<pubsub_v1_internal::SubscriberConnectionImpl>(
      std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace pubsub_v1
}  // namespace cloud
}  // namespace google
