// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/pubsub/v1/pubsub.proto

#include "google/cloud/pubsub/admin/internal/subscription_admin_round_robin_decorator.h"

namespace google {
namespace cloud {
namespace pubsub_admin_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SubscriptionAdminRoundRobin::SubscriptionAdminRoundRobin(
    std::vector<std::shared_ptr<SubscriptionAdminStub>> children)
    : children_(std::move(children)) {}

StatusOr<google::pubsub::v1::Subscription> SubscriptionAdminRoundRobin::CreateSubscription(
    grpc::ClientContext& context,
    google::pubsub::v1::Subscription const& request) {
  return Child()->CreateSubscription(context, request);
}

StatusOr<google::pubsub::v1::Subscription> SubscriptionAdminRoundRobin::GetSubscription(
    grpc::ClientContext& context,
    google::pubsub::v1::GetSubscriptionRequest const& request) {
  return Child()->GetSubscription(context, request);
}

StatusOr<google::pubsub::v1::Subscription> SubscriptionAdminRoundRobin::UpdateSubscription(
    grpc::ClientContext& context,
    google::pubsub::v1::UpdateSubscriptionRequest const& request) {
  return Child()->UpdateSubscription(context, request);
}

StatusOr<google::pubsub::v1::ListSubscriptionsResponse> SubscriptionAdminRoundRobin::ListSubscriptions(
    grpc::ClientContext& context,
    google::pubsub::v1::ListSubscriptionsRequest const& request) {
  return Child()->ListSubscriptions(context, request);
}

Status SubscriptionAdminRoundRobin::DeleteSubscription(
    grpc::ClientContext& context,
    google::pubsub::v1::DeleteSubscriptionRequest const& request) {
  return Child()->DeleteSubscription(context, request);
}

Status SubscriptionAdminRoundRobin::ModifyPushConfig(
    grpc::ClientContext& context,
    google::pubsub::v1::ModifyPushConfigRequest const& request) {
  return Child()->ModifyPushConfig(context, request);
}

StatusOr<google::pubsub::v1::Snapshot> SubscriptionAdminRoundRobin::GetSnapshot(
    grpc::ClientContext& context,
    google::pubsub::v1::GetSnapshotRequest const& request) {
  return Child()->GetSnapshot(context, request);
}

StatusOr<google::pubsub::v1::ListSnapshotsResponse> SubscriptionAdminRoundRobin::ListSnapshots(
    grpc::ClientContext& context,
    google::pubsub::v1::ListSnapshotsRequest const& request) {
  return Child()->ListSnapshots(context, request);
}

StatusOr<google::pubsub::v1::Snapshot> SubscriptionAdminRoundRobin::CreateSnapshot(
    grpc::ClientContext& context,
    google::pubsub::v1::CreateSnapshotRequest const& request) {
  return Child()->CreateSnapshot(context, request);
}

StatusOr<google::pubsub::v1::Snapshot> SubscriptionAdminRoundRobin::UpdateSnapshot(
    grpc::ClientContext& context,
    google::pubsub::v1::UpdateSnapshotRequest const& request) {
  return Child()->UpdateSnapshot(context, request);
}

Status SubscriptionAdminRoundRobin::DeleteSnapshot(
    grpc::ClientContext& context,
    google::pubsub::v1::DeleteSnapshotRequest const& request) {
  return Child()->DeleteSnapshot(context, request);
}

StatusOr<google::pubsub::v1::SeekResponse> SubscriptionAdminRoundRobin::Seek(
    grpc::ClientContext& context,
    google::pubsub::v1::SeekRequest const& request) {
  return Child()->Seek(context, request);
}

std::shared_ptr<SubscriptionAdminStub>
SubscriptionAdminRoundRobin::Child() {
  std::unique_lock<std::mutex> lk(mu_);
  auto const current = current_;
  if (++current_ == children_.size()) current_ = 0;
  lk.unlock();
  return children_[current];
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace pubsub_admin_internal
}  // namespace cloud
}  // namespace google
