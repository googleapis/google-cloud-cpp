// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/parametermanager/v1/service.proto

#include "google/cloud/parametermanager/v1/parameter_manager_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace parametermanager_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

ParameterManagerConnectionIdempotencyPolicy::
    ~ParameterManagerConnectionIdempotencyPolicy() = default;

std::unique_ptr<ParameterManagerConnectionIdempotencyPolicy>
ParameterManagerConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<ParameterManagerConnectionIdempotencyPolicy>(*this);
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::ListParameters(
    google::cloud::parametermanager::v1::ListParametersRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::GetParameter(
    google::cloud::parametermanager::v1::GetParameterRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::CreateParameter(
    google::cloud::parametermanager::v1::CreateParameterRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::UpdateParameter(
    google::cloud::parametermanager::v1::UpdateParameterRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::DeleteParameter(
    google::cloud::parametermanager::v1::DeleteParameterRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::ListParameterVersions(
    google::cloud::parametermanager::v1::
        ListParameterVersionsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::GetParameterVersion(
    google::cloud::parametermanager::v1::GetParameterVersionRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::RenderParameterVersion(
    google::cloud::parametermanager::v1::RenderParameterVersionRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::CreateParameterVersion(
    google::cloud::parametermanager::v1::CreateParameterVersionRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::UpdateParameterVersion(
    google::cloud::parametermanager::v1::UpdateParameterVersionRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::DeleteParameterVersion(
    google::cloud::parametermanager::v1::DeleteParameterVersionRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::ListLocations(
    google::cloud::location::ListLocationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency ParameterManagerConnectionIdempotencyPolicy::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Idempotency::kIdempotent;
}

std::unique_ptr<ParameterManagerConnectionIdempotencyPolicy>
MakeDefaultParameterManagerConnectionIdempotencyPolicy() {
  return std::make_unique<ParameterManagerConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace parametermanager_v1
}  // namespace cloud
}  // namespace google
