// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/parametermanager/v1/service.proto

#include "google/cloud/parametermanager/v1/internal/parameter_manager_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace parametermanager_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ParameterManagerTracingStub::ParameterManagerTracingStub(
    std::shared_ptr<ParameterManagerStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::parametermanager::v1::ListParametersResponse>
ParameterManagerTracingStub::ListParameters(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::ListParametersRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager", "ListParameters");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListParameters(context, options, request));
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerTracingStub::GetParameter(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::GetParameterRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager", "GetParameter");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetParameter(context, options, request));
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerTracingStub::CreateParameter(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::CreateParameterRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager", "CreateParameter");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateParameter(context, options, request));
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerTracingStub::UpdateParameter(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::UpdateParameterRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager", "UpdateParameter");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateParameter(context, options, request));
}

Status ParameterManagerTracingStub::DeleteParameter(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::DeleteParameterRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager", "DeleteParameter");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteParameter(context, options, request));
}

StatusOr<google::cloud::parametermanager::v1::ListParameterVersionsResponse>
ParameterManagerTracingStub::ListParameterVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::ListParameterVersionsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager",
      "ListParameterVersions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListParameterVersions(context, options, request));
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerTracingStub::GetParameterVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::GetParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager",
      "GetParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetParameterVersion(context, options, request));
}

StatusOr<google::cloud::parametermanager::v1::RenderParameterVersionResponse>
ParameterManagerTracingStub::RenderParameterVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::RenderParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager",
      "RenderParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->RenderParameterVersion(context, options, request));
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerTracingStub::CreateParameterVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::CreateParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager",
      "CreateParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->CreateParameterVersion(context, options, request));
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerTracingStub::UpdateParameterVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::UpdateParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager",
      "UpdateParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->UpdateParameterVersion(context, options, request));
}

Status ParameterManagerTracingStub::DeleteParameterVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::parametermanager::v1::DeleteParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager",
      "DeleteParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->DeleteParameterVersion(context, options, request));
}

StatusOr<google::cloud::location::ListLocationsResponse>
ParameterManagerTracingStub::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager", "ListLocations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListLocations(context, options, request));
}

StatusOr<google::cloud::location::Location>
ParameterManagerTracingStub::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.parametermanager.v1.ParameterManager", "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetLocation(context, options, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<ParameterManagerStub> MakeParameterManagerTracingStub(
    std::shared_ptr<ParameterManagerStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<ParameterManagerTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace parametermanager_v1_internal
}  // namespace cloud
}  // namespace google
