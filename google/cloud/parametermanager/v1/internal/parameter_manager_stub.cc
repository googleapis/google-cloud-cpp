// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/parametermanager/v1/service.proto

#include "google/cloud/parametermanager/v1/internal/parameter_manager_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/parametermanager/v1/service.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace parametermanager_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ParameterManagerStub::~ParameterManagerStub() = default;

StatusOr<google::cloud::parametermanager::v1::ListParametersResponse>
DefaultParameterManagerStub::ListParameters(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::ListParametersRequest const& request) {
  google::cloud::parametermanager::v1::ListParametersResponse response;
  auto status = grpc_stub_->ListParameters(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
DefaultParameterManagerStub::GetParameter(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::GetParameterRequest const& request) {
  google::cloud::parametermanager::v1::Parameter response;
  auto status = grpc_stub_->GetParameter(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
DefaultParameterManagerStub::CreateParameter(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::CreateParameterRequest const&
        request) {
  google::cloud::parametermanager::v1::Parameter response;
  auto status = grpc_stub_->CreateParameter(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
DefaultParameterManagerStub::UpdateParameter(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::UpdateParameterRequest const&
        request) {
  google::cloud::parametermanager::v1::Parameter response;
  auto status = grpc_stub_->UpdateParameter(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultParameterManagerStub::DeleteParameter(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::DeleteParameterRequest const&
        request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteParameter(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::parametermanager::v1::ListParameterVersionsResponse>
DefaultParameterManagerStub::ListParameterVersions(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::ListParameterVersionsRequest const&
        request) {
  google::cloud::parametermanager::v1::ListParameterVersionsResponse response;
  auto status = grpc_stub_->ListParameterVersions(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
DefaultParameterManagerStub::GetParameterVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::GetParameterVersionRequest const&
        request) {
  google::cloud::parametermanager::v1::ParameterVersion response;
  auto status = grpc_stub_->GetParameterVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::parametermanager::v1::RenderParameterVersionResponse>
DefaultParameterManagerStub::RenderParameterVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::RenderParameterVersionRequest const&
        request) {
  google::cloud::parametermanager::v1::RenderParameterVersionResponse response;
  auto status =
      grpc_stub_->RenderParameterVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
DefaultParameterManagerStub::CreateParameterVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::CreateParameterVersionRequest const&
        request) {
  google::cloud::parametermanager::v1::ParameterVersion response;
  auto status =
      grpc_stub_->CreateParameterVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
DefaultParameterManagerStub::UpdateParameterVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::UpdateParameterVersionRequest const&
        request) {
  google::cloud::parametermanager::v1::ParameterVersion response;
  auto status =
      grpc_stub_->UpdateParameterVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultParameterManagerStub::DeleteParameterVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::parametermanager::v1::DeleteParameterVersionRequest const&
        request) {
  google::protobuf::Empty response;
  auto status =
      grpc_stub_->DeleteParameterVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::location::ListLocationsResponse>
DefaultParameterManagerStub::ListLocations(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::ListLocationsRequest const& request) {
  google::cloud::location::ListLocationsResponse response;
  auto status = locations_stub_->ListLocations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::Location>
DefaultParameterManagerStub::GetLocation(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::GetLocationRequest const& request) {
  google::cloud::location::Location response;
  auto status = locations_stub_->GetLocation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace parametermanager_v1_internal
}  // namespace cloud
}  // namespace google
