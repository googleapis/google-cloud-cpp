// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/parametermanager/v1/service.proto

#include "google/cloud/parametermanager/v1/internal/parameter_manager_connection_impl.h"
#include "google/cloud/parametermanager/v1/internal/parameter_manager_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace parametermanager_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace {

std::unique_ptr<parametermanager_v1::ParameterManagerRetryPolicy> retry_policy(
    Options const& options) {
  return options.get<parametermanager_v1::ParameterManagerRetryPolicyOption>()
      ->clone();
}

std::unique_ptr<BackoffPolicy> backoff_policy(Options const& options) {
  return options
      .get<parametermanager_v1::ParameterManagerBackoffPolicyOption>()
      ->clone();
}

std::unique_ptr<
    parametermanager_v1::ParameterManagerConnectionIdempotencyPolicy>
idempotency_policy(Options const& options) {
  return options
      .get<parametermanager_v1::
               ParameterManagerConnectionIdempotencyPolicyOption>()
      ->clone();
}

}  // namespace

ParameterManagerConnectionImpl::ParameterManagerConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<parametermanager_v1_internal::ParameterManagerStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      ParameterManagerConnection::options())) {}

StreamRange<google::cloud::parametermanager::v1::Parameter>
ParameterManagerConnectionImpl::ListParameters(
    google::cloud::parametermanager::v1::ListParametersRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListParameters(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::parametermanager::v1::Parameter>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry =
           std::shared_ptr<parametermanager_v1::ParameterManagerRetryPolicy>(
               retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::parametermanager::v1::ListParametersRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::parametermanager::v1::
                       ListParametersRequest const& request) {
              return stub->ListParameters(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::parametermanager::v1::ListParametersResponse r) {
        std::vector<google::cloud::parametermanager::v1::Parameter> result(
            r.parameters().size());
        auto& messages = *r.mutable_parameters();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerConnectionImpl::GetParameter(
    google::cloud::parametermanager::v1::GetParameterRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetParameter(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::parametermanager::v1::GetParameterRequest const&
                 request) {
        return stub_->GetParameter(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerConnectionImpl::CreateParameter(
    google::cloud::parametermanager::v1::CreateParameterRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateParameter(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::parametermanager::v1::CreateParameterRequest const&
                 request) {
        return stub_->CreateParameter(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerConnectionImpl::UpdateParameter(
    google::cloud::parametermanager::v1::UpdateParameterRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateParameter(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::parametermanager::v1::UpdateParameterRequest const&
                 request) {
        return stub_->UpdateParameter(context, options, request);
      },
      *current, request, __func__);
}

Status ParameterManagerConnectionImpl::DeleteParameter(
    google::cloud::parametermanager::v1::DeleteParameterRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteParameter(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::parametermanager::v1::DeleteParameterRequest const&
                 request) {
        return stub_->DeleteParameter(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerConnectionImpl::ListParameterVersions(
    google::cloud::parametermanager::v1::ListParameterVersionsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency =
      idempotency_policy(*current)->ListParameterVersions(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::parametermanager::v1::ParameterVersion>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry =
           std::shared_ptr<parametermanager_v1::ParameterManagerRetryPolicy>(
               retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options, google::cloud::parametermanager::v1::
                                      ListParameterVersionsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::parametermanager::v1::
                       ListParameterVersionsRequest const& request) {
              return stub->ListParameterVersions(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::parametermanager::v1::ListParameterVersionsResponse r) {
        std::vector<google::cloud::parametermanager::v1::ParameterVersion>
            result(r.parameter_versions().size());
        auto& messages = *r.mutable_parameter_versions();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerConnectionImpl::GetParameterVersion(
    google::cloud::parametermanager::v1::GetParameterVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetParameterVersion(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::parametermanager::v1::GetParameterVersionRequest const&
              request) {
        return stub_->GetParameterVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::parametermanager::v1::RenderParameterVersionResponse>
ParameterManagerConnectionImpl::RenderParameterVersion(
    google::cloud::parametermanager::v1::RenderParameterVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->RenderParameterVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::parametermanager::v1::
                 RenderParameterVersionRequest const& request) {
        return stub_->RenderParameterVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerConnectionImpl::CreateParameterVersion(
    google::cloud::parametermanager::v1::CreateParameterVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateParameterVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::parametermanager::v1::
                 CreateParameterVersionRequest const& request) {
        return stub_->CreateParameterVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerConnectionImpl::UpdateParameterVersion(
    google::cloud::parametermanager::v1::UpdateParameterVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateParameterVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::parametermanager::v1::
                 UpdateParameterVersionRequest const& request) {
        return stub_->UpdateParameterVersion(context, options, request);
      },
      *current, request, __func__);
}

Status ParameterManagerConnectionImpl::DeleteParameterVersion(
    google::cloud::parametermanager::v1::DeleteParameterVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteParameterVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::parametermanager::v1::
                 DeleteParameterVersionRequest const& request) {
        return stub_->DeleteParameterVersion(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::location::Location>
ParameterManagerConnectionImpl::ListLocations(
    google::cloud::location::ListLocationsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListLocations(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::location::Location>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry =
           std::shared_ptr<parametermanager_v1::ParameterManagerRetryPolicy>(
               retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::location::ListLocationsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context, Options const& options,
                google::cloud::location::ListLocationsRequest const& request) {
              return stub->ListLocations(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::location::ListLocationsResponse r) {
        std::vector<google::cloud::location::Location> result(
            r.locations().size());
        auto& messages = *r.mutable_locations();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::location::Location>
ParameterManagerConnectionImpl::GetLocation(
    google::cloud::location::GetLocationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetLocation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::location::GetLocationRequest const& request) {
        return stub_->GetLocation(context, options, request);
      },
      *current, request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace parametermanager_v1_internal
}  // namespace cloud
}  // namespace google
