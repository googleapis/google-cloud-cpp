// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/parametermanager/v1/service.proto

#include "google/cloud/parametermanager/v1/internal/parameter_manager_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace parametermanager_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ParameterManagerTracingConnection::ParameterManagerTracingConnection(
    std::shared_ptr<parametermanager_v1::ParameterManagerConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::parametermanager::v1::Parameter>
ParameterManagerTracingConnection::ListParameters(
    google::cloud::parametermanager::v1::ListParametersRequest request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::ListParameters");
  internal::OTelScope scope(span);
  auto sr = child_->ListParameters(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::parametermanager::v1::Parameter>(std::move(span),
                                                      std::move(sr));
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerTracingConnection::GetParameter(
    google::cloud::parametermanager::v1::GetParameterRequest const& request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::GetParameter");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetParameter(request));
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerTracingConnection::CreateParameter(
    google::cloud::parametermanager::v1::CreateParameterRequest const&
        request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::CreateParameter");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateParameter(request));
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerTracingConnection::UpdateParameter(
    google::cloud::parametermanager::v1::UpdateParameterRequest const&
        request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::UpdateParameter");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateParameter(request));
}

Status ParameterManagerTracingConnection::DeleteParameter(
    google::cloud::parametermanager::v1::DeleteParameterRequest const&
        request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::DeleteParameter");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteParameter(request));
}

StreamRange<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerTracingConnection::ListParameterVersions(
    google::cloud::parametermanager::v1::ListParameterVersionsRequest request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::ListParameterVersions");
  internal::OTelScope scope(span);
  auto sr = child_->ListParameterVersions(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::parametermanager::v1::ParameterVersion>(std::move(span),
                                                             std::move(sr));
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerTracingConnection::GetParameterVersion(
    google::cloud::parametermanager::v1::GetParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::GetParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetParameterVersion(request));
}

StatusOr<google::cloud::parametermanager::v1::RenderParameterVersionResponse>
ParameterManagerTracingConnection::RenderParameterVersion(
    google::cloud::parametermanager::v1::RenderParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::"
      "RenderParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->RenderParameterVersion(request));
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerTracingConnection::CreateParameterVersion(
    google::cloud::parametermanager::v1::CreateParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::"
      "CreateParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateParameterVersion(request));
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerTracingConnection::UpdateParameterVersion(
    google::cloud::parametermanager::v1::UpdateParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::"
      "UpdateParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateParameterVersion(request));
}

Status ParameterManagerTracingConnection::DeleteParameterVersion(
    google::cloud::parametermanager::v1::DeleteParameterVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::"
      "DeleteParameterVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteParameterVersion(request));
}

StreamRange<google::cloud::location::Location>
ParameterManagerTracingConnection::ListLocations(
    google::cloud::location::ListLocationsRequest request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::ListLocations");
  internal::OTelScope scope(span);
  auto sr = child_->ListLocations(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::location::Location>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::location::Location>
ParameterManagerTracingConnection::GetLocation(
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpan(
      "parametermanager_v1::ParameterManagerConnection::GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetLocation(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<parametermanager_v1::ParameterManagerConnection>
MakeParameterManagerTracingConnection(
    std::shared_ptr<parametermanager_v1::ParameterManagerConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<ParameterManagerTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace parametermanager_v1_internal
}  // namespace cloud
}  // namespace google
