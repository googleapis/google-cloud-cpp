// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/parametermanager/v1/service.proto

#include "google/cloud/parametermanager/v1/parameter_manager_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace parametermanager_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ParameterManagerClient::ParameterManagerClient(
    std::shared_ptr<ParameterManagerConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
ParameterManagerClient::~ParameterManagerClient() = default;

StreamRange<google::cloud::parametermanager::v1::Parameter>
ParameterManagerClient::ListParameters(std::string const& parent,
                                       Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::ListParametersRequest request;
  request.set_parent(parent);
  return connection_->ListParameters(request);
}

StreamRange<google::cloud::parametermanager::v1::Parameter>
ParameterManagerClient::ListParameters(
    google::cloud::parametermanager::v1::ListParametersRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListParameters(std::move(request));
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerClient::GetParameter(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::GetParameterRequest request;
  request.set_name(name);
  return connection_->GetParameter(request);
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerClient::GetParameter(
    google::cloud::parametermanager::v1::GetParameterRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetParameter(request);
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerClient::CreateParameter(
    std::string const& parent,
    google::cloud::parametermanager::v1::Parameter const& parameter,
    std::string const& parameter_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::CreateParameterRequest request;
  request.set_parent(parent);
  *request.mutable_parameter() = parameter;
  request.set_parameter_id(parameter_id);
  return connection_->CreateParameter(request);
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerClient::CreateParameter(
    google::cloud::parametermanager::v1::CreateParameterRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateParameter(request);
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerClient::UpdateParameter(
    google::cloud::parametermanager::v1::Parameter const& parameter,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::UpdateParameterRequest request;
  *request.mutable_parameter() = parameter;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateParameter(request);
}

StatusOr<google::cloud::parametermanager::v1::Parameter>
ParameterManagerClient::UpdateParameter(
    google::cloud::parametermanager::v1::UpdateParameterRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateParameter(request);
}

Status ParameterManagerClient::DeleteParameter(std::string const& name,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::DeleteParameterRequest request;
  request.set_name(name);
  return connection_->DeleteParameter(request);
}

Status ParameterManagerClient::DeleteParameter(
    google::cloud::parametermanager::v1::DeleteParameterRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteParameter(request);
}

StreamRange<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerClient::ListParameterVersions(std::string const& parent,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::ListParameterVersionsRequest request;
  request.set_parent(parent);
  return connection_->ListParameterVersions(request);
}

StreamRange<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerClient::ListParameterVersions(
    google::cloud::parametermanager::v1::ListParameterVersionsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListParameterVersions(std::move(request));
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerClient::GetParameterVersion(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::GetParameterVersionRequest request;
  request.set_name(name);
  return connection_->GetParameterVersion(request);
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerClient::GetParameterVersion(
    google::cloud::parametermanager::v1::GetParameterVersionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetParameterVersion(request);
}

StatusOr<google::cloud::parametermanager::v1::RenderParameterVersionResponse>
ParameterManagerClient::RenderParameterVersion(std::string const& name,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::RenderParameterVersionRequest request;
  request.set_name(name);
  return connection_->RenderParameterVersion(request);
}

StatusOr<google::cloud::parametermanager::v1::RenderParameterVersionResponse>
ParameterManagerClient::RenderParameterVersion(
    google::cloud::parametermanager::v1::RenderParameterVersionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->RenderParameterVersion(request);
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerClient::CreateParameterVersion(
    std::string const& parent,
    google::cloud::parametermanager::v1::ParameterVersion const&
        parameter_version,
    std::string const& parameter_version_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::CreateParameterVersionRequest request;
  request.set_parent(parent);
  *request.mutable_parameter_version() = parameter_version;
  request.set_parameter_version_id(parameter_version_id);
  return connection_->CreateParameterVersion(request);
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerClient::CreateParameterVersion(
    google::cloud::parametermanager::v1::CreateParameterVersionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateParameterVersion(request);
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerClient::UpdateParameterVersion(
    google::cloud::parametermanager::v1::ParameterVersion const&
        parameter_version,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::UpdateParameterVersionRequest request;
  *request.mutable_parameter_version() = parameter_version;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateParameterVersion(request);
}

StatusOr<google::cloud::parametermanager::v1::ParameterVersion>
ParameterManagerClient::UpdateParameterVersion(
    google::cloud::parametermanager::v1::UpdateParameterVersionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateParameterVersion(request);
}

Status ParameterManagerClient::DeleteParameterVersion(std::string const& name,
                                                      Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::parametermanager::v1::DeleteParameterVersionRequest request;
  request.set_name(name);
  return connection_->DeleteParameterVersion(request);
}

Status ParameterManagerClient::DeleteParameterVersion(
    google::cloud::parametermanager::v1::DeleteParameterVersionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteParameterVersion(request);
}

StreamRange<google::cloud::location::Location>
ParameterManagerClient::ListLocations(
    google::cloud::location::ListLocationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListLocations(std::move(request));
}

StatusOr<google::cloud::location::Location> ParameterManagerClient::GetLocation(
    google::cloud::location::GetLocationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetLocation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace parametermanager_v1
}  // namespace cloud
}  // namespace google
