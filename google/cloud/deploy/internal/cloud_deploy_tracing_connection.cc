// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/deploy/v1/cloud_deploy.proto

#include "google/cloud/deploy/internal/cloud_deploy_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace deploy_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

CloudDeployTracingConnection::CloudDeployTracingConnection(
    std::shared_ptr<deploy::CloudDeployConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::deploy::v1::DeliveryPipeline>
CloudDeployTracingConnection::ListDeliveryPipelines(
    google::cloud::deploy::v1::ListDeliveryPipelinesRequest request) {
  auto span = internal::MakeSpan(
      "deploy::CloudDeployConnection::ListDeliveryPipelines");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListDeliveryPipelines(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::deploy::v1::DeliveryPipeline>(std::move(span),
                                                   std::move(sr));
}

StatusOr<google::cloud::deploy::v1::DeliveryPipeline>
CloudDeployTracingConnection::GetDeliveryPipeline(
    google::cloud::deploy::v1::GetDeliveryPipelineRequest const& request) {
  auto span =
      internal::MakeSpan("deploy::CloudDeployConnection::GetDeliveryPipeline");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetDeliveryPipeline(request));
}

future<StatusOr<google::cloud::deploy::v1::DeliveryPipeline>>
CloudDeployTracingConnection::CreateDeliveryPipeline(
    google::cloud::deploy::v1::CreateDeliveryPipelineRequest const& request) {
  return child_->CreateDeliveryPipeline(request);
}

future<StatusOr<google::cloud::deploy::v1::DeliveryPipeline>>
CloudDeployTracingConnection::UpdateDeliveryPipeline(
    google::cloud::deploy::v1::UpdateDeliveryPipelineRequest const& request) {
  return child_->UpdateDeliveryPipeline(request);
}

future<StatusOr<google::cloud::deploy::v1::OperationMetadata>>
CloudDeployTracingConnection::DeleteDeliveryPipeline(
    google::cloud::deploy::v1::DeleteDeliveryPipelineRequest const& request) {
  return child_->DeleteDeliveryPipeline(request);
}

StreamRange<google::cloud::deploy::v1::Target>
CloudDeployTracingConnection::ListTargets(
    google::cloud::deploy::v1::ListTargetsRequest request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::ListTargets");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListTargets(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::deploy::v1::Target>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::deploy::v1::Target>
CloudDeployTracingConnection::GetTarget(
    google::cloud::deploy::v1::GetTargetRequest const& request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::GetTarget");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetTarget(request));
}

future<StatusOr<google::cloud::deploy::v1::Target>>
CloudDeployTracingConnection::CreateTarget(
    google::cloud::deploy::v1::CreateTargetRequest const& request) {
  return child_->CreateTarget(request);
}

future<StatusOr<google::cloud::deploy::v1::Target>>
CloudDeployTracingConnection::UpdateTarget(
    google::cloud::deploy::v1::UpdateTargetRequest const& request) {
  return child_->UpdateTarget(request);
}

future<StatusOr<google::cloud::deploy::v1::OperationMetadata>>
CloudDeployTracingConnection::DeleteTarget(
    google::cloud::deploy::v1::DeleteTargetRequest const& request) {
  return child_->DeleteTarget(request);
}

StreamRange<google::cloud::deploy::v1::Release>
CloudDeployTracingConnection::ListReleases(
    google::cloud::deploy::v1::ListReleasesRequest request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::ListReleases");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListReleases(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::deploy::v1::Release>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::deploy::v1::Release>
CloudDeployTracingConnection::GetRelease(
    google::cloud::deploy::v1::GetReleaseRequest const& request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::GetRelease");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRelease(request));
}

future<StatusOr<google::cloud::deploy::v1::Release>>
CloudDeployTracingConnection::CreateRelease(
    google::cloud::deploy::v1::CreateReleaseRequest const& request) {
  return child_->CreateRelease(request);
}

StatusOr<google::cloud::deploy::v1::AbandonReleaseResponse>
CloudDeployTracingConnection::AbandonRelease(
    google::cloud::deploy::v1::AbandonReleaseRequest const& request) {
  auto span =
      internal::MakeSpan("deploy::CloudDeployConnection::AbandonRelease");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->AbandonRelease(request));
}

StatusOr<google::cloud::deploy::v1::ApproveRolloutResponse>
CloudDeployTracingConnection::ApproveRollout(
    google::cloud::deploy::v1::ApproveRolloutRequest const& request) {
  auto span =
      internal::MakeSpan("deploy::CloudDeployConnection::ApproveRollout");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ApproveRollout(request));
}

StreamRange<google::cloud::deploy::v1::Rollout>
CloudDeployTracingConnection::ListRollouts(
    google::cloud::deploy::v1::ListRolloutsRequest request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::ListRollouts");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListRollouts(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::deploy::v1::Rollout>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::deploy::v1::Rollout>
CloudDeployTracingConnection::GetRollout(
    google::cloud::deploy::v1::GetRolloutRequest const& request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::GetRollout");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRollout(request));
}

future<StatusOr<google::cloud::deploy::v1::Rollout>>
CloudDeployTracingConnection::CreateRollout(
    google::cloud::deploy::v1::CreateRolloutRequest const& request) {
  return child_->CreateRollout(request);
}

StatusOr<google::cloud::deploy::v1::RetryJobResponse>
CloudDeployTracingConnection::RetryJob(
    google::cloud::deploy::v1::RetryJobRequest const& request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::RetryJob");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->RetryJob(request));
}

StreamRange<google::cloud::deploy::v1::JobRun>
CloudDeployTracingConnection::ListJobRuns(
    google::cloud::deploy::v1::ListJobRunsRequest request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::ListJobRuns");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListJobRuns(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::deploy::v1::JobRun>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::deploy::v1::JobRun>
CloudDeployTracingConnection::GetJobRun(
    google::cloud::deploy::v1::GetJobRunRequest const& request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::GetJobRun");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetJobRun(request));
}

StatusOr<google::cloud::deploy::v1::Config>
CloudDeployTracingConnection::GetConfig(
    google::cloud::deploy::v1::GetConfigRequest const& request) {
  auto span = internal::MakeSpan("deploy::CloudDeployConnection::GetConfig");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetConfig(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<deploy::CloudDeployConnection> MakeCloudDeployTracingConnection(
    std::shared_ptr<deploy::CloudDeployConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<CloudDeployTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace deploy_internal
}  // namespace cloud
}  // namespace google
