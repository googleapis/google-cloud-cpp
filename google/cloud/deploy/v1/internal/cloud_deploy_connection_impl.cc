// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/deploy/v1/cloud_deploy.proto

#include "google/cloud/deploy/v1/internal/cloud_deploy_connection_impl.h"
#include "google/cloud/deploy/v1/internal/cloud_deploy_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace deploy_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

CloudDeployConnectionImpl::CloudDeployConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<deploy_v1_internal::CloudDeployStub> stub, Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      CloudDeployConnection::options())) {}

StreamRange<google::cloud::deploy::v1::DeliveryPipeline>
CloudDeployConnectionImpl::ListDeliveryPipelines(
    google::cloud::deploy::v1::ListDeliveryPipelinesRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<deploy_v1::CloudDeployRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListDeliveryPipelines(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::deploy::v1::DeliveryPipeline>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::deploy::v1::ListDeliveryPipelinesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context,
                google::cloud::deploy::v1::ListDeliveryPipelinesRequest const&
                    request) {
              return stub->ListDeliveryPipelines(context, request);
            },
            r, function_name);
      },
      [](google::cloud::deploy::v1::ListDeliveryPipelinesResponse r) {
        std::vector<google::cloud::deploy::v1::DeliveryPipeline> result(
            r.delivery_pipelines().size());
        auto& messages = *r.mutable_delivery_pipelines();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::deploy::v1::DeliveryPipeline>
CloudDeployConnectionImpl::GetDeliveryPipeline(
    google::cloud::deploy::v1::GetDeliveryPipelineRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetDeliveryPipeline(request),
      [this](grpc::ClientContext& context,
             google::cloud::deploy::v1::GetDeliveryPipelineRequest const&
                 request) {
        return stub_->GetDeliveryPipeline(context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::deploy::v1::DeliveryPipeline>>
CloudDeployConnectionImpl::CreateDeliveryPipeline(
    google::cloud::deploy::v1::CreateDeliveryPipelineRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::deploy::v1::DeliveryPipeline>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::deploy::v1::CreateDeliveryPipelineRequest const&
                 request) {
        return stub->AsyncCreateDeliveryPipeline(cq, std::move(context),
                                                 request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::deploy::v1::DeliveryPipeline>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateDeliveryPipeline(request), polling_policy(),
      __func__);
}

future<StatusOr<google::cloud::deploy::v1::DeliveryPipeline>>
CloudDeployConnectionImpl::UpdateDeliveryPipeline(
    google::cloud::deploy::v1::UpdateDeliveryPipelineRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::deploy::v1::DeliveryPipeline>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::deploy::v1::UpdateDeliveryPipelineRequest const&
                 request) {
        return stub->AsyncUpdateDeliveryPipeline(cq, std::move(context),
                                                 request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::deploy::v1::DeliveryPipeline>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateDeliveryPipeline(request), polling_policy(),
      __func__);
}

future<StatusOr<google::cloud::deploy::v1::OperationMetadata>>
CloudDeployConnectionImpl::DeleteDeliveryPipeline(
    google::cloud::deploy::v1::DeleteDeliveryPipelineRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::deploy::v1::OperationMetadata>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::deploy::v1::DeleteDeliveryPipelineRequest const&
                 request) {
        return stub->AsyncDeleteDeliveryPipeline(cq, std::move(context),
                                                 request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultMetadata<
          google::cloud::deploy::v1::OperationMetadata>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteDeliveryPipeline(request), polling_policy(),
      __func__);
}

StreamRange<google::cloud::deploy::v1::Target>
CloudDeployConnectionImpl::ListTargets(
    google::cloud::deploy::v1::ListTargetsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<deploy_v1::CloudDeployRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListTargets(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::deploy::v1::Target>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::deploy::v1::ListTargetsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context,
                google::cloud::deploy::v1::ListTargetsRequest const& request) {
              return stub->ListTargets(context, request);
            },
            r, function_name);
      },
      [](google::cloud::deploy::v1::ListTargetsResponse r) {
        std::vector<google::cloud::deploy::v1::Target> result(
            r.targets().size());
        auto& messages = *r.mutable_targets();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::deploy::v1::Target>
CloudDeployConnectionImpl::GetTarget(
    google::cloud::deploy::v1::GetTargetRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetTarget(request),
      [this](grpc::ClientContext& context,
             google::cloud::deploy::v1::GetTargetRequest const& request) {
        return stub_->GetTarget(context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::deploy::v1::Target>>
CloudDeployConnectionImpl::CreateTarget(
    google::cloud::deploy::v1::CreateTargetRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::deploy::v1::Target>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::deploy::v1::CreateTargetRequest const& request) {
        return stub->AsyncCreateTarget(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::deploy::v1::Target>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateTarget(request), polling_policy(), __func__);
}

future<StatusOr<google::cloud::deploy::v1::Target>>
CloudDeployConnectionImpl::UpdateTarget(
    google::cloud::deploy::v1::UpdateTargetRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::deploy::v1::Target>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::deploy::v1::UpdateTargetRequest const& request) {
        return stub->AsyncUpdateTarget(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::deploy::v1::Target>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateTarget(request), polling_policy(), __func__);
}

future<StatusOr<google::cloud::deploy::v1::OperationMetadata>>
CloudDeployConnectionImpl::DeleteTarget(
    google::cloud::deploy::v1::DeleteTargetRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::deploy::v1::OperationMetadata>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::deploy::v1::DeleteTargetRequest const& request) {
        return stub->AsyncDeleteTarget(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultMetadata<
          google::cloud::deploy::v1::OperationMetadata>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteTarget(request), polling_policy(), __func__);
}

StreamRange<google::cloud::deploy::v1::Release>
CloudDeployConnectionImpl::ListReleases(
    google::cloud::deploy::v1::ListReleasesRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<deploy_v1::CloudDeployRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListReleases(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::deploy::v1::Release>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::deploy::v1::ListReleasesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context,
                google::cloud::deploy::v1::ListReleasesRequest const& request) {
              return stub->ListReleases(context, request);
            },
            r, function_name);
      },
      [](google::cloud::deploy::v1::ListReleasesResponse r) {
        std::vector<google::cloud::deploy::v1::Release> result(
            r.releases().size());
        auto& messages = *r.mutable_releases();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::deploy::v1::Release>
CloudDeployConnectionImpl::GetRelease(
    google::cloud::deploy::v1::GetReleaseRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetRelease(request),
      [this](grpc::ClientContext& context,
             google::cloud::deploy::v1::GetReleaseRequest const& request) {
        return stub_->GetRelease(context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::deploy::v1::Release>>
CloudDeployConnectionImpl::CreateRelease(
    google::cloud::deploy::v1::CreateReleaseRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::deploy::v1::Release>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::deploy::v1::CreateReleaseRequest const& request) {
        return stub->AsyncCreateRelease(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::deploy::v1::Release>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateRelease(request), polling_policy(), __func__);
}

StatusOr<google::cloud::deploy::v1::AbandonReleaseResponse>
CloudDeployConnectionImpl::AbandonRelease(
    google::cloud::deploy::v1::AbandonReleaseRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AbandonRelease(request),
      [this](grpc::ClientContext& context,
             google::cloud::deploy::v1::AbandonReleaseRequest const& request) {
        return stub_->AbandonRelease(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::deploy::v1::ApproveRolloutResponse>
CloudDeployConnectionImpl::ApproveRollout(
    google::cloud::deploy::v1::ApproveRolloutRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ApproveRollout(request),
      [this](grpc::ClientContext& context,
             google::cloud::deploy::v1::ApproveRolloutRequest const& request) {
        return stub_->ApproveRollout(context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::deploy::v1::Rollout>
CloudDeployConnectionImpl::ListRollouts(
    google::cloud::deploy::v1::ListRolloutsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<deploy_v1::CloudDeployRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListRollouts(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::deploy::v1::Rollout>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::deploy::v1::ListRolloutsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context,
                google::cloud::deploy::v1::ListRolloutsRequest const& request) {
              return stub->ListRollouts(context, request);
            },
            r, function_name);
      },
      [](google::cloud::deploy::v1::ListRolloutsResponse r) {
        std::vector<google::cloud::deploy::v1::Rollout> result(
            r.rollouts().size());
        auto& messages = *r.mutable_rollouts();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::deploy::v1::Rollout>
CloudDeployConnectionImpl::GetRollout(
    google::cloud::deploy::v1::GetRolloutRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetRollout(request),
      [this](grpc::ClientContext& context,
             google::cloud::deploy::v1::GetRolloutRequest const& request) {
        return stub_->GetRollout(context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::deploy::v1::Rollout>>
CloudDeployConnectionImpl::CreateRollout(
    google::cloud::deploy::v1::CreateRolloutRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::deploy::v1::Rollout>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::deploy::v1::CreateRolloutRequest const& request) {
        return stub->AsyncCreateRollout(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::deploy::v1::Rollout>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateRollout(request), polling_policy(), __func__);
}

StatusOr<google::cloud::deploy::v1::RetryJobResponse>
CloudDeployConnectionImpl::RetryJob(
    google::cloud::deploy::v1::RetryJobRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->RetryJob(request),
      [this](grpc::ClientContext& context,
             google::cloud::deploy::v1::RetryJobRequest const& request) {
        return stub_->RetryJob(context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::deploy::v1::JobRun>
CloudDeployConnectionImpl::ListJobRuns(
    google::cloud::deploy::v1::ListJobRunsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<deploy_v1::CloudDeployRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListJobRuns(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::deploy::v1::JobRun>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::deploy::v1::ListJobRunsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context,
                google::cloud::deploy::v1::ListJobRunsRequest const& request) {
              return stub->ListJobRuns(context, request);
            },
            r, function_name);
      },
      [](google::cloud::deploy::v1::ListJobRunsResponse r) {
        std::vector<google::cloud::deploy::v1::JobRun> result(
            r.job_runs().size());
        auto& messages = *r.mutable_job_runs();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::deploy::v1::JobRun>
CloudDeployConnectionImpl::GetJobRun(
    google::cloud::deploy::v1::GetJobRunRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetJobRun(request),
      [this](grpc::ClientContext& context,
             google::cloud::deploy::v1::GetJobRunRequest const& request) {
        return stub_->GetJobRun(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::deploy::v1::Config>
CloudDeployConnectionImpl::GetConfig(
    google::cloud::deploy::v1::GetConfigRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetConfig(request),
      [this](grpc::ClientContext& context,
             google::cloud::deploy::v1::GetConfigRequest const& request) {
        return stub_->GetConfig(context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace deploy_v1_internal
}  // namespace cloud
}  // namespace google
