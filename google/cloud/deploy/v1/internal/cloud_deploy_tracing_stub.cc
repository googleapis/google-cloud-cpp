// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/deploy/v1/cloud_deploy.proto

#include "google/cloud/deploy/v1/internal/cloud_deploy_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace deploy_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

CloudDeployTracingStub::CloudDeployTracingStub(
    std::shared_ptr<CloudDeployStub> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::deploy::v1::ListDeliveryPipelinesResponse>
CloudDeployTracingStub::ListDeliveryPipelines(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::ListDeliveryPipelinesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "ListDeliveryPipelines");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListDeliveryPipelines(context, request));
}

StatusOr<google::cloud::deploy::v1::DeliveryPipeline>
CloudDeployTracingStub::GetDeliveryPipeline(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::GetDeliveryPipelineRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "GetDeliveryPipeline");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetDeliveryPipeline(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudDeployTracingStub::AsyncCreateDeliveryPipeline(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::deploy::v1::CreateDeliveryPipelineRequest const& request) {
  return child_->AsyncCreateDeliveryPipeline(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CloudDeployTracingStub::AsyncUpdateDeliveryPipeline(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::deploy::v1::UpdateDeliveryPipelineRequest const& request) {
  return child_->AsyncUpdateDeliveryPipeline(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CloudDeployTracingStub::AsyncDeleteDeliveryPipeline(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::deploy::v1::DeleteDeliveryPipelineRequest const& request) {
  return child_->AsyncDeleteDeliveryPipeline(cq, std::move(context), request);
}

StatusOr<google::cloud::deploy::v1::ListTargetsResponse>
CloudDeployTracingStub::ListTargets(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::ListTargetsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "ListTargets");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListTargets(context, request));
}

StatusOr<google::cloud::deploy::v1::Target> CloudDeployTracingStub::GetTarget(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::GetTargetRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy", "GetTarget");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetTarget(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudDeployTracingStub::AsyncCreateTarget(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::deploy::v1::CreateTargetRequest const& request) {
  return child_->AsyncCreateTarget(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CloudDeployTracingStub::AsyncUpdateTarget(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::deploy::v1::UpdateTargetRequest const& request) {
  return child_->AsyncUpdateTarget(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CloudDeployTracingStub::AsyncDeleteTarget(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::deploy::v1::DeleteTargetRequest const& request) {
  return child_->AsyncDeleteTarget(cq, std::move(context), request);
}

StatusOr<google::cloud::deploy::v1::ListReleasesResponse>
CloudDeployTracingStub::ListReleases(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::ListReleasesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "ListReleases");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListReleases(context, request));
}

StatusOr<google::cloud::deploy::v1::Release> CloudDeployTracingStub::GetRelease(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::GetReleaseRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "GetRelease");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetRelease(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudDeployTracingStub::AsyncCreateRelease(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::deploy::v1::CreateReleaseRequest const& request) {
  return child_->AsyncCreateRelease(cq, std::move(context), request);
}

StatusOr<google::cloud::deploy::v1::AbandonReleaseResponse>
CloudDeployTracingStub::AbandonRelease(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::AbandonReleaseRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "AbandonRelease");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->AbandonRelease(context, request));
}

StatusOr<google::cloud::deploy::v1::ApproveRolloutResponse>
CloudDeployTracingStub::ApproveRollout(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::ApproveRolloutRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "ApproveRollout");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ApproveRollout(context, request));
}

StatusOr<google::cloud::deploy::v1::ListRolloutsResponse>
CloudDeployTracingStub::ListRollouts(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::ListRolloutsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "ListRollouts");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListRollouts(context, request));
}

StatusOr<google::cloud::deploy::v1::Rollout> CloudDeployTracingStub::GetRollout(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::GetRolloutRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "GetRollout");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetRollout(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudDeployTracingStub::AsyncCreateRollout(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::deploy::v1::CreateRolloutRequest const& request) {
  return child_->AsyncCreateRollout(cq, std::move(context), request);
}

StatusOr<google::cloud::deploy::v1::RetryJobResponse>
CloudDeployTracingStub::RetryJob(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::RetryJobRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy", "RetryJob");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->RetryJob(context, request));
}

StatusOr<google::cloud::deploy::v1::ListJobRunsResponse>
CloudDeployTracingStub::ListJobRuns(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::ListJobRunsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy",
                                     "ListJobRuns");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListJobRuns(context, request));
}

StatusOr<google::cloud::deploy::v1::JobRun> CloudDeployTracingStub::GetJobRun(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::GetJobRunRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy", "GetJobRun");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetJobRun(context, request));
}

StatusOr<google::cloud::deploy::v1::Config> CloudDeployTracingStub::GetConfig(
    grpc::ClientContext& context,
    google::cloud::deploy::v1::GetConfigRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.deploy.v1.CloudDeploy", "GetConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetConfig(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudDeployTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> CloudDeployTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<CloudDeployStub> MakeCloudDeployTracingStub(
    std::shared_ptr<CloudDeployStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<CloudDeployTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace deploy_v1_internal
}  // namespace cloud
}  // namespace google
