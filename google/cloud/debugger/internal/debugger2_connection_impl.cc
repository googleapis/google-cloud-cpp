// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/devtools/clouddebugger/v2/debugger.proto

#include "google/cloud/debugger/internal/debugger2_connection_impl.h"
#include "google/cloud/debugger/internal/debugger2_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace debugger_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

Debugger2ConnectionImpl::Debugger2ConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<debugger_internal::Debugger2Stub> stub,
    Options const& options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      retry_policy_prototype_(
          options.get<debugger::Debugger2RetryPolicyOption>()->clone()),
      backoff_policy_prototype_(
          options.get<debugger::Debugger2BackoffPolicyOption>()->clone()),
      idempotency_policy_(
          options.get<debugger::Debugger2ConnectionIdempotencyPolicyOption>()
              ->clone()) {}

StatusOr<google::devtools::clouddebugger::v2::SetBreakpointResponse>
Debugger2ConnectionImpl::SetBreakpoint(
    google::devtools::clouddebugger::v2::SetBreakpointRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetBreakpoint(request),
      [this](grpc::ClientContext& context,
             google::devtools::clouddebugger::v2::SetBreakpointRequest const&
                 request) { return stub_->SetBreakpoint(context, request); },
      request, __func__);
}

StatusOr<google::devtools::clouddebugger::v2::GetBreakpointResponse>
Debugger2ConnectionImpl::GetBreakpoint(
    google::devtools::clouddebugger::v2::GetBreakpointRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetBreakpoint(request),
      [this](grpc::ClientContext& context,
             google::devtools::clouddebugger::v2::GetBreakpointRequest const&
                 request) { return stub_->GetBreakpoint(context, request); },
      request, __func__);
}

Status Debugger2ConnectionImpl::DeleteBreakpoint(
    google::devtools::clouddebugger::v2::DeleteBreakpointRequest const&
        request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteBreakpoint(request),
      [this](grpc::ClientContext& context,
             google::devtools::clouddebugger::v2::DeleteBreakpointRequest const&
                 request) { return stub_->DeleteBreakpoint(context, request); },
      request, __func__);
}

StatusOr<google::devtools::clouddebugger::v2::ListBreakpointsResponse>
Debugger2ConnectionImpl::ListBreakpoints(
    google::devtools::clouddebugger::v2::ListBreakpointsRequest const&
        request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ListBreakpoints(request),
      [this](grpc::ClientContext& context,
             google::devtools::clouddebugger::v2::ListBreakpointsRequest const&
                 request) { return stub_->ListBreakpoints(context, request); },
      request, __func__);
}

StatusOr<google::devtools::clouddebugger::v2::ListDebuggeesResponse>
Debugger2ConnectionImpl::ListDebuggees(
    google::devtools::clouddebugger::v2::ListDebuggeesRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ListDebuggees(request),
      [this](grpc::ClientContext& context,
             google::devtools::clouddebugger::v2::ListDebuggeesRequest const&
                 request) { return stub_->ListDebuggees(context, request); },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace debugger_internal
}  // namespace cloud
}  // namespace google
