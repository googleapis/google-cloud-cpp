// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/networkservices/v1/network_services.proto

#include "google/cloud/networkservices/v1/network_services_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace networkservices_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

NetworkServicesClient::NetworkServicesClient(
    std::shared_ptr<NetworkServicesConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
NetworkServicesClient::~NetworkServicesClient() = default;

StreamRange<google::cloud::networkservices::v1::EndpointPolicy>
NetworkServicesClient::ListEndpointPolicies(std::string const& parent,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::ListEndpointPoliciesRequest request;
  request.set_parent(parent);
  return connection_->ListEndpointPolicies(request);
}

StreamRange<google::cloud::networkservices::v1::EndpointPolicy>
NetworkServicesClient::ListEndpointPolicies(
    google::cloud::networkservices::v1::ListEndpointPoliciesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListEndpointPolicies(std::move(request));
}

StatusOr<google::cloud::networkservices::v1::EndpointPolicy>
NetworkServicesClient::GetEndpointPolicy(std::string const& name,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::GetEndpointPolicyRequest request;
  request.set_name(name);
  return connection_->GetEndpointPolicy(request);
}

StatusOr<google::cloud::networkservices::v1::EndpointPolicy>
NetworkServicesClient::GetEndpointPolicy(
    google::cloud::networkservices::v1::GetEndpointPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetEndpointPolicy(request);
}

future<StatusOr<google::cloud::networkservices::v1::EndpointPolicy>>
NetworkServicesClient::CreateEndpointPolicy(
    std::string const& parent,
    google::cloud::networkservices::v1::EndpointPolicy const& endpoint_policy,
    std::string const& endpoint_policy_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateEndpointPolicyRequest request;
  request.set_parent(parent);
  *request.mutable_endpoint_policy() = endpoint_policy;
  request.set_endpoint_policy_id(endpoint_policy_id);
  return connection_->CreateEndpointPolicy(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::CreateEndpointPolicy(
    NoAwaitTag, std::string const& parent,
    google::cloud::networkservices::v1::EndpointPolicy const& endpoint_policy,
    std::string const& endpoint_policy_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateEndpointPolicyRequest request;
  request.set_parent(parent);
  *request.mutable_endpoint_policy() = endpoint_policy;
  request.set_endpoint_policy_id(endpoint_policy_id);
  return connection_->CreateEndpointPolicy(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::EndpointPolicy>>
NetworkServicesClient::CreateEndpointPolicy(
    google::cloud::networkservices::v1::CreateEndpointPolicyRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateEndpointPolicy(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::CreateEndpointPolicy(
    NoAwaitTag,
    google::cloud::networkservices::v1::CreateEndpointPolicyRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateEndpointPolicy(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::EndpointPolicy>>
NetworkServicesClient::CreateEndpointPolicy(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateEndpointPolicy(operation);
}

future<StatusOr<google::cloud::networkservices::v1::EndpointPolicy>>
NetworkServicesClient::UpdateEndpointPolicy(
    google::cloud::networkservices::v1::EndpointPolicy const& endpoint_policy,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateEndpointPolicyRequest request;
  *request.mutable_endpoint_policy() = endpoint_policy;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateEndpointPolicy(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::UpdateEndpointPolicy(
    NoAwaitTag,
    google::cloud::networkservices::v1::EndpointPolicy const& endpoint_policy,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateEndpointPolicyRequest request;
  *request.mutable_endpoint_policy() = endpoint_policy;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateEndpointPolicy(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::EndpointPolicy>>
NetworkServicesClient::UpdateEndpointPolicy(
    google::cloud::networkservices::v1::UpdateEndpointPolicyRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateEndpointPolicy(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::UpdateEndpointPolicy(
    NoAwaitTag,
    google::cloud::networkservices::v1::UpdateEndpointPolicyRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateEndpointPolicy(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::EndpointPolicy>>
NetworkServicesClient::UpdateEndpointPolicy(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateEndpointPolicy(operation);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteEndpointPolicy(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteEndpointPolicyRequest request;
  request.set_name(name);
  return connection_->DeleteEndpointPolicy(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::DeleteEndpointPolicy(NoAwaitTag, std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteEndpointPolicyRequest request;
  request.set_name(name);
  return connection_->DeleteEndpointPolicy(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteEndpointPolicy(
    google::cloud::networkservices::v1::DeleteEndpointPolicyRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteEndpointPolicy(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::DeleteEndpointPolicy(
    NoAwaitTag,
    google::cloud::networkservices::v1::DeleteEndpointPolicyRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteEndpointPolicy(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteEndpointPolicy(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteEndpointPolicy(operation);
}

StreamRange<google::cloud::networkservices::v1::Gateway>
NetworkServicesClient::ListGateways(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::ListGatewaysRequest request;
  request.set_parent(parent);
  return connection_->ListGateways(request);
}

StreamRange<google::cloud::networkservices::v1::Gateway>
NetworkServicesClient::ListGateways(
    google::cloud::networkservices::v1::ListGatewaysRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListGateways(std::move(request));
}

StatusOr<google::cloud::networkservices::v1::Gateway>
NetworkServicesClient::GetGateway(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::GetGatewayRequest request;
  request.set_name(name);
  return connection_->GetGateway(request);
}

StatusOr<google::cloud::networkservices::v1::Gateway>
NetworkServicesClient::GetGateway(
    google::cloud::networkservices::v1::GetGatewayRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetGateway(request);
}

future<StatusOr<google::cloud::networkservices::v1::Gateway>>
NetworkServicesClient::CreateGateway(
    std::string const& parent,
    google::cloud::networkservices::v1::Gateway const& gateway,
    std::string const& gateway_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateGatewayRequest request;
  request.set_parent(parent);
  *request.mutable_gateway() = gateway;
  request.set_gateway_id(gateway_id);
  return connection_->CreateGateway(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateGateway(
    NoAwaitTag, std::string const& parent,
    google::cloud::networkservices::v1::Gateway const& gateway,
    std::string const& gateway_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateGatewayRequest request;
  request.set_parent(parent);
  *request.mutable_gateway() = gateway;
  request.set_gateway_id(gateway_id);
  return connection_->CreateGateway(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::Gateway>>
NetworkServicesClient::CreateGateway(
    google::cloud::networkservices::v1::CreateGatewayRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateGateway(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateGateway(
    NoAwaitTag,
    google::cloud::networkservices::v1::CreateGatewayRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateGateway(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::Gateway>>
NetworkServicesClient::CreateGateway(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateGateway(operation);
}

future<StatusOr<google::cloud::networkservices::v1::Gateway>>
NetworkServicesClient::UpdateGateway(
    google::cloud::networkservices::v1::Gateway const& gateway,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateGatewayRequest request;
  *request.mutable_gateway() = gateway;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateGateway(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateGateway(
    NoAwaitTag, google::cloud::networkservices::v1::Gateway const& gateway,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateGatewayRequest request;
  *request.mutable_gateway() = gateway;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateGateway(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::Gateway>>
NetworkServicesClient::UpdateGateway(
    google::cloud::networkservices::v1::UpdateGatewayRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateGateway(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateGateway(
    NoAwaitTag,
    google::cloud::networkservices::v1::UpdateGatewayRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateGateway(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::Gateway>>
NetworkServicesClient::UpdateGateway(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateGateway(operation);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteGateway(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteGatewayRequest request;
  request.set_name(name);
  return connection_->DeleteGateway(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteGateway(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteGatewayRequest request;
  request.set_name(name);
  return connection_->DeleteGateway(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteGateway(
    google::cloud::networkservices::v1::DeleteGatewayRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteGateway(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteGateway(
    NoAwaitTag,
    google::cloud::networkservices::v1::DeleteGatewayRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteGateway(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteGateway(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteGateway(operation);
}

StreamRange<google::cloud::networkservices::v1::GrpcRoute>
NetworkServicesClient::ListGrpcRoutes(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::ListGrpcRoutesRequest request;
  request.set_parent(parent);
  return connection_->ListGrpcRoutes(request);
}

StreamRange<google::cloud::networkservices::v1::GrpcRoute>
NetworkServicesClient::ListGrpcRoutes(
    google::cloud::networkservices::v1::ListGrpcRoutesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListGrpcRoutes(std::move(request));
}

StatusOr<google::cloud::networkservices::v1::GrpcRoute>
NetworkServicesClient::GetGrpcRoute(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::GetGrpcRouteRequest request;
  request.set_name(name);
  return connection_->GetGrpcRoute(request);
}

StatusOr<google::cloud::networkservices::v1::GrpcRoute>
NetworkServicesClient::GetGrpcRoute(
    google::cloud::networkservices::v1::GetGrpcRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetGrpcRoute(request);
}

future<StatusOr<google::cloud::networkservices::v1::GrpcRoute>>
NetworkServicesClient::CreateGrpcRoute(
    std::string const& parent,
    google::cloud::networkservices::v1::GrpcRoute const& grpc_route,
    std::string const& grpc_route_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateGrpcRouteRequest request;
  request.set_parent(parent);
  *request.mutable_grpc_route() = grpc_route;
  request.set_grpc_route_id(grpc_route_id);
  return connection_->CreateGrpcRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateGrpcRoute(
    NoAwaitTag, std::string const& parent,
    google::cloud::networkservices::v1::GrpcRoute const& grpc_route,
    std::string const& grpc_route_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateGrpcRouteRequest request;
  request.set_parent(parent);
  *request.mutable_grpc_route() = grpc_route;
  request.set_grpc_route_id(grpc_route_id);
  return connection_->CreateGrpcRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::GrpcRoute>>
NetworkServicesClient::CreateGrpcRoute(
    google::cloud::networkservices::v1::CreateGrpcRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateGrpcRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateGrpcRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::CreateGrpcRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateGrpcRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::GrpcRoute>>
NetworkServicesClient::CreateGrpcRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateGrpcRoute(operation);
}

future<StatusOr<google::cloud::networkservices::v1::GrpcRoute>>
NetworkServicesClient::UpdateGrpcRoute(
    google::cloud::networkservices::v1::GrpcRoute const& grpc_route,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateGrpcRouteRequest request;
  *request.mutable_grpc_route() = grpc_route;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateGrpcRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateGrpcRoute(
    NoAwaitTag, google::cloud::networkservices::v1::GrpcRoute const& grpc_route,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateGrpcRouteRequest request;
  *request.mutable_grpc_route() = grpc_route;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateGrpcRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::GrpcRoute>>
NetworkServicesClient::UpdateGrpcRoute(
    google::cloud::networkservices::v1::UpdateGrpcRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateGrpcRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateGrpcRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::UpdateGrpcRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateGrpcRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::GrpcRoute>>
NetworkServicesClient::UpdateGrpcRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateGrpcRoute(operation);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteGrpcRoute(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteGrpcRouteRequest request;
  request.set_name(name);
  return connection_->DeleteGrpcRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteGrpcRoute(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteGrpcRouteRequest request;
  request.set_name(name);
  return connection_->DeleteGrpcRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteGrpcRoute(
    google::cloud::networkservices::v1::DeleteGrpcRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteGrpcRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteGrpcRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::DeleteGrpcRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteGrpcRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteGrpcRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteGrpcRoute(operation);
}

StreamRange<google::cloud::networkservices::v1::HttpRoute>
NetworkServicesClient::ListHttpRoutes(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::ListHttpRoutesRequest request;
  request.set_parent(parent);
  return connection_->ListHttpRoutes(request);
}

StreamRange<google::cloud::networkservices::v1::HttpRoute>
NetworkServicesClient::ListHttpRoutes(
    google::cloud::networkservices::v1::ListHttpRoutesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListHttpRoutes(std::move(request));
}

StatusOr<google::cloud::networkservices::v1::HttpRoute>
NetworkServicesClient::GetHttpRoute(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::GetHttpRouteRequest request;
  request.set_name(name);
  return connection_->GetHttpRoute(request);
}

StatusOr<google::cloud::networkservices::v1::HttpRoute>
NetworkServicesClient::GetHttpRoute(
    google::cloud::networkservices::v1::GetHttpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetHttpRoute(request);
}

future<StatusOr<google::cloud::networkservices::v1::HttpRoute>>
NetworkServicesClient::CreateHttpRoute(
    std::string const& parent,
    google::cloud::networkservices::v1::HttpRoute const& http_route,
    std::string const& http_route_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateHttpRouteRequest request;
  request.set_parent(parent);
  *request.mutable_http_route() = http_route;
  request.set_http_route_id(http_route_id);
  return connection_->CreateHttpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateHttpRoute(
    NoAwaitTag, std::string const& parent,
    google::cloud::networkservices::v1::HttpRoute const& http_route,
    std::string const& http_route_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateHttpRouteRequest request;
  request.set_parent(parent);
  *request.mutable_http_route() = http_route;
  request.set_http_route_id(http_route_id);
  return connection_->CreateHttpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::HttpRoute>>
NetworkServicesClient::CreateHttpRoute(
    google::cloud::networkservices::v1::CreateHttpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateHttpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateHttpRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::CreateHttpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateHttpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::HttpRoute>>
NetworkServicesClient::CreateHttpRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateHttpRoute(operation);
}

future<StatusOr<google::cloud::networkservices::v1::HttpRoute>>
NetworkServicesClient::UpdateHttpRoute(
    google::cloud::networkservices::v1::HttpRoute const& http_route,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateHttpRouteRequest request;
  *request.mutable_http_route() = http_route;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateHttpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateHttpRoute(
    NoAwaitTag, google::cloud::networkservices::v1::HttpRoute const& http_route,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateHttpRouteRequest request;
  *request.mutable_http_route() = http_route;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateHttpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::HttpRoute>>
NetworkServicesClient::UpdateHttpRoute(
    google::cloud::networkservices::v1::UpdateHttpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateHttpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateHttpRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::UpdateHttpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateHttpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::HttpRoute>>
NetworkServicesClient::UpdateHttpRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateHttpRoute(operation);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteHttpRoute(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteHttpRouteRequest request;
  request.set_name(name);
  return connection_->DeleteHttpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteHttpRoute(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteHttpRouteRequest request;
  request.set_name(name);
  return connection_->DeleteHttpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteHttpRoute(
    google::cloud::networkservices::v1::DeleteHttpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteHttpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteHttpRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::DeleteHttpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteHttpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteHttpRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteHttpRoute(operation);
}

StreamRange<google::cloud::networkservices::v1::TcpRoute>
NetworkServicesClient::ListTcpRoutes(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::ListTcpRoutesRequest request;
  request.set_parent(parent);
  return connection_->ListTcpRoutes(request);
}

StreamRange<google::cloud::networkservices::v1::TcpRoute>
NetworkServicesClient::ListTcpRoutes(
    google::cloud::networkservices::v1::ListTcpRoutesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListTcpRoutes(std::move(request));
}

StatusOr<google::cloud::networkservices::v1::TcpRoute>
NetworkServicesClient::GetTcpRoute(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::GetTcpRouteRequest request;
  request.set_name(name);
  return connection_->GetTcpRoute(request);
}

StatusOr<google::cloud::networkservices::v1::TcpRoute>
NetworkServicesClient::GetTcpRoute(
    google::cloud::networkservices::v1::GetTcpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetTcpRoute(request);
}

future<StatusOr<google::cloud::networkservices::v1::TcpRoute>>
NetworkServicesClient::CreateTcpRoute(
    std::string const& parent,
    google::cloud::networkservices::v1::TcpRoute const& tcp_route,
    std::string const& tcp_route_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateTcpRouteRequest request;
  request.set_parent(parent);
  *request.mutable_tcp_route() = tcp_route;
  request.set_tcp_route_id(tcp_route_id);
  return connection_->CreateTcpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateTcpRoute(
    NoAwaitTag, std::string const& parent,
    google::cloud::networkservices::v1::TcpRoute const& tcp_route,
    std::string const& tcp_route_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateTcpRouteRequest request;
  request.set_parent(parent);
  *request.mutable_tcp_route() = tcp_route;
  request.set_tcp_route_id(tcp_route_id);
  return connection_->CreateTcpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::TcpRoute>>
NetworkServicesClient::CreateTcpRoute(
    google::cloud::networkservices::v1::CreateTcpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateTcpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateTcpRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::CreateTcpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateTcpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::TcpRoute>>
NetworkServicesClient::CreateTcpRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateTcpRoute(operation);
}

future<StatusOr<google::cloud::networkservices::v1::TcpRoute>>
NetworkServicesClient::UpdateTcpRoute(
    google::cloud::networkservices::v1::TcpRoute const& tcp_route,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateTcpRouteRequest request;
  *request.mutable_tcp_route() = tcp_route;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateTcpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateTcpRoute(
    NoAwaitTag, google::cloud::networkservices::v1::TcpRoute const& tcp_route,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateTcpRouteRequest request;
  *request.mutable_tcp_route() = tcp_route;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateTcpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::TcpRoute>>
NetworkServicesClient::UpdateTcpRoute(
    google::cloud::networkservices::v1::UpdateTcpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateTcpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateTcpRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::UpdateTcpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateTcpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::TcpRoute>>
NetworkServicesClient::UpdateTcpRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateTcpRoute(operation);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteTcpRoute(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteTcpRouteRequest request;
  request.set_name(name);
  return connection_->DeleteTcpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteTcpRoute(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteTcpRouteRequest request;
  request.set_name(name);
  return connection_->DeleteTcpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteTcpRoute(
    google::cloud::networkservices::v1::DeleteTcpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteTcpRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteTcpRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::DeleteTcpRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteTcpRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteTcpRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteTcpRoute(operation);
}

StreamRange<google::cloud::networkservices::v1::TlsRoute>
NetworkServicesClient::ListTlsRoutes(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::ListTlsRoutesRequest request;
  request.set_parent(parent);
  return connection_->ListTlsRoutes(request);
}

StreamRange<google::cloud::networkservices::v1::TlsRoute>
NetworkServicesClient::ListTlsRoutes(
    google::cloud::networkservices::v1::ListTlsRoutesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListTlsRoutes(std::move(request));
}

StatusOr<google::cloud::networkservices::v1::TlsRoute>
NetworkServicesClient::GetTlsRoute(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::GetTlsRouteRequest request;
  request.set_name(name);
  return connection_->GetTlsRoute(request);
}

StatusOr<google::cloud::networkservices::v1::TlsRoute>
NetworkServicesClient::GetTlsRoute(
    google::cloud::networkservices::v1::GetTlsRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetTlsRoute(request);
}

future<StatusOr<google::cloud::networkservices::v1::TlsRoute>>
NetworkServicesClient::CreateTlsRoute(
    std::string const& parent,
    google::cloud::networkservices::v1::TlsRoute const& tls_route,
    std::string const& tls_route_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateTlsRouteRequest request;
  request.set_parent(parent);
  *request.mutable_tls_route() = tls_route;
  request.set_tls_route_id(tls_route_id);
  return connection_->CreateTlsRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateTlsRoute(
    NoAwaitTag, std::string const& parent,
    google::cloud::networkservices::v1::TlsRoute const& tls_route,
    std::string const& tls_route_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateTlsRouteRequest request;
  request.set_parent(parent);
  *request.mutable_tls_route() = tls_route;
  request.set_tls_route_id(tls_route_id);
  return connection_->CreateTlsRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::TlsRoute>>
NetworkServicesClient::CreateTlsRoute(
    google::cloud::networkservices::v1::CreateTlsRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateTlsRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateTlsRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::CreateTlsRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateTlsRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::TlsRoute>>
NetworkServicesClient::CreateTlsRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateTlsRoute(operation);
}

future<StatusOr<google::cloud::networkservices::v1::TlsRoute>>
NetworkServicesClient::UpdateTlsRoute(
    google::cloud::networkservices::v1::TlsRoute const& tls_route,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateTlsRouteRequest request;
  *request.mutable_tls_route() = tls_route;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateTlsRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateTlsRoute(
    NoAwaitTag, google::cloud::networkservices::v1::TlsRoute const& tls_route,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateTlsRouteRequest request;
  *request.mutable_tls_route() = tls_route;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateTlsRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::TlsRoute>>
NetworkServicesClient::UpdateTlsRoute(
    google::cloud::networkservices::v1::UpdateTlsRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateTlsRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateTlsRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::UpdateTlsRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateTlsRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::TlsRoute>>
NetworkServicesClient::UpdateTlsRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateTlsRoute(operation);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteTlsRoute(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteTlsRouteRequest request;
  request.set_name(name);
  return connection_->DeleteTlsRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteTlsRoute(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteTlsRouteRequest request;
  request.set_name(name);
  return connection_->DeleteTlsRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteTlsRoute(
    google::cloud::networkservices::v1::DeleteTlsRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteTlsRoute(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteTlsRoute(
    NoAwaitTag,
    google::cloud::networkservices::v1::DeleteTlsRouteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteTlsRoute(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteTlsRoute(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteTlsRoute(operation);
}

StreamRange<google::cloud::networkservices::v1::ServiceBinding>
NetworkServicesClient::ListServiceBindings(std::string const& parent,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::ListServiceBindingsRequest request;
  request.set_parent(parent);
  return connection_->ListServiceBindings(request);
}

StreamRange<google::cloud::networkservices::v1::ServiceBinding>
NetworkServicesClient::ListServiceBindings(
    google::cloud::networkservices::v1::ListServiceBindingsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListServiceBindings(std::move(request));
}

StatusOr<google::cloud::networkservices::v1::ServiceBinding>
NetworkServicesClient::GetServiceBinding(std::string const& name,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::GetServiceBindingRequest request;
  request.set_name(name);
  return connection_->GetServiceBinding(request);
}

StatusOr<google::cloud::networkservices::v1::ServiceBinding>
NetworkServicesClient::GetServiceBinding(
    google::cloud::networkservices::v1::GetServiceBindingRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetServiceBinding(request);
}

future<StatusOr<google::cloud::networkservices::v1::ServiceBinding>>
NetworkServicesClient::CreateServiceBinding(
    std::string const& parent,
    google::cloud::networkservices::v1::ServiceBinding const& service_binding,
    std::string const& service_binding_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateServiceBindingRequest request;
  request.set_parent(parent);
  *request.mutable_service_binding() = service_binding;
  request.set_service_binding_id(service_binding_id);
  return connection_->CreateServiceBinding(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::CreateServiceBinding(
    NoAwaitTag, std::string const& parent,
    google::cloud::networkservices::v1::ServiceBinding const& service_binding,
    std::string const& service_binding_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateServiceBindingRequest request;
  request.set_parent(parent);
  *request.mutable_service_binding() = service_binding;
  request.set_service_binding_id(service_binding_id);
  return connection_->CreateServiceBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::ServiceBinding>>
NetworkServicesClient::CreateServiceBinding(
    google::cloud::networkservices::v1::CreateServiceBindingRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateServiceBinding(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::CreateServiceBinding(
    NoAwaitTag,
    google::cloud::networkservices::v1::CreateServiceBindingRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateServiceBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::ServiceBinding>>
NetworkServicesClient::CreateServiceBinding(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateServiceBinding(operation);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteServiceBinding(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteServiceBindingRequest request;
  request.set_name(name);
  return connection_->DeleteServiceBinding(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::DeleteServiceBinding(NoAwaitTag, std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteServiceBindingRequest request;
  request.set_name(name);
  return connection_->DeleteServiceBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteServiceBinding(
    google::cloud::networkservices::v1::DeleteServiceBindingRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteServiceBinding(request);
}

StatusOr<google::longrunning::Operation>
NetworkServicesClient::DeleteServiceBinding(
    NoAwaitTag,
    google::cloud::networkservices::v1::DeleteServiceBindingRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteServiceBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteServiceBinding(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteServiceBinding(operation);
}

StreamRange<google::cloud::networkservices::v1::Mesh>
NetworkServicesClient::ListMeshes(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::ListMeshesRequest request;
  request.set_parent(parent);
  return connection_->ListMeshes(request);
}

StreamRange<google::cloud::networkservices::v1::Mesh>
NetworkServicesClient::ListMeshes(
    google::cloud::networkservices::v1::ListMeshesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListMeshes(std::move(request));
}

StatusOr<google::cloud::networkservices::v1::Mesh>
NetworkServicesClient::GetMesh(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::GetMeshRequest request;
  request.set_name(name);
  return connection_->GetMesh(request);
}

StatusOr<google::cloud::networkservices::v1::Mesh>
NetworkServicesClient::GetMesh(
    google::cloud::networkservices::v1::GetMeshRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetMesh(request);
}

future<StatusOr<google::cloud::networkservices::v1::Mesh>>
NetworkServicesClient::CreateMesh(
    std::string const& parent,
    google::cloud::networkservices::v1::Mesh const& mesh,
    std::string const& mesh_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateMeshRequest request;
  request.set_parent(parent);
  *request.mutable_mesh() = mesh;
  request.set_mesh_id(mesh_id);
  return connection_->CreateMesh(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateMesh(
    NoAwaitTag, std::string const& parent,
    google::cloud::networkservices::v1::Mesh const& mesh,
    std::string const& mesh_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::CreateMeshRequest request;
  request.set_parent(parent);
  *request.mutable_mesh() = mesh;
  request.set_mesh_id(mesh_id);
  return connection_->CreateMesh(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::Mesh>>
NetworkServicesClient::CreateMesh(
    google::cloud::networkservices::v1::CreateMeshRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateMesh(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::CreateMesh(
    NoAwaitTag,
    google::cloud::networkservices::v1::CreateMeshRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateMesh(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::Mesh>>
NetworkServicesClient::CreateMesh(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateMesh(operation);
}

future<StatusOr<google::cloud::networkservices::v1::Mesh>>
NetworkServicesClient::UpdateMesh(
    google::cloud::networkservices::v1::Mesh const& mesh,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateMeshRequest request;
  *request.mutable_mesh() = mesh;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateMesh(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateMesh(
    NoAwaitTag, google::cloud::networkservices::v1::Mesh const& mesh,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::UpdateMeshRequest request;
  *request.mutable_mesh() = mesh;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateMesh(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::Mesh>>
NetworkServicesClient::UpdateMesh(
    google::cloud::networkservices::v1::UpdateMeshRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateMesh(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::UpdateMesh(
    NoAwaitTag,
    google::cloud::networkservices::v1::UpdateMeshRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateMesh(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::Mesh>>
NetworkServicesClient::UpdateMesh(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateMesh(operation);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteMesh(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteMeshRequest request;
  request.set_name(name);
  return connection_->DeleteMesh(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteMesh(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::networkservices::v1::DeleteMeshRequest request;
  request.set_name(name);
  return connection_->DeleteMesh(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteMesh(
    google::cloud::networkservices::v1::DeleteMeshRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteMesh(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::DeleteMesh(
    NoAwaitTag,
    google::cloud::networkservices::v1::DeleteMeshRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteMesh(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::networkservices::v1::OperationMetadata>>
NetworkServicesClient::DeleteMesh(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteMesh(operation);
}

StreamRange<google::cloud::location::Location>
NetworkServicesClient::ListLocations(
    google::cloud::location::ListLocationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListLocations(std::move(request));
}

StatusOr<google::cloud::location::Location> NetworkServicesClient::GetLocation(
    google::cloud::location::GetLocationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetLocation(request);
}

StatusOr<google::iam::v1::Policy> NetworkServicesClient::SetIamPolicy(
    google::iam::v1::SetIamPolicyRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SetIamPolicy(request);
}

StatusOr<google::iam::v1::Policy> NetworkServicesClient::GetIamPolicy(
    google::iam::v1::GetIamPolicyRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetIamPolicy(request);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
NetworkServicesClient::TestIamPermissions(
    google::iam::v1::TestIamPermissionsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->TestIamPermissions(request);
}

StreamRange<google::longrunning::Operation>
NetworkServicesClient::ListOperations(std::string const& name,
                                      std::string const& filter, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::ListOperationsRequest request;
  request.set_name(name);
  request.set_filter(filter);
  return connection_->ListOperations(request);
}

StreamRange<google::longrunning::Operation>
NetworkServicesClient::ListOperations(
    google::longrunning::ListOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListOperations(std::move(request));
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::GetOperation(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation> NetworkServicesClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

Status NetworkServicesClient::DeleteOperation(std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::DeleteOperationRequest request;
  request.set_name(name);
  return connection_->DeleteOperation(request);
}

Status NetworkServicesClient::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteOperation(request);
}

Status NetworkServicesClient::CancelOperation(std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::CancelOperationRequest request;
  request.set_name(name);
  return connection_->CancelOperation(request);
}

Status NetworkServicesClient::CancelOperation(
    google::longrunning::CancelOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace networkservices_v1
}  // namespace cloud
}  // namespace google
