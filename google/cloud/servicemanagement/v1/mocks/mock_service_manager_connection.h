// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/api/servicemanagement/v1/servicemanager.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SERVICEMANAGEMENT_V1_MOCKS_MOCK_SERVICE_MANAGER_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SERVICEMANAGEMENT_V1_MOCKS_MOCK_SERVICE_MANAGER_CONNECTION_H

#include "google/cloud/servicemanagement/v1/service_manager_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace servicemanagement_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `ServiceManagerConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `ServiceManagerClient`. To do so,
 * construct an object of type `ServiceManagerClient` with an instance of this
 * class. Then use the Google Test framework functions to program the behavior
 * of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockServiceManagerConnection
    : public servicemanagement_v1::ServiceManagerConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD((StreamRange<google::api::servicemanagement::v1::ManagedService>),
              ListServices,
              (google::api::servicemanagement::v1::ListServicesRequest request),
              (override));

  MOCK_METHOD(
      StatusOr<google::api::servicemanagement::v1::ManagedService>, GetService,
      (google::api::servicemanagement::v1::GetServiceRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateService(Matcher<google::api::servicemanagement::v1::CreateServiceRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::api::servicemanagement::v1::ManagedService>>,
      CreateService,
      (google::api::servicemanagement::v1::CreateServiceRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateService(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateService,
      (NoAwaitTag,
       google::api::servicemanagement::v1::CreateServiceRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateService(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::api::servicemanagement::v1::ManagedService>>,
      CreateService, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteService(Matcher<google::api::servicemanagement::v1::DeleteServiceRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::api::servicemanagement::v1::OperationMetadata>>,
      DeleteService,
      (google::api::servicemanagement::v1::DeleteServiceRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteService(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteService,
      (NoAwaitTag,
       google::api::servicemanagement::v1::DeleteServiceRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteService(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::api::servicemanagement::v1::OperationMetadata>>,
      DeleteService, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UndeleteService(Matcher<google::api::servicemanagement::v1::UndeleteServiceRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<
                  google::api::servicemanagement::v1::UndeleteServiceResponse>>,
              UndeleteService,
              (google::api::servicemanagement::v1::UndeleteServiceRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UndeleteService(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, UndeleteService,
              (NoAwaitTag,
               google::api::servicemanagement::v1::UndeleteServiceRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UndeleteService(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<
                  google::api::servicemanagement::v1::UndeleteServiceResponse>>,
              UndeleteService,
              (google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(
      (StreamRange<google::api::Service>), ListServiceConfigs,
      (google::api::servicemanagement::v1::ListServiceConfigsRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::api::Service>, GetServiceConfig,
      (google::api::servicemanagement::v1::GetServiceConfigRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::api::Service>, CreateServiceConfig,
      (google::api::servicemanagement::v1::CreateServiceConfigRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// SubmitConfigSource(Matcher<google::api::servicemanagement::v1::SubmitConfigSourceRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::api::servicemanagement::v1::SubmitConfigSourceResponse>>,
      SubmitConfigSource,
      (google::api::servicemanagement::v1::SubmitConfigSourceRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, SubmitConfigSource(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, SubmitConfigSource,
      (NoAwaitTag,
       google::api::servicemanagement::v1::SubmitConfigSourceRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// SubmitConfigSource(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::api::servicemanagement::v1::SubmitConfigSourceResponse>>,
      SubmitConfigSource, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      (StreamRange<google::api::servicemanagement::v1::Rollout>),
      ListServiceRollouts,
      (google::api::servicemanagement::v1::ListServiceRolloutsRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::api::servicemanagement::v1::Rollout>, GetServiceRollout,
      (google::api::servicemanagement::v1::GetServiceRolloutRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateServiceRollout(Matcher<google::api::servicemanagement::v1::CreateServiceRolloutRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::api::servicemanagement::v1::Rollout>>,
      CreateServiceRollout,
      (google::api::servicemanagement::v1::CreateServiceRolloutRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateServiceRollout(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateServiceRollout,
      (NoAwaitTag,
       google::api::servicemanagement::v1::CreateServiceRolloutRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateServiceRollout(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::api::servicemanagement::v1::Rollout>>,
              CreateServiceRollout,
              (google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(
      StatusOr<
          google::api::servicemanagement::v1::GenerateConfigReportResponse>,
      GenerateConfigReport,
      (google::api::servicemanagement::v1::GenerateConfigReportRequest const&
           request),
      (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>, SetIamPolicy,
              (google::iam::v1::SetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>, GetIamPolicy,
              (google::iam::v1::GetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::TestIamPermissionsResponse>,
              TestIamPermissions,
              (google::iam::v1::TestIamPermissionsRequest const& request),
              (override));

  MOCK_METHOD((StreamRange<google::longrunning::Operation>), ListOperations,
              (google::longrunning::ListOperationsRequest request), (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace servicemanagement_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SERVICEMANAGEMENT_V1_MOCKS_MOCK_SERVICE_MANAGER_CONNECTION_H
