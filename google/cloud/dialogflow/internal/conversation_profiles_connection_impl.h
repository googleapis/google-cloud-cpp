// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dialogflow/v2/conversation_profile.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DIALOGFLOW_INTERNAL_CONVERSATION_PROFILES_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DIALOGFLOW_INTERNAL_CONVERSATION_PROFILES_CONNECTION_IMPL_H

#include "google/cloud/dialogflow/conversation_profiles_connection.h"
#include "google/cloud/dialogflow/conversation_profiles_connection_idempotency_policy.h"
#include "google/cloud/dialogflow/conversation_profiles_options.h"
#include "google/cloud/dialogflow/internal/conversation_profiles_retry_traits.h"
#include "google/cloud/dialogflow/internal/conversation_profiles_stub.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace dialogflow_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class ConversationProfilesConnectionImpl
    : public dialogflow::ConversationProfilesConnection {
 public:
  ~ConversationProfilesConnectionImpl() override = default;

  ConversationProfilesConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<dialogflow_internal::ConversationProfilesStub> stub,
      Options options);

  Options options() override { return options_; }

  StreamRange<google::cloud::dialogflow::v2::ConversationProfile>
  ListConversationProfiles(
      google::cloud::dialogflow::v2::ListConversationProfilesRequest request)
      override;

  StatusOr<google::cloud::dialogflow::v2::ConversationProfile>
  GetConversationProfile(
      google::cloud::dialogflow::v2::GetConversationProfileRequest const&
          request) override;

  StatusOr<google::cloud::dialogflow::v2::ConversationProfile>
  CreateConversationProfile(
      google::cloud::dialogflow::v2::CreateConversationProfileRequest const&
          request) override;

  StatusOr<google::cloud::dialogflow::v2::ConversationProfile>
  UpdateConversationProfile(
      google::cloud::dialogflow::v2::UpdateConversationProfileRequest const&
          request) override;

  Status DeleteConversationProfile(
      google::cloud::dialogflow::v2::DeleteConversationProfileRequest const&
          request) override;

  future<StatusOr<google::cloud::dialogflow::v2::ConversationProfile>>
  SetSuggestionFeatureConfig(
      google::cloud::dialogflow::v2::SetSuggestionFeatureConfigRequest const&
          request) override;

  future<StatusOr<google::cloud::dialogflow::v2::ConversationProfile>>
  ClearSuggestionFeatureConfig(
      google::cloud::dialogflow::v2::ClearSuggestionFeatureConfigRequest const&
          request) override;

 private:
  std::unique_ptr<dialogflow::ConversationProfilesRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<dialogflow::ConversationProfilesRetryPolicyOption>()) {
      return options.get<dialogflow::ConversationProfilesRetryPolicyOption>()
          ->clone();
    }
    return options_.get<dialogflow::ConversationProfilesRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<dialogflow::ConversationProfilesBackoffPolicyOption>()) {
      return options.get<dialogflow::ConversationProfilesBackoffPolicyOption>()
          ->clone();
    }
    return options_.get<dialogflow::ConversationProfilesBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<dialogflow::ConversationProfilesConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options
            .has<dialogflow::
                     ConversationProfilesConnectionIdempotencyPolicyOption>()) {
      return options
          .get<dialogflow::
                   ConversationProfilesConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<
            dialogflow::ConversationProfilesConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<PollingPolicy> polling_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<dialogflow::ConversationProfilesPollingPolicyOption>()) {
      return options.get<dialogflow::ConversationProfilesPollingPolicyOption>()
          ->clone();
    }
    return options_.get<dialogflow::ConversationProfilesPollingPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<dialogflow_internal::ConversationProfilesStub> stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dialogflow_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DIALOGFLOW_INTERNAL_CONVERSATION_PROFILES_CONNECTION_IMPL_H
