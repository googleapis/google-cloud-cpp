// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dataform/v1/dataform.proto

#include "google/cloud/dataform/v1/internal/dataform_metadata_decorator.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/internal/url_encode.h"
#include "google/cloud/status_or.h"
#include <google/cloud/dataform/v1/dataform.grpc.pb.h>
#include <memory>
#include <string>
#include <utility>
#include <vector>

namespace google {
namespace cloud {
namespace dataform_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DataformMetadata::DataformMetadata(
    std::shared_ptr<DataformStub> child,
    std::multimap<std::string, std::string> fixed_metadata,
    std::string api_client_header)
    : child_(std::move(child)),
      fixed_metadata_(std::move(fixed_metadata)),
      api_client_header_(
          api_client_header.empty()
              ? google::cloud::internal::GeneratedLibClientHeader()
              : std::move(api_client_header)) {}

StatusOr<google::cloud::dataform::v1::ListRepositoriesResponse>
DataformMetadata::ListRepositories(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::ListRepositoriesRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListRepositories(context, options, request);
}

StatusOr<google::cloud::dataform::v1::Repository>
DataformMetadata::GetRepository(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::GetRepositoryRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetRepository(context, options, request);
}

StatusOr<google::cloud::dataform::v1::Repository>
DataformMetadata::CreateRepository(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::CreateRepositoryRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateRepository(context, options, request);
}

StatusOr<google::cloud::dataform::v1::Repository>
DataformMetadata::UpdateRepository(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::UpdateRepositoryRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("repository.name=",
                           internal::UrlEncode(request.repository().name())));
  return child_->UpdateRepository(context, options, request);
}

Status DataformMetadata::DeleteRepository(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::DeleteRepositoryRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteRepository(context, options, request);
}

StatusOr<google::cloud::dataform::v1::CommitRepositoryChangesResponse>
DataformMetadata::CommitRepositoryChanges(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::CommitRepositoryChangesRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->CommitRepositoryChanges(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ReadRepositoryFileResponse>
DataformMetadata::ReadRepositoryFile(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::ReadRepositoryFileRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ReadRepositoryFile(context, options, request);
}

StatusOr<google::cloud::dataform::v1::QueryRepositoryDirectoryContentsResponse>
DataformMetadata::QueryRepositoryDirectoryContents(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::QueryRepositoryDirectoryContentsRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->QueryRepositoryDirectoryContents(context, options, request);
}

StatusOr<google::cloud::dataform::v1::FetchRepositoryHistoryResponse>
DataformMetadata::FetchRepositoryHistory(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::FetchRepositoryHistoryRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->FetchRepositoryHistory(context, options, request);
}

StatusOr<
    google::cloud::dataform::v1::ComputeRepositoryAccessTokenStatusResponse>
DataformMetadata::ComputeRepositoryAccessTokenStatus(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::
        ComputeRepositoryAccessTokenStatusRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ComputeRepositoryAccessTokenStatus(context, options, request);
}

StatusOr<google::cloud::dataform::v1::FetchRemoteBranchesResponse>
DataformMetadata::FetchRemoteBranches(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::FetchRemoteBranchesRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->FetchRemoteBranches(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ListWorkspacesResponse>
DataformMetadata::ListWorkspaces(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::ListWorkspacesRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListWorkspaces(context, options, request);
}

StatusOr<google::cloud::dataform::v1::Workspace> DataformMetadata::GetWorkspace(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::GetWorkspaceRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetWorkspace(context, options, request);
}

StatusOr<google::cloud::dataform::v1::Workspace>
DataformMetadata::CreateWorkspace(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::CreateWorkspaceRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateWorkspace(context, options, request);
}

Status DataformMetadata::DeleteWorkspace(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::DeleteWorkspaceRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteWorkspace(context, options, request);
}

StatusOr<google::cloud::dataform::v1::InstallNpmPackagesResponse>
DataformMetadata::InstallNpmPackages(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::InstallNpmPackagesRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->InstallNpmPackages(context, options, request);
}

StatusOr<google::cloud::dataform::v1::PullGitCommitsResponse>
DataformMetadata::PullGitCommits(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::PullGitCommitsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->PullGitCommits(context, options, request);
}

StatusOr<google::cloud::dataform::v1::PushGitCommitsResponse>
DataformMetadata::PushGitCommits(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::PushGitCommitsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->PushGitCommits(context, options, request);
}

StatusOr<google::cloud::dataform::v1::FetchFileGitStatusesResponse>
DataformMetadata::FetchFileGitStatuses(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::FetchFileGitStatusesRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->FetchFileGitStatuses(context, options, request);
}

StatusOr<google::cloud::dataform::v1::FetchGitAheadBehindResponse>
DataformMetadata::FetchGitAheadBehind(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::FetchGitAheadBehindRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->FetchGitAheadBehind(context, options, request);
}

StatusOr<google::cloud::dataform::v1::CommitWorkspaceChangesResponse>
DataformMetadata::CommitWorkspaceChanges(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::CommitWorkspaceChangesRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->CommitWorkspaceChanges(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ResetWorkspaceChangesResponse>
DataformMetadata::ResetWorkspaceChanges(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::ResetWorkspaceChangesRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ResetWorkspaceChanges(context, options, request);
}

StatusOr<google::cloud::dataform::v1::FetchFileDiffResponse>
DataformMetadata::FetchFileDiff(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::FetchFileDiffRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->FetchFileDiff(context, options, request);
}

StatusOr<google::cloud::dataform::v1::QueryDirectoryContentsResponse>
DataformMetadata::QueryDirectoryContents(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::QueryDirectoryContentsRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->QueryDirectoryContents(context, options, request);
}

StatusOr<google::cloud::dataform::v1::SearchFilesResponse>
DataformMetadata::SearchFiles(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::SearchFilesRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->SearchFiles(context, options, request);
}

StatusOr<google::cloud::dataform::v1::MakeDirectoryResponse>
DataformMetadata::MakeDirectory(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::MakeDirectoryRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->MakeDirectory(context, options, request);
}

StatusOr<google::cloud::dataform::v1::RemoveDirectoryResponse>
DataformMetadata::RemoveDirectory(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::RemoveDirectoryRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->RemoveDirectory(context, options, request);
}

StatusOr<google::cloud::dataform::v1::MoveDirectoryResponse>
DataformMetadata::MoveDirectory(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::MoveDirectoryRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->MoveDirectory(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ReadFileResponse>
DataformMetadata::ReadFile(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::ReadFileRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->ReadFile(context, options, request);
}

StatusOr<google::cloud::dataform::v1::RemoveFileResponse>
DataformMetadata::RemoveFile(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::RemoveFileRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->RemoveFile(context, options, request);
}

StatusOr<google::cloud::dataform::v1::MoveFileResponse>
DataformMetadata::MoveFile(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::MoveFileRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->MoveFile(context, options, request);
}

StatusOr<google::cloud::dataform::v1::WriteFileResponse>
DataformMetadata::WriteFile(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::WriteFileRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workspace=", internal::UrlEncode(request.workspace())));
  return child_->WriteFile(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ListReleaseConfigsResponse>
DataformMetadata::ListReleaseConfigs(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::ListReleaseConfigsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListReleaseConfigs(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ReleaseConfig>
DataformMetadata::GetReleaseConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::GetReleaseConfigRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetReleaseConfig(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ReleaseConfig>
DataformMetadata::CreateReleaseConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::CreateReleaseConfigRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateReleaseConfig(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ReleaseConfig>
DataformMetadata::UpdateReleaseConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::UpdateReleaseConfigRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("release_config.name=",
                   internal::UrlEncode(request.release_config().name())));
  return child_->UpdateReleaseConfig(context, options, request);
}

Status DataformMetadata::DeleteReleaseConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::DeleteReleaseConfigRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteReleaseConfig(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ListCompilationResultsResponse>
DataformMetadata::ListCompilationResults(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::ListCompilationResultsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListCompilationResults(context, options, request);
}

StatusOr<google::cloud::dataform::v1::CompilationResult>
DataformMetadata::GetCompilationResult(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::GetCompilationResultRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetCompilationResult(context, options, request);
}

StatusOr<google::cloud::dataform::v1::CompilationResult>
DataformMetadata::CreateCompilationResult(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::CreateCompilationResultRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateCompilationResult(context, options, request);
}

StatusOr<google::cloud::dataform::v1::QueryCompilationResultActionsResponse>
DataformMetadata::QueryCompilationResultActions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::QueryCompilationResultActionsRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->QueryCompilationResultActions(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ListWorkflowConfigsResponse>
DataformMetadata::ListWorkflowConfigs(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::ListWorkflowConfigsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListWorkflowConfigs(context, options, request);
}

StatusOr<google::cloud::dataform::v1::WorkflowConfig>
DataformMetadata::GetWorkflowConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::GetWorkflowConfigRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetWorkflowConfig(context, options, request);
}

StatusOr<google::cloud::dataform::v1::WorkflowConfig>
DataformMetadata::CreateWorkflowConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::CreateWorkflowConfigRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateWorkflowConfig(context, options, request);
}

StatusOr<google::cloud::dataform::v1::WorkflowConfig>
DataformMetadata::UpdateWorkflowConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::UpdateWorkflowConfigRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("workflow_config.name=",
                   internal::UrlEncode(request.workflow_config().name())));
  return child_->UpdateWorkflowConfig(context, options, request);
}

Status DataformMetadata::DeleteWorkflowConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::DeleteWorkflowConfigRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteWorkflowConfig(context, options, request);
}

StatusOr<google::cloud::dataform::v1::ListWorkflowInvocationsResponse>
DataformMetadata::ListWorkflowInvocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::ListWorkflowInvocationsRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListWorkflowInvocations(context, options, request);
}

StatusOr<google::cloud::dataform::v1::WorkflowInvocation>
DataformMetadata::GetWorkflowInvocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::GetWorkflowInvocationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetWorkflowInvocation(context, options, request);
}

StatusOr<google::cloud::dataform::v1::WorkflowInvocation>
DataformMetadata::CreateWorkflowInvocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::CreateWorkflowInvocationRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateWorkflowInvocation(context, options, request);
}

Status DataformMetadata::DeleteWorkflowInvocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::DeleteWorkflowInvocationRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteWorkflowInvocation(context, options, request);
}

StatusOr<google::cloud::dataform::v1::CancelWorkflowInvocationResponse>
DataformMetadata::CancelWorkflowInvocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::CancelWorkflowInvocationRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->CancelWorkflowInvocation(context, options, request);
}

StatusOr<google::cloud::dataform::v1::QueryWorkflowInvocationActionsResponse>
DataformMetadata::QueryWorkflowInvocationActions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::QueryWorkflowInvocationActionsRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->QueryWorkflowInvocationActions(context, options, request);
}

StatusOr<google::cloud::dataform::v1::Config> DataformMetadata::GetConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::GetConfigRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetConfig(context, options, request);
}

StatusOr<google::cloud::dataform::v1::Config> DataformMetadata::UpdateConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::dataform::v1::UpdateConfigRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("config.name=",
                           internal::UrlEncode(request.config().name())));
  return child_->UpdateConfig(context, options, request);
}

StatusOr<google::cloud::location::ListLocationsResponse>
DataformMetadata::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ListLocations(context, options, request);
}

StatusOr<google::cloud::location::Location> DataformMetadata::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetLocation(context, options, request);
}

StatusOr<google::iam::v1::Policy> DataformMetadata::SetIamPolicy(
    grpc::ClientContext& context, Options const& options,
    google::iam::v1::SetIamPolicyRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("resource=", internal::UrlEncode(request.resource())));
  return child_->SetIamPolicy(context, options, request);
}

StatusOr<google::iam::v1::Policy> DataformMetadata::GetIamPolicy(
    grpc::ClientContext& context, Options const& options,
    google::iam::v1::GetIamPolicyRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("resource=", internal::UrlEncode(request.resource())));
  return child_->GetIamPolicy(context, options, request);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DataformMetadata::TestIamPermissions(
    grpc::ClientContext& context, Options const& options,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("resource=", internal::UrlEncode(request.resource())));
  return child_->TestIamPermissions(context, options, request);
}

void DataformMetadata::SetMetadata(grpc::ClientContext& context,
                                   Options const& options,
                                   std::string const& request_params) {
  context.AddMetadata("x-goog-request-params", request_params);
  SetMetadata(context, options);
}

void DataformMetadata::SetMetadata(grpc::ClientContext& context,
                                   Options const& options) {
  google::cloud::internal::SetMetadata(context, options, fixed_metadata_,
                                       api_client_header_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dataform_v1_internal
}  // namespace cloud
}  // namespace google
