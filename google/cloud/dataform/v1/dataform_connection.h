// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dataform/v1/dataform.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DATAFORM_V1_DATAFORM_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DATAFORM_V1_DATAFORM_CONNECTION_H

#include "google/cloud/dataform/v1/dataform_connection_idempotency_policy.h"
#include "google/cloud/dataform/v1/internal/dataform_retry_traits.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/internal/retry_policy_impl.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/cloud/dataform/v1/dataform.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace dataform_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/// The retry policy for `DataformConnection`.
class DataformRetryPolicy : public ::google::cloud::RetryPolicy {
 public:
  /// Creates a new instance of the policy, reset to the initial state.
  virtual std::unique_ptr<DataformRetryPolicy> clone() const = 0;
};

/**
 * A retry policy for `DataformConnection` based on counting errors.
 *
 * This policy stops retrying if:
 * - An RPC returns a non-transient error.
 * - More than a prescribed number of transient failures is detected.
 *
 * In this class the following status codes are treated as transient errors:
 * - [`kUnavailable`](@ref google::cloud::StatusCode)
 */
class DataformLimitedErrorCountRetryPolicy : public DataformRetryPolicy {
 public:
  /**
   * Create an instance that tolerates up to @p maximum_failures transient
   * errors.
   *
   * @note Disable the retry loop by providing an instance of this policy with
   *     @p maximum_failures == 0.
   */
  explicit DataformLimitedErrorCountRetryPolicy(int maximum_failures)
      : impl_(maximum_failures) {}

  DataformLimitedErrorCountRetryPolicy(
      DataformLimitedErrorCountRetryPolicy&& rhs) noexcept
      : DataformLimitedErrorCountRetryPolicy(rhs.maximum_failures()) {}
  DataformLimitedErrorCountRetryPolicy(
      DataformLimitedErrorCountRetryPolicy const& rhs) noexcept
      : DataformLimitedErrorCountRetryPolicy(rhs.maximum_failures()) {}

  int maximum_failures() const { return impl_.maximum_failures(); }

  bool OnFailure(Status const& status) override {
    return impl_.OnFailure(status);
  }
  bool IsExhausted() const override { return impl_.IsExhausted(); }
  bool IsPermanentFailure(Status const& status) const override {
    return impl_.IsPermanentFailure(status);
  }
  std::unique_ptr<DataformRetryPolicy> clone() const override {
    return std::make_unique<DataformLimitedErrorCountRetryPolicy>(
        maximum_failures());
  }

  // This is provided only for backwards compatibility.
  using BaseType = DataformRetryPolicy;

 private:
  google::cloud::internal::LimitedErrorCountRetryPolicy<
      dataform_v1_internal::DataformRetryTraits>
      impl_;
};

/**
 * A retry policy for `DataformConnection` based on elapsed time.
 *
 * This policy stops retrying if:
 * - An RPC returns a non-transient error.
 * - The elapsed time in the retry loop exceeds a prescribed duration.
 *
 * In this class the following status codes are treated as transient errors:
 * - [`kUnavailable`](@ref google::cloud::StatusCode)
 */
class DataformLimitedTimeRetryPolicy : public DataformRetryPolicy {
 public:
  /**
   * Constructor given a `std::chrono::duration<>` object.
   *
   * @tparam DurationRep a placeholder to match the `Rep` tparam for @p
   *     duration's type. The semantics of this template parameter are
   *     documented in `std::chrono::duration<>`. In brief, the underlying
   *     arithmetic type used to store the number of ticks. For our purposes it
   *     is simply a formal parameter.
   * @tparam DurationPeriod a placeholder to match the `Period` tparam for @p
   *     duration's type. The semantics of this template parameter are
   *     documented in `std::chrono::duration<>`. In brief, the length of the
   *     tick in seconds, expressed as a `std::ratio<>`. For our purposes it is
   *     simply a formal parameter.
   * @param maximum_duration the maximum time allowed before the policy expires.
   *     While the application can express this time in any units they desire,
   *     the class truncates to milliseconds.
   *
   * @see https://en.cppreference.com/w/cpp/chrono/duration for more information
   *     about `std::chrono::duration`.
   */
  template <typename DurationRep, typename DurationPeriod>
  explicit DataformLimitedTimeRetryPolicy(
      std::chrono::duration<DurationRep, DurationPeriod> maximum_duration)
      : impl_(maximum_duration) {}

  DataformLimitedTimeRetryPolicy(DataformLimitedTimeRetryPolicy&& rhs) noexcept
      : DataformLimitedTimeRetryPolicy(rhs.maximum_duration()) {}
  DataformLimitedTimeRetryPolicy(
      DataformLimitedTimeRetryPolicy const& rhs) noexcept
      : DataformLimitedTimeRetryPolicy(rhs.maximum_duration()) {}

  std::chrono::milliseconds maximum_duration() const {
    return impl_.maximum_duration();
  }

  bool OnFailure(Status const& status) override {
    return impl_.OnFailure(status);
  }
  bool IsExhausted() const override { return impl_.IsExhausted(); }
  bool IsPermanentFailure(Status const& status) const override {
    return impl_.IsPermanentFailure(status);
  }
  std::unique_ptr<DataformRetryPolicy> clone() const override {
    return std::make_unique<DataformLimitedTimeRetryPolicy>(maximum_duration());
  }

  // This is provided only for backwards compatibility.
  using BaseType = DataformRetryPolicy;

 private:
  google::cloud::internal::LimitedTimeRetryPolicy<
      dataform_v1_internal::DataformRetryTraits>
      impl_;
};

/**
 * The `DataformConnection` object for `DataformClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `DataformClient`. This allows users to inject custom behavior
 * (e.g., with a Google Mock object) when writing tests that use objects of type
 * `DataformClient`.
 *
 * To create a concrete instance, see `MakeDataformConnection()`.
 *
 * For mocking, see `dataform_v1_mocks::MockDataformConnection`.
 */
class DataformConnection {
 public:
  virtual ~DataformConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StreamRange<google::cloud::dataform::v1::Repository> ListRepositories(
      google::cloud::dataform::v1::ListRepositoriesRequest request);

  virtual StatusOr<google::cloud::dataform::v1::Repository> GetRepository(
      google::cloud::dataform::v1::GetRepositoryRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::Repository> CreateRepository(
      google::cloud::dataform::v1::CreateRepositoryRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::Repository> UpdateRepository(
      google::cloud::dataform::v1::UpdateRepositoryRequest const& request);

  virtual Status DeleteRepository(
      google::cloud::dataform::v1::DeleteRepositoryRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::CommitRepositoryChangesResponse>
  CommitRepositoryChanges(
      google::cloud::dataform::v1::CommitRepositoryChangesRequest const&
          request);

  virtual StatusOr<google::cloud::dataform::v1::ReadRepositoryFileResponse>
  ReadRepositoryFile(
      google::cloud::dataform::v1::ReadRepositoryFileRequest const& request);

  virtual StreamRange<google::cloud::dataform::v1::DirectoryEntry>
  QueryRepositoryDirectoryContents(
      google::cloud::dataform::v1::QueryRepositoryDirectoryContentsRequest
          request);

  virtual StreamRange<google::cloud::dataform::v1::CommitLogEntry>
  FetchRepositoryHistory(
      google::cloud::dataform::v1::FetchRepositoryHistoryRequest request);

  virtual StatusOr<
      google::cloud::dataform::v1::ComputeRepositoryAccessTokenStatusResponse>
  ComputeRepositoryAccessTokenStatus(
      google::cloud::dataform::v1::
          ComputeRepositoryAccessTokenStatusRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::FetchRemoteBranchesResponse>
  FetchRemoteBranches(
      google::cloud::dataform::v1::FetchRemoteBranchesRequest const& request);

  virtual StreamRange<google::cloud::dataform::v1::Workspace> ListWorkspaces(
      google::cloud::dataform::v1::ListWorkspacesRequest request);

  virtual StatusOr<google::cloud::dataform::v1::Workspace> GetWorkspace(
      google::cloud::dataform::v1::GetWorkspaceRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::Workspace> CreateWorkspace(
      google::cloud::dataform::v1::CreateWorkspaceRequest const& request);

  virtual Status DeleteWorkspace(
      google::cloud::dataform::v1::DeleteWorkspaceRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::InstallNpmPackagesResponse>
  InstallNpmPackages(
      google::cloud::dataform::v1::InstallNpmPackagesRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::PullGitCommitsResponse>
  PullGitCommits(
      google::cloud::dataform::v1::PullGitCommitsRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::PushGitCommitsResponse>
  PushGitCommits(
      google::cloud::dataform::v1::PushGitCommitsRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::FetchFileGitStatusesResponse>
  FetchFileGitStatuses(
      google::cloud::dataform::v1::FetchFileGitStatusesRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::FetchGitAheadBehindResponse>
  FetchGitAheadBehind(
      google::cloud::dataform::v1::FetchGitAheadBehindRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::CommitWorkspaceChangesResponse>
  CommitWorkspaceChanges(
      google::cloud::dataform::v1::CommitWorkspaceChangesRequest const&
          request);

  virtual StatusOr<google::cloud::dataform::v1::ResetWorkspaceChangesResponse>
  ResetWorkspaceChanges(
      google::cloud::dataform::v1::ResetWorkspaceChangesRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::FetchFileDiffResponse>
  FetchFileDiff(
      google::cloud::dataform::v1::FetchFileDiffRequest const& request);

  virtual StreamRange<google::cloud::dataform::v1::DirectoryEntry>
  QueryDirectoryContents(
      google::cloud::dataform::v1::QueryDirectoryContentsRequest request);

  virtual StreamRange<google::cloud::dataform::v1::SearchResult> SearchFiles(
      google::cloud::dataform::v1::SearchFilesRequest request);

  virtual StatusOr<google::cloud::dataform::v1::MakeDirectoryResponse>
  MakeDirectory(
      google::cloud::dataform::v1::MakeDirectoryRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::RemoveDirectoryResponse>
  RemoveDirectory(
      google::cloud::dataform::v1::RemoveDirectoryRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::MoveDirectoryResponse>
  MoveDirectory(
      google::cloud::dataform::v1::MoveDirectoryRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::ReadFileResponse> ReadFile(
      google::cloud::dataform::v1::ReadFileRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::RemoveFileResponse> RemoveFile(
      google::cloud::dataform::v1::RemoveFileRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::MoveFileResponse> MoveFile(
      google::cloud::dataform::v1::MoveFileRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::WriteFileResponse> WriteFile(
      google::cloud::dataform::v1::WriteFileRequest const& request);

  virtual StreamRange<google::cloud::dataform::v1::ReleaseConfig>
  ListReleaseConfigs(
      google::cloud::dataform::v1::ListReleaseConfigsRequest request);

  virtual StatusOr<google::cloud::dataform::v1::ReleaseConfig> GetReleaseConfig(
      google::cloud::dataform::v1::GetReleaseConfigRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::ReleaseConfig>
  CreateReleaseConfig(
      google::cloud::dataform::v1::CreateReleaseConfigRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::ReleaseConfig>
  UpdateReleaseConfig(
      google::cloud::dataform::v1::UpdateReleaseConfigRequest const& request);

  virtual Status DeleteReleaseConfig(
      google::cloud::dataform::v1::DeleteReleaseConfigRequest const& request);

  virtual StreamRange<google::cloud::dataform::v1::CompilationResult>
  ListCompilationResults(
      google::cloud::dataform::v1::ListCompilationResultsRequest request);

  virtual StatusOr<google::cloud::dataform::v1::CompilationResult>
  GetCompilationResult(
      google::cloud::dataform::v1::GetCompilationResultRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::CompilationResult>
  CreateCompilationResult(
      google::cloud::dataform::v1::CreateCompilationResultRequest const&
          request);

  virtual StreamRange<google::cloud::dataform::v1::CompilationResultAction>
  QueryCompilationResultActions(
      google::cloud::dataform::v1::QueryCompilationResultActionsRequest
          request);

  virtual StreamRange<google::cloud::dataform::v1::WorkflowConfig>
  ListWorkflowConfigs(
      google::cloud::dataform::v1::ListWorkflowConfigsRequest request);

  virtual StatusOr<google::cloud::dataform::v1::WorkflowConfig>
  GetWorkflowConfig(
      google::cloud::dataform::v1::GetWorkflowConfigRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::WorkflowConfig>
  CreateWorkflowConfig(
      google::cloud::dataform::v1::CreateWorkflowConfigRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::WorkflowConfig>
  UpdateWorkflowConfig(
      google::cloud::dataform::v1::UpdateWorkflowConfigRequest const& request);

  virtual Status DeleteWorkflowConfig(
      google::cloud::dataform::v1::DeleteWorkflowConfigRequest const& request);

  virtual StreamRange<google::cloud::dataform::v1::WorkflowInvocation>
  ListWorkflowInvocations(
      google::cloud::dataform::v1::ListWorkflowInvocationsRequest request);

  virtual StatusOr<google::cloud::dataform::v1::WorkflowInvocation>
  GetWorkflowInvocation(
      google::cloud::dataform::v1::GetWorkflowInvocationRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::WorkflowInvocation>
  CreateWorkflowInvocation(
      google::cloud::dataform::v1::CreateWorkflowInvocationRequest const&
          request);

  virtual Status DeleteWorkflowInvocation(
      google::cloud::dataform::v1::DeleteWorkflowInvocationRequest const&
          request);

  virtual StatusOr<
      google::cloud::dataform::v1::CancelWorkflowInvocationResponse>
  CancelWorkflowInvocation(
      google::cloud::dataform::v1::CancelWorkflowInvocationRequest const&
          request);

  virtual StreamRange<google::cloud::dataform::v1::WorkflowInvocationAction>
  QueryWorkflowInvocationActions(
      google::cloud::dataform::v1::QueryWorkflowInvocationActionsRequest
          request);

  virtual StatusOr<google::cloud::dataform::v1::Config> GetConfig(
      google::cloud::dataform::v1::GetConfigRequest const& request);

  virtual StatusOr<google::cloud::dataform::v1::Config> UpdateConfig(
      google::cloud::dataform::v1::UpdateConfigRequest const& request);

  virtual StreamRange<google::cloud::location::Location> ListLocations(
      google::cloud::location::ListLocationsRequest request);

  virtual StatusOr<google::cloud::location::Location> GetLocation(
      google::cloud::location::GetLocationRequest const& request);

  virtual StatusOr<google::iam::v1::Policy> SetIamPolicy(
      google::iam::v1::SetIamPolicyRequest const& request);

  virtual StatusOr<google::iam::v1::Policy> GetIamPolicy(
      google::iam::v1::GetIamPolicyRequest const& request);

  virtual StatusOr<google::iam::v1::TestIamPermissionsResponse>
  TestIamPermissions(google::iam::v1::TestIamPermissionsRequest const& request);
};

/**
 * A factory function to construct an object of type `DataformConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of DataformClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `DataformConnection`. Expected options are any of the types in
 * the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * - `google::cloud::dataform_v1::DataformPolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `DataformConnection` created by
 * this function.
 */
std::shared_ptr<DataformConnection> MakeDataformConnection(
    Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dataform_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DATAFORM_V1_DATAFORM_CONNECTION_H
