// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/iot/v1/device_manager.proto

#include "google/cloud/iot/device_manager_connection.h"
#include "google/cloud/iot/device_manager_options.h"
#include "google/cloud/iot/internal/device_manager_option_defaults.h"
#include "google/cloud/iot/internal/device_manager_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace iot {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DeviceManagerConnection::~DeviceManagerConnection() = default;

StatusOr<google::cloud::iot::v1::DeviceRegistry>
DeviceManagerConnection::CreateDeviceRegistry(
    google::cloud::iot::v1::CreateDeviceRegistryRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::iot::v1::DeviceRegistry>
DeviceManagerConnection::GetDeviceRegistry(
    google::cloud::iot::v1::GetDeviceRegistryRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::iot::v1::DeviceRegistry>
DeviceManagerConnection::UpdateDeviceRegistry(
    google::cloud::iot::v1::UpdateDeviceRegistryRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status DeviceManagerConnection::DeleteDeviceRegistry(
    google::cloud::iot::v1::DeleteDeviceRegistryRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::iot::v1::DeviceRegistry>
DeviceManagerConnection::ListDeviceRegistries(
    google::cloud::iot::v1::ListDeviceRegistriesRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::iot::v1::DeviceRegistry>>(
      std::move(request),
      [](google::cloud::iot::v1::ListDeviceRegistriesRequest const&) {
        return StatusOr<google::cloud::iot::v1::ListDeviceRegistriesResponse>{};
      },
      [](google::cloud::iot::v1::ListDeviceRegistriesResponse const&) {
        return std::vector<google::cloud::iot::v1::DeviceRegistry>();
      });
}

StatusOr<google::cloud::iot::v1::Device> DeviceManagerConnection::CreateDevice(
    google::cloud::iot::v1::CreateDeviceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::iot::v1::Device> DeviceManagerConnection::GetDevice(
    google::cloud::iot::v1::GetDeviceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::iot::v1::Device> DeviceManagerConnection::UpdateDevice(
    google::cloud::iot::v1::UpdateDeviceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status DeviceManagerConnection::DeleteDevice(
    google::cloud::iot::v1::DeleteDeviceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::iot::v1::Device>
DeviceManagerConnection::ListDevices(
    google::cloud::iot::v1::ListDevicesRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::iot::v1::Device>>(
      std::move(request),
      [](google::cloud::iot::v1::ListDevicesRequest const&) {
        return StatusOr<google::cloud::iot::v1::ListDevicesResponse>{};
      },
      [](google::cloud::iot::v1::ListDevicesResponse const&) {
        return std::vector<google::cloud::iot::v1::Device>();
      });
}

StatusOr<google::cloud::iot::v1::DeviceConfig>
DeviceManagerConnection::ModifyCloudToDeviceConfig(
    google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::iot::v1::ListDeviceConfigVersionsResponse>
DeviceManagerConnection::ListDeviceConfigVersions(
    google::cloud::iot::v1::ListDeviceConfigVersionsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::iot::v1::ListDeviceStatesResponse>
DeviceManagerConnection::ListDeviceStates(
    google::cloud::iot::v1::ListDeviceStatesRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::iam::v1::Policy> DeviceManagerConnection::SetIamPolicy(
    google::iam::v1::SetIamPolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::iam::v1::Policy> DeviceManagerConnection::GetIamPolicy(
    google::iam::v1::GetIamPolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DeviceManagerConnection::TestIamPermissions(
    google::iam::v1::TestIamPermissionsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::iot::v1::SendCommandToDeviceResponse>
DeviceManagerConnection::SendCommandToDevice(
    google::cloud::iot::v1::SendCommandToDeviceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::iot::v1::BindDeviceToGatewayResponse>
DeviceManagerConnection::BindDeviceToGateway(
    google::cloud::iot::v1::BindDeviceToGatewayRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::iot::v1::UnbindDeviceFromGatewayResponse>
DeviceManagerConnection::UnbindDeviceFromGateway(
    google::cloud::iot::v1::UnbindDeviceFromGatewayRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

namespace {
class DeviceManagerConnectionImpl : public DeviceManagerConnection {
 public:
  DeviceManagerConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<iot_internal::DeviceManagerStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<DeviceManagerRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<DeviceManagerBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<DeviceManagerConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~DeviceManagerConnectionImpl() override = default;

  StatusOr<google::cloud::iot::v1::DeviceRegistry> CreateDeviceRegistry(
      google::cloud::iot::v1::CreateDeviceRegistryRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateDeviceRegistry(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::CreateDeviceRegistryRequest const&
                   request) {
          return stub_->CreateDeviceRegistry(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::iot::v1::DeviceRegistry> GetDeviceRegistry(
      google::cloud::iot::v1::GetDeviceRegistryRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetDeviceRegistry(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::iot::v1::GetDeviceRegistryRequest const& request) {
          return stub_->GetDeviceRegistry(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::iot::v1::DeviceRegistry> UpdateDeviceRegistry(
      google::cloud::iot::v1::UpdateDeviceRegistryRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateDeviceRegistry(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::UpdateDeviceRegistryRequest const&
                   request) {
          return stub_->UpdateDeviceRegistry(context, request);
        },
        request, __func__);
  }

  Status DeleteDeviceRegistry(
      google::cloud::iot::v1::DeleteDeviceRegistryRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteDeviceRegistry(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::DeleteDeviceRegistryRequest const&
                   request) {
          return stub_->DeleteDeviceRegistry(context, request);
        },
        request, __func__);
  }

  StreamRange<google::cloud::iot::v1::DeviceRegistry> ListDeviceRegistries(
      google::cloud::iot::v1::ListDeviceRegistriesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<DeviceManagerRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListDeviceRegistries(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::iot::v1::DeviceRegistry>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::iot::v1::ListDeviceRegistriesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::iot::v1::ListDeviceRegistriesRequest const&
                         request) {
                return stub->ListDeviceRegistries(context, request);
              },
              r, function_name);
        },
        [](google::cloud::iot::v1::ListDeviceRegistriesResponse r) {
          std::vector<google::cloud::iot::v1::DeviceRegistry> result(
              r.device_registries().size());
          auto& messages = *r.mutable_device_registries();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::iot::v1::Device> CreateDevice(
      google::cloud::iot::v1::CreateDeviceRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateDevice(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::CreateDeviceRequest const& request) {
          return stub_->CreateDevice(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::iot::v1::Device> GetDevice(
      google::cloud::iot::v1::GetDeviceRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetDevice(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::GetDeviceRequest const& request) {
          return stub_->GetDevice(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::iot::v1::Device> UpdateDevice(
      google::cloud::iot::v1::UpdateDeviceRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateDevice(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::UpdateDeviceRequest const& request) {
          return stub_->UpdateDevice(context, request);
        },
        request, __func__);
  }

  Status DeleteDevice(
      google::cloud::iot::v1::DeleteDeviceRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteDevice(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::DeleteDeviceRequest const& request) {
          return stub_->DeleteDevice(context, request);
        },
        request, __func__);
  }

  StreamRange<google::cloud::iot::v1::Device> ListDevices(
      google::cloud::iot::v1::ListDevicesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<DeviceManagerRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListDevices(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::iot::v1::Device>>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](google::cloud::iot::v1::ListDevicesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  google::cloud::iot::v1::ListDevicesRequest const& request) {
                return stub->ListDevices(context, request);
              },
              r, function_name);
        },
        [](google::cloud::iot::v1::ListDevicesResponse r) {
          std::vector<google::cloud::iot::v1::Device> result(
              r.devices().size());
          auto& messages = *r.mutable_devices();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::iot::v1::DeviceConfig> ModifyCloudToDeviceConfig(
      google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ModifyCloudToDeviceConfig(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest const&
                   request) {
          return stub_->ModifyCloudToDeviceConfig(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::iot::v1::ListDeviceConfigVersionsResponse>
  ListDeviceConfigVersions(
      google::cloud::iot::v1::ListDeviceConfigVersionsRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ListDeviceConfigVersions(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::ListDeviceConfigVersionsRequest const&
                   request) {
          return stub_->ListDeviceConfigVersions(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::iot::v1::ListDeviceStatesResponse> ListDeviceStates(
      google::cloud::iot::v1::ListDeviceStatesRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ListDeviceStates(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::ListDeviceStatesRequest const& request) {
          return stub_->ListDeviceStates(context, request);
        },
        request, __func__);
  }

  StatusOr<google::iam::v1::Policy> SetIamPolicy(
      google::iam::v1::SetIamPolicyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetIamPolicy(request),
        [this](grpc::ClientContext& context,
               google::iam::v1::SetIamPolicyRequest const& request) {
          return stub_->SetIamPolicy(context, request);
        },
        request, __func__);
  }

  StatusOr<google::iam::v1::Policy> GetIamPolicy(
      google::iam::v1::GetIamPolicyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetIamPolicy(request),
        [this](grpc::ClientContext& context,
               google::iam::v1::GetIamPolicyRequest const& request) {
          return stub_->GetIamPolicy(context, request);
        },
        request, __func__);
  }

  StatusOr<google::iam::v1::TestIamPermissionsResponse> TestIamPermissions(
      google::iam::v1::TestIamPermissionsRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->TestIamPermissions(request),
        [this](grpc::ClientContext& context,
               google::iam::v1::TestIamPermissionsRequest const& request) {
          return stub_->TestIamPermissions(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::iot::v1::SendCommandToDeviceResponse>
  SendCommandToDevice(google::cloud::iot::v1::SendCommandToDeviceRequest const&
                          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SendCommandToDevice(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::iot::v1::SendCommandToDeviceRequest const& request) {
          return stub_->SendCommandToDevice(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::iot::v1::BindDeviceToGatewayResponse>
  BindDeviceToGateway(google::cloud::iot::v1::BindDeviceToGatewayRequest const&
                          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->BindDeviceToGateway(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::iot::v1::BindDeviceToGatewayRequest const& request) {
          return stub_->BindDeviceToGateway(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::iot::v1::UnbindDeviceFromGatewayResponse>
  UnbindDeviceFromGateway(
      google::cloud::iot::v1::UnbindDeviceFromGatewayRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UnbindDeviceFromGateway(request),
        [this](grpc::ClientContext& context,
               google::cloud::iot::v1::UnbindDeviceFromGatewayRequest const&
                   request) {
          return stub_->UnbindDeviceFromGateway(context, request);
        },
        request, __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<iot_internal::DeviceManagerStub> stub_;
  std::unique_ptr<DeviceManagerRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<DeviceManagerConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<DeviceManagerConnection> MakeDeviceManagerConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 DeviceManagerPolicyOptionList>(options,
                                                                __func__);
  options = iot_internal::DeviceManagerDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub =
      iot_internal::CreateDefaultDeviceManagerStub(background->cq(), options);
  return std::make_shared<DeviceManagerConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iot
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace iot_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<iot::DeviceManagerConnection> MakeDeviceManagerConnection(
    std::shared_ptr<DeviceManagerStub> stub, Options options) {
  options = DeviceManagerDefaultOptions(std::move(options));
  return std::make_shared<iot::DeviceManagerConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iot_internal
}  // namespace cloud
}  // namespace google
