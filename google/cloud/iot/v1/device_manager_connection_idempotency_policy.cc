// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/iot/v1/device_manager.proto

#include "google/cloud/iot/v1/device_manager_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace iot_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

DeviceManagerConnectionIdempotencyPolicy::
    ~DeviceManagerConnectionIdempotencyPolicy() = default;

std::unique_ptr<DeviceManagerConnectionIdempotencyPolicy>
DeviceManagerConnectionIdempotencyPolicy::clone() const {
  return absl::make_unique<DeviceManagerConnectionIdempotencyPolicy>(*this);
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::CreateDeviceRegistry(
    google::cloud::iot::v1::CreateDeviceRegistryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::GetDeviceRegistry(
    google::cloud::iot::v1::GetDeviceRegistryRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::UpdateDeviceRegistry(
    google::cloud::iot::v1::UpdateDeviceRegistryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::DeleteDeviceRegistry(
    google::cloud::iot::v1::DeleteDeviceRegistryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::ListDeviceRegistries(
    google::cloud::iot::v1::ListDeviceRegistriesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::CreateDevice(
    google::cloud::iot::v1::CreateDeviceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::GetDevice(
    google::cloud::iot::v1::GetDeviceRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::UpdateDevice(
    google::cloud::iot::v1::UpdateDeviceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::DeleteDevice(
    google::cloud::iot::v1::DeleteDeviceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::ListDevices(
    google::cloud::iot::v1::ListDevicesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::ModifyCloudToDeviceConfig(
    google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::ListDeviceConfigVersions(
    google::cloud::iot::v1::ListDeviceConfigVersionsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::ListDeviceStates(
    google::cloud::iot::v1::ListDeviceStatesRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::SetIamPolicy(
    google::iam::v1::SetIamPolicyRequest const& request) {
  return request.policy().etag().empty() ? Idempotency::kNonIdempotent
                                         : Idempotency::kIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::GetIamPolicy(
    google::iam::v1::GetIamPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::TestIamPermissions(
    google::iam::v1::TestIamPermissionsRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::SendCommandToDevice(
    google::cloud::iot::v1::SendCommandToDeviceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::BindDeviceToGateway(
    google::cloud::iot::v1::BindDeviceToGatewayRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DeviceManagerConnectionIdempotencyPolicy::UnbindDeviceFromGateway(
    google::cloud::iot::v1::UnbindDeviceFromGatewayRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<DeviceManagerConnectionIdempotencyPolicy>
MakeDefaultDeviceManagerConnectionIdempotencyPolicy() {
  return absl::make_unique<DeviceManagerConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iot_v1
}  // namespace cloud
}  // namespace google
