// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/iot/v1/device_manager.proto

#include "google/cloud/iot/v1/internal/device_manager_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace iot_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DeviceManagerTracingStub::DeviceManagerTracingStub(
    std::shared_ptr<DeviceManagerStub> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::iot::v1::DeviceRegistry>
DeviceManagerTracingStub::CreateDeviceRegistry(
    grpc::ClientContext& context,
    google::cloud::iot::v1::CreateDeviceRegistryRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "CreateDeviceRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->CreateDeviceRegistry(context, request));
}

StatusOr<google::cloud::iot::v1::DeviceRegistry>
DeviceManagerTracingStub::GetDeviceRegistry(
    grpc::ClientContext& context,
    google::cloud::iot::v1::GetDeviceRegistryRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "GetDeviceRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetDeviceRegistry(context, request));
}

StatusOr<google::cloud::iot::v1::DeviceRegistry>
DeviceManagerTracingStub::UpdateDeviceRegistry(
    grpc::ClientContext& context,
    google::cloud::iot::v1::UpdateDeviceRegistryRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "UpdateDeviceRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->UpdateDeviceRegistry(context, request));
}

Status DeviceManagerTracingStub::DeleteDeviceRegistry(
    grpc::ClientContext& context,
    google::cloud::iot::v1::DeleteDeviceRegistryRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "DeleteDeviceRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->DeleteDeviceRegistry(context, request));
}

StatusOr<google::cloud::iot::v1::ListDeviceRegistriesResponse>
DeviceManagerTracingStub::ListDeviceRegistries(
    grpc::ClientContext& context,
    google::cloud::iot::v1::ListDeviceRegistriesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "ListDeviceRegistries");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListDeviceRegistries(context, request));
}

StatusOr<google::cloud::iot::v1::Device> DeviceManagerTracingStub::CreateDevice(
    grpc::ClientContext& context,
    google::cloud::iot::v1::CreateDeviceRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "CreateDevice");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->CreateDevice(context, request));
}

StatusOr<google::cloud::iot::v1::Device> DeviceManagerTracingStub::GetDevice(
    grpc::ClientContext& context,
    google::cloud::iot::v1::GetDeviceRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager", "GetDevice");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetDevice(context, request));
}

StatusOr<google::cloud::iot::v1::Device> DeviceManagerTracingStub::UpdateDevice(
    grpc::ClientContext& context,
    google::cloud::iot::v1::UpdateDeviceRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "UpdateDevice");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->UpdateDevice(context, request));
}

Status DeviceManagerTracingStub::DeleteDevice(
    grpc::ClientContext& context,
    google::cloud::iot::v1::DeleteDeviceRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "DeleteDevice");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->DeleteDevice(context, request));
}

StatusOr<google::cloud::iot::v1::ListDevicesResponse>
DeviceManagerTracingStub::ListDevices(
    grpc::ClientContext& context,
    google::cloud::iot::v1::ListDevicesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "ListDevices");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListDevices(context, request));
}

StatusOr<google::cloud::iot::v1::DeviceConfig>
DeviceManagerTracingStub::ModifyCloudToDeviceConfig(
    grpc::ClientContext& context,
    google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "ModifyCloudToDeviceConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ModifyCloudToDeviceConfig(context, request));
}

StatusOr<google::cloud::iot::v1::ListDeviceConfigVersionsResponse>
DeviceManagerTracingStub::ListDeviceConfigVersions(
    grpc::ClientContext& context,
    google::cloud::iot::v1::ListDeviceConfigVersionsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "ListDeviceConfigVersions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListDeviceConfigVersions(context, request));
}

StatusOr<google::cloud::iot::v1::ListDeviceStatesResponse>
DeviceManagerTracingStub::ListDeviceStates(
    grpc::ClientContext& context,
    google::cloud::iot::v1::ListDeviceStatesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "ListDeviceStates");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListDeviceStates(context, request));
}

StatusOr<google::iam::v1::Policy> DeviceManagerTracingStub::SetIamPolicy(
    grpc::ClientContext& context,
    google::iam::v1::SetIamPolicyRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "SetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->SetIamPolicy(context, request));
}

StatusOr<google::iam::v1::Policy> DeviceManagerTracingStub::GetIamPolicy(
    grpc::ClientContext& context,
    google::iam::v1::GetIamPolicyRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "GetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetIamPolicy(context, request));
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DeviceManagerTracingStub::TestIamPermissions(
    grpc::ClientContext& context,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "TestIamPermissions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->TestIamPermissions(context, request));
}

StatusOr<google::cloud::iot::v1::SendCommandToDeviceResponse>
DeviceManagerTracingStub::SendCommandToDevice(
    grpc::ClientContext& context,
    google::cloud::iot::v1::SendCommandToDeviceRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "SendCommandToDevice");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->SendCommandToDevice(context, request));
}

StatusOr<google::cloud::iot::v1::BindDeviceToGatewayResponse>
DeviceManagerTracingStub::BindDeviceToGateway(
    grpc::ClientContext& context,
    google::cloud::iot::v1::BindDeviceToGatewayRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "BindDeviceToGateway");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->BindDeviceToGateway(context, request));
}

StatusOr<google::cloud::iot::v1::UnbindDeviceFromGatewayResponse>
DeviceManagerTracingStub::UnbindDeviceFromGateway(
    grpc::ClientContext& context,
    google::cloud::iot::v1::UnbindDeviceFromGatewayRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.iot.v1.DeviceManager",
                                     "UnbindDeviceFromGateway");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->UnbindDeviceFromGateway(context, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<DeviceManagerStub> MakeDeviceManagerTracingStub(
    std::shared_ptr<DeviceManagerStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<DeviceManagerTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iot_v1_internal
}  // namespace cloud
}  // namespace google
