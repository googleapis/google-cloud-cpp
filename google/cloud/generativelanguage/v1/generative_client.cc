// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/ai/generativelanguage/v1/generative_service.proto

#include "google/cloud/generativelanguage/v1/generative_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace generativelanguage_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

GenerativeServiceClient::GenerativeServiceClient(
    std::shared_ptr<GenerativeServiceConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
GenerativeServiceClient::~GenerativeServiceClient() = default;

StatusOr<google::ai::generativelanguage::v1::GenerateContentResponse>
GenerativeServiceClient::GenerateContent(
    std::string const& model,
    std::vector<google::ai::generativelanguage::v1::Content> const& contents,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::ai::generativelanguage::v1::GenerateContentRequest request;
  request.set_model(model);
  *request.mutable_contents() = {contents.begin(), contents.end()};
  return connection_->GenerateContent(request);
}

StatusOr<google::ai::generativelanguage::v1::GenerateContentResponse>
GenerativeServiceClient::GenerateContent(
    google::ai::generativelanguage::v1::GenerateContentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GenerateContent(request);
}

StreamRange<google::ai::generativelanguage::v1::GenerateContentResponse>
GenerativeServiceClient::StreamGenerateContent(
    std::string const& model,
    std::vector<google::ai::generativelanguage::v1::Content> const& contents,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::ai::generativelanguage::v1::GenerateContentRequest request;
  request.set_model(model);
  *request.mutable_contents() = {contents.begin(), contents.end()};
  return connection_->StreamGenerateContent(request);
}

StreamRange<google::ai::generativelanguage::v1::GenerateContentResponse>
GenerativeServiceClient::StreamGenerateContent(
    google::ai::generativelanguage::v1::GenerateContentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->StreamGenerateContent(request);
}

StatusOr<google::ai::generativelanguage::v1::EmbedContentResponse>
GenerativeServiceClient::EmbedContent(
    std::string const& model,
    google::ai::generativelanguage::v1::Content const& content, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::ai::generativelanguage::v1::EmbedContentRequest request;
  request.set_model(model);
  *request.mutable_content() = content;
  return connection_->EmbedContent(request);
}

StatusOr<google::ai::generativelanguage::v1::EmbedContentResponse>
GenerativeServiceClient::EmbedContent(
    google::ai::generativelanguage::v1::EmbedContentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->EmbedContent(request);
}

StatusOr<google::ai::generativelanguage::v1::BatchEmbedContentsResponse>
GenerativeServiceClient::BatchEmbedContents(
    std::string const& model,
    std::vector<google::ai::generativelanguage::v1::EmbedContentRequest> const&
        requests,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::ai::generativelanguage::v1::BatchEmbedContentsRequest request;
  request.set_model(model);
  *request.mutable_requests() = {requests.begin(), requests.end()};
  return connection_->BatchEmbedContents(request);
}

StatusOr<google::ai::generativelanguage::v1::BatchEmbedContentsResponse>
GenerativeServiceClient::BatchEmbedContents(
    google::ai::generativelanguage::v1::BatchEmbedContentsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BatchEmbedContents(request);
}

StatusOr<google::ai::generativelanguage::v1::CountTokensResponse>
GenerativeServiceClient::CountTokens(
    std::string const& model,
    std::vector<google::ai::generativelanguage::v1::Content> const& contents,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::ai::generativelanguage::v1::CountTokensRequest request;
  request.set_model(model);
  *request.mutable_contents() = {contents.begin(), contents.end()};
  return connection_->CountTokens(request);
}

StatusOr<google::ai::generativelanguage::v1::CountTokensResponse>
GenerativeServiceClient::CountTokens(
    google::ai::generativelanguage::v1::CountTokensRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CountTokens(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace generativelanguage_v1
}  // namespace cloud
}  // namespace google
