// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/ai/generativelanguage/v1/generative_service.proto

#include "google/cloud/generativelanguage/v1/internal/generative_auth_decorator.h"
#include <google/ai/generativelanguage/v1/generative_service.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace generativelanguage_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

GenerativeServiceAuth::GenerativeServiceAuth(
    std::shared_ptr<google::cloud::internal::GrpcAuthenticationStrategy> auth,
    std::shared_ptr<GenerativeServiceStub> child)
    : auth_(std::move(auth)), child_(std::move(child)) {}

StatusOr<google::ai::generativelanguage::v1::GenerateContentResponse>
GenerativeServiceAuth::GenerateContent(
    grpc::ClientContext& context, Options const& options,
    google::ai::generativelanguage::v1::GenerateContentRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GenerateContent(context, options, request);
}

std::unique_ptr<google::cloud::internal::StreamingReadRpc<
    google::ai::generativelanguage::v1::GenerateContentResponse>>
GenerativeServiceAuth::StreamGenerateContent(
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::ai::generativelanguage::v1::GenerateContentRequest const& request) {
  using ErrorStream = ::google::cloud::internal::StreamingReadRpcError<
      google::ai::generativelanguage::v1::GenerateContentResponse>;
  auto status = auth_->ConfigureContext(*context);
  if (!status.ok()) return std::make_unique<ErrorStream>(std::move(status));
  return child_->StreamGenerateContent(std::move(context), options, request);
}

StatusOr<google::ai::generativelanguage::v1::EmbedContentResponse>
GenerativeServiceAuth::EmbedContent(
    grpc::ClientContext& context, Options const& options,
    google::ai::generativelanguage::v1::EmbedContentRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->EmbedContent(context, options, request);
}

StatusOr<google::ai::generativelanguage::v1::BatchEmbedContentsResponse>
GenerativeServiceAuth::BatchEmbedContents(
    grpc::ClientContext& context, Options const& options,
    google::ai::generativelanguage::v1::BatchEmbedContentsRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->BatchEmbedContents(context, options, request);
}

StatusOr<google::ai::generativelanguage::v1::CountTokensResponse>
GenerativeServiceAuth::CountTokens(
    grpc::ClientContext& context, Options const& options,
    google::ai::generativelanguage::v1::CountTokensRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CountTokens(context, options, request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace generativelanguage_v1_internal
}  // namespace cloud
}  // namespace google
