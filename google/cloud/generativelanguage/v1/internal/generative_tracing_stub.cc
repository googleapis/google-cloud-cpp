// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/ai/generativelanguage/v1/generative_service.proto

#include "google/cloud/generativelanguage/v1/internal/generative_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include "google/cloud/internal/streaming_read_rpc_tracing.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace generativelanguage_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GenerativeServiceTracingStub::GenerativeServiceTracingStub(
    std::shared_ptr<GenerativeServiceStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::ai::generativelanguage::v1::GenerateContentResponse>
GenerativeServiceTracingStub::GenerateContent(
    grpc::ClientContext& context, Options const& options,
    google::ai::generativelanguage::v1::GenerateContentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.ai.generativelanguage.v1.GenerativeService", "GenerateContent");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GenerateContent(context, options, request));
}

std::unique_ptr<google::cloud::internal::StreamingReadRpc<
    google::ai::generativelanguage::v1::GenerateContentResponse>>
GenerativeServiceTracingStub::StreamGenerateContent(
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::ai::generativelanguage::v1::GenerateContentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.ai.generativelanguage.v1.GenerativeService",
      "StreamGenerateContent");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto stream = child_->StreamGenerateContent(context, options, request);
  return std::make_unique<internal::StreamingReadRpcTracing<
      google::ai::generativelanguage::v1::GenerateContentResponse>>(
      std::move(context), std::move(stream), std::move(span));
}

StatusOr<google::ai::generativelanguage::v1::EmbedContentResponse>
GenerativeServiceTracingStub::EmbedContent(
    grpc::ClientContext& context, Options const& options,
    google::ai::generativelanguage::v1::EmbedContentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.ai.generativelanguage.v1.GenerativeService", "EmbedContent");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->EmbedContent(context, options, request));
}

StatusOr<google::ai::generativelanguage::v1::BatchEmbedContentsResponse>
GenerativeServiceTracingStub::BatchEmbedContents(
    grpc::ClientContext& context, Options const& options,
    google::ai::generativelanguage::v1::BatchEmbedContentsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.ai.generativelanguage.v1.GenerativeService",
      "BatchEmbedContents");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->BatchEmbedContents(context, options, request));
}

StatusOr<google::ai::generativelanguage::v1::CountTokensResponse>
GenerativeServiceTracingStub::CountTokens(
    grpc::ClientContext& context, Options const& options,
    google::ai::generativelanguage::v1::CountTokensRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.ai.generativelanguage.v1.GenerativeService", "CountTokens");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CountTokens(context, options, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<GenerativeServiceStub> MakeGenerativeServiceTracingStub(
    std::shared_ptr<GenerativeServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<GenerativeServiceTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace generativelanguage_v1_internal
}  // namespace cloud
}  // namespace google
