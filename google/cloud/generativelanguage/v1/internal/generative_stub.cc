// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/ai/generativelanguage/v1/generative_service.proto

#include "google/cloud/generativelanguage/v1/internal/generative_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/ai/generativelanguage/v1/generative_service.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace generativelanguage_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

GenerativeServiceStub::~GenerativeServiceStub() = default;

StatusOr<google::ai::generativelanguage::v1::GenerateContentResponse>
DefaultGenerativeServiceStub::GenerateContent(
    grpc::ClientContext& context, Options const&,
    google::ai::generativelanguage::v1::GenerateContentRequest const& request) {
  google::ai::generativelanguage::v1::GenerateContentResponse response;
  auto status = grpc_stub_->GenerateContent(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

std::unique_ptr<google::cloud::internal::StreamingReadRpc<
    google::ai::generativelanguage::v1::GenerateContentResponse>>
DefaultGenerativeServiceStub::StreamGenerateContent(
    std::shared_ptr<grpc::ClientContext> context, Options const&,
    google::ai::generativelanguage::v1::GenerateContentRequest const& request) {
  auto stream = grpc_stub_->StreamGenerateContent(context.get(), request);
  return std::make_unique<google::cloud::internal::StreamingReadRpcImpl<
      google::ai::generativelanguage::v1::GenerateContentResponse>>(
      std::move(context), std::move(stream));
}

StatusOr<google::ai::generativelanguage::v1::EmbedContentResponse>
DefaultGenerativeServiceStub::EmbedContent(
    grpc::ClientContext& context, Options const&,
    google::ai::generativelanguage::v1::EmbedContentRequest const& request) {
  google::ai::generativelanguage::v1::EmbedContentResponse response;
  auto status = grpc_stub_->EmbedContent(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::ai::generativelanguage::v1::BatchEmbedContentsResponse>
DefaultGenerativeServiceStub::BatchEmbedContents(
    grpc::ClientContext& context, Options const&,
    google::ai::generativelanguage::v1::BatchEmbedContentsRequest const&
        request) {
  google::ai::generativelanguage::v1::BatchEmbedContentsResponse response;
  auto status = grpc_stub_->BatchEmbedContents(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::ai::generativelanguage::v1::CountTokensResponse>
DefaultGenerativeServiceStub::CountTokens(
    grpc::ClientContext& context, Options const&,
    google::ai::generativelanguage::v1::CountTokensRequest const& request) {
  google::ai::generativelanguage::v1::CountTokensResponse response;
  auto status = grpc_stub_->CountTokens(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace generativelanguage_v1_internal
}  // namespace cloud
}  // namespace google
