// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/videointelligence/v1/video_intelligence.proto

#include "google/cloud/videointelligence/internal/video_intelligence_option_defaults.h"
#include "google/cloud/videointelligence/video_intelligence_connection.h"
#include "google/cloud/videointelligence/video_intelligence_options.h"
#include "google/cloud/internal/populate_common_options.h"
#include "google/cloud/internal/populate_grpc_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace videointelligence_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

namespace {
auto constexpr kBackoffScaling = 2.0;
}  // namespace

Options VideoIntelligenceServiceDefaultOptions(Options options) {
  options = google::cloud::internal::PopulateCommonOptions(
      std::move(options),
      "GOOGLE_CLOUD_CPP_VIDEO_INTELLIGENCE_SERVICE_ENDPOINT", "",
      "GOOGLE_CLOUD_CPP_VIDEO_INTELLIGENCE_SERVICE_AUTHORITY",
      "videointelligence.googleapis.com");
  options =
      google::cloud::internal::PopulateGrpcOptions(std::move(options), "");
  if (!options.has<
          videointelligence::VideoIntelligenceServiceRetryPolicyOption>()) {
    options.set<videointelligence::VideoIntelligenceServiceRetryPolicyOption>(
        videointelligence::VideoIntelligenceServiceLimitedTimeRetryPolicy(
            std::chrono::minutes(30))
            .clone());
  }
  if (!options.has<
          videointelligence::VideoIntelligenceServiceBackoffPolicyOption>()) {
    options.set<videointelligence::VideoIntelligenceServiceBackoffPolicyOption>(
        ExponentialBackoffPolicy(std::chrono::seconds(1),
                                 std::chrono::minutes(5), kBackoffScaling)
            .clone());
  }
  if (!options.has<
          videointelligence::VideoIntelligenceServicePollingPolicyOption>()) {
    options.set<videointelligence::VideoIntelligenceServicePollingPolicyOption>(
        GenericPollingPolicy<
            videointelligence::VideoIntelligenceServiceRetryPolicyOption::Type,
            videointelligence::VideoIntelligenceServiceBackoffPolicyOption::
                Type>(
            options
                .get<videointelligence::
                         VideoIntelligenceServiceRetryPolicyOption>()
                ->clone(),
            options
                .get<videointelligence::
                         VideoIntelligenceServiceBackoffPolicyOption>()
                ->clone())
            .clone());
  }
  if (!options.has<
          videointelligence::
              VideoIntelligenceServiceConnectionIdempotencyPolicyOption>()) {
    options.set<videointelligence::
                    VideoIntelligenceServiceConnectionIdempotencyPolicyOption>(
        videointelligence::
            MakeDefaultVideoIntelligenceServiceConnectionIdempotencyPolicy());
  }

  return options;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace videointelligence_internal
}  // namespace cloud
}  // namespace google
