// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/eventarc/publishing/v1/publisher.proto

#include "google/cloud/eventarc/publishing/v1/internal/publisher_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace eventarc_publishing_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

PublisherTracingConnection::PublisherTracingConnection(
    std::shared_ptr<eventarc_publishing_v1::PublisherConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::eventarc::publishing::v1::
             PublishChannelConnectionEventsResponse>
PublisherTracingConnection::PublishChannelConnectionEvents(
    google::cloud::eventarc::publishing::v1::
        PublishChannelConnectionEventsRequest const& request) {
  auto span = internal::MakeSpan(
      "eventarc_publishing_v1::PublisherConnection::"
      "PublishChannelConnectionEvents");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span,
                           child_->PublishChannelConnectionEvents(request));
}

StatusOr<google::cloud::eventarc::publishing::v1::PublishEventsResponse>
PublisherTracingConnection::PublishEvents(
    google::cloud::eventarc::publishing::v1::PublishEventsRequest const&
        request) {
  auto span = internal::MakeSpan(
      "eventarc_publishing_v1::PublisherConnection::PublishEvents");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->PublishEvents(request));
}

StatusOr<google::cloud::eventarc::publishing::v1::PublishResponse>
PublisherTracingConnection::Publish(
    google::cloud::eventarc::publishing::v1::PublishRequest const& request) {
  auto span = internal::MakeSpan(
      "eventarc_publishing_v1::PublisherConnection::Publish");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->Publish(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<eventarc_publishing_v1::PublisherConnection>
MakePublisherTracingConnection(
    std::shared_ptr<eventarc_publishing_v1::PublisherConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<PublisherTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace eventarc_publishing_v1_internal
}  // namespace cloud
}  // namespace google
