// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/eventarc/v1/eventarc.proto

#include "google/cloud/eventarc/eventarc_connection.h"
#include "google/cloud/eventarc/eventarc_options.h"
#include "google/cloud/eventarc/internal/eventarc_option_defaults.h"
#include "google/cloud/eventarc/internal/eventarc_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace eventarc {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

EventarcConnection::~EventarcConnection() = default;

StatusOr<google::cloud::eventarc::v1::Trigger> EventarcConnection::GetTrigger(
    google::cloud::eventarc::v1::GetTriggerRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::eventarc::v1::Trigger>
EventarcConnection::ListTriggers(
    google::cloud::eventarc::v1::ListTriggersRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::eventarc::v1::Trigger>>(
      std::move(request),
      [](google::cloud::eventarc::v1::ListTriggersRequest const&) {
        return StatusOr<google::cloud::eventarc::v1::ListTriggersResponse>{};
      },
      [](google::cloud::eventarc::v1::ListTriggersResponse const&) {
        return std::vector<google::cloud::eventarc::v1::Trigger>();
      });
}

future<StatusOr<google::cloud::eventarc::v1::Trigger>>
EventarcConnection::CreateTrigger(
    google::cloud::eventarc::v1::CreateTriggerRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::eventarc::v1::Trigger>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::eventarc::v1::Trigger>>
EventarcConnection::UpdateTrigger(
    google::cloud::eventarc::v1::UpdateTriggerRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::eventarc::v1::Trigger>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::eventarc::v1::Trigger>>
EventarcConnection::DeleteTrigger(
    google::cloud::eventarc::v1::DeleteTriggerRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::eventarc::v1::Trigger>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

namespace {
class EventarcConnectionImpl : public EventarcConnection {
 public:
  EventarcConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<eventarc_internal::EventarcStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<EventarcRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<EventarcBackoffPolicyOption>()->clone()),
        polling_policy_prototype_(
            options.get<EventarcPollingPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<EventarcConnectionIdempotencyPolicyOption>()->clone()) {
  }

  ~EventarcConnectionImpl() override = default;

  StatusOr<google::cloud::eventarc::v1::Trigger> GetTrigger(
      google::cloud::eventarc::v1::GetTriggerRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->GetTrigger(request),
        [this](grpc::ClientContext& context,
               google::cloud::eventarc::v1::GetTriggerRequest const& request) {
          return stub_->GetTrigger(context, request);
        },
        request, __func__);
  }

  StreamRange<google::cloud::eventarc::v1::Trigger> ListTriggers(
      google::cloud::eventarc::v1::ListTriggersRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<EventarcRetryPolicy const>(retry_policy());
    auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
    auto idempotency = idempotency_policy()->ListTriggers(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::eventarc::v1::Trigger>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::eventarc::v1::ListTriggersRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::eventarc::v1::ListTriggersRequest const&
                         request) {
                return stub->ListTriggers(context, request);
              },
              r, function_name);
        },
        [](google::cloud::eventarc::v1::ListTriggersResponse r) {
          std::vector<google::cloud::eventarc::v1::Trigger> result(
              r.triggers().size());
          auto& messages = *r.mutable_triggers();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  future<StatusOr<google::cloud::eventarc::v1::Trigger>> CreateTrigger(
      google::cloud::eventarc::v1::CreateTriggerRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::eventarc::v1::Trigger>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::eventarc::v1::CreateTriggerRequest const& request) {
          return stub->AsyncCreateTrigger(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::eventarc::v1::Trigger>,
        retry_policy(), backoff_policy(),
        idempotency_policy()->CreateTrigger(request), polling_policy(),
        __func__);
  }

  future<StatusOr<google::cloud::eventarc::v1::Trigger>> UpdateTrigger(
      google::cloud::eventarc::v1::UpdateTriggerRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::eventarc::v1::Trigger>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::eventarc::v1::UpdateTriggerRequest const& request) {
          return stub->AsyncUpdateTrigger(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::eventarc::v1::Trigger>,
        retry_policy(), backoff_policy(),
        idempotency_policy()->UpdateTrigger(request), polling_policy(),
        __func__);
  }

  future<StatusOr<google::cloud::eventarc::v1::Trigger>> DeleteTrigger(
      google::cloud::eventarc::v1::DeleteTriggerRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::eventarc::v1::Trigger>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::eventarc::v1::DeleteTriggerRequest const& request) {
          return stub->AsyncDeleteTrigger(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::eventarc::v1::Trigger>,
        retry_policy(), backoff_policy(),
        idempotency_policy()->DeleteTrigger(request), polling_policy(),
        __func__);
  }

 private:
  std::unique_ptr<EventarcRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<EventarcRetryPolicyOption>()) {
      return options.get<EventarcRetryPolicyOption>()->clone();
    }
    return retry_policy_prototype_->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<EventarcBackoffPolicyOption>()) {
      return options.get<EventarcBackoffPolicyOption>()->clone();
    }
    return backoff_policy_prototype_->clone();
  }

  std::unique_ptr<PollingPolicy> polling_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<EventarcPollingPolicyOption>()) {
      return options.get<EventarcPollingPolicyOption>()->clone();
    }
    return polling_policy_prototype_->clone();
  }

  std::unique_ptr<EventarcConnectionIdempotencyPolicy> idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<EventarcConnectionIdempotencyPolicyOption>()) {
      return options.get<EventarcConnectionIdempotencyPolicyOption>()->clone();
    }
    return idempotency_policy_->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<eventarc_internal::EventarcStub> stub_;
  std::unique_ptr<EventarcRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<PollingPolicy const> polling_policy_prototype_;
  std::unique_ptr<EventarcConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<EventarcConnection> MakeEventarcConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 EventarcPolicyOptionList>(options, __func__);
  options = eventarc_internal::EventarcDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub =
      eventarc_internal::CreateDefaultEventarcStub(background->cq(), options);
  return std::make_shared<EventarcConnectionImpl>(std::move(background),
                                                  std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace eventarc
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace eventarc_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<eventarc::EventarcConnection> MakeEventarcConnection(
    std::shared_ptr<EventarcStub> stub, Options options) {
  options = EventarcDefaultOptions(std::move(options));
  return std::make_shared<eventarc::EventarcConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace eventarc_internal
}  // namespace cloud
}  // namespace google
