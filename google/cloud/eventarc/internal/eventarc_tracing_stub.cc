// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/eventarc/v1/eventarc.proto

#include "google/cloud/eventarc/internal/eventarc_tracing_stub.h"

namespace google {
namespace cloud {
namespace eventarc_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

EventarcTracingStub::EventarcTracingStub(std::shared_ptr<EventarcStub> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::eventarc::v1::Trigger> EventarcTracingStub::GetTrigger(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::GetTriggerRequest const& request) {
  return child_->GetTrigger(context, request);
}

StatusOr<google::cloud::eventarc::v1::ListTriggersResponse>
EventarcTracingStub::ListTriggers(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::ListTriggersRequest const& request) {
  return child_->ListTriggers(context, request);
}

future<StatusOr<google::longrunning::Operation>>
EventarcTracingStub::AsyncCreateTrigger(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::eventarc::v1::CreateTriggerRequest const& request) {
  return child_->AsyncCreateTrigger(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
EventarcTracingStub::AsyncUpdateTrigger(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::eventarc::v1::UpdateTriggerRequest const& request) {
  return child_->AsyncUpdateTrigger(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
EventarcTracingStub::AsyncDeleteTrigger(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::eventarc::v1::DeleteTriggerRequest const& request) {
  return child_->AsyncDeleteTrigger(cq, std::move(context), request);
}

StatusOr<google::cloud::eventarc::v1::Channel> EventarcTracingStub::GetChannel(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::GetChannelRequest const& request) {
  return child_->GetChannel(context, request);
}

StatusOr<google::cloud::eventarc::v1::ListChannelsResponse>
EventarcTracingStub::ListChannels(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::ListChannelsRequest const& request) {
  return child_->ListChannels(context, request);
}

future<StatusOr<google::longrunning::Operation>>
EventarcTracingStub::AsyncCreateChannel(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::eventarc::v1::CreateChannelRequest const& request) {
  return child_->AsyncCreateChannel(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
EventarcTracingStub::AsyncUpdateChannel(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::eventarc::v1::UpdateChannelRequest const& request) {
  return child_->AsyncUpdateChannel(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
EventarcTracingStub::AsyncDeleteChannel(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::eventarc::v1::DeleteChannelRequest const& request) {
  return child_->AsyncDeleteChannel(cq, std::move(context), request);
}

StatusOr<google::cloud::eventarc::v1::Provider>
EventarcTracingStub::GetProvider(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::GetProviderRequest const& request) {
  return child_->GetProvider(context, request);
}

StatusOr<google::cloud::eventarc::v1::ListProvidersResponse>
EventarcTracingStub::ListProviders(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::ListProvidersRequest const& request) {
  return child_->ListProviders(context, request);
}

StatusOr<google::cloud::eventarc::v1::ChannelConnection>
EventarcTracingStub::GetChannelConnection(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::GetChannelConnectionRequest const& request) {
  return child_->GetChannelConnection(context, request);
}

StatusOr<google::cloud::eventarc::v1::ListChannelConnectionsResponse>
EventarcTracingStub::ListChannelConnections(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::ListChannelConnectionsRequest const& request) {
  return child_->ListChannelConnections(context, request);
}

future<StatusOr<google::longrunning::Operation>>
EventarcTracingStub::AsyncCreateChannelConnection(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::eventarc::v1::CreateChannelConnectionRequest const&
        request) {
  return child_->AsyncCreateChannelConnection(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
EventarcTracingStub::AsyncDeleteChannelConnection(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::eventarc::v1::DeleteChannelConnectionRequest const&
        request) {
  return child_->AsyncDeleteChannelConnection(cq, std::move(context), request);
}

StatusOr<google::cloud::eventarc::v1::GoogleChannelConfig>
EventarcTracingStub::GetGoogleChannelConfig(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::GetGoogleChannelConfigRequest const& request) {
  return child_->GetGoogleChannelConfig(context, request);
}

StatusOr<google::cloud::eventarc::v1::GoogleChannelConfig>
EventarcTracingStub::UpdateGoogleChannelConfig(
    grpc::ClientContext& context,
    google::cloud::eventarc::v1::UpdateGoogleChannelConfigRequest const&
        request) {
  return child_->UpdateGoogleChannelConfig(context, request);
}

future<StatusOr<google::longrunning::Operation>>
EventarcTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> EventarcTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace eventarc_internal
}  // namespace cloud
}  // namespace google
