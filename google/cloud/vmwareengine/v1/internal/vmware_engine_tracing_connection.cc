// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/vmwareengine/v1/vmwareengine.proto

#include "google/cloud/vmwareengine/v1/internal/vmware_engine_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>

namespace google {
namespace cloud {
namespace vmwareengine_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

VmwareEngineTracingConnection::VmwareEngineTracingConnection(
    std::shared_ptr<vmwareengine_v1::VmwareEngineConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::vmwareengine::v1::PrivateCloud>
VmwareEngineTracingConnection::ListPrivateClouds(
    google::cloud::vmwareengine::v1::ListPrivateCloudsRequest request) {
  return child_->ListPrivateClouds(request);
}

StatusOr<google::cloud::vmwareengine::v1::PrivateCloud>
VmwareEngineTracingConnection::GetPrivateCloud(
    google::cloud::vmwareengine::v1::GetPrivateCloudRequest const& request) {
  auto span = internal::MakeSpan(
      "vmwareengine_v1::VmwareEngineConnection::GetPrivateCloud");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetPrivateCloud(request));
}

future<StatusOr<google::cloud::vmwareengine::v1::PrivateCloud>>
VmwareEngineTracingConnection::CreatePrivateCloud(
    google::cloud::vmwareengine::v1::CreatePrivateCloudRequest const& request) {
  return child_->CreatePrivateCloud(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::PrivateCloud>>
VmwareEngineTracingConnection::UpdatePrivateCloud(
    google::cloud::vmwareengine::v1::UpdatePrivateCloudRequest const& request) {
  return child_->UpdatePrivateCloud(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::PrivateCloud>>
VmwareEngineTracingConnection::DeletePrivateCloud(
    google::cloud::vmwareengine::v1::DeletePrivateCloudRequest const& request) {
  return child_->DeletePrivateCloud(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::PrivateCloud>>
VmwareEngineTracingConnection::UndeletePrivateCloud(
    google::cloud::vmwareengine::v1::UndeletePrivateCloudRequest const&
        request) {
  return child_->UndeletePrivateCloud(request);
}

StreamRange<google::cloud::vmwareengine::v1::Cluster>
VmwareEngineTracingConnection::ListClusters(
    google::cloud::vmwareengine::v1::ListClustersRequest request) {
  return child_->ListClusters(request);
}

StatusOr<google::cloud::vmwareengine::v1::Cluster>
VmwareEngineTracingConnection::GetCluster(
    google::cloud::vmwareengine::v1::GetClusterRequest const& request) {
  auto span =
      internal::MakeSpan("vmwareengine_v1::VmwareEngineConnection::GetCluster");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetCluster(request));
}

future<StatusOr<google::cloud::vmwareengine::v1::Cluster>>
VmwareEngineTracingConnection::CreateCluster(
    google::cloud::vmwareengine::v1::CreateClusterRequest const& request) {
  return child_->CreateCluster(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::Cluster>>
VmwareEngineTracingConnection::UpdateCluster(
    google::cloud::vmwareengine::v1::UpdateClusterRequest const& request) {
  return child_->UpdateCluster(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::OperationMetadata>>
VmwareEngineTracingConnection::DeleteCluster(
    google::cloud::vmwareengine::v1::DeleteClusterRequest const& request) {
  return child_->DeleteCluster(request);
}

StreamRange<google::cloud::vmwareengine::v1::Subnet>
VmwareEngineTracingConnection::ListSubnets(
    google::cloud::vmwareengine::v1::ListSubnetsRequest request) {
  return child_->ListSubnets(request);
}

StreamRange<google::cloud::vmwareengine::v1::NodeType>
VmwareEngineTracingConnection::ListNodeTypes(
    google::cloud::vmwareengine::v1::ListNodeTypesRequest request) {
  return child_->ListNodeTypes(request);
}

StatusOr<google::cloud::vmwareengine::v1::NodeType>
VmwareEngineTracingConnection::GetNodeType(
    google::cloud::vmwareengine::v1::GetNodeTypeRequest const& request) {
  auto span = internal::MakeSpan(
      "vmwareengine_v1::VmwareEngineConnection::GetNodeType");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetNodeType(request));
}

StatusOr<google::cloud::vmwareengine::v1::Credentials>
VmwareEngineTracingConnection::ShowNsxCredentials(
    google::cloud::vmwareengine::v1::ShowNsxCredentialsRequest const& request) {
  auto span = internal::MakeSpan(
      "vmwareengine_v1::VmwareEngineConnection::ShowNsxCredentials");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ShowNsxCredentials(request));
}

StatusOr<google::cloud::vmwareengine::v1::Credentials>
VmwareEngineTracingConnection::ShowVcenterCredentials(
    google::cloud::vmwareengine::v1::ShowVcenterCredentialsRequest const&
        request) {
  auto span = internal::MakeSpan(
      "vmwareengine_v1::VmwareEngineConnection::ShowVcenterCredentials");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ShowVcenterCredentials(request));
}

future<StatusOr<google::cloud::vmwareengine::v1::PrivateCloud>>
VmwareEngineTracingConnection::ResetNsxCredentials(
    google::cloud::vmwareengine::v1::ResetNsxCredentialsRequest const&
        request) {
  return child_->ResetNsxCredentials(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::PrivateCloud>>
VmwareEngineTracingConnection::ResetVcenterCredentials(
    google::cloud::vmwareengine::v1::ResetVcenterCredentialsRequest const&
        request) {
  return child_->ResetVcenterCredentials(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::HcxActivationKey>>
VmwareEngineTracingConnection::CreateHcxActivationKey(
    google::cloud::vmwareengine::v1::CreateHcxActivationKeyRequest const&
        request) {
  return child_->CreateHcxActivationKey(request);
}

StreamRange<google::cloud::vmwareengine::v1::HcxActivationKey>
VmwareEngineTracingConnection::ListHcxActivationKeys(
    google::cloud::vmwareengine::v1::ListHcxActivationKeysRequest request) {
  return child_->ListHcxActivationKeys(request);
}

StatusOr<google::cloud::vmwareengine::v1::HcxActivationKey>
VmwareEngineTracingConnection::GetHcxActivationKey(
    google::cloud::vmwareengine::v1::GetHcxActivationKeyRequest const&
        request) {
  auto span = internal::MakeSpan(
      "vmwareengine_v1::VmwareEngineConnection::GetHcxActivationKey");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetHcxActivationKey(request));
}

StatusOr<google::cloud::vmwareengine::v1::NetworkPolicy>
VmwareEngineTracingConnection::GetNetworkPolicy(
    google::cloud::vmwareengine::v1::GetNetworkPolicyRequest const& request) {
  auto span = internal::MakeSpan(
      "vmwareengine_v1::VmwareEngineConnection::GetNetworkPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetNetworkPolicy(request));
}

StreamRange<google::cloud::vmwareengine::v1::NetworkPolicy>
VmwareEngineTracingConnection::ListNetworkPolicies(
    google::cloud::vmwareengine::v1::ListNetworkPoliciesRequest request) {
  return child_->ListNetworkPolicies(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::NetworkPolicy>>
VmwareEngineTracingConnection::CreateNetworkPolicy(
    google::cloud::vmwareengine::v1::CreateNetworkPolicyRequest const&
        request) {
  return child_->CreateNetworkPolicy(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::NetworkPolicy>>
VmwareEngineTracingConnection::UpdateNetworkPolicy(
    google::cloud::vmwareengine::v1::UpdateNetworkPolicyRequest const&
        request) {
  return child_->UpdateNetworkPolicy(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::OperationMetadata>>
VmwareEngineTracingConnection::DeleteNetworkPolicy(
    google::cloud::vmwareengine::v1::DeleteNetworkPolicyRequest const&
        request) {
  return child_->DeleteNetworkPolicy(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::VmwareEngineNetwork>>
VmwareEngineTracingConnection::CreateVmwareEngineNetwork(
    google::cloud::vmwareengine::v1::CreateVmwareEngineNetworkRequest const&
        request) {
  return child_->CreateVmwareEngineNetwork(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::VmwareEngineNetwork>>
VmwareEngineTracingConnection::UpdateVmwareEngineNetwork(
    google::cloud::vmwareengine::v1::UpdateVmwareEngineNetworkRequest const&
        request) {
  return child_->UpdateVmwareEngineNetwork(request);
}

future<StatusOr<google::cloud::vmwareengine::v1::OperationMetadata>>
VmwareEngineTracingConnection::DeleteVmwareEngineNetwork(
    google::cloud::vmwareengine::v1::DeleteVmwareEngineNetworkRequest const&
        request) {
  return child_->DeleteVmwareEngineNetwork(request);
}

StatusOr<google::cloud::vmwareengine::v1::VmwareEngineNetwork>
VmwareEngineTracingConnection::GetVmwareEngineNetwork(
    google::cloud::vmwareengine::v1::GetVmwareEngineNetworkRequest const&
        request) {
  auto span = internal::MakeSpan(
      "vmwareengine_v1::VmwareEngineConnection::GetVmwareEngineNetwork");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVmwareEngineNetwork(request));
}

StreamRange<google::cloud::vmwareengine::v1::VmwareEngineNetwork>
VmwareEngineTracingConnection::ListVmwareEngineNetworks(
    google::cloud::vmwareengine::v1::ListVmwareEngineNetworksRequest request) {
  return child_->ListVmwareEngineNetworks(request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace vmwareengine_v1_internal
}  // namespace cloud
}  // namespace google
