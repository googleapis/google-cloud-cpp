// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/vmwareengine/v1/vmwareengine.proto

#include "google/cloud/vmwareengine/v1/internal/vmware_engine_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace vmwareengine_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

VmwareEngineTracingStub::VmwareEngineTracingStub(
    std::shared_ptr<VmwareEngineStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::vmwareengine::v1::ListPrivateCloudsResponse>
VmwareEngineTracingStub::ListPrivateClouds(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListPrivateCloudsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListPrivateClouds");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListPrivateClouds(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::PrivateCloud>
VmwareEngineTracingStub::GetPrivateCloud(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetPrivateCloudRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetPrivateCloud");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetPrivateCloud(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreatePrivateCloud(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreatePrivateCloudRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreatePrivateCloud");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreatePrivateCloud(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdatePrivateCloud(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdatePrivateCloudRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdatePrivateCloud");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdatePrivateCloud(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeletePrivateCloud(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::DeletePrivateCloudRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "DeletePrivateCloud");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeletePrivateCloud(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUndeletePrivateCloud(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UndeletePrivateCloudRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UndeletePrivateCloud");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUndeletePrivateCloud(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::ListClustersResponse>
VmwareEngineTracingStub::ListClusters(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListClustersRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListClusters");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListClusters(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::Cluster>
VmwareEngineTracingStub::GetCluster(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetClusterRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetCluster");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetCluster(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreateCluster(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreateClusterRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreateCluster");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateCluster(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateCluster(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdateClusterRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdateCluster");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateCluster(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeleteCluster(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::DeleteClusterRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "DeleteCluster");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteCluster(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::ListNodesResponse>
VmwareEngineTracingStub::ListNodes(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListNodesRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListNodes");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span, child_->ListNodes(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::Node>
VmwareEngineTracingStub::GetNode(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetNodeRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetNode");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span, child_->GetNode(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::ListExternalAddressesResponse>
VmwareEngineTracingStub::ListExternalAddresses(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListExternalAddressesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListExternalAddresses");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListExternalAddresses(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::
             FetchNetworkPolicyExternalAddressesResponse>
VmwareEngineTracingStub::FetchNetworkPolicyExternalAddresses(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::
        FetchNetworkPolicyExternalAddressesRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.vmwareengine.v1.VmwareEngine",
                             "FetchNetworkPolicyExternalAddresses");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->FetchNetworkPolicyExternalAddresses(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::ExternalAddress>
VmwareEngineTracingStub::GetExternalAddress(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetExternalAddressRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetExternalAddress");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetExternalAddress(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreateExternalAddress(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreateExternalAddressRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreateExternalAddress");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateExternalAddress(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateExternalAddress(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdateExternalAddressRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdateExternalAddress");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateExternalAddress(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeleteExternalAddress(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::DeleteExternalAddressRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "DeleteExternalAddress");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteExternalAddress(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::ListSubnetsResponse>
VmwareEngineTracingStub::ListSubnets(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListSubnetsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListSubnets");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListSubnets(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::Subnet>
VmwareEngineTracingStub::GetSubnet(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetSubnetRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetSubnet");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span, child_->GetSubnet(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateSubnet(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdateSubnetRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdateSubnet");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateSubnet(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::ListExternalAccessRulesResponse>
VmwareEngineTracingStub::ListExternalAccessRules(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListExternalAccessRulesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListExternalAccessRules");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListExternalAccessRules(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::ExternalAccessRule>
VmwareEngineTracingStub::GetExternalAccessRule(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetExternalAccessRuleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetExternalAccessRule");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetExternalAccessRule(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreateExternalAccessRule(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreateExternalAccessRuleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreateExternalAccessRule");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateExternalAccessRule(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateExternalAccessRule(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdateExternalAccessRuleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdateExternalAccessRule");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateExternalAccessRule(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeleteExternalAccessRule(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::DeleteExternalAccessRuleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "DeleteExternalAccessRule");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteExternalAccessRule(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::ListLoggingServersResponse>
VmwareEngineTracingStub::ListLoggingServers(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListLoggingServersRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListLoggingServers");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListLoggingServers(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::LoggingServer>
VmwareEngineTracingStub::GetLoggingServer(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetLoggingServerRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetLoggingServer");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetLoggingServer(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreateLoggingServer(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreateLoggingServerRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreateLoggingServer");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateLoggingServer(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateLoggingServer(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdateLoggingServerRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdateLoggingServer");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateLoggingServer(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeleteLoggingServer(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::DeleteLoggingServerRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "DeleteLoggingServer");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteLoggingServer(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::ListNodeTypesResponse>
VmwareEngineTracingStub::ListNodeTypes(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListNodeTypesRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListNodeTypes");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListNodeTypes(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::NodeType>
VmwareEngineTracingStub::GetNodeType(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetNodeTypeRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetNodeType");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetNodeType(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::Credentials>
VmwareEngineTracingStub::ShowNsxCredentials(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ShowNsxCredentialsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ShowNsxCredentials");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ShowNsxCredentials(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::Credentials>
VmwareEngineTracingStub::ShowVcenterCredentials(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ShowVcenterCredentialsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ShowVcenterCredentials");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ShowVcenterCredentials(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncResetNsxCredentials(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::ResetNsxCredentialsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ResetNsxCredentials");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncResetNsxCredentials(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncResetVcenterCredentials(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::ResetVcenterCredentialsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ResetVcenterCredentials");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncResetVcenterCredentials(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::DnsForwarding>
VmwareEngineTracingStub::GetDnsForwarding(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetDnsForwardingRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetDnsForwarding");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetDnsForwarding(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateDnsForwarding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdateDnsForwardingRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdateDnsForwarding");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateDnsForwarding(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::NetworkPeering>
VmwareEngineTracingStub::GetNetworkPeering(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetNetworkPeeringRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetNetworkPeering");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetNetworkPeering(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::ListNetworkPeeringsResponse>
VmwareEngineTracingStub::ListNetworkPeerings(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListNetworkPeeringsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListNetworkPeerings");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListNetworkPeerings(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreateNetworkPeering(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreateNetworkPeeringRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreateNetworkPeering");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateNetworkPeering(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeleteNetworkPeering(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::DeleteNetworkPeeringRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "DeleteNetworkPeering");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteNetworkPeering(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateNetworkPeering(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdateNetworkPeeringRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdateNetworkPeering");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateNetworkPeering(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::ListPeeringRoutesResponse>
VmwareEngineTracingStub::ListPeeringRoutes(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListPeeringRoutesRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListPeeringRoutes");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListPeeringRoutes(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreateHcxActivationKey(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreateHcxActivationKeyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreateHcxActivationKey");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateHcxActivationKey(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::ListHcxActivationKeysResponse>
VmwareEngineTracingStub::ListHcxActivationKeys(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListHcxActivationKeysRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListHcxActivationKeys");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListHcxActivationKeys(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::HcxActivationKey>
VmwareEngineTracingStub::GetHcxActivationKey(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetHcxActivationKeyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetHcxActivationKey");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetHcxActivationKey(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::NetworkPolicy>
VmwareEngineTracingStub::GetNetworkPolicy(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetNetworkPolicyRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetNetworkPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetNetworkPolicy(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::ListNetworkPoliciesResponse>
VmwareEngineTracingStub::ListNetworkPolicies(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListNetworkPoliciesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListNetworkPolicies");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListNetworkPolicies(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreateNetworkPolicy(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreateNetworkPolicyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreateNetworkPolicy");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateNetworkPolicy(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateNetworkPolicy(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdateNetworkPolicyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdateNetworkPolicy");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateNetworkPolicy(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeleteNetworkPolicy(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::DeleteNetworkPolicyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "DeleteNetworkPolicy");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteNetworkPolicy(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::ListManagementDnsZoneBindingsResponse>
VmwareEngineTracingStub::ListManagementDnsZoneBindings(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListManagementDnsZoneBindingsRequest const&
        request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.vmwareengine.v1.VmwareEngine",
                             "ListManagementDnsZoneBindings");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListManagementDnsZoneBindings(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::ManagementDnsZoneBinding>
VmwareEngineTracingStub::GetManagementDnsZoneBinding(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetManagementDnsZoneBindingRequest const&
        request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.vmwareengine.v1.VmwareEngine",
                             "GetManagementDnsZoneBinding");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetManagementDnsZoneBinding(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreateManagementDnsZoneBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::
        CreateManagementDnsZoneBindingRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.vmwareengine.v1.VmwareEngine",
                             "CreateManagementDnsZoneBinding");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateManagementDnsZoneBinding(cq, context, options,
                                                       request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateManagementDnsZoneBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::
        UpdateManagementDnsZoneBindingRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.vmwareengine.v1.VmwareEngine",
                             "UpdateManagementDnsZoneBinding");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateManagementDnsZoneBinding(cq, context, options,
                                                       request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeleteManagementDnsZoneBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::
        DeleteManagementDnsZoneBindingRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.vmwareengine.v1.VmwareEngine",
                             "DeleteManagementDnsZoneBinding");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteManagementDnsZoneBinding(cq, context, options,
                                                       request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncRepairManagementDnsZoneBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::
        RepairManagementDnsZoneBindingRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.vmwareengine.v1.VmwareEngine",
                             "RepairManagementDnsZoneBinding");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncRepairManagementDnsZoneBinding(cq, context, options,
                                                       request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreateVmwareEngineNetwork(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreateVmwareEngineNetworkRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreateVmwareEngineNetwork");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCreateVmwareEngineNetwork(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdateVmwareEngineNetwork(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdateVmwareEngineNetworkRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdateVmwareEngineNetwork");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncUpdateVmwareEngineNetwork(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeleteVmwareEngineNetwork(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::DeleteVmwareEngineNetworkRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "DeleteVmwareEngineNetwork");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncDeleteVmwareEngineNetwork(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::VmwareEngineNetwork>
VmwareEngineTracingStub::GetVmwareEngineNetwork(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetVmwareEngineNetworkRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetVmwareEngineNetwork");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetVmwareEngineNetwork(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::ListVmwareEngineNetworksResponse>
VmwareEngineTracingStub::ListVmwareEngineNetworks(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListVmwareEngineNetworksRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListVmwareEngineNetworks");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListVmwareEngineNetworks(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncCreatePrivateConnection(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::CreatePrivateConnectionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "CreatePrivateConnection");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreatePrivateConnection(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::PrivateConnection>
VmwareEngineTracingStub::GetPrivateConnection(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetPrivateConnectionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetPrivateConnection");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetPrivateConnection(context, request));
}

StatusOr<google::cloud::vmwareengine::v1::ListPrivateConnectionsResponse>
VmwareEngineTracingStub::ListPrivateConnections(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::ListPrivateConnectionsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "ListPrivateConnections");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListPrivateConnections(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncUpdatePrivateConnection(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::UpdatePrivateConnectionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "UpdatePrivateConnection");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdatePrivateConnection(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncDeletePrivateConnection(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::DeletePrivateConnectionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "DeletePrivateConnection");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeletePrivateConnection(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<
    google::cloud::vmwareengine::v1::ListPrivateConnectionPeeringRoutesResponse>
VmwareEngineTracingStub::ListPrivateConnectionPeeringRoutes(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::
        ListPrivateConnectionPeeringRoutesRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.vmwareengine.v1.VmwareEngine",
                             "ListPrivateConnectionPeeringRoutes");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ListPrivateConnectionPeeringRoutes(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncGrantDnsBindPermission(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::GrantDnsBindPermissionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GrantDnsBindPermission");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGrantDnsBindPermission(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::cloud::vmwareengine::v1::DnsBindPermission>
VmwareEngineTracingStub::GetDnsBindPermission(
    grpc::ClientContext& context,
    google::cloud::vmwareengine::v1::GetDnsBindPermissionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "GetDnsBindPermission");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetDnsBindPermission(context, request));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncRevokeDnsBindPermission(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::cloud::vmwareengine::v1::RevokeDnsBindPermissionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.vmwareengine.v1.VmwareEngine", "RevokeDnsBindPermission");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncRevokeDnsBindPermission(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<StatusOr<google::longrunning::Operation>>
VmwareEngineTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.longrunning.Operations", "GetOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGetOperation(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<Status> VmwareEngineTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.longrunning.Operations",
                                     "CancelOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCancelOperation(cq, context, options, request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<VmwareEngineStub> MakeVmwareEngineTracingStub(
    std::shared_ptr<VmwareEngineStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<VmwareEngineTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace vmwareengine_v1_internal
}  // namespace cloud
}  // namespace google
