// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/kms/v1/service.proto

#include "google/cloud/kms/key_management_connection.h"
#include "google/cloud/kms/internal/key_management_option_defaults.h"
#include "google/cloud/kms/internal/key_management_stub_factory.h"
#include "google/cloud/kms/key_management_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace kms {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

KeyManagementServiceConnection::~KeyManagementServiceConnection() = default;

StreamRange<google::cloud::kms::v1::KeyRing>
KeyManagementServiceConnection::ListKeyRings(
    google::cloud::kms::v1::ListKeyRingsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::kms::v1::KeyRing>>(
      std::move(request),
      [](google::cloud::kms::v1::ListKeyRingsRequest const&) {
        return StatusOr<google::cloud::kms::v1::ListKeyRingsResponse>{};
      },
      [](google::cloud::kms::v1::ListKeyRingsResponse const&) {
        return std::vector<google::cloud::kms::v1::KeyRing>();
      });
}

StreamRange<google::cloud::kms::v1::CryptoKey>
KeyManagementServiceConnection::ListCryptoKeys(
    google::cloud::kms::v1::ListCryptoKeysRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::kms::v1::CryptoKey>>(
      std::move(request),
      [](google::cloud::kms::v1::ListCryptoKeysRequest const&) {
        return StatusOr<google::cloud::kms::v1::ListCryptoKeysResponse>{};
      },
      [](google::cloud::kms::v1::ListCryptoKeysResponse const&) {
        return std::vector<google::cloud::kms::v1::CryptoKey>();
      });
}

StreamRange<google::cloud::kms::v1::CryptoKeyVersion>
KeyManagementServiceConnection::ListCryptoKeyVersions(
    google::cloud::kms::v1::ListCryptoKeyVersionsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::kms::v1::CryptoKeyVersion>>(
      std::move(request),
      [](google::cloud::kms::v1::ListCryptoKeyVersionsRequest const&) {
        return StatusOr<
            google::cloud::kms::v1::ListCryptoKeyVersionsResponse>{};
      },
      [](google::cloud::kms::v1::ListCryptoKeyVersionsResponse const&) {
        return std::vector<google::cloud::kms::v1::CryptoKeyVersion>();
      });
}

StreamRange<google::cloud::kms::v1::ImportJob>
KeyManagementServiceConnection::ListImportJobs(
    google::cloud::kms::v1::ListImportJobsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::kms::v1::ImportJob>>(
      std::move(request),
      [](google::cloud::kms::v1::ListImportJobsRequest const&) {
        return StatusOr<google::cloud::kms::v1::ListImportJobsResponse>{};
      },
      [](google::cloud::kms::v1::ListImportJobsResponse const&) {
        return std::vector<google::cloud::kms::v1::ImportJob>();
      });
}

StatusOr<google::cloud::kms::v1::KeyRing>
KeyManagementServiceConnection::GetKeyRing(
    google::cloud::kms::v1::GetKeyRingRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKey>
KeyManagementServiceConnection::GetCryptoKey(
    google::cloud::kms::v1::GetCryptoKeyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKeyVersion>
KeyManagementServiceConnection::GetCryptoKeyVersion(
    google::cloud::kms::v1::GetCryptoKeyVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::PublicKey>
KeyManagementServiceConnection::GetPublicKey(
    google::cloud::kms::v1::GetPublicKeyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::ImportJob>
KeyManagementServiceConnection::GetImportJob(
    google::cloud::kms::v1::GetImportJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::KeyRing>
KeyManagementServiceConnection::CreateKeyRing(
    google::cloud::kms::v1::CreateKeyRingRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKey>
KeyManagementServiceConnection::CreateCryptoKey(
    google::cloud::kms::v1::CreateCryptoKeyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKeyVersion>
KeyManagementServiceConnection::CreateCryptoKeyVersion(
    google::cloud::kms::v1::CreateCryptoKeyVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKeyVersion>
KeyManagementServiceConnection::ImportCryptoKeyVersion(
    google::cloud::kms::v1::ImportCryptoKeyVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::ImportJob>
KeyManagementServiceConnection::CreateImportJob(
    google::cloud::kms::v1::CreateImportJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKey>
KeyManagementServiceConnection::UpdateCryptoKey(
    google::cloud::kms::v1::UpdateCryptoKeyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKeyVersion>
KeyManagementServiceConnection::UpdateCryptoKeyVersion(
    google::cloud::kms::v1::UpdateCryptoKeyVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKey>
KeyManagementServiceConnection::UpdateCryptoKeyPrimaryVersion(
    google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKeyVersion>
KeyManagementServiceConnection::DestroyCryptoKeyVersion(
    google::cloud::kms::v1::DestroyCryptoKeyVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::CryptoKeyVersion>
KeyManagementServiceConnection::RestoreCryptoKeyVersion(
    google::cloud::kms::v1::RestoreCryptoKeyVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::EncryptResponse>
KeyManagementServiceConnection::Encrypt(
    google::cloud::kms::v1::EncryptRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::DecryptResponse>
KeyManagementServiceConnection::Decrypt(
    google::cloud::kms::v1::DecryptRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::AsymmetricSignResponse>
KeyManagementServiceConnection::AsymmetricSign(
    google::cloud::kms::v1::AsymmetricSignRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::AsymmetricDecryptResponse>
KeyManagementServiceConnection::AsymmetricDecrypt(
    google::cloud::kms::v1::AsymmetricDecryptRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::MacSignResponse>
KeyManagementServiceConnection::MacSign(
    google::cloud::kms::v1::MacSignRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::MacVerifyResponse>
KeyManagementServiceConnection::MacVerify(
    google::cloud::kms::v1::MacVerifyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::kms::v1::GenerateRandomBytesResponse>
KeyManagementServiceConnection::GenerateRandomBytes(
    google::cloud::kms::v1::GenerateRandomBytesRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

namespace {
class KeyManagementServiceConnectionImpl
    : public KeyManagementServiceConnection {
 public:
  KeyManagementServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<kms_internal::KeyManagementServiceStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<KeyManagementServiceRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<KeyManagementServiceBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options
                .get<KeyManagementServiceConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~KeyManagementServiceConnectionImpl() override = default;

  StreamRange<google::cloud::kms::v1::KeyRing> ListKeyRings(
      google::cloud::kms::v1::ListKeyRingsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry =
        std::shared_ptr<KeyManagementServiceRetryPolicy const>(retry_policy());
    auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
    auto idempotency = idempotency_policy()->ListKeyRings(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::kms::v1::KeyRing>>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](google::cloud::kms::v1::ListKeyRingsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  google::cloud::kms::v1::ListKeyRingsRequest const& request) {
                return stub->ListKeyRings(context, request);
              },
              r, function_name);
        },
        [](google::cloud::kms::v1::ListKeyRingsResponse r) {
          std::vector<google::cloud::kms::v1::KeyRing> result(
              r.key_rings().size());
          auto& messages = *r.mutable_key_rings();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StreamRange<google::cloud::kms::v1::CryptoKey> ListCryptoKeys(
      google::cloud::kms::v1::ListCryptoKeysRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry =
        std::shared_ptr<KeyManagementServiceRetryPolicy const>(retry_policy());
    auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
    auto idempotency = idempotency_policy()->ListCryptoKeys(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::kms::v1::CryptoKey>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::kms::v1::ListCryptoKeysRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::kms::v1::ListCryptoKeysRequest const&
                         request) {
                return stub->ListCryptoKeys(context, request);
              },
              r, function_name);
        },
        [](google::cloud::kms::v1::ListCryptoKeysResponse r) {
          std::vector<google::cloud::kms::v1::CryptoKey> result(
              r.crypto_keys().size());
          auto& messages = *r.mutable_crypto_keys();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StreamRange<google::cloud::kms::v1::CryptoKeyVersion> ListCryptoKeyVersions(
      google::cloud::kms::v1::ListCryptoKeyVersionsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry =
        std::shared_ptr<KeyManagementServiceRetryPolicy const>(retry_policy());
    auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
    auto idempotency = idempotency_policy()->ListCryptoKeyVersions(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::kms::v1::CryptoKeyVersion>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::kms::v1::ListCryptoKeyVersionsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::kms::v1::ListCryptoKeyVersionsRequest const&
                         request) {
                return stub->ListCryptoKeyVersions(context, request);
              },
              r, function_name);
        },
        [](google::cloud::kms::v1::ListCryptoKeyVersionsResponse r) {
          std::vector<google::cloud::kms::v1::CryptoKeyVersion> result(
              r.crypto_key_versions().size());
          auto& messages = *r.mutable_crypto_key_versions();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StreamRange<google::cloud::kms::v1::ImportJob> ListImportJobs(
      google::cloud::kms::v1::ListImportJobsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry =
        std::shared_ptr<KeyManagementServiceRetryPolicy const>(retry_policy());
    auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
    auto idempotency = idempotency_policy()->ListImportJobs(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::kms::v1::ImportJob>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::kms::v1::ListImportJobsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::kms::v1::ListImportJobsRequest const&
                         request) {
                return stub->ListImportJobs(context, request);
              },
              r, function_name);
        },
        [](google::cloud::kms::v1::ListImportJobsResponse r) {
          std::vector<google::cloud::kms::v1::ImportJob> result(
              r.import_jobs().size());
          auto& messages = *r.mutable_import_jobs();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::kms::v1::KeyRing> GetKeyRing(
      google::cloud::kms::v1::GetKeyRingRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->GetKeyRing(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::GetKeyRingRequest const& request) {
          return stub_->GetKeyRing(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKey> GetCryptoKey(
      google::cloud::kms::v1::GetCryptoKeyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->GetCryptoKey(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::GetCryptoKeyRequest const& request) {
          return stub_->GetCryptoKey(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKeyVersion> GetCryptoKeyVersion(
      google::cloud::kms::v1::GetCryptoKeyVersionRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->GetCryptoKeyVersion(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::kms::v1::GetCryptoKeyVersionRequest const& request) {
          return stub_->GetCryptoKeyVersion(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::PublicKey> GetPublicKey(
      google::cloud::kms::v1::GetPublicKeyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->GetPublicKey(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::GetPublicKeyRequest const& request) {
          return stub_->GetPublicKey(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::ImportJob> GetImportJob(
      google::cloud::kms::v1::GetImportJobRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->GetImportJob(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::GetImportJobRequest const& request) {
          return stub_->GetImportJob(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::KeyRing> CreateKeyRing(
      google::cloud::kms::v1::CreateKeyRingRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->CreateKeyRing(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::CreateKeyRingRequest const& request) {
          return stub_->CreateKeyRing(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKey> CreateCryptoKey(
      google::cloud::kms::v1::CreateCryptoKeyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->CreateCryptoKey(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::CreateCryptoKeyRequest const& request) {
          return stub_->CreateCryptoKey(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKeyVersion> CreateCryptoKeyVersion(
      google::cloud::kms::v1::CreateCryptoKeyVersionRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->CreateCryptoKeyVersion(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::CreateCryptoKeyVersionRequest const&
                   request) {
          return stub_->CreateCryptoKeyVersion(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKeyVersion> ImportCryptoKeyVersion(
      google::cloud::kms::v1::ImportCryptoKeyVersionRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->ImportCryptoKeyVersion(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::ImportCryptoKeyVersionRequest const&
                   request) {
          return stub_->ImportCryptoKeyVersion(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::ImportJob> CreateImportJob(
      google::cloud::kms::v1::CreateImportJobRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->CreateImportJob(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::CreateImportJobRequest const& request) {
          return stub_->CreateImportJob(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKey> UpdateCryptoKey(
      google::cloud::kms::v1::UpdateCryptoKeyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->UpdateCryptoKey(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::UpdateCryptoKeyRequest const& request) {
          return stub_->UpdateCryptoKey(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKeyVersion> UpdateCryptoKeyVersion(
      google::cloud::kms::v1::UpdateCryptoKeyVersionRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->UpdateCryptoKeyVersion(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::UpdateCryptoKeyVersionRequest const&
                   request) {
          return stub_->UpdateCryptoKeyVersion(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKey> UpdateCryptoKeyPrimaryVersion(
      google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->UpdateCryptoKeyPrimaryVersion(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest const&
                request) {
          return stub_->UpdateCryptoKeyPrimaryVersion(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKeyVersion> DestroyCryptoKeyVersion(
      google::cloud::kms::v1::DestroyCryptoKeyVersionRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->DestroyCryptoKeyVersion(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::DestroyCryptoKeyVersionRequest const&
                   request) {
          return stub_->DestroyCryptoKeyVersion(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::CryptoKeyVersion> RestoreCryptoKeyVersion(
      google::cloud::kms::v1::RestoreCryptoKeyVersionRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->RestoreCryptoKeyVersion(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::RestoreCryptoKeyVersionRequest const&
                   request) {
          return stub_->RestoreCryptoKeyVersion(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::EncryptResponse> Encrypt(
      google::cloud::kms::v1::EncryptRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->Encrypt(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::EncryptRequest const& request) {
          return stub_->Encrypt(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::DecryptResponse> Decrypt(
      google::cloud::kms::v1::DecryptRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->Decrypt(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::DecryptRequest const& request) {
          return stub_->Decrypt(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::AsymmetricSignResponse> AsymmetricSign(
      google::cloud::kms::v1::AsymmetricSignRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->AsymmetricSign(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::AsymmetricSignRequest const& request) {
          return stub_->AsymmetricSign(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::AsymmetricDecryptResponse> AsymmetricDecrypt(
      google::cloud::kms::v1::AsymmetricDecryptRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->AsymmetricDecrypt(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::kms::v1::AsymmetricDecryptRequest const& request) {
          return stub_->AsymmetricDecrypt(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::MacSignResponse> MacSign(
      google::cloud::kms::v1::MacSignRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->MacSign(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::MacSignRequest const& request) {
          return stub_->MacSign(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::MacVerifyResponse> MacVerify(
      google::cloud::kms::v1::MacVerifyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->MacVerify(request),
        [this](grpc::ClientContext& context,
               google::cloud::kms::v1::MacVerifyRequest const& request) {
          return stub_->MacVerify(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::kms::v1::GenerateRandomBytesResponse>
  GenerateRandomBytes(google::cloud::kms::v1::GenerateRandomBytesRequest const&
                          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy(), backoff_policy(),
        idempotency_policy()->GenerateRandomBytes(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::kms::v1::GenerateRandomBytesRequest const& request) {
          return stub_->GenerateRandomBytes(context, request);
        },
        request, __func__);
  }

 private:
  std::unique_ptr<KeyManagementServiceRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<KeyManagementServiceRetryPolicyOption>()) {
      return options.get<KeyManagementServiceRetryPolicyOption>()->clone();
    }
    return retry_policy_prototype_->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<KeyManagementServiceBackoffPolicyOption>()) {
      return options.get<KeyManagementServiceBackoffPolicyOption>()->clone();
    }
    return backoff_policy_prototype_->clone();
  }

  std::unique_ptr<KeyManagementServiceConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<KeyManagementServiceConnectionIdempotencyPolicyOption>()) {
      return options
          .get<KeyManagementServiceConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return idempotency_policy_->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<kms_internal::KeyManagementServiceStub> stub_;
  std::unique_ptr<KeyManagementServiceRetryPolicy const>
      retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<KeyManagementServiceConnectionIdempotencyPolicy>
      idempotency_policy_;
};
}  // namespace

std::shared_ptr<KeyManagementServiceConnection>
MakeKeyManagementServiceConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 KeyManagementServicePolicyOptionList>(
      options, __func__);
  options =
      kms_internal::KeyManagementServiceDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = kms_internal::CreateDefaultKeyManagementServiceStub(
      background->cq(), options);
  return std::make_shared<KeyManagementServiceConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace kms
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace kms_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<kms::KeyManagementServiceConnection>
MakeKeyManagementServiceConnection(
    std::shared_ptr<KeyManagementServiceStub> stub, Options options) {
  options = KeyManagementServiceDefaultOptions(std::move(options));
  return std::make_shared<kms::KeyManagementServiceConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace kms_internal
}  // namespace cloud
}  // namespace google
