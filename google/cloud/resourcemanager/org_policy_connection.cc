// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/orgpolicy/v2/orgpolicy.proto

#include "google/cloud/resourcemanager/org_policy_connection.h"
#include "google/cloud/resourcemanager/internal/org_policy_option_defaults.h"
#include "google/cloud/resourcemanager/internal/org_policy_stub_factory.h"
#include "google/cloud/resourcemanager/org_policy_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace resourcemanager {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

OrgPolicyConnection::~OrgPolicyConnection() = default;

StreamRange<google::cloud::orgpolicy::v2::Constraint>
OrgPolicyConnection::ListConstraints(
    google::cloud::orgpolicy::v2::ListConstraintsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::orgpolicy::v2::Constraint>>(
      std::move(request),
      [](google::cloud::orgpolicy::v2::ListConstraintsRequest const&) {
        return StatusOr<
            google::cloud::orgpolicy::v2::ListConstraintsResponse>{};
      },
      [](google::cloud::orgpolicy::v2::ListConstraintsResponse const&) {
        return std::vector<google::cloud::orgpolicy::v2::Constraint>();
      });
}

StreamRange<google::cloud::orgpolicy::v2::Policy>
OrgPolicyConnection::ListPolicies(
    google::cloud::orgpolicy::v2::ListPoliciesRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::orgpolicy::v2::Policy>>(
      std::move(request),
      [](google::cloud::orgpolicy::v2::ListPoliciesRequest const&) {
        return StatusOr<google::cloud::orgpolicy::v2::ListPoliciesResponse>{};
      },
      [](google::cloud::orgpolicy::v2::ListPoliciesResponse const&) {
        return std::vector<google::cloud::orgpolicy::v2::Policy>();
      });
}

StatusOr<google::cloud::orgpolicy::v2::Policy> OrgPolicyConnection::GetPolicy(
    google::cloud::orgpolicy::v2::GetPolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::orgpolicy::v2::Policy>
OrgPolicyConnection::GetEffectivePolicy(
    google::cloud::orgpolicy::v2::GetEffectivePolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::orgpolicy::v2::Policy>
OrgPolicyConnection::CreatePolicy(
    google::cloud::orgpolicy::v2::CreatePolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::orgpolicy::v2::Policy>
OrgPolicyConnection::UpdatePolicy(
    google::cloud::orgpolicy::v2::UpdatePolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status OrgPolicyConnection::DeletePolicy(
    google::cloud::orgpolicy::v2::DeletePolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

namespace {
class OrgPolicyConnectionImpl : public OrgPolicyConnection {
 public:
  OrgPolicyConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<resourcemanager_internal::OrgPolicyStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<OrgPolicyRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<OrgPolicyBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<OrgPolicyConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~OrgPolicyConnectionImpl() override = default;

  StreamRange<google::cloud::orgpolicy::v2::Constraint> ListConstraints(
      google::cloud::orgpolicy::v2::ListConstraintsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<OrgPolicyRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListConstraints(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::orgpolicy::v2::Constraint>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::orgpolicy::v2::ListConstraintsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::orgpolicy::v2::ListConstraintsRequest const&
                         request) {
                return stub->ListConstraints(context, request);
              },
              r, function_name);
        },
        [](google::cloud::orgpolicy::v2::ListConstraintsResponse r) {
          std::vector<google::cloud::orgpolicy::v2::Constraint> result(
              r.constraints().size());
          auto& messages = *r.mutable_constraints();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StreamRange<google::cloud::orgpolicy::v2::Policy> ListPolicies(
      google::cloud::orgpolicy::v2::ListPoliciesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<OrgPolicyRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListPolicies(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::orgpolicy::v2::Policy>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::orgpolicy::v2::ListPoliciesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::orgpolicy::v2::ListPoliciesRequest const&
                         request) {
                return stub->ListPolicies(context, request);
              },
              r, function_name);
        },
        [](google::cloud::orgpolicy::v2::ListPoliciesResponse r) {
          std::vector<google::cloud::orgpolicy::v2::Policy> result(
              r.policies().size());
          auto& messages = *r.mutable_policies();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::orgpolicy::v2::Policy> GetPolicy(
      google::cloud::orgpolicy::v2::GetPolicyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetPolicy(request),
        [this](grpc::ClientContext& context,
               google::cloud::orgpolicy::v2::GetPolicyRequest const& request) {
          return stub_->GetPolicy(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::orgpolicy::v2::Policy> GetEffectivePolicy(
      google::cloud::orgpolicy::v2::GetEffectivePolicyRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetEffectivePolicy(request),
        [this](grpc::ClientContext& context,
               google::cloud::orgpolicy::v2::GetEffectivePolicyRequest const&
                   request) {
          return stub_->GetEffectivePolicy(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::orgpolicy::v2::Policy> CreatePolicy(
      google::cloud::orgpolicy::v2::CreatePolicyRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreatePolicy(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::orgpolicy::v2::CreatePolicyRequest const& request) {
          return stub_->CreatePolicy(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::orgpolicy::v2::Policy> UpdatePolicy(
      google::cloud::orgpolicy::v2::UpdatePolicyRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdatePolicy(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::orgpolicy::v2::UpdatePolicyRequest const& request) {
          return stub_->UpdatePolicy(context, request);
        },
        request, __func__);
  }

  Status DeletePolicy(google::cloud::orgpolicy::v2::DeletePolicyRequest const&
                          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeletePolicy(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::orgpolicy::v2::DeletePolicyRequest const& request) {
          return stub_->DeletePolicy(context, request);
        },
        request, __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<resourcemanager_internal::OrgPolicyStub> stub_;
  std::unique_ptr<OrgPolicyRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<OrgPolicyConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<OrgPolicyConnection> MakeOrgPolicyConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 OrgPolicyPolicyOptionList>(options, __func__);
  options =
      resourcemanager_internal::OrgPolicyDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = resourcemanager_internal::CreateDefaultOrgPolicyStub(
      background->cq(), options);
  return std::make_shared<OrgPolicyConnectionImpl>(std::move(background),
                                                   std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace resourcemanager
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace resourcemanager_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<resourcemanager::OrgPolicyConnection> MakeOrgPolicyConnection(
    std::shared_ptr<OrgPolicyStub> stub, Options options) {
  options = OrgPolicyDefaultOptions(std::move(options));
  return std::make_shared<resourcemanager::OrgPolicyConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace resourcemanager_internal
}  // namespace cloud
}  // namespace google
