// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/baremetalsolution/v2/baremetalsolution.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BAREMETALSOLUTION_INTERNAL_BARE_METAL_SOLUTION_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BAREMETALSOLUTION_INTERNAL_BARE_METAL_SOLUTION_CONNECTION_IMPL_H

#include "google/cloud/baremetalsolution/bare_metal_solution_connection.h"
#include "google/cloud/baremetalsolution/bare_metal_solution_connection_idempotency_policy.h"
#include "google/cloud/baremetalsolution/bare_metal_solution_options.h"
#include "google/cloud/baremetalsolution/internal/bare_metal_solution_retry_traits.h"
#include "google/cloud/baremetalsolution/internal/bare_metal_solution_stub.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace baremetalsolution_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class BareMetalSolutionConnectionImpl
    : public baremetalsolution::BareMetalSolutionConnection {
 public:
  ~BareMetalSolutionConnectionImpl() override = default;

  BareMetalSolutionConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<baremetalsolution_internal::BareMetalSolutionStub> stub,
      Options options);

  Options options() override { return options_; }

  StreamRange<google::cloud::baremetalsolution::v2::Instance> ListInstances(
      google::cloud::baremetalsolution::v2::ListInstancesRequest request)
      override;

  StatusOr<google::cloud::baremetalsolution::v2::Instance> GetInstance(
      google::cloud::baremetalsolution::v2::GetInstanceRequest const& request)
      override;

  future<StatusOr<google::cloud::baremetalsolution::v2::ResetInstanceResponse>>
  ResetInstance(
      google::cloud::baremetalsolution::v2::ResetInstanceRequest const& request)
      override;

  StreamRange<google::cloud::baremetalsolution::v2::Volume> ListVolumes(
      google::cloud::baremetalsolution::v2::ListVolumesRequest request)
      override;

  StatusOr<google::cloud::baremetalsolution::v2::Volume> GetVolume(
      google::cloud::baremetalsolution::v2::GetVolumeRequest const& request)
      override;

  future<StatusOr<google::cloud::baremetalsolution::v2::Volume>> UpdateVolume(
      google::cloud::baremetalsolution::v2::UpdateVolumeRequest const& request)
      override;

  StreamRange<google::cloud::baremetalsolution::v2::Network> ListNetworks(
      google::cloud::baremetalsolution::v2::ListNetworksRequest request)
      override;

  StatusOr<google::cloud::baremetalsolution::v2::Network> GetNetwork(
      google::cloud::baremetalsolution::v2::GetNetworkRequest const& request)
      override;

  StreamRange<google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>
  ListSnapshotSchedulePolicies(
      google::cloud::baremetalsolution::v2::ListSnapshotSchedulePoliciesRequest
          request) override;

  StatusOr<google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>
  GetSnapshotSchedulePolicy(
      google::cloud::baremetalsolution::v2::
          GetSnapshotSchedulePolicyRequest const& request) override;

  StatusOr<google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>
  CreateSnapshotSchedulePolicy(
      google::cloud::baremetalsolution::v2::
          CreateSnapshotSchedulePolicyRequest const& request) override;

  StatusOr<google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>
  UpdateSnapshotSchedulePolicy(
      google::cloud::baremetalsolution::v2::
          UpdateSnapshotSchedulePolicyRequest const& request) override;

  Status DeleteSnapshotSchedulePolicy(
      google::cloud::baremetalsolution::v2::
          DeleteSnapshotSchedulePolicyRequest const& request) override;

  StatusOr<google::cloud::baremetalsolution::v2::VolumeSnapshot>
  CreateVolumeSnapshot(
      google::cloud::baremetalsolution::v2::CreateVolumeSnapshotRequest const&
          request) override;

  future<StatusOr<google::cloud::baremetalsolution::v2::VolumeSnapshot>>
  RestoreVolumeSnapshot(
      google::cloud::baremetalsolution::v2::RestoreVolumeSnapshotRequest const&
          request) override;

  Status DeleteVolumeSnapshot(
      google::cloud::baremetalsolution::v2::DeleteVolumeSnapshotRequest const&
          request) override;

  StatusOr<google::cloud::baremetalsolution::v2::VolumeSnapshot>
  GetVolumeSnapshot(
      google::cloud::baremetalsolution::v2::GetVolumeSnapshotRequest const&
          request) override;

  StreamRange<google::cloud::baremetalsolution::v2::VolumeSnapshot>
  ListVolumeSnapshots(
      google::cloud::baremetalsolution::v2::ListVolumeSnapshotsRequest request)
      override;

  StatusOr<google::cloud::baremetalsolution::v2::Lun> GetLun(
      google::cloud::baremetalsolution::v2::GetLunRequest const& request)
      override;

  StreamRange<google::cloud::baremetalsolution::v2::Lun> ListLuns(
      google::cloud::baremetalsolution::v2::ListLunsRequest request) override;

 private:
  std::unique_ptr<baremetalsolution::BareMetalSolutionRetryPolicy>
  retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<baremetalsolution::BareMetalSolutionRetryPolicyOption>()) {
      return options
          .get<baremetalsolution::BareMetalSolutionRetryPolicyOption>()
          ->clone();
    }
    return options_
        .get<baremetalsolution::BareMetalSolutionRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options
            .has<baremetalsolution::BareMetalSolutionBackoffPolicyOption>()) {
      return options
          .get<baremetalsolution::BareMetalSolutionBackoffPolicyOption>()
          ->clone();
    }
    return options_
        .get<baremetalsolution::BareMetalSolutionBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<
      baremetalsolution::BareMetalSolutionConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<baremetalsolution::
                        BareMetalSolutionConnectionIdempotencyPolicyOption>()) {
      return options
          .get<baremetalsolution::
                   BareMetalSolutionConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<baremetalsolution::
                 BareMetalSolutionConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<PollingPolicy> polling_policy() {
    auto const& options = internal::CurrentOptions();
    if (options
            .has<baremetalsolution::BareMetalSolutionPollingPolicyOption>()) {
      return options
          .get<baremetalsolution::BareMetalSolutionPollingPolicyOption>()
          ->clone();
    }
    return options_
        .get<baremetalsolution::BareMetalSolutionPollingPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<baremetalsolution_internal::BareMetalSolutionStub> stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace baremetalsolution_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BAREMETALSOLUTION_INTERNAL_BARE_METAL_SOLUTION_CONNECTION_IMPL_H
