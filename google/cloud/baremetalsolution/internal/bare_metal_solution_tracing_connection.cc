// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/baremetalsolution/v2/baremetalsolution.proto

#include "google/cloud/baremetalsolution/internal/bare_metal_solution_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace baremetalsolution_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

BareMetalSolutionTracingConnection::BareMetalSolutionTracingConnection(
    std::shared_ptr<baremetalsolution::BareMetalSolutionConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::baremetalsolution::v2::Instance>
BareMetalSolutionTracingConnection::ListInstances(
    google::cloud::baremetalsolution::v2::ListInstancesRequest request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::ListInstances");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListInstances(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::baremetalsolution::v2::Instance>(std::move(span),
                                                      std::move(sr));
}

StatusOr<google::cloud::baremetalsolution::v2::Instance>
BareMetalSolutionTracingConnection::GetInstance(
    google::cloud::baremetalsolution::v2::GetInstanceRequest const& request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::GetInstance");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetInstance(request));
}

future<StatusOr<google::cloud::baremetalsolution::v2::Instance>>
BareMetalSolutionTracingConnection::UpdateInstance(
    google::cloud::baremetalsolution::v2::UpdateInstanceRequest const&
        request) {
  return child_->UpdateInstance(request);
}

future<StatusOr<google::cloud::baremetalsolution::v2::ResetInstanceResponse>>
BareMetalSolutionTracingConnection::ResetInstance(
    google::cloud::baremetalsolution::v2::ResetInstanceRequest const& request) {
  return child_->ResetInstance(request);
}

future<StatusOr<google::cloud::baremetalsolution::v2::StartInstanceResponse>>
BareMetalSolutionTracingConnection::StartInstance(
    google::cloud::baremetalsolution::v2::StartInstanceRequest const& request) {
  return child_->StartInstance(request);
}

future<StatusOr<google::cloud::baremetalsolution::v2::StopInstanceResponse>>
BareMetalSolutionTracingConnection::StopInstance(
    google::cloud::baremetalsolution::v2::StopInstanceRequest const& request) {
  return child_->StopInstance(request);
}

future<StatusOr<google::cloud::baremetalsolution::v2::Instance>>
BareMetalSolutionTracingConnection::DetachLun(
    google::cloud::baremetalsolution::v2::DetachLunRequest const& request) {
  return child_->DetachLun(request);
}

StreamRange<google::cloud::baremetalsolution::v2::Volume>
BareMetalSolutionTracingConnection::ListVolumes(
    google::cloud::baremetalsolution::v2::ListVolumesRequest request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::ListVolumes");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListVolumes(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::baremetalsolution::v2::Volume>(std::move(span),
                                                    std::move(sr));
}

StatusOr<google::cloud::baremetalsolution::v2::Volume>
BareMetalSolutionTracingConnection::GetVolume(
    google::cloud::baremetalsolution::v2::GetVolumeRequest const& request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::GetVolume");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVolume(request));
}

future<StatusOr<google::cloud::baremetalsolution::v2::Volume>>
BareMetalSolutionTracingConnection::UpdateVolume(
    google::cloud::baremetalsolution::v2::UpdateVolumeRequest const& request) {
  return child_->UpdateVolume(request);
}

future<StatusOr<google::cloud::baremetalsolution::v2::Volume>>
BareMetalSolutionTracingConnection::ResizeVolume(
    google::cloud::baremetalsolution::v2::ResizeVolumeRequest const& request) {
  return child_->ResizeVolume(request);
}

StreamRange<google::cloud::baremetalsolution::v2::Network>
BareMetalSolutionTracingConnection::ListNetworks(
    google::cloud::baremetalsolution::v2::ListNetworksRequest request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::ListNetworks");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListNetworks(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::baremetalsolution::v2::Network>(std::move(span),
                                                     std::move(sr));
}

StatusOr<google::cloud::baremetalsolution::v2::ListNetworkUsageResponse>
BareMetalSolutionTracingConnection::ListNetworkUsage(
    google::cloud::baremetalsolution::v2::ListNetworkUsageRequest const&
        request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::ListNetworkUsage");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListNetworkUsage(request));
}

StatusOr<google::cloud::baremetalsolution::v2::Network>
BareMetalSolutionTracingConnection::GetNetwork(
    google::cloud::baremetalsolution::v2::GetNetworkRequest const& request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::GetNetwork");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetNetwork(request));
}

future<StatusOr<google::cloud::baremetalsolution::v2::Network>>
BareMetalSolutionTracingConnection::UpdateNetwork(
    google::cloud::baremetalsolution::v2::UpdateNetworkRequest const& request) {
  return child_->UpdateNetwork(request);
}

StatusOr<google::cloud::baremetalsolution::v2::Lun>
BareMetalSolutionTracingConnection::GetLun(
    google::cloud::baremetalsolution::v2::GetLunRequest const& request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::GetLun");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetLun(request));
}

StreamRange<google::cloud::baremetalsolution::v2::Lun>
BareMetalSolutionTracingConnection::ListLuns(
    google::cloud::baremetalsolution::v2::ListLunsRequest request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::ListLuns");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListLuns(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::baremetalsolution::v2::Lun>(std::move(span),
                                                 std::move(sr));
}

StatusOr<google::cloud::baremetalsolution::v2::NfsShare>
BareMetalSolutionTracingConnection::GetNfsShare(
    google::cloud::baremetalsolution::v2::GetNfsShareRequest const& request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::GetNfsShare");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetNfsShare(request));
}

StreamRange<google::cloud::baremetalsolution::v2::NfsShare>
BareMetalSolutionTracingConnection::ListNfsShares(
    google::cloud::baremetalsolution::v2::ListNfsSharesRequest request) {
  auto span = internal::MakeSpan(
      "baremetalsolution::BareMetalSolutionConnection::ListNfsShares");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListNfsShares(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::baremetalsolution::v2::NfsShare>(std::move(span),
                                                      std::move(sr));
}

future<StatusOr<google::cloud::baremetalsolution::v2::NfsShare>>
BareMetalSolutionTracingConnection::UpdateNfsShare(
    google::cloud::baremetalsolution::v2::UpdateNfsShareRequest const&
        request) {
  return child_->UpdateNfsShare(request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<baremetalsolution::BareMetalSolutionConnection>
MakeBareMetalSolutionTracingConnection(
    std::shared_ptr<baremetalsolution::BareMetalSolutionConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn =
        std::make_shared<BareMetalSolutionTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace baremetalsolution_internal
}  // namespace cloud
}  // namespace google
