// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/baremetalsolution/v2/baremetalsolution.proto

#include "google/cloud/baremetalsolution/internal/bare_metal_solution_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/baremetalsolution/v2/baremetalsolution.grpc.pb.h>
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace baremetalsolution_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

BareMetalSolutionStub::~BareMetalSolutionStub() = default;

StatusOr<google::cloud::baremetalsolution::v2::ListInstancesResponse>
DefaultBareMetalSolutionStub::ListInstances(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::ListInstancesRequest const& request) {
  google::cloud::baremetalsolution::v2::ListInstancesResponse response;
  auto status = grpc_stub_->ListInstances(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::baremetalsolution::v2::Instance>
DefaultBareMetalSolutionStub::GetInstance(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::GetInstanceRequest const& request) {
  google::cloud::baremetalsolution::v2::Instance response;
  auto status = grpc_stub_->GetInstance(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncUpdateInstance(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::baremetalsolution::v2::UpdateInstanceRequest const&
        request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::cloud::baremetalsolution::v2::UpdateInstanceRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateInstance(context, request, cq);
      },
      request, std::move(context));
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncResetInstance(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::baremetalsolution::v2::ResetInstanceRequest const& request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::cloud::baremetalsolution::v2::ResetInstanceRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncResetInstance(context, request, cq);
      },
      request, std::move(context));
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncStartInstance(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::baremetalsolution::v2::StartInstanceRequest const& request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::cloud::baremetalsolution::v2::StartInstanceRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncStartInstance(context, request, cq);
      },
      request, std::move(context));
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncStopInstance(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::baremetalsolution::v2::StopInstanceRequest const& request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::cloud::baremetalsolution::v2::StopInstanceRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncStopInstance(context, request, cq);
      },
      request, std::move(context));
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncDetachLun(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::baremetalsolution::v2::DetachLunRequest const& request) {
  return cq.MakeUnaryRpc(
      [this](
          grpc::ClientContext* context,
          google::cloud::baremetalsolution::v2::DetachLunRequest const& request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDetachLun(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::cloud::baremetalsolution::v2::ListVolumesResponse>
DefaultBareMetalSolutionStub::ListVolumes(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::ListVolumesRequest const& request) {
  google::cloud::baremetalsolution::v2::ListVolumesResponse response;
  auto status = grpc_stub_->ListVolumes(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::baremetalsolution::v2::Volume>
DefaultBareMetalSolutionStub::GetVolume(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::GetVolumeRequest const& request) {
  google::cloud::baremetalsolution::v2::Volume response;
  auto status = grpc_stub_->GetVolume(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncUpdateVolume(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::baremetalsolution::v2::UpdateVolumeRequest const& request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::cloud::baremetalsolution::v2::UpdateVolumeRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateVolume(context, request, cq);
      },
      request, std::move(context));
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncResizeVolume(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::baremetalsolution::v2::ResizeVolumeRequest const& request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::cloud::baremetalsolution::v2::ResizeVolumeRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncResizeVolume(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::cloud::baremetalsolution::v2::ListNetworksResponse>
DefaultBareMetalSolutionStub::ListNetworks(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::ListNetworksRequest const& request) {
  google::cloud::baremetalsolution::v2::ListNetworksResponse response;
  auto status = grpc_stub_->ListNetworks(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::baremetalsolution::v2::ListNetworkUsageResponse>
DefaultBareMetalSolutionStub::ListNetworkUsage(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::ListNetworkUsageRequest const&
        request) {
  google::cloud::baremetalsolution::v2::ListNetworkUsageResponse response;
  auto status =
      grpc_stub_->ListNetworkUsage(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::baremetalsolution::v2::Network>
DefaultBareMetalSolutionStub::GetNetwork(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::GetNetworkRequest const& request) {
  google::cloud::baremetalsolution::v2::Network response;
  auto status = grpc_stub_->GetNetwork(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncUpdateNetwork(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::baremetalsolution::v2::UpdateNetworkRequest const& request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::cloud::baremetalsolution::v2::UpdateNetworkRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateNetwork(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::cloud::baremetalsolution::v2::Lun>
DefaultBareMetalSolutionStub::GetLun(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::GetLunRequest const& request) {
  google::cloud::baremetalsolution::v2::Lun response;
  auto status = grpc_stub_->GetLun(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::baremetalsolution::v2::ListLunsResponse>
DefaultBareMetalSolutionStub::ListLuns(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::ListLunsRequest const& request) {
  google::cloud::baremetalsolution::v2::ListLunsResponse response;
  auto status = grpc_stub_->ListLuns(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::baremetalsolution::v2::NfsShare>
DefaultBareMetalSolutionStub::GetNfsShare(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::GetNfsShareRequest const& request) {
  google::cloud::baremetalsolution::v2::NfsShare response;
  auto status = grpc_stub_->GetNfsShare(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::baremetalsolution::v2::ListNfsSharesResponse>
DefaultBareMetalSolutionStub::ListNfsShares(
    grpc::ClientContext& client_context,
    google::cloud::baremetalsolution::v2::ListNfsSharesRequest const& request) {
  google::cloud::baremetalsolution::v2::ListNfsSharesResponse response;
  auto status = grpc_stub_->ListNfsShares(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncUpdateNfsShare(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::baremetalsolution::v2::UpdateNfsShareRequest const&
        request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::cloud::baremetalsolution::v2::UpdateNfsShareRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateNfsShare(context, request, cq);
      },
      request, std::move(context));
}

future<StatusOr<google::longrunning::Operation>>
DefaultBareMetalSolutionStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::longrunning::GetOperationRequest const& request,
             grpc::CompletionQueue* cq) {
        return operations_->AsyncGetOperation(context, request, cq);
      },
      request, std::move(context));
}

future<Status> DefaultBareMetalSolutionStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return cq
      .MakeUnaryRpc(
          [this](grpc::ClientContext* context,
                 google::longrunning::CancelOperationRequest const& request,
                 grpc::CompletionQueue* cq) {
            return operations_->AsyncCancelOperation(context, request, cq);
          },
          request, std::move(context))
      .then([](future<StatusOr<google::protobuf::Empty>> f) {
        return f.get().status();
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace baremetalsolution_internal
}  // namespace cloud
}  // namespace google
