// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/baremetalsolution/v2/baremetalsolution.proto

#include "google/cloud/baremetalsolution/internal/bare_metal_solution_connection_impl.h"
#include "google/cloud/baremetalsolution/internal/bare_metal_solution_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace baremetalsolution_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

BareMetalSolutionConnectionImpl::BareMetalSolutionConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<baremetalsolution_internal::BareMetalSolutionStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(
          std::move(options),
          baremetalsolution_internal::BareMetalSolutionDefaultOptions(
              BareMetalSolutionConnection::options()))) {}

StreamRange<google::cloud::baremetalsolution::v2::Instance>
BareMetalSolutionConnectionImpl::ListInstances(
    google::cloud::baremetalsolution::v2::ListInstancesRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<baremetalsolution::BareMetalSolutionRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListInstances(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::baremetalsolution::v2::Instance>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::baremetalsolution::v2::ListInstancesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::baremetalsolution::v2::
                       ListInstancesRequest const& request) {
              return stub->ListInstances(context, request);
            },
            r, function_name);
      },
      [](google::cloud::baremetalsolution::v2::ListInstancesResponse r) {
        std::vector<google::cloud::baremetalsolution::v2::Instance> result(
            r.instances().size());
        auto& messages = *r.mutable_instances();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::baremetalsolution::v2::Instance>
BareMetalSolutionConnectionImpl::GetInstance(
    google::cloud::baremetalsolution::v2::GetInstanceRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetInstance(request),
      [this](grpc::ClientContext& context,
             google::cloud::baremetalsolution::v2::GetInstanceRequest const&
                 request) { return stub_->GetInstance(context, request); },
      request, __func__);
}

future<StatusOr<google::cloud::baremetalsolution::v2::ResetInstanceResponse>>
BareMetalSolutionConnectionImpl::ResetInstance(
    google::cloud::baremetalsolution::v2::ResetInstanceRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::baremetalsolution::v2::ResetInstanceResponse>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::baremetalsolution::v2::ResetInstanceRequest const&
                 request) {
        return stub->AsyncResetInstance(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::baremetalsolution::v2::ResetInstanceResponse>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->ResetInstance(request), polling_policy(), __func__);
}

StreamRange<google::cloud::baremetalsolution::v2::Volume>
BareMetalSolutionConnectionImpl::ListVolumes(
    google::cloud::baremetalsolution::v2::ListVolumesRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<baremetalsolution::BareMetalSolutionRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListVolumes(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::baremetalsolution::v2::Volume>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::baremetalsolution::v2::ListVolumesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context,
                google::cloud::baremetalsolution::v2::ListVolumesRequest const&
                    request) { return stub->ListVolumes(context, request); },
            r, function_name);
      },
      [](google::cloud::baremetalsolution::v2::ListVolumesResponse r) {
        std::vector<google::cloud::baremetalsolution::v2::Volume> result(
            r.volumes().size());
        auto& messages = *r.mutable_volumes();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::baremetalsolution::v2::Volume>
BareMetalSolutionConnectionImpl::GetVolume(
    google::cloud::baremetalsolution::v2::GetVolumeRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetVolume(request),
      [this](grpc::ClientContext& context,
             google::cloud::baremetalsolution::v2::GetVolumeRequest const&
                 request) { return stub_->GetVolume(context, request); },
      request, __func__);
}

future<StatusOr<google::cloud::baremetalsolution::v2::Volume>>
BareMetalSolutionConnectionImpl::UpdateVolume(
    google::cloud::baremetalsolution::v2::UpdateVolumeRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::baremetalsolution::v2::Volume>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::baremetalsolution::v2::UpdateVolumeRequest const&
                 request) {
        return stub->AsyncUpdateVolume(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::baremetalsolution::v2::Volume>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateVolume(request), polling_policy(), __func__);
}

StreamRange<google::cloud::baremetalsolution::v2::Network>
BareMetalSolutionConnectionImpl::ListNetworks(
    google::cloud::baremetalsolution::v2::ListNetworksRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<baremetalsolution::BareMetalSolutionRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListNetworks(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::baremetalsolution::v2::Network>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::baremetalsolution::v2::ListNetworksRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context,
                google::cloud::baremetalsolution::v2::ListNetworksRequest const&
                    request) { return stub->ListNetworks(context, request); },
            r, function_name);
      },
      [](google::cloud::baremetalsolution::v2::ListNetworksResponse r) {
        std::vector<google::cloud::baremetalsolution::v2::Network> result(
            r.networks().size());
        auto& messages = *r.mutable_networks();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::baremetalsolution::v2::Network>
BareMetalSolutionConnectionImpl::GetNetwork(
    google::cloud::baremetalsolution::v2::GetNetworkRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetNetwork(request),
      [this](grpc::ClientContext& context,
             google::cloud::baremetalsolution::v2::GetNetworkRequest const&
                 request) { return stub_->GetNetwork(context, request); },
      request, __func__);
}

StreamRange<google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>
BareMetalSolutionConnectionImpl::ListSnapshotSchedulePolicies(
    google::cloud::baremetalsolution::v2::ListSnapshotSchedulePoliciesRequest
        request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<baremetalsolution::BareMetalSolutionRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency =
      idempotency_policy()->ListSnapshotSchedulePolicies(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<StreamRange<
      google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::baremetalsolution::v2::
                          ListSnapshotSchedulePoliciesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::baremetalsolution::v2::
                       ListSnapshotSchedulePoliciesRequest const& request) {
              return stub->ListSnapshotSchedulePolicies(context, request);
            },
            r, function_name);
      },
      [](google::cloud::baremetalsolution::v2::
             ListSnapshotSchedulePoliciesResponse r) {
        std::vector<
            google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>
            result(r.snapshot_schedule_policies().size());
        auto& messages = *r.mutable_snapshot_schedule_policies();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>
BareMetalSolutionConnectionImpl::GetSnapshotSchedulePolicy(
    google::cloud::baremetalsolution::v2::
        GetSnapshotSchedulePolicyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetSnapshotSchedulePolicy(request),
      [this](grpc::ClientContext& context,
             google::cloud::baremetalsolution::v2::
                 GetSnapshotSchedulePolicyRequest const& request) {
        return stub_->GetSnapshotSchedulePolicy(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>
BareMetalSolutionConnectionImpl::CreateSnapshotSchedulePolicy(
    google::cloud::baremetalsolution::v2::
        CreateSnapshotSchedulePolicyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateSnapshotSchedulePolicy(request),
      [this](grpc::ClientContext& context,
             google::cloud::baremetalsolution::v2::
                 CreateSnapshotSchedulePolicyRequest const& request) {
        return stub_->CreateSnapshotSchedulePolicy(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::baremetalsolution::v2::SnapshotSchedulePolicy>
BareMetalSolutionConnectionImpl::UpdateSnapshotSchedulePolicy(
    google::cloud::baremetalsolution::v2::
        UpdateSnapshotSchedulePolicyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateSnapshotSchedulePolicy(request),
      [this](grpc::ClientContext& context,
             google::cloud::baremetalsolution::v2::
                 UpdateSnapshotSchedulePolicyRequest const& request) {
        return stub_->UpdateSnapshotSchedulePolicy(context, request);
      },
      request, __func__);
}

Status BareMetalSolutionConnectionImpl::DeleteSnapshotSchedulePolicy(
    google::cloud::baremetalsolution::v2::
        DeleteSnapshotSchedulePolicyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteSnapshotSchedulePolicy(request),
      [this](grpc::ClientContext& context,
             google::cloud::baremetalsolution::v2::
                 DeleteSnapshotSchedulePolicyRequest const& request) {
        return stub_->DeleteSnapshotSchedulePolicy(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::baremetalsolution::v2::VolumeSnapshot>
BareMetalSolutionConnectionImpl::CreateVolumeSnapshot(
    google::cloud::baremetalsolution::v2::CreateVolumeSnapshotRequest const&
        request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateVolumeSnapshot(request),
      [this](grpc::ClientContext& context,
             google::cloud::baremetalsolution::v2::
                 CreateVolumeSnapshotRequest const& request) {
        return stub_->CreateVolumeSnapshot(context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::baremetalsolution::v2::VolumeSnapshot>>
BareMetalSolutionConnectionImpl::RestoreVolumeSnapshot(
    google::cloud::baremetalsolution::v2::RestoreVolumeSnapshotRequest const&
        request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::baremetalsolution::v2::VolumeSnapshot>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::baremetalsolution::v2::
                 RestoreVolumeSnapshotRequest const& request) {
        return stub->AsyncRestoreVolumeSnapshot(cq, std::move(context),
                                                request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::baremetalsolution::v2::VolumeSnapshot>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->RestoreVolumeSnapshot(request), polling_policy(),
      __func__);
}

Status BareMetalSolutionConnectionImpl::DeleteVolumeSnapshot(
    google::cloud::baremetalsolution::v2::DeleteVolumeSnapshotRequest const&
        request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteVolumeSnapshot(request),
      [this](grpc::ClientContext& context,
             google::cloud::baremetalsolution::v2::
                 DeleteVolumeSnapshotRequest const& request) {
        return stub_->DeleteVolumeSnapshot(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::baremetalsolution::v2::VolumeSnapshot>
BareMetalSolutionConnectionImpl::GetVolumeSnapshot(
    google::cloud::baremetalsolution::v2::GetVolumeSnapshotRequest const&
        request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetVolumeSnapshot(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::baremetalsolution::v2::GetVolumeSnapshotRequest const&
              request) { return stub_->GetVolumeSnapshot(context, request); },
      request, __func__);
}

StreamRange<google::cloud::baremetalsolution::v2::VolumeSnapshot>
BareMetalSolutionConnectionImpl::ListVolumeSnapshots(
    google::cloud::baremetalsolution::v2::ListVolumeSnapshotsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<baremetalsolution::BareMetalSolutionRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListVolumeSnapshots(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::baremetalsolution::v2::VolumeSnapshot>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::baremetalsolution::v2::
                          ListVolumeSnapshotsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::baremetalsolution::v2::
                       ListVolumeSnapshotsRequest const& request) {
              return stub->ListVolumeSnapshots(context, request);
            },
            r, function_name);
      },
      [](google::cloud::baremetalsolution::v2::ListVolumeSnapshotsResponse r) {
        std::vector<google::cloud::baremetalsolution::v2::VolumeSnapshot>
            result(r.volume_snapshots().size());
        auto& messages = *r.mutable_volume_snapshots();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::baremetalsolution::v2::Lun>
BareMetalSolutionConnectionImpl::GetLun(
    google::cloud::baremetalsolution::v2::GetLunRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->GetLun(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::baremetalsolution::v2::GetLunRequest const& request) {
        return stub_->GetLun(context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::baremetalsolution::v2::Lun>
BareMetalSolutionConnectionImpl::ListLuns(
    google::cloud::baremetalsolution::v2::ListLunsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<baremetalsolution::BareMetalSolutionRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListLuns(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::baremetalsolution::v2::Lun>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::baremetalsolution::v2::ListLunsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::baremetalsolution::v2::ListLunsRequest const&
                       request) { return stub->ListLuns(context, request); },
            r, function_name);
      },
      [](google::cloud::baremetalsolution::v2::ListLunsResponse r) {
        std::vector<google::cloud::baremetalsolution::v2::Lun> result(
            r.luns().size());
        auto& messages = *r.mutable_luns();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace baremetalsolution_internal
}  // namespace cloud
}  // namespace google
