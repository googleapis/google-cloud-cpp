// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/spanner/admin/instance/v1/spanner_instance_admin.proto

#include "google/cloud/spanner/admin/internal/instance_admin_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/longrunning/operations.pb.h>
#include <google/spanner/admin/instance/v1/spanner_instance_admin.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace spanner_admin_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultInstanceAdminRestStub::DefaultInstanceAdminRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      operations_(rest_internal::MakePooledRestClient(
          options.get<rest_internal::LongrunningEndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultInstanceAdminRestStub::DefaultInstanceAdminRestStub(
    std::shared_ptr<rest_internal::RestClient> service,
    std::shared_ptr<rest_internal::RestClient> operations, Options options)
    : service_(std::move(service)),
      operations_(std::move(operations)),
      options_(std::move(options)) {}

StatusOr<google::spanner::admin::instance::v1::ListInstanceConfigsResponse>
DefaultInstanceAdminRestStub::ListInstanceConfigs(
    google::cloud::rest_internal::RestContext& rest_context,
    google::spanner::admin::instance::v1::ListInstanceConfigsRequest const&
        request) {
  return rest_internal::Get<
      google::spanner::admin::instance::v1::ListInstanceConfigsResponse>(
      *service_, rest_context, request,
      absl::StrCat("/", "v1", "/", request.parent(), "/", "instanceConfigs"),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("page_size", std::to_string(request.page_size())),
           std::make_pair("page_token", request.page_token())}));
}

StatusOr<google::spanner::admin::instance::v1::InstanceConfig>
DefaultInstanceAdminRestStub::GetInstanceConfig(
    google::cloud::rest_internal::RestContext& rest_context,
    google::spanner::admin::instance::v1::GetInstanceConfigRequest const&
        request) {
  return rest_internal::Get<
      google::spanner::admin::instance::v1::InstanceConfig>(
      *service_, rest_context, request,
      absl::StrCat("/", "v1", "/", request.name()));
}

future<StatusOr<google::longrunning::Operation>>
DefaultInstanceAdminRestStub::AsyncCreateInstanceConfig(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::spanner::admin::instance::v1::CreateInstanceConfigRequest const&
        request) {
  promise<StatusOr<google::longrunning::Operation>> p;
  future<StatusOr<google::longrunning::Operation>> f = p.get_future();
  std::thread t{
      [](auto p, auto service, auto request, auto rest_context) {
        p.set_value(rest_internal::Post<google::longrunning::Operation>(
            *service, *rest_context, request,
            absl::StrCat("/", "v1", "/", request.parent(), "/",
                         "instanceConfigs"),
            rest_internal::TrimEmptyQueryParameters(
                {std::make_pair("instance_config_id",
                                request.instance_config_id()),
                 std::make_pair("validate_only",
                                request.validate_only() ? "1" : "0")})));
      },
      std::move(p), service_, request, std::move(rest_context)};
  return f.then([t = std::move(t), cq](auto f) mutable {
    cq.RunAsync([t = std::move(t)]() mutable { t.join(); });
    return f.get();
  });
}

future<StatusOr<google::longrunning::Operation>>
DefaultInstanceAdminRestStub::AsyncUpdateInstanceConfig(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::spanner::admin::instance::v1::UpdateInstanceConfigRequest const&
        request) {
  promise<StatusOr<google::longrunning::Operation>> p;
  future<StatusOr<google::longrunning::Operation>> f = p.get_future();
  std::thread t{
      [](auto p, auto service, auto request, auto rest_context) {
        p.set_value(rest_internal::Patch<google::longrunning::Operation>(
            *service, *rest_context, request,
            absl::StrCat("/", "v1", "/", request.instance_config().name()),
            rest_internal::TrimEmptyQueryParameters({std::make_pair(
                "validate_only", request.validate_only() ? "1" : "0")})));
      },
      std::move(p), service_, request, std::move(rest_context)};
  return f.then([t = std::move(t), cq](auto f) mutable {
    cq.RunAsync([t = std::move(t)]() mutable { t.join(); });
    return f.get();
  });
}

Status DefaultInstanceAdminRestStub::DeleteInstanceConfig(
    google::cloud::rest_internal::RestContext& rest_context,
    google::spanner::admin::instance::v1::DeleteInstanceConfigRequest const&
        request) {
  return rest_internal::Delete(
      *service_, rest_context, request,
      absl::StrCat("/", "v1", "/", request.name()),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("etag", request.etag()),
           std::make_pair("validate_only",
                          request.validate_only() ? "1" : "0")}));
}

StatusOr<
    google::spanner::admin::instance::v1::ListInstanceConfigOperationsResponse>
DefaultInstanceAdminRestStub::ListInstanceConfigOperations(
    google::cloud::rest_internal::RestContext& rest_context,
    google::spanner::admin::instance::v1::
        ListInstanceConfigOperationsRequest const& request) {
  return rest_internal::Get<google::spanner::admin::instance::v1::
                                ListInstanceConfigOperationsResponse>(
      *service_, rest_context, request,
      absl::StrCat("/", "v1", "/", request.parent(), "/",
                   "instanceConfigOperations"),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("filter", request.filter()),
           std::make_pair("page_size", std::to_string(request.page_size())),
           std::make_pair("page_token", request.page_token())}));
}

StatusOr<google::spanner::admin::instance::v1::ListInstancesResponse>
DefaultInstanceAdminRestStub::ListInstances(
    google::cloud::rest_internal::RestContext& rest_context,
    google::spanner::admin::instance::v1::ListInstancesRequest const& request) {
  return rest_internal::Get<
      google::spanner::admin::instance::v1::ListInstancesResponse>(
      *service_, rest_context, request,
      absl::StrCat("/", "v1", "/", request.parent(), "/", "instances"),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("page_size", std::to_string(request.page_size())),
           std::make_pair("page_token", request.page_token()),
           std::make_pair("filter", request.filter())}));
}

StatusOr<google::spanner::admin::instance::v1::Instance>
DefaultInstanceAdminRestStub::GetInstance(
    google::cloud::rest_internal::RestContext& rest_context,
    google::spanner::admin::instance::v1::GetInstanceRequest const& request) {
  return rest_internal::Get<google::spanner::admin::instance::v1::Instance>(
      *service_, rest_context, request,
      absl::StrCat("/", "v1", "/", request.name()));
}

future<StatusOr<google::longrunning::Operation>>
DefaultInstanceAdminRestStub::AsyncCreateInstance(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::spanner::admin::instance::v1::CreateInstanceRequest const&
        request) {
  promise<StatusOr<google::longrunning::Operation>> p;
  future<StatusOr<google::longrunning::Operation>> f = p.get_future();
  std::thread t{
      [](auto p, auto service, auto request, auto rest_context) {
        p.set_value(rest_internal::Post<google::longrunning::Operation>(
            *service, *rest_context, request,
            absl::StrCat("/", "v1", "/", request.parent(), "/", "instances"),
            rest_internal::TrimEmptyQueryParameters(
                {std::make_pair("instance_id", request.instance_id())})));
      },
      std::move(p), service_, request, std::move(rest_context)};
  return f.then([t = std::move(t), cq](auto f) mutable {
    cq.RunAsync([t = std::move(t)]() mutable { t.join(); });
    return f.get();
  });
}

future<StatusOr<google::longrunning::Operation>>
DefaultInstanceAdminRestStub::AsyncUpdateInstance(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::spanner::admin::instance::v1::UpdateInstanceRequest const&
        request) {
  promise<StatusOr<google::longrunning::Operation>> p;
  future<StatusOr<google::longrunning::Operation>> f = p.get_future();
  std::thread t{
      [](auto p, auto service, auto request, auto rest_context) {
        p.set_value(rest_internal::Patch<google::longrunning::Operation>(
            *service, *rest_context, request,
            absl::StrCat("/", "v1", "/", request.instance().name())));
      },
      std::move(p), service_, request, std::move(rest_context)};
  return f.then([t = std::move(t), cq](auto f) mutable {
    cq.RunAsync([t = std::move(t)]() mutable { t.join(); });
    return f.get();
  });
}

Status DefaultInstanceAdminRestStub::DeleteInstance(
    google::cloud::rest_internal::RestContext& rest_context,
    google::spanner::admin::instance::v1::DeleteInstanceRequest const&
        request) {
  return rest_internal::Delete(*service_, rest_context, request,
                               absl::StrCat("/", "v1", "/", request.name()));
}

StatusOr<google::iam::v1::Policy> DefaultInstanceAdminRestStub::SetIamPolicy(
    google::cloud::rest_internal::RestContext& rest_context,
    google::iam::v1::SetIamPolicyRequest const& request) {
  return rest_internal::Post<google::iam::v1::Policy>(
      *service_, rest_context, request,
      absl::StrCat("/", "v1", "/", request.resource(), ":setIamPolicy"));
}

StatusOr<google::iam::v1::Policy> DefaultInstanceAdminRestStub::GetIamPolicy(
    google::cloud::rest_internal::RestContext& rest_context,
    google::iam::v1::GetIamPolicyRequest const& request) {
  return rest_internal::Post<google::iam::v1::Policy>(
      *service_, rest_context, request,
      absl::StrCat("/", "v1", "/", request.resource(), ":getIamPolicy"));
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DefaultInstanceAdminRestStub::TestIamPermissions(
    google::cloud::rest_internal::RestContext& rest_context,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  return rest_internal::Post<google::iam::v1::TestIamPermissionsResponse>(
      *service_, rest_context, request,
      absl::StrCat("/", "v1", "/", request.resource(), ":testIamPermissions"));
}

future<StatusOr<google::longrunning::Operation>>
DefaultInstanceAdminRestStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::longrunning::GetOperationRequest const& request) {
  promise<StatusOr<google::longrunning::Operation>> p;
  future<StatusOr<google::longrunning::Operation>> f = p.get_future();
  std::thread t{
      [](auto p, auto operations, auto request, auto rest_context) {
        p.set_value(rest_internal::Get<google::longrunning::Operation>(
            *operations, *rest_context, request,
            absl::StrCat("/v1/", request.name())));
      },
      std::move(p), operations_, request, std::move(rest_context)};
  return f.then([t = std::move(t), cq](auto f) mutable {
    cq.RunAsync([t = std::move(t)]() mutable { t.join(); });
    return f.get();
  });
}

future<Status> DefaultInstanceAdminRestStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::longrunning::CancelOperationRequest const& request) {
  promise<StatusOr<google::protobuf::Empty>> p;
  future<StatusOr<google::protobuf::Empty>> f = p.get_future();
  std::thread t{[](auto p, auto operations, auto request, auto rest_context) {
                  p.set_value(rest_internal::Post<google::protobuf::Empty>(
                      *operations, *rest_context, request,
                      absl::StrCat("/v1/", request.name(), ":cancel")));
                },
                std::move(p), operations_, request, std::move(rest_context)};
  return f.then([t = std::move(t), cq](auto f) mutable {
    cq.RunAsync([t = std::move(t)]() mutable { t.join(); });
    return f.get().status();
  });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace spanner_admin_internal
}  // namespace cloud
}  // namespace google
