// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/spanner/admin/instance/v1/spanner_instance_admin.proto

#include "google/cloud/spanner/admin/instance_admin_client.h"
#include "google/cloud/spanner/admin/instance_admin_options.h"
#include "google/cloud/spanner/admin/internal/instance_admin_option_defaults.h"
#include <memory>
#include <thread>

namespace google {
namespace cloud {
namespace spanner_admin {
inline namespace GOOGLE_CLOUD_CPP_GENERATED_NS {

InstanceAdminClient::InstanceAdminClient(
    std::shared_ptr<InstanceAdminConnection> connection)
    : connection_(std::move(connection)) {}
InstanceAdminClient::~InstanceAdminClient() = default;

StreamRange<google::spanner::admin::instance::v1::InstanceConfig>
InstanceAdminClient::ListInstanceConfigs(std::string const& parent) {
  google::spanner::admin::instance::v1::ListInstanceConfigsRequest request;
  request.set_parent(parent);
  return connection_->ListInstanceConfigs(request);
}

StatusOr<google::spanner::admin::instance::v1::InstanceConfig>
InstanceAdminClient::GetInstanceConfig(std::string const& name) {
  google::spanner::admin::instance::v1::GetInstanceConfigRequest request;
  request.set_name(name);
  return connection_->GetInstanceConfig(request);
}

StreamRange<google::spanner::admin::instance::v1::Instance>
InstanceAdminClient::ListInstances(std::string const& parent) {
  google::spanner::admin::instance::v1::ListInstancesRequest request;
  request.set_parent(parent);
  return connection_->ListInstances(request);
}

StatusOr<google::spanner::admin::instance::v1::Instance>
InstanceAdminClient::GetInstance(std::string const& name) {
  google::spanner::admin::instance::v1::GetInstanceRequest request;
  request.set_name(name);
  return connection_->GetInstance(request);
}

future<StatusOr<google::spanner::admin::instance::v1::Instance>>
InstanceAdminClient::CreateInstance(
    std::string const& parent, std::string const& instance_id,
    google::spanner::admin::instance::v1::Instance const& instance) {
  google::spanner::admin::instance::v1::CreateInstanceRequest request;
  request.set_parent(parent);
  request.set_instance_id(instance_id);
  *request.mutable_instance() = instance;
  return connection_->CreateInstance(request);
}

future<StatusOr<google::spanner::admin::instance::v1::Instance>>
InstanceAdminClient::UpdateInstance(
    google::spanner::admin::instance::v1::Instance const& instance,
    google::protobuf::FieldMask const& field_mask) {
  google::spanner::admin::instance::v1::UpdateInstanceRequest request;
  *request.mutable_instance() = instance;
  *request.mutable_field_mask() = field_mask;
  return connection_->UpdateInstance(request);
}

Status InstanceAdminClient::DeleteInstance(std::string const& name) {
  google::spanner::admin::instance::v1::DeleteInstanceRequest request;
  request.set_name(name);
  return connection_->DeleteInstance(request);
}

StatusOr<google::iam::v1::Policy> InstanceAdminClient::SetIamPolicy(
    std::string const& resource, google::iam::v1::Policy const& policy) {
  google::iam::v1::SetIamPolicyRequest request;
  request.set_resource(resource);
  *request.mutable_policy() = policy;
  return connection_->SetIamPolicy(request);
}

StatusOr<google::iam::v1::Policy> InstanceAdminClient::SetIamPolicy(
    std::string const& resource, IamUpdater const& updater, Options options) {
  internal::CheckExpectedOptions<InstanceAdminBackoffPolicyOption>(options,
                                                                   __func__);
  options =
      spanner_admin_internal::InstanceAdminDefaultOptions(std::move(options));
  auto backoff_policy =
      options.get<InstanceAdminBackoffPolicyOption>()->clone();
  for (;;) {
    auto recent = GetIamPolicy(resource);
    if (!recent) {
      return recent.status();
    }
    auto policy = updater(*std::move(recent));
    if (!policy) {
      return Status(StatusCode::kCancelled, "updater did not yield a policy");
    }
    auto result = SetIamPolicy(resource, *std::move(policy));
    if (result || result.status().code() != StatusCode::kAborted) {
      return result;
    }
    std::this_thread::sleep_for(backoff_policy->OnCompletion());
  }
}

StatusOr<google::iam::v1::Policy> InstanceAdminClient::GetIamPolicy(
    std::string const& resource) {
  google::iam::v1::GetIamPolicyRequest request;
  request.set_resource(resource);
  return connection_->GetIamPolicy(request);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
InstanceAdminClient::TestIamPermissions(
    std::string const& resource, std::vector<std::string> const& permissions) {
  google::iam::v1::TestIamPermissionsRequest request;
  request.set_resource(resource);
  *request.mutable_permissions() = {permissions.begin(), permissions.end()};
  return connection_->TestIamPermissions(request);
}

StreamRange<google::spanner::admin::instance::v1::InstanceConfig>
InstanceAdminClient::ListInstanceConfigs(
    google::spanner::admin::instance::v1::ListInstanceConfigsRequest request) {
  return connection_->ListInstanceConfigs(std::move(request));
}

StatusOr<google::spanner::admin::instance::v1::InstanceConfig>
InstanceAdminClient::GetInstanceConfig(
    google::spanner::admin::instance::v1::GetInstanceConfigRequest const&
        request) {
  return connection_->GetInstanceConfig(request);
}

StreamRange<google::spanner::admin::instance::v1::Instance>
InstanceAdminClient::ListInstances(
    google::spanner::admin::instance::v1::ListInstancesRequest request) {
  return connection_->ListInstances(std::move(request));
}

StatusOr<google::spanner::admin::instance::v1::Instance>
InstanceAdminClient::GetInstance(
    google::spanner::admin::instance::v1::GetInstanceRequest const& request) {
  return connection_->GetInstance(request);
}

future<StatusOr<google::spanner::admin::instance::v1::Instance>>
InstanceAdminClient::CreateInstance(
    google::spanner::admin::instance::v1::CreateInstanceRequest const&
        request) {
  return connection_->CreateInstance(request);
}

future<StatusOr<google::spanner::admin::instance::v1::Instance>>
InstanceAdminClient::UpdateInstance(
    google::spanner::admin::instance::v1::UpdateInstanceRequest const&
        request) {
  return connection_->UpdateInstance(request);
}

Status InstanceAdminClient::DeleteInstance(
    google::spanner::admin::instance::v1::DeleteInstanceRequest const&
        request) {
  return connection_->DeleteInstance(request);
}

StatusOr<google::iam::v1::Policy> InstanceAdminClient::SetIamPolicy(
    google::iam::v1::SetIamPolicyRequest const& request) {
  return connection_->SetIamPolicy(request);
}

StatusOr<google::iam::v1::Policy> InstanceAdminClient::GetIamPolicy(
    google::iam::v1::GetIamPolicyRequest const& request) {
  return connection_->GetIamPolicy(request);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
InstanceAdminClient::TestIamPermissions(
    google::iam::v1::TestIamPermissionsRequest const& request) {
  return connection_->TestIamPermissions(request);
}

}  // namespace GOOGLE_CLOUD_CPP_GENERATED_NS
}  // namespace spanner_admin
}  // namespace cloud
}  // namespace google
