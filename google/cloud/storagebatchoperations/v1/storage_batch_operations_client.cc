// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/storagebatchoperations/v1/storage_batch_operations.proto

#include "google/cloud/storagebatchoperations/v1/storage_batch_operations_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace storagebatchoperations_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

StorageBatchOperationsClient::StorageBatchOperationsClient(
    std::shared_ptr<StorageBatchOperationsConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
StorageBatchOperationsClient::~StorageBatchOperationsClient() = default;

StreamRange<google::cloud::storagebatchoperations::v1::Job>
StorageBatchOperationsClient::ListJobs(std::string const& parent,
                                       Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::storagebatchoperations::v1::ListJobsRequest request;
  request.set_parent(parent);
  return connection_->ListJobs(request);
}

StreamRange<google::cloud::storagebatchoperations::v1::Job>
StorageBatchOperationsClient::ListJobs(
    google::cloud::storagebatchoperations::v1::ListJobsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListJobs(std::move(request));
}

StatusOr<google::cloud::storagebatchoperations::v1::Job>
StorageBatchOperationsClient::GetJob(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::storagebatchoperations::v1::GetJobRequest request;
  request.set_name(name);
  return connection_->GetJob(request);
}

StatusOr<google::cloud::storagebatchoperations::v1::Job>
StorageBatchOperationsClient::GetJob(
    google::cloud::storagebatchoperations::v1::GetJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetJob(request);
}

future<StatusOr<google::cloud::storagebatchoperations::v1::Job>>
StorageBatchOperationsClient::CreateJob(
    std::string const& parent,
    google::cloud::storagebatchoperations::v1::Job const& job,
    std::string const& job_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::storagebatchoperations::v1::CreateJobRequest request;
  request.set_parent(parent);
  *request.mutable_job() = job;
  request.set_job_id(job_id);
  return connection_->CreateJob(request);
}

StatusOr<google::longrunning::Operation>
StorageBatchOperationsClient::CreateJob(
    NoAwaitTag, std::string const& parent,
    google::cloud::storagebatchoperations::v1::Job const& job,
    std::string const& job_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::storagebatchoperations::v1::CreateJobRequest request;
  request.set_parent(parent);
  *request.mutable_job() = job;
  request.set_job_id(job_id);
  return connection_->CreateJob(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::storagebatchoperations::v1::Job>>
StorageBatchOperationsClient::CreateJob(
    google::cloud::storagebatchoperations::v1::CreateJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateJob(request);
}

StatusOr<google::longrunning::Operation>
StorageBatchOperationsClient::CreateJob(
    NoAwaitTag,
    google::cloud::storagebatchoperations::v1::CreateJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateJob(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::storagebatchoperations::v1::Job>>
StorageBatchOperationsClient::CreateJob(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateJob(operation);
}

Status StorageBatchOperationsClient::DeleteJob(std::string const& name,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::storagebatchoperations::v1::DeleteJobRequest request;
  request.set_name(name);
  return connection_->DeleteJob(request);
}

Status StorageBatchOperationsClient::DeleteJob(
    google::cloud::storagebatchoperations::v1::DeleteJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteJob(request);
}

StatusOr<google::cloud::storagebatchoperations::v1::CancelJobResponse>
StorageBatchOperationsClient::CancelJob(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::storagebatchoperations::v1::CancelJobRequest request;
  request.set_name(name);
  return connection_->CancelJob(request);
}

StatusOr<google::cloud::storagebatchoperations::v1::CancelJobResponse>
StorageBatchOperationsClient::CancelJob(
    google::cloud::storagebatchoperations::v1::CancelJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelJob(request);
}

StreamRange<google::cloud::location::Location>
StorageBatchOperationsClient::ListLocations(
    google::cloud::location::ListLocationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListLocations(std::move(request));
}

StatusOr<google::cloud::location::Location>
StorageBatchOperationsClient::GetLocation(
    google::cloud::location::GetLocationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetLocation(request);
}

StreamRange<google::longrunning::Operation>
StorageBatchOperationsClient::ListOperations(std::string const& name,
                                             std::string const& filter,
                                             Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::ListOperationsRequest request;
  request.set_name(name);
  request.set_filter(filter);
  return connection_->ListOperations(request);
}

StreamRange<google::longrunning::Operation>
StorageBatchOperationsClient::ListOperations(
    google::longrunning::ListOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListOperations(std::move(request));
}

StatusOr<google::longrunning::Operation>
StorageBatchOperationsClient::GetOperation(std::string const& name,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation>
StorageBatchOperationsClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

Status StorageBatchOperationsClient::DeleteOperation(std::string const& name,
                                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::DeleteOperationRequest request;
  request.set_name(name);
  return connection_->DeleteOperation(request);
}

Status StorageBatchOperationsClient::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteOperation(request);
}

Status StorageBatchOperationsClient::CancelOperation(std::string const& name,
                                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::CancelOperationRequest request;
  request.set_name(name);
  return connection_->CancelOperation(request);
}

Status StorageBatchOperationsClient::CancelOperation(
    google::longrunning::CancelOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace storagebatchoperations_v1
}  // namespace cloud
}  // namespace google
