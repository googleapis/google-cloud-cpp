// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/storagebatchoperations/v1/storage_batch_operations.proto

#include "google/cloud/storagebatchoperations/v1/storage_batch_operations_connection.h"
#include "google/cloud/storagebatchoperations/v1/internal/storage_batch_operations_connection_impl.h"
#include "google/cloud/storagebatchoperations/v1/internal/storage_batch_operations_option_defaults.h"
#include "google/cloud/storagebatchoperations/v1/internal/storage_batch_operations_stub_factory.h"
#include "google/cloud/storagebatchoperations/v1/internal/storage_batch_operations_tracing_connection.h"
#include "google/cloud/storagebatchoperations/v1/storage_batch_operations_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace storagebatchoperations_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

StorageBatchOperationsConnection::~StorageBatchOperationsConnection() = default;

StreamRange<google::cloud::storagebatchoperations::v1::Job>
StorageBatchOperationsConnection::ListJobs(
    google::cloud::storagebatchoperations::v1::
        ListJobsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::storagebatchoperations::v1::Job>>();
}

StatusOr<google::cloud::storagebatchoperations::v1::Job>
StorageBatchOperationsConnection::GetJob(
    google::cloud::storagebatchoperations::v1::GetJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::storagebatchoperations::v1::Job>>
StorageBatchOperationsConnection::CreateJob(
    google::cloud::storagebatchoperations::v1::CreateJobRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::storagebatchoperations::v1::Job>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation>
StorageBatchOperationsConnection::CreateJob(
    NoAwaitTag,
    google::cloud::storagebatchoperations::v1::CreateJobRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::storagebatchoperations::v1::Job>>
StorageBatchOperationsConnection::CreateJob(
    google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::storagebatchoperations::v1::Job>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

Status StorageBatchOperationsConnection::DeleteJob(
    google::cloud::storagebatchoperations::v1::DeleteJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::storagebatchoperations::v1::CancelJobResponse>
StorageBatchOperationsConnection::CancelJob(
    google::cloud::storagebatchoperations::v1::CancelJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::location::Location>
StorageBatchOperationsConnection::ListLocations(
    google::cloud::location::
        ListLocationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::location::Location>>();
}

StatusOr<google::cloud::location::Location>
StorageBatchOperationsConnection::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::longrunning::Operation>
StorageBatchOperationsConnection::ListOperations(
    google::longrunning::
        ListOperationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::longrunning::Operation>>();
}

StatusOr<google::longrunning::Operation>
StorageBatchOperationsConnection::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status StorageBatchOperationsConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status StorageBatchOperationsConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<StorageBatchOperationsConnection>
MakeStorageBatchOperationsConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 StorageBatchOperationsPolicyOptionList>(
      options, __func__);
  options =
      storagebatchoperations_v1_internal::StorageBatchOperationsDefaultOptions(
          std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = storagebatchoperations_v1_internal::
      CreateDefaultStorageBatchOperationsStub(std::move(auth), options);
  return storagebatchoperations_v1_internal::
      MakeStorageBatchOperationsTracingConnection(
          std::make_shared<storagebatchoperations_v1_internal::
                               StorageBatchOperationsConnectionImpl>(
              std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace storagebatchoperations_v1
}  // namespace cloud
}  // namespace google
