// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/storagebatchoperations/v1/storage_batch_operations.proto

#include "google/cloud/storagebatchoperations/v1/internal/storage_batch_operations_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace storagebatchoperations_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

StorageBatchOperationsTracingConnection::
    StorageBatchOperationsTracingConnection(
        std::shared_ptr<
            storagebatchoperations_v1::StorageBatchOperationsConnection>
            child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::storagebatchoperations::v1::Job>
StorageBatchOperationsTracingConnection::ListJobs(
    google::cloud::storagebatchoperations::v1::ListJobsRequest request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::ListJobs");
  internal::OTelScope scope(span);
  auto sr = child_->ListJobs(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::storagebatchoperations::v1::Job>(std::move(span),
                                                      std::move(sr));
}

StatusOr<google::cloud::storagebatchoperations::v1::Job>
StorageBatchOperationsTracingConnection::GetJob(
    google::cloud::storagebatchoperations::v1::GetJobRequest const& request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::GetJob");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetJob(request));
}

future<StatusOr<google::cloud::storagebatchoperations::v1::Job>>
StorageBatchOperationsTracingConnection::CreateJob(
    google::cloud::storagebatchoperations::v1::CreateJobRequest const&
        request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::CreateJob");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->CreateJob(request));
}

StatusOr<google::longrunning::Operation>
StorageBatchOperationsTracingConnection::CreateJob(
    NoAwaitTag,
    google::cloud::storagebatchoperations::v1::CreateJobRequest const&
        request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::CreateJob");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span, child_->CreateJob(NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::storagebatchoperations::v1::Job>>
StorageBatchOperationsTracingConnection::CreateJob(
    google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::CreateJob");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->CreateJob(operation));
}

Status StorageBatchOperationsTracingConnection::DeleteJob(
    google::cloud::storagebatchoperations::v1::DeleteJobRequest const&
        request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::DeleteJob");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteJob(request));
}

StatusOr<google::cloud::storagebatchoperations::v1::CancelJobResponse>
StorageBatchOperationsTracingConnection::CancelJob(
    google::cloud::storagebatchoperations::v1::CancelJobRequest const&
        request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::CancelJob");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CancelJob(request));
}

StreamRange<google::cloud::location::Location>
StorageBatchOperationsTracingConnection::ListLocations(
    google::cloud::location::ListLocationsRequest request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::"
      "ListLocations");
  internal::OTelScope scope(span);
  auto sr = child_->ListLocations(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::location::Location>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::location::Location>
StorageBatchOperationsTracingConnection::GetLocation(
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::"
      "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetLocation(request));
}

StreamRange<google::longrunning::Operation>
StorageBatchOperationsTracingConnection::ListOperations(
    google::longrunning::ListOperationsRequest request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::"
      "ListOperations");
  internal::OTelScope scope(span);
  auto sr = child_->ListOperations(std::move(request));
  return internal::MakeTracedStreamRange<google::longrunning::Operation>(
      std::move(span), std::move(sr));
}

StatusOr<google::longrunning::Operation>
StorageBatchOperationsTracingConnection::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::"
      "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetOperation(request));
}

Status StorageBatchOperationsTracingConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::"
      "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteOperation(request));
}

Status StorageBatchOperationsTracingConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "storagebatchoperations_v1::StorageBatchOperationsConnection::"
      "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CancelOperation(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<storagebatchoperations_v1::StorageBatchOperationsConnection>
MakeStorageBatchOperationsTracingConnection(
    std::shared_ptr<storagebatchoperations_v1::StorageBatchOperationsConnection>
        conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<StorageBatchOperationsTracingConnection>(
        std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace storagebatchoperations_v1_internal
}  // namespace cloud
}  // namespace google
