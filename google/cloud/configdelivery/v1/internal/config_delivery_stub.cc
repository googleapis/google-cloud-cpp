// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/configdelivery/v1/config_delivery.proto

#include "google/cloud/configdelivery/v1/internal/config_delivery_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/configdelivery/v1/config_delivery.grpc.pb.h>
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace configdelivery_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ConfigDeliveryStub::~ConfigDeliveryStub() = default;

StatusOr<google::cloud::configdelivery::v1::ListResourceBundlesResponse>
DefaultConfigDeliveryStub::ListResourceBundles(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::ListResourceBundlesRequest const&
        request) {
  google::cloud::configdelivery::v1::ListResourceBundlesResponse response;
  auto status = grpc_stub_->ListResourceBundles(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::configdelivery::v1::ResourceBundle>
DefaultConfigDeliveryStub::GetResourceBundle(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::GetResourceBundleRequest const&
        request) {
  google::cloud::configdelivery::v1::ResourceBundle response;
  auto status = grpc_stub_->GetResourceBundle(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncCreateResourceBundle(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::CreateResourceBundleRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::CreateResourceBundleRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::configdelivery::v1::CreateResourceBundleRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateResourceBundle(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::CreateResourceBundle(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::CreateResourceBundleRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateResourceBundle(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncUpdateResourceBundle(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::UpdateResourceBundleRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::UpdateResourceBundleRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::configdelivery::v1::UpdateResourceBundleRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateResourceBundle(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::UpdateResourceBundle(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::UpdateResourceBundleRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateResourceBundle(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncDeleteResourceBundle(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::DeleteResourceBundleRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::DeleteResourceBundleRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::configdelivery::v1::DeleteResourceBundleRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteResourceBundle(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::DeleteResourceBundle(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::DeleteResourceBundleRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteResourceBundle(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::configdelivery::v1::ListFleetPackagesResponse>
DefaultConfigDeliveryStub::ListFleetPackages(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::ListFleetPackagesRequest const&
        request) {
  google::cloud::configdelivery::v1::ListFleetPackagesResponse response;
  auto status = grpc_stub_->ListFleetPackages(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::configdelivery::v1::FleetPackage>
DefaultConfigDeliveryStub::GetFleetPackage(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::GetFleetPackageRequest const& request) {
  google::cloud::configdelivery::v1::FleetPackage response;
  auto status = grpc_stub_->GetFleetPackage(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncCreateFleetPackage(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::CreateFleetPackageRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::CreateFleetPackageRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::CreateFleetPackageRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateFleetPackage(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::CreateFleetPackage(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::CreateFleetPackageRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateFleetPackage(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncUpdateFleetPackage(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::UpdateFleetPackageRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::UpdateFleetPackageRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::UpdateFleetPackageRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateFleetPackage(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::UpdateFleetPackage(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::UpdateFleetPackageRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateFleetPackage(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncDeleteFleetPackage(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::DeleteFleetPackageRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::DeleteFleetPackageRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::DeleteFleetPackageRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteFleetPackage(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::DeleteFleetPackage(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::DeleteFleetPackageRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteFleetPackage(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::configdelivery::v1::ListReleasesResponse>
DefaultConfigDeliveryStub::ListReleases(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::ListReleasesRequest const& request) {
  google::cloud::configdelivery::v1::ListReleasesResponse response;
  auto status = grpc_stub_->ListReleases(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::configdelivery::v1::Release>
DefaultConfigDeliveryStub::GetRelease(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::GetReleaseRequest const& request) {
  google::cloud::configdelivery::v1::Release response;
  auto status = grpc_stub_->GetRelease(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncCreateRelease(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::CreateReleaseRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::CreateReleaseRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::CreateReleaseRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateRelease(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::CreateRelease(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::CreateReleaseRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateRelease(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncUpdateRelease(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::UpdateReleaseRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::UpdateReleaseRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::UpdateReleaseRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateRelease(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::UpdateRelease(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::UpdateReleaseRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateRelease(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncDeleteRelease(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::DeleteReleaseRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::DeleteReleaseRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::DeleteReleaseRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteRelease(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::DeleteRelease(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::DeleteReleaseRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteRelease(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::configdelivery::v1::ListVariantsResponse>
DefaultConfigDeliveryStub::ListVariants(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::ListVariantsRequest const& request) {
  google::cloud::configdelivery::v1::ListVariantsResponse response;
  auto status = grpc_stub_->ListVariants(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::configdelivery::v1::Variant>
DefaultConfigDeliveryStub::GetVariant(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::GetVariantRequest const& request) {
  google::cloud::configdelivery::v1::Variant response;
  auto status = grpc_stub_->GetVariant(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncCreateVariant(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::CreateVariantRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::CreateVariantRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::CreateVariantRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateVariant(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::CreateVariant(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::CreateVariantRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateVariant(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncUpdateVariant(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::UpdateVariantRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::UpdateVariantRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::UpdateVariantRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateVariant(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::UpdateVariant(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::UpdateVariantRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateVariant(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncDeleteVariant(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::DeleteVariantRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::DeleteVariantRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::DeleteVariantRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteVariant(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::DeleteVariant(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::DeleteVariantRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteVariant(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::configdelivery::v1::ListRolloutsResponse>
DefaultConfigDeliveryStub::ListRollouts(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::ListRolloutsRequest const& request) {
  google::cloud::configdelivery::v1::ListRolloutsResponse response;
  auto status = grpc_stub_->ListRollouts(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::configdelivery::v1::Rollout>
DefaultConfigDeliveryStub::GetRollout(
    grpc::ClientContext& context, Options const&,
    google::cloud::configdelivery::v1::GetRolloutRequest const& request) {
  google::cloud::configdelivery::v1::Rollout response;
  auto status = grpc_stub_->GetRollout(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncSuspendRollout(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::SuspendRolloutRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::SuspendRolloutRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::SuspendRolloutRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncSuspendRollout(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::SuspendRollout(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::SuspendRolloutRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->SuspendRollout(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncResumeRollout(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::ResumeRolloutRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::ResumeRolloutRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::configdelivery::v1::ResumeRolloutRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncResumeRollout(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::ResumeRollout(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::ResumeRolloutRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->ResumeRollout(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncAbortRollout(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::configdelivery::v1::AbortRolloutRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::configdelivery::v1::AbortRolloutRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::configdelivery::v1::AbortRolloutRequest const& request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncAbortRollout(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::AbortRollout(
    grpc::ClientContext& context, Options,
    google::cloud::configdelivery::v1::AbortRolloutRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->AbortRollout(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::ListLocationsResponse>
DefaultConfigDeliveryStub::ListLocations(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::ListLocationsRequest const& request) {
  google::cloud::location::ListLocationsResponse response;
  auto status = locations_stub_->ListLocations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::Location>
DefaultConfigDeliveryStub::GetLocation(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::GetLocationRequest const& request) {
  google::cloud::location::Location response;
  auto status = locations_stub_->GetLocation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::ListOperationsResponse>
DefaultConfigDeliveryStub::ListOperations(
    grpc::ClientContext& context, Options const&,
    google::longrunning::ListOperationsRequest const& request) {
  google::longrunning::ListOperationsResponse response;
  auto status = operations_stub_->ListOperations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::Operation>
DefaultConfigDeliveryStub::GetOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::GetOperationRequest const& request) {
  google::longrunning::Operation response;
  auto status = operations_stub_->GetOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultConfigDeliveryStub::DeleteOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::DeleteOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->DeleteOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

Status DefaultConfigDeliveryStub::CancelOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::CancelOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->CancelOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

future<StatusOr<google::longrunning::Operation>>
DefaultConfigDeliveryStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    // NOLINTNEXTLINE(performance-unnecessary-value-param)
    google::cloud::internal::ImmutableOptions,
    google::longrunning::GetOperationRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::longrunning::GetOperationRequest,
                                    google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::longrunning::GetOperationRequest const& request,
             grpc::CompletionQueue* cq) {
        return operations_stub_->AsyncGetOperation(context, request, cq);
      },
      request, std::move(context));
}

future<Status> DefaultConfigDeliveryStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    // NOLINTNEXTLINE(performance-unnecessary-value-param)
    google::cloud::internal::ImmutableOptions,
    google::longrunning::CancelOperationRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::longrunning::CancelOperationRequest,
                                    google::protobuf::Empty>(
             cq,
             [this](grpc::ClientContext* context,
                    google::longrunning::CancelOperationRequest const& request,
                    grpc::CompletionQueue* cq) {
               return operations_stub_->AsyncCancelOperation(context, request,
                                                             cq);
             },
             request, std::move(context))
      .then([](future<StatusOr<google::protobuf::Empty>> f) {
        return f.get().status();
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace configdelivery_v1_internal
}  // namespace cloud
}  // namespace google
