// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/configdelivery/v1/config_delivery.proto

#include "google/cloud/configdelivery/v1/internal/config_delivery_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace configdelivery_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ConfigDeliveryTracingStub::ConfigDeliveryTracingStub(
    std::shared_ptr<ConfigDeliveryStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::configdelivery::v1::ListResourceBundlesResponse>
ConfigDeliveryTracingStub::ListResourceBundles(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::ListResourceBundlesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "ListResourceBundles");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListResourceBundles(context, options, request));
}

StatusOr<google::cloud::configdelivery::v1::ResourceBundle>
ConfigDeliveryTracingStub::GetResourceBundle(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::GetResourceBundleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "GetResourceBundle");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetResourceBundle(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncCreateResourceBundle(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::CreateResourceBundleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "CreateResourceBundle");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateResourceBundle(cq, context, std::move(options),
                                             request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::CreateResourceBundle(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::CreateResourceBundleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "CreateResourceBundle");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateResourceBundle(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncUpdateResourceBundle(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::UpdateResourceBundleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "UpdateResourceBundle");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateResourceBundle(cq, context, std::move(options),
                                             request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::UpdateResourceBundle(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::UpdateResourceBundleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "UpdateResourceBundle");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateResourceBundle(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncDeleteResourceBundle(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::DeleteResourceBundleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "DeleteResourceBundle");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteResourceBundle(cq, context, std::move(options),
                                             request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::DeleteResourceBundle(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::DeleteResourceBundleRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "DeleteResourceBundle");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteResourceBundle(context, options, request));
}

StatusOr<google::cloud::configdelivery::v1::ListFleetPackagesResponse>
ConfigDeliveryTracingStub::ListFleetPackages(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::ListFleetPackagesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "ListFleetPackages");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListFleetPackages(context, options, request));
}

StatusOr<google::cloud::configdelivery::v1::FleetPackage>
ConfigDeliveryTracingStub::GetFleetPackage(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::GetFleetPackageRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "GetFleetPackage");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetFleetPackage(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncCreateFleetPackage(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::CreateFleetPackageRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "CreateFleetPackage");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCreateFleetPackage(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::CreateFleetPackage(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::CreateFleetPackageRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "CreateFleetPackage");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateFleetPackage(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncUpdateFleetPackage(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::UpdateFleetPackageRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "UpdateFleetPackage");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncUpdateFleetPackage(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::UpdateFleetPackage(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::UpdateFleetPackageRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "UpdateFleetPackage");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateFleetPackage(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncDeleteFleetPackage(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::DeleteFleetPackageRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "DeleteFleetPackage");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncDeleteFleetPackage(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::DeleteFleetPackage(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::DeleteFleetPackageRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "DeleteFleetPackage");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteFleetPackage(context, options, request));
}

StatusOr<google::cloud::configdelivery::v1::ListReleasesResponse>
ConfigDeliveryTracingStub::ListReleases(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::ListReleasesRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "ListReleases");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListReleases(context, options, request));
}

StatusOr<google::cloud::configdelivery::v1::Release>
ConfigDeliveryTracingStub::GetRelease(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::GetReleaseRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "GetRelease");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetRelease(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncCreateRelease(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::CreateReleaseRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "CreateRelease");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateRelease(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::CreateRelease(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::CreateReleaseRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "CreateRelease");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateRelease(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncUpdateRelease(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::UpdateReleaseRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "UpdateRelease");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateRelease(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::UpdateRelease(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::UpdateReleaseRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "UpdateRelease");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateRelease(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncDeleteRelease(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::DeleteReleaseRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "DeleteRelease");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteRelease(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::DeleteRelease(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::DeleteReleaseRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "DeleteRelease");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteRelease(context, options, request));
}

StatusOr<google::cloud::configdelivery::v1::ListVariantsResponse>
ConfigDeliveryTracingStub::ListVariants(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::ListVariantsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "ListVariants");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListVariants(context, options, request));
}

StatusOr<google::cloud::configdelivery::v1::Variant>
ConfigDeliveryTracingStub::GetVariant(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::GetVariantRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "GetVariant");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetVariant(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncCreateVariant(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::CreateVariantRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "CreateVariant");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateVariant(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::CreateVariant(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::CreateVariantRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "CreateVariant");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateVariant(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncUpdateVariant(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::UpdateVariantRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "UpdateVariant");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateVariant(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::UpdateVariant(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::UpdateVariantRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "UpdateVariant");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateVariant(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncDeleteVariant(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::DeleteVariantRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "DeleteVariant");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteVariant(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::DeleteVariant(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::DeleteVariantRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "DeleteVariant");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteVariant(context, options, request));
}

StatusOr<google::cloud::configdelivery::v1::ListRolloutsResponse>
ConfigDeliveryTracingStub::ListRollouts(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::ListRolloutsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "ListRollouts");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListRollouts(context, options, request));
}

StatusOr<google::cloud::configdelivery::v1::Rollout>
ConfigDeliveryTracingStub::GetRollout(
    grpc::ClientContext& context, Options const& options,
    google::cloud::configdelivery::v1::GetRolloutRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "GetRollout");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetRollout(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncSuspendRollout(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::SuspendRolloutRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "SuspendRollout");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncSuspendRollout(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::SuspendRollout(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::SuspendRolloutRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "SuspendRollout");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->SuspendRollout(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncResumeRollout(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::ResumeRolloutRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "ResumeRollout");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncResumeRollout(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::ResumeRollout(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::ResumeRolloutRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "ResumeRollout");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ResumeRollout(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncAbortRollout(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::configdelivery::v1::AbortRolloutRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "AbortRollout");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncAbortRollout(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::AbortRollout(
    grpc::ClientContext& context, Options options,
    google::cloud::configdelivery::v1::AbortRolloutRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "AbortRollout");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->AbortRollout(context, options, request));
}

StatusOr<google::cloud::location::ListLocationsResponse>
ConfigDeliveryTracingStub::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "ListLocations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListLocations(context, options, request));
}

StatusOr<google::cloud::location::Location>
ConfigDeliveryTracingStub::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetLocation(context, options, request));
}

StatusOr<google::longrunning::ListOperationsResponse>
ConfigDeliveryTracingStub::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "ListOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListOperations(context, options, request));
}

StatusOr<google::longrunning::Operation>
ConfigDeliveryTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

Status ConfigDeliveryTracingStub::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteOperation(context, options, request));
}

Status ConfigDeliveryTracingStub::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.configdelivery.v1.ConfigDelivery", "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CancelOperation(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
ConfigDeliveryTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.longrunning.Operations", "GetOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGetOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<Status> ConfigDeliveryTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.longrunning.Operations",
                                     "CancelOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCancelOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<ConfigDeliveryStub> MakeConfigDeliveryTracingStub(
    std::shared_ptr<ConfigDeliveryStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<ConfigDeliveryTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace configdelivery_v1_internal
}  // namespace cloud
}  // namespace google
