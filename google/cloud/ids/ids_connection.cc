// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/ids/v1/ids.proto

#include "google/cloud/ids/ids_connection.h"
#include "google/cloud/ids/ids_options.h"
#include "google/cloud/ids/internal/ids_option_defaults.h"
#include "google/cloud/ids/internal/ids_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace ids {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

IDSConnection::~IDSConnection() = default;

StreamRange<google::cloud::ids::v1::Endpoint> IDSConnection::ListEndpoints(
    google::cloud::ids::v1::ListEndpointsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::ids::v1::Endpoint>>(
      std::move(request),
      [](google::cloud::ids::v1::ListEndpointsRequest const&) {
        return StatusOr<google::cloud::ids::v1::ListEndpointsResponse>{};
      },
      [](google::cloud::ids::v1::ListEndpointsResponse const&) {
        return std::vector<google::cloud::ids::v1::Endpoint>();
      });
}

StatusOr<google::cloud::ids::v1::Endpoint> IDSConnection::GetEndpoint(
    google::cloud::ids::v1::GetEndpointRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::ids::v1::Endpoint>>
IDSConnection::CreateEndpoint(
    google::cloud::ids::v1::CreateEndpointRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::ids::v1::Endpoint>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::ids::v1::OperationMetadata>>
IDSConnection::DeleteEndpoint(
    google::cloud::ids::v1::DeleteEndpointRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::ids::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

namespace {
class IDSConnectionImpl : public IDSConnection {
 public:
  IDSConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<ids_internal::IDSStub> stub, Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(options.get<IDSRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<IDSBackoffPolicyOption>()->clone()),
        polling_policy_prototype_(
            options.get<IDSPollingPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<IDSConnectionIdempotencyPolicyOption>()->clone()) {}

  ~IDSConnectionImpl() override = default;

  StreamRange<google::cloud::ids::v1::Endpoint> ListEndpoints(
      google::cloud::ids::v1::ListEndpointsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry =
        std::shared_ptr<IDSRetryPolicy const>(retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListEndpoints(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::ids::v1::Endpoint>>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](google::cloud::ids::v1::ListEndpointsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  google::cloud::ids::v1::ListEndpointsRequest const& request) {
                return stub->ListEndpoints(context, request);
              },
              r, function_name);
        },
        [](google::cloud::ids::v1::ListEndpointsResponse r) {
          std::vector<google::cloud::ids::v1::Endpoint> result(
              r.endpoints().size());
          auto& messages = *r.mutable_endpoints();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::ids::v1::Endpoint> GetEndpoint(
      google::cloud::ids::v1::GetEndpointRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetEndpoint(request),
        [this](grpc::ClientContext& context,
               google::cloud::ids::v1::GetEndpointRequest const& request) {
          return stub_->GetEndpoint(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::ids::v1::Endpoint>> CreateEndpoint(
      google::cloud::ids::v1::CreateEndpointRequest const& request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::ids::v1::Endpoint>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::ids::v1::CreateEndpointRequest const& request) {
          return stub->AsyncCreateEndpoint(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::ids::v1::Endpoint>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateEndpoint(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::ids::v1::OperationMetadata>> DeleteEndpoint(
      google::cloud::ids::v1::DeleteEndpointRequest const& request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::ids::v1::OperationMetadata>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::ids::v1::DeleteEndpointRequest const& request) {
          return stub->AsyncDeleteEndpoint(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::cloud::ids::v1::OperationMetadata>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteEndpoint(request),
        polling_policy_prototype_->clone(), __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<ids_internal::IDSStub> stub_;
  std::unique_ptr<IDSRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<PollingPolicy const> polling_policy_prototype_;
  std::unique_ptr<IDSConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<IDSConnection> MakeIDSConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 IDSPolicyOptionList>(options, __func__);
  options = ids_internal::IDSDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = ids_internal::CreateDefaultIDSStub(background->cq(), options);
  return std::make_shared<IDSConnectionImpl>(std::move(background),
                                             std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace ids
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace ids_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<ids::IDSConnection> MakeIDSConnection(
    std::shared_ptr<IDSStub> stub, Options options) {
  options = IDSDefaultOptions(std::move(options));
  return std::make_shared<ids::IDSConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace ids_internal
}  // namespace cloud
}  // namespace google
