// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/devicestreaming/v1/service.proto

#include "google/cloud/devicestreaming/v1/direct_access_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace devicestreaming_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DirectAccessServiceClient::DirectAccessServiceClient(
    std::shared_ptr<DirectAccessServiceConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
DirectAccessServiceClient::~DirectAccessServiceClient() = default;

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceClient::CreateDeviceSession(
    std::string const& parent,
    google::cloud::devicestreaming::v1::DeviceSession const& device_session,
    std::string const& device_session_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::devicestreaming::v1::CreateDeviceSessionRequest request;
  request.set_parent(parent);
  *request.mutable_device_session() = device_session;
  request.set_device_session_id(device_session_id);
  return connection_->CreateDeviceSession(request);
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceClient::CreateDeviceSession(
    google::cloud::devicestreaming::v1::CreateDeviceSessionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateDeviceSession(request);
}

StreamRange<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceClient::ListDeviceSessions(std::string const& parent,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::devicestreaming::v1::ListDeviceSessionsRequest request;
  request.set_parent(parent);
  return connection_->ListDeviceSessions(request);
}

StreamRange<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceClient::ListDeviceSessions(
    google::cloud::devicestreaming::v1::ListDeviceSessionsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListDeviceSessions(std::move(request));
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceClient::GetDeviceSession(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::devicestreaming::v1::GetDeviceSessionRequest request;
  request.set_name(name);
  return connection_->GetDeviceSession(request);
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceClient::GetDeviceSession(
    google::cloud::devicestreaming::v1::GetDeviceSessionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetDeviceSession(request);
}

Status DirectAccessServiceClient::CancelDeviceSession(
    google::cloud::devicestreaming::v1::CancelDeviceSessionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelDeviceSession(request);
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceClient::UpdateDeviceSession(
    google::cloud::devicestreaming::v1::DeviceSession const& device_session,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::devicestreaming::v1::UpdateDeviceSessionRequest request;
  *request.mutable_device_session() = device_session;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateDeviceSession(request);
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceClient::UpdateDeviceSession(
    google::cloud::devicestreaming::v1::UpdateDeviceSessionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateDeviceSession(request);
}

std::unique_ptr<::google::cloud::AsyncStreamingReadWriteRpc<
    google::cloud::devicestreaming::v1::AdbMessage,
    google::cloud::devicestreaming::v1::DeviceMessage>>
DirectAccessServiceClient::AsyncAdbConnect(Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->AsyncAdbConnect();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace devicestreaming_v1
}  // namespace cloud
}  // namespace google
