// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/devicestreaming/v1/service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DEVICESTREAMING_V1_DIRECT_ACCESS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DEVICESTREAMING_V1_DIRECT_ACCESS_CLIENT_H

#include "google/cloud/devicestreaming/v1/direct_access_connection.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>
#include <string>

namespace google {
namespace cloud {
namespace devicestreaming_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// A service for allocating Android devices and interacting with the
/// live-allocated devices.
///
/// Each Session will wait for available capacity, at a higher
/// priority over Test Execution. When allocated, the session will be exposed
/// through a stream for integration.
///
/// DirectAccessService is currently available as a preview to select
/// developers. You can register today on behalf of you and your team at
/// https://developer.android.com/studio/preview/android-device-streaming
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class DirectAccessServiceClient {
 public:
  explicit DirectAccessServiceClient(
      std::shared_ptr<DirectAccessServiceConnection> connection,
      Options opts = {});
  ~DirectAccessServiceClient();

  ///@{
  /// @name Copy and move support
  DirectAccessServiceClient(DirectAccessServiceClient const&) = default;
  DirectAccessServiceClient& operator=(DirectAccessServiceClient const&) =
      default;
  DirectAccessServiceClient(DirectAccessServiceClient&&) = default;
  DirectAccessServiceClient& operator=(DirectAccessServiceClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(DirectAccessServiceClient const& a,
                         DirectAccessServiceClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(DirectAccessServiceClient const& a,
                         DirectAccessServiceClient const& b) {
    return !(a == b);
  }
  ///@}

  // clang-format off
  ///
  /// Creates a DeviceSession.
  ///
  /// @param parent  Required. The Compute Engine project under which this device will be
  ///  allocated. "projects/{project_id}"
  /// @param device_session  Required. A DeviceSession to create.
  /// @param device_session_id  Optional. The ID to use for the DeviceSession, which will become the final
  ///  component of the DeviceSession's resource name.
  ///  @n
  ///  This value should be 4-63 characters, and valid characters
  ///  are /[a-z][0-9]-/.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.devicestreaming.v1.DeviceSession])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.CreateDeviceSessionRequest]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L112}
  /// [google.cloud.devicestreaming.v1.DeviceSession]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L201}
  ///
  // clang-format on
  StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
  CreateDeviceSession(
      std::string const& parent,
      google::cloud::devicestreaming::v1::DeviceSession const& device_session,
      std::string const& device_session_id, Options opts = {});

  // clang-format off
  ///
  /// Creates a DeviceSession.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.devicestreaming.v1.CreateDeviceSessionRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.devicestreaming.v1.DeviceSession])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.CreateDeviceSessionRequest]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L112}
  /// [google.cloud.devicestreaming.v1.DeviceSession]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L201}
  ///
  // clang-format on
  StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
  CreateDeviceSession(
      google::cloud::devicestreaming::v1::CreateDeviceSessionRequest const&
          request,
      Options opts = {});

  // clang-format off
  ///
  /// Lists DeviceSessions owned by the project user.
  ///
  /// @param parent  Required. The name of the parent to request, e.g. "projects/{project_id}"
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.cloud.devicestreaming.v1.DeviceSession], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.DeviceSession]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L201}
  /// [google.cloud.devicestreaming.v1.ListDeviceSessionsRequest]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L134}
  ///
  // clang-format on
  StreamRange<google::cloud::devicestreaming::v1::DeviceSession>
  ListDeviceSessions(std::string const& parent, Options opts = {});

  // clang-format off
  ///
  /// Lists DeviceSessions owned by the project user.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.devicestreaming.v1.ListDeviceSessionsRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.cloud.devicestreaming.v1.DeviceSession], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.DeviceSession]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L201}
  /// [google.cloud.devicestreaming.v1.ListDeviceSessionsRequest]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L134}
  ///
  // clang-format on
  StreamRange<google::cloud::devicestreaming::v1::DeviceSession>
  ListDeviceSessions(
      google::cloud::devicestreaming::v1::ListDeviceSessionsRequest request,
      Options opts = {});

  // clang-format off
  ///
  /// Gets a DeviceSession, which documents the allocation status and
  /// whether the device is allocated. Clients making requests from this API
  /// must poll GetDeviceSession.
  ///
  /// @param name  Required. Name of the DeviceSession, e.g.
  ///  "projects/{project_id}/deviceSessions/{session_id}"
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.devicestreaming.v1.DeviceSession])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.DeviceSession]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L201}
  /// [google.cloud.devicestreaming.v1.GetDeviceSessionRequest]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L165}
  ///
  // clang-format on
  StatusOr<google::cloud::devicestreaming::v1::DeviceSession> GetDeviceSession(
      std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Gets a DeviceSession, which documents the allocation status and
  /// whether the device is allocated. Clients making requests from this API
  /// must poll GetDeviceSession.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.devicestreaming.v1.GetDeviceSessionRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.devicestreaming.v1.DeviceSession])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.DeviceSession]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L201}
  /// [google.cloud.devicestreaming.v1.GetDeviceSessionRequest]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L165}
  ///
  // clang-format on
  StatusOr<google::cloud::devicestreaming::v1::DeviceSession> GetDeviceSession(
      google::cloud::devicestreaming::v1::GetDeviceSessionRequest const&
          request,
      Options opts = {});

  // clang-format off
  ///
  /// Cancel a DeviceSession.
  /// This RPC changes the DeviceSession to state FINISHED and terminates all
  /// connections.
  /// Canceled sessions are not deleted and can be retrieved or
  /// listed by the user until they expire based on the 28 day deletion policy.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.devicestreaming.v1.CancelDeviceSessionRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [`Status`] object. If the request failed, the
  ///     status contains the details of the failure.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.CancelDeviceSessionRequest]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L177}
  ///
  // clang-format on
  Status CancelDeviceSession(
      google::cloud::devicestreaming::v1::CancelDeviceSessionRequest const&
          request,
      Options opts = {});

  // clang-format off
  ///
  /// Updates the current DeviceSession to the fields described by the
  /// update_mask.
  ///
  /// @param device_session  Required. DeviceSession to update.
  ///  The DeviceSession's `name` field is used to identify the session to update
  ///  "projects/{project_id}/deviceSessions/{session_id}"
  /// @param update_mask  Optional. The list of fields to update.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.devicestreaming.v1.DeviceSession])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.DeviceSession]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L201}
  /// [google.cloud.devicestreaming.v1.UpdateDeviceSessionRequest]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L189}
  ///
  // clang-format on
  StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
  UpdateDeviceSession(
      google::cloud::devicestreaming::v1::DeviceSession const& device_session,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  // clang-format off
  ///
  /// Updates the current DeviceSession to the fields described by the
  /// update_mask.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.devicestreaming.v1.UpdateDeviceSessionRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.devicestreaming.v1.DeviceSession])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.DeviceSession]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L201}
  /// [google.cloud.devicestreaming.v1.UpdateDeviceSessionRequest]: @googleapis_reference_link{google/cloud/devicestreaming/v1/service.proto#L189}
  ///
  // clang-format on
  StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
  UpdateDeviceSession(
      google::cloud::devicestreaming::v1::UpdateDeviceSessionRequest const&
          request,
      Options opts = {});

  // clang-format off
  ///
  /// Exposes an ADB connection if the device supports ADB.
  /// gRPC headers are used to authenticate the Connect RPC, as well as
  /// associate to a particular DeviceSession.
  /// In particular, the user must specify the "X-Omnilab-Session-Name" header.
  ///
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return An object representing the bidirectional streaming
  ///     RPC. Applications can send multiple request messages and receive
  ///     multiple response messages through this API. Bidirectional streaming
  ///     RPCs can impose restrictions on the sequence of request and response
  ///     messages. Please consult the service documentation for details.
  ///     The request message type ([google.cloud.devicestreaming.v1.AdbMessage]) and response messages
  ///     ([google.cloud.devicestreaming.v1.DeviceMessage]) are mapped to C++ classes using the
  ///     [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.devicestreaming.v1.AdbMessage]: @googleapis_reference_link{google/cloud/devicestreaming/v1/adb_service.proto#L49}
  /// [google.cloud.devicestreaming.v1.DeviceMessage]: @googleapis_reference_link{google/cloud/devicestreaming/v1/adb_service.proto#L35}
  ///
  // clang-format on
  std::unique_ptr<::google::cloud::AsyncStreamingReadWriteRpc<
      google::cloud::devicestreaming::v1::AdbMessage,
      google::cloud::devicestreaming::v1::DeviceMessage>>
  AsyncAdbConnect(Options opts = {});

 private:
  std::shared_ptr<DirectAccessServiceConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace devicestreaming_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DEVICESTREAMING_V1_DIRECT_ACCESS_CLIENT_H
