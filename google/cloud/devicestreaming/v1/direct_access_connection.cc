// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/devicestreaming/v1/service.proto

#include "google/cloud/devicestreaming/v1/direct_access_connection.h"
#include "google/cloud/devicestreaming/v1/direct_access_options.h"
#include "google/cloud/devicestreaming/v1/internal/direct_access_connection_impl.h"
#include "google/cloud/devicestreaming/v1/internal/direct_access_option_defaults.h"
#include "google/cloud/devicestreaming/v1/internal/direct_access_stub_factory.h"
#include "google/cloud/devicestreaming/v1/internal/direct_access_tracing_connection.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace devicestreaming_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DirectAccessServiceConnection::~DirectAccessServiceConnection() = default;

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceConnection::CreateDeviceSession(
    google::cloud::devicestreaming::v1::CreateDeviceSessionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceConnection::ListDeviceSessions(
    google::cloud::devicestreaming::v1::
        ListDeviceSessionsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::devicestreaming::v1::DeviceSession>>();
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceConnection::GetDeviceSession(
    google::cloud::devicestreaming::v1::GetDeviceSessionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status DirectAccessServiceConnection::CancelDeviceSession(
    google::cloud::devicestreaming::v1::CancelDeviceSessionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceConnection::UpdateDeviceSession(
    google::cloud::devicestreaming::v1::UpdateDeviceSessionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::unique_ptr<::google::cloud::AsyncStreamingReadWriteRpc<
    google::cloud::devicestreaming::v1::AdbMessage,
    google::cloud::devicestreaming::v1::DeviceMessage>>
DirectAccessServiceConnection::AsyncAdbConnect() {
  return std::make_unique<
      ::google::cloud::internal::AsyncStreamingReadWriteRpcError<
          google::cloud::devicestreaming::v1::AdbMessage,
          google::cloud::devicestreaming::v1::DeviceMessage>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

std::shared_ptr<DirectAccessServiceConnection>
MakeDirectAccessServiceConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 DirectAccessServicePolicyOptionList>(options,
                                                                      __func__);
  options = devicestreaming_v1_internal::DirectAccessServiceDefaultOptions(
      std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = devicestreaming_v1_internal::CreateDefaultDirectAccessServiceStub(
      std::move(auth), options);
  return devicestreaming_v1_internal::MakeDirectAccessServiceTracingConnection(
      std::make_shared<
          devicestreaming_v1_internal::DirectAccessServiceConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace devicestreaming_v1
}  // namespace cloud
}  // namespace google
