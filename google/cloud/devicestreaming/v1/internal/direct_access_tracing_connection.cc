// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/devicestreaming/v1/service.proto

#include "google/cloud/devicestreaming/v1/internal/direct_access_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace devicestreaming_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DirectAccessServiceTracingConnection::DirectAccessServiceTracingConnection(
    std::shared_ptr<devicestreaming_v1::DirectAccessServiceConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceTracingConnection::CreateDeviceSession(
    google::cloud::devicestreaming::v1::CreateDeviceSessionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "devicestreaming_v1::DirectAccessServiceConnection::CreateDeviceSession");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateDeviceSession(request));
}

StreamRange<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceTracingConnection::ListDeviceSessions(
    google::cloud::devicestreaming::v1::ListDeviceSessionsRequest request) {
  auto span = internal::MakeSpan(
      "devicestreaming_v1::DirectAccessServiceConnection::ListDeviceSessions");
  internal::OTelScope scope(span);
  auto sr = child_->ListDeviceSessions(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::devicestreaming::v1::DeviceSession>(std::move(span),
                                                         std::move(sr));
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceTracingConnection::GetDeviceSession(
    google::cloud::devicestreaming::v1::GetDeviceSessionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "devicestreaming_v1::DirectAccessServiceConnection::GetDeviceSession");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetDeviceSession(request));
}

Status DirectAccessServiceTracingConnection::CancelDeviceSession(
    google::cloud::devicestreaming::v1::CancelDeviceSessionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "devicestreaming_v1::DirectAccessServiceConnection::CancelDeviceSession");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CancelDeviceSession(request));
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceTracingConnection::UpdateDeviceSession(
    google::cloud::devicestreaming::v1::UpdateDeviceSessionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "devicestreaming_v1::DirectAccessServiceConnection::UpdateDeviceSession");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateDeviceSession(request));
}

std::unique_ptr<::google::cloud::AsyncStreamingReadWriteRpc<
    google::cloud::devicestreaming::v1::AdbMessage,
    google::cloud::devicestreaming::v1::DeviceMessage>>
DirectAccessServiceTracingConnection::AsyncAdbConnect() {
  return child_->AsyncAdbConnect();
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<devicestreaming_v1::DirectAccessServiceConnection>
MakeDirectAccessServiceTracingConnection(
    std::shared_ptr<devicestreaming_v1::DirectAccessServiceConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn =
        std::make_shared<DirectAccessServiceTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace devicestreaming_v1_internal
}  // namespace cloud
}  // namespace google
