// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/devicestreaming/v1/service.proto

#include "google/cloud/devicestreaming/v1/internal/direct_access_tracing_stub.h"
#include "google/cloud/internal/async_read_write_stream_tracing.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace devicestreaming_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DirectAccessServiceTracingStub::DirectAccessServiceTracingStub(
    std::shared_ptr<DirectAccessServiceStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceTracingStub::CreateDeviceSession(
    grpc::ClientContext& context, Options const& options,
    google::cloud::devicestreaming::v1::CreateDeviceSessionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.devicestreaming.v1.DirectAccessService",
      "CreateDeviceSession");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateDeviceSession(context, options, request));
}

StatusOr<google::cloud::devicestreaming::v1::ListDeviceSessionsResponse>
DirectAccessServiceTracingStub::ListDeviceSessions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::devicestreaming::v1::ListDeviceSessionsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.devicestreaming.v1.DirectAccessService",
      "ListDeviceSessions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListDeviceSessions(context, options, request));
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceTracingStub::GetDeviceSession(
    grpc::ClientContext& context, Options const& options,
    google::cloud::devicestreaming::v1::GetDeviceSessionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.devicestreaming.v1.DirectAccessService",
      "GetDeviceSession");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetDeviceSession(context, options, request));
}

Status DirectAccessServiceTracingStub::CancelDeviceSession(
    grpc::ClientContext& context, Options const& options,
    google::cloud::devicestreaming::v1::CancelDeviceSessionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.devicestreaming.v1.DirectAccessService",
      "CancelDeviceSession");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CancelDeviceSession(context, options, request));
}

StatusOr<google::cloud::devicestreaming::v1::DeviceSession>
DirectAccessServiceTracingStub::UpdateDeviceSession(
    grpc::ClientContext& context, Options const& options,
    google::cloud::devicestreaming::v1::UpdateDeviceSessionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.devicestreaming.v1.DirectAccessService",
      "UpdateDeviceSession");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateDeviceSession(context, options, request));
}

std::unique_ptr<AsyncStreamingReadWriteRpc<
    google::cloud::devicestreaming::v1::AdbMessage,
    google::cloud::devicestreaming::v1::DeviceMessage>>
DirectAccessServiceTracingStub::AsyncAdbConnect(
    CompletionQueue const& cq, std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.devicestreaming.v1.DirectAccessService", "AdbConnect");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto stream = child_->AsyncAdbConnect(cq, context, std::move(options));
  return std::make_unique<internal::AsyncStreamingReadWriteRpcTracing<
      google::cloud::devicestreaming::v1::AdbMessage,
      google::cloud::devicestreaming::v1::DeviceMessage>>(
      std::move(context), std::move(stream), std::move(span));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<DirectAccessServiceStub> MakeDirectAccessServiceTracingStub(
    std::shared_ptr<DirectAccessServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<DirectAccessServiceTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace devicestreaming_v1_internal
}  // namespace cloud
}  // namespace google
