// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/automl/v1/service.proto

#include "google/cloud/automl/v1/internal/auto_ml_metadata_decorator.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/internal/url_encode.h"
#include "google/cloud/status_or.h"
#include <google/cloud/automl/v1/service.grpc.pb.h>
#include <memory>
#include <string>
#include <utility>
#include <vector>

namespace google {
namespace cloud {
namespace automl_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

AutoMlMetadata::AutoMlMetadata(
    std::shared_ptr<AutoMlStub> child,
    std::multimap<std::string, std::string> fixed_metadata,
    std::string api_client_header)
    : child_(std::move(child)),
      fixed_metadata_(std::move(fixed_metadata)),
      api_client_header_(
          api_client_header.empty()
              ? google::cloud::internal::GeneratedLibClientHeader()
              : std::move(api_client_header)) {}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncCreateDataset(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::automl::v1::CreateDatasetRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->AsyncCreateDataset(cq, std::move(context), std::move(options),
                                    request);
}

StatusOr<google::longrunning::Operation> AutoMlMetadata::CreateDataset(
    grpc::ClientContext& context, Options options,
    google::cloud::automl::v1::CreateDatasetRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateDataset(context, options, request);
}

StatusOr<google::cloud::automl::v1::Dataset> AutoMlMetadata::GetDataset(
    grpc::ClientContext& context, Options const& options,
    google::cloud::automl::v1::GetDatasetRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetDataset(context, options, request);
}

StatusOr<google::cloud::automl::v1::ListDatasetsResponse>
AutoMlMetadata::ListDatasets(
    grpc::ClientContext& context, Options const& options,
    google::cloud::automl::v1::ListDatasetsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListDatasets(context, options, request);
}

StatusOr<google::cloud::automl::v1::Dataset> AutoMlMetadata::UpdateDataset(
    grpc::ClientContext& context, Options const& options,
    google::cloud::automl::v1::UpdateDatasetRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("dataset.name=",
                           internal::UrlEncode(request.dataset().name())));
  return child_->UpdateDataset(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncDeleteDataset(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::automl::v1::DeleteDatasetRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncDeleteDataset(cq, std::move(context), std::move(options),
                                    request);
}

StatusOr<google::longrunning::Operation> AutoMlMetadata::DeleteDataset(
    grpc::ClientContext& context, Options options,
    google::cloud::automl::v1::DeleteDatasetRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteDataset(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncImportData(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::automl::v1::ImportDataRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncImportData(cq, std::move(context), std::move(options),
                                 request);
}

StatusOr<google::longrunning::Operation> AutoMlMetadata::ImportData(
    grpc::ClientContext& context, Options options,
    google::cloud::automl::v1::ImportDataRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ImportData(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncExportData(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::automl::v1::ExportDataRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncExportData(cq, std::move(context), std::move(options),
                                 request);
}

StatusOr<google::longrunning::Operation> AutoMlMetadata::ExportData(
    grpc::ClientContext& context, Options options,
    google::cloud::automl::v1::ExportDataRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ExportData(context, options, request);
}

StatusOr<google::cloud::automl::v1::AnnotationSpec>
AutoMlMetadata::GetAnnotationSpec(
    grpc::ClientContext& context, Options const& options,
    google::cloud::automl::v1::GetAnnotationSpecRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetAnnotationSpec(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncCreateModel(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::automl::v1::CreateModelRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->AsyncCreateModel(cq, std::move(context), std::move(options),
                                  request);
}

StatusOr<google::longrunning::Operation> AutoMlMetadata::CreateModel(
    grpc::ClientContext& context, Options options,
    google::cloud::automl::v1::CreateModelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateModel(context, options, request);
}

StatusOr<google::cloud::automl::v1::Model> AutoMlMetadata::GetModel(
    grpc::ClientContext& context, Options const& options,
    google::cloud::automl::v1::GetModelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetModel(context, options, request);
}

StatusOr<google::cloud::automl::v1::ListModelsResponse>
AutoMlMetadata::ListModels(
    grpc::ClientContext& context, Options const& options,
    google::cloud::automl::v1::ListModelsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListModels(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncDeleteModel(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::automl::v1::DeleteModelRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncDeleteModel(cq, std::move(context), std::move(options),
                                  request);
}

StatusOr<google::longrunning::Operation> AutoMlMetadata::DeleteModel(
    grpc::ClientContext& context, Options options,
    google::cloud::automl::v1::DeleteModelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteModel(context, options, request);
}

StatusOr<google::cloud::automl::v1::Model> AutoMlMetadata::UpdateModel(
    grpc::ClientContext& context, Options const& options,
    google::cloud::automl::v1::UpdateModelRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("model.name=", internal::UrlEncode(request.model().name())));
  return child_->UpdateModel(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncDeployModel(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::automl::v1::DeployModelRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncDeployModel(cq, std::move(context), std::move(options),
                                  request);
}

StatusOr<google::longrunning::Operation> AutoMlMetadata::DeployModel(
    grpc::ClientContext& context, Options options,
    google::cloud::automl::v1::DeployModelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeployModel(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncUndeployModel(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::automl::v1::UndeployModelRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncUndeployModel(cq, std::move(context), std::move(options),
                                    request);
}

StatusOr<google::longrunning::Operation> AutoMlMetadata::UndeployModel(
    grpc::ClientContext& context, Options options,
    google::cloud::automl::v1::UndeployModelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->UndeployModel(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncExportModel(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::automl::v1::ExportModelRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncExportModel(cq, std::move(context), std::move(options),
                                  request);
}

StatusOr<google::longrunning::Operation> AutoMlMetadata::ExportModel(
    grpc::ClientContext& context, Options options,
    google::cloud::automl::v1::ExportModelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ExportModel(context, options, request);
}

StatusOr<google::cloud::automl::v1::ModelEvaluation>
AutoMlMetadata::GetModelEvaluation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::automl::v1::GetModelEvaluationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetModelEvaluation(context, options, request);
}

StatusOr<google::cloud::automl::v1::ListModelEvaluationsResponse>
AutoMlMetadata::ListModelEvaluations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::automl::v1::ListModelEvaluationsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListModelEvaluations(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AutoMlMetadata::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncGetOperation(cq, std::move(context), std::move(options),
                                   request);
}

future<Status> AutoMlMetadata::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncCancelOperation(cq, std::move(context),
                                      std::move(options), request);
}

void AutoMlMetadata::SetMetadata(grpc::ClientContext& context,
                                 Options const& options,
                                 std::string const& request_params) {
  context.AddMetadata("x-goog-request-params", request_params);
  SetMetadata(context, options);
}

void AutoMlMetadata::SetMetadata(grpc::ClientContext& context,
                                 Options const& options) {
  google::cloud::internal::SetMetadata(context, options, fixed_metadata_,
                                       api_client_header_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace automl_v1_internal
}  // namespace cloud
}  // namespace google
