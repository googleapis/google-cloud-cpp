// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/vision/v1/image_annotator.proto

#include "google/cloud/vision/image_annotator_connection.h"
#include "google/cloud/vision/image_annotator_options.h"
#include "google/cloud/vision/internal/image_annotator_option_defaults.h"
#include "google/cloud/vision/internal/image_annotator_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace vision {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ImageAnnotatorConnection::~ImageAnnotatorConnection() = default;

StatusOr<google::cloud::vision::v1::BatchAnnotateImagesResponse>
ImageAnnotatorConnection::BatchAnnotateImages(
    google::cloud::vision::v1::BatchAnnotateImagesRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::vision::v1::BatchAnnotateFilesResponse>
ImageAnnotatorConnection::BatchAnnotateFiles(
    google::cloud::vision::v1::BatchAnnotateFilesRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::vision::v1::AsyncBatchAnnotateImagesResponse>>
ImageAnnotatorConnection::AsyncBatchAnnotateImages(
    google::cloud::vision::v1::AsyncBatchAnnotateImagesRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vision::v1::AsyncBatchAnnotateImagesResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vision::v1::AsyncBatchAnnotateFilesResponse>>
ImageAnnotatorConnection::AsyncBatchAnnotateFiles(
    google::cloud::vision::v1::AsyncBatchAnnotateFilesRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vision::v1::AsyncBatchAnnotateFilesResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

namespace {
class ImageAnnotatorConnectionImpl : public ImageAnnotatorConnection {
 public:
  ImageAnnotatorConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<vision_internal::ImageAnnotatorStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<ImageAnnotatorRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<ImageAnnotatorBackoffPolicyOption>()->clone()),
        polling_policy_prototype_(
            options.get<ImageAnnotatorPollingPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<ImageAnnotatorConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~ImageAnnotatorConnectionImpl() override = default;

  StatusOr<google::cloud::vision::v1::BatchAnnotateImagesResponse>
  BatchAnnotateImages(
      google::cloud::vision::v1::BatchAnnotateImagesRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->BatchAnnotateImages(request),
        [this](grpc::ClientContext& context,
               google::cloud::vision::v1::BatchAnnotateImagesRequest const&
                   request) {
          return stub_->BatchAnnotateImages(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::vision::v1::BatchAnnotateFilesResponse>
  BatchAnnotateFiles(google::cloud::vision::v1::BatchAnnotateFilesRequest const&
                         request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->BatchAnnotateFiles(request),
        [this](grpc::ClientContext& context,
               google::cloud::vision::v1::BatchAnnotateFilesRequest const&
                   request) {
          return stub_->BatchAnnotateFiles(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::vision::v1::AsyncBatchAnnotateImagesResponse>>
  AsyncBatchAnnotateImages(
      google::cloud::vision::v1::AsyncBatchAnnotateImagesRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vision::v1::AsyncBatchAnnotateImagesResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vision::v1::AsyncBatchAnnotateImagesRequest const&
                   request) {
          return stub->AsyncAsyncBatchAnnotateImages(cq, std::move(context),
                                                     request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vision::v1::AsyncBatchAnnotateImagesResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->AsyncBatchAnnotateImages(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vision::v1::AsyncBatchAnnotateFilesResponse>>
  AsyncBatchAnnotateFiles(
      google::cloud::vision::v1::AsyncBatchAnnotateFilesRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vision::v1::AsyncBatchAnnotateFilesResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vision::v1::AsyncBatchAnnotateFilesRequest const&
                   request) {
          return stub->AsyncAsyncBatchAnnotateFiles(cq, std::move(context),
                                                    request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vision::v1::AsyncBatchAnnotateFilesResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->AsyncBatchAnnotateFiles(request),
        polling_policy_prototype_->clone(), __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<vision_internal::ImageAnnotatorStub> stub_;
  std::unique_ptr<ImageAnnotatorRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<PollingPolicy const> polling_policy_prototype_;
  std::unique_ptr<ImageAnnotatorConnectionIdempotencyPolicy>
      idempotency_policy_;
};
}  // namespace

std::shared_ptr<ImageAnnotatorConnection> MakeImageAnnotatorConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 ImageAnnotatorPolicyOptionList>(options,
                                                                 __func__);
  options = vision_internal::ImageAnnotatorDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = vision_internal::CreateDefaultImageAnnotatorStub(background->cq(),
                                                               options);
  return std::make_shared<ImageAnnotatorConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace vision
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace vision_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<vision::ImageAnnotatorConnection> MakeImageAnnotatorConnection(
    std::shared_ptr<ImageAnnotatorStub> stub, Options options) {
  options = ImageAnnotatorDefaultOptions(std::move(options));
  return std::make_shared<vision::ImageAnnotatorConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace vision_internal
}  // namespace cloud
}  // namespace google
