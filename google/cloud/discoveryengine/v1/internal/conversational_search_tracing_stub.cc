// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/discoveryengine/v1/conversational_search_service.proto

#include "google/cloud/discoveryengine/v1/internal/conversational_search_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace discoveryengine_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ConversationalSearchServiceTracingStub::ConversationalSearchServiceTracingStub(
    std::shared_ptr<ConversationalSearchServiceStub> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::discoveryengine::v1::ConverseConversationResponse>
ConversationalSearchServiceTracingStub::ConverseConversation(
    grpc::ClientContext& context,
    google::cloud::discoveryengine::v1::ConverseConversationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.discoveryengine.v1.ConversationalSearchService",
      "ConverseConversation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ConverseConversation(context, request));
}

StatusOr<google::cloud::discoveryengine::v1::Conversation>
ConversationalSearchServiceTracingStub::CreateConversation(
    grpc::ClientContext& context,
    google::cloud::discoveryengine::v1::CreateConversationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.discoveryengine.v1.ConversationalSearchService",
      "CreateConversation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->CreateConversation(context, request));
}

Status ConversationalSearchServiceTracingStub::DeleteConversation(
    grpc::ClientContext& context,
    google::cloud::discoveryengine::v1::DeleteConversationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.discoveryengine.v1.ConversationalSearchService",
      "DeleteConversation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->DeleteConversation(context, request));
}

StatusOr<google::cloud::discoveryengine::v1::Conversation>
ConversationalSearchServiceTracingStub::UpdateConversation(
    grpc::ClientContext& context,
    google::cloud::discoveryengine::v1::UpdateConversationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.discoveryengine.v1.ConversationalSearchService",
      "UpdateConversation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->UpdateConversation(context, request));
}

StatusOr<google::cloud::discoveryengine::v1::Conversation>
ConversationalSearchServiceTracingStub::GetConversation(
    grpc::ClientContext& context,
    google::cloud::discoveryengine::v1::GetConversationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.discoveryengine.v1.ConversationalSearchService",
      "GetConversation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetConversation(context, request));
}

StatusOr<google::cloud::discoveryengine::v1::ListConversationsResponse>
ConversationalSearchServiceTracingStub::ListConversations(
    grpc::ClientContext& context,
    google::cloud::discoveryengine::v1::ListConversationsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.discoveryengine.v1.ConversationalSearchService",
      "ListConversations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListConversations(context, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<ConversationalSearchServiceStub>
MakeConversationalSearchServiceTracingStub(
    std::shared_ptr<ConversationalSearchServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<ConversationalSearchServiceTracingStub>(
      std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace discoveryengine_v1_internal
}  // namespace cloud
}  // namespace google
