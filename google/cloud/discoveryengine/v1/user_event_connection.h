// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/discoveryengine/v1/user_event_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DISCOVERYENGINE_V1_USER_EVENT_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DISCOVERYENGINE_V1_USER_EVENT_CONNECTION_H

#include "google/cloud/discoveryengine/v1/internal/user_event_retry_traits.h"
#include "google/cloud/discoveryengine/v1/user_event_connection_idempotency_policy.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <google/cloud/discoveryengine/v1/user_event_service.pb.h>
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace discoveryengine_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using UserEventServiceRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        discoveryengine_v1_internal::UserEventServiceRetryTraits>;

using UserEventServiceLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        discoveryengine_v1_internal::UserEventServiceRetryTraits>;

using UserEventServiceLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        discoveryengine_v1_internal::UserEventServiceRetryTraits>;

/**
 * The `UserEventServiceConnection` object for `UserEventServiceClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `UserEventServiceClient`. This allows users to inject custom behavior
 * (e.g., with a Google Mock object) when writing tests that use objects of type
 * `UserEventServiceClient`.
 *
 * To create a concrete instance, see `MakeUserEventServiceConnection()`.
 *
 * For mocking, see `discoveryengine_v1_mocks::MockUserEventServiceConnection`.
 */
class UserEventServiceConnection {
 public:
  virtual ~UserEventServiceConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StatusOr<google::cloud::discoveryengine::v1::UserEvent>
  WriteUserEvent(
      google::cloud::discoveryengine::v1::WriteUserEventRequest const& request);

  virtual StatusOr<google::api::HttpBody> CollectUserEvent(
      google::cloud::discoveryengine::v1::CollectUserEventRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::discoveryengine::v1::ImportUserEventsResponse>>
  ImportUserEvents(
      google::cloud::discoveryengine::v1::ImportUserEventsRequest const&
          request);
};

/**
 * A factory function to construct an object of type
 * `UserEventServiceConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of UserEventServiceClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `UserEventServiceConnection`. Expected options are any of the types
 * in the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * - `google::cloud::discoveryengine_v1::UserEventServicePolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `UserEventServiceConnection` created
 * by this function.
 */
std::shared_ptr<UserEventServiceConnection> MakeUserEventServiceConnection(
    Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace discoveryengine_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DISCOVERYENGINE_V1_USER_EVENT_CONNECTION_H
