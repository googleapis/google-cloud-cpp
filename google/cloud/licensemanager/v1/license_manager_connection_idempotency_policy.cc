// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/licensemanager/v1/licensemanager.proto

#include "google/cloud/licensemanager/v1/license_manager_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace licensemanager_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

LicenseManagerConnectionIdempotencyPolicy::
    ~LicenseManagerConnectionIdempotencyPolicy() = default;

std::unique_ptr<LicenseManagerConnectionIdempotencyPolicy>
LicenseManagerConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<LicenseManagerConnectionIdempotencyPolicy>(*this);
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::ListConfigurations(
    google::cloud::licensemanager::v1::ListConfigurationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::GetConfiguration(
    google::cloud::licensemanager::v1::GetConfigurationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::CreateConfiguration(
    google::cloud::licensemanager::v1::CreateConfigurationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::UpdateConfiguration(
    google::cloud::licensemanager::v1::UpdateConfigurationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::DeleteConfiguration(
    google::cloud::licensemanager::v1::DeleteConfigurationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::ListInstances(
    google::cloud::licensemanager::v1::ListInstancesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::GetInstance(
    google::cloud::licensemanager::v1::GetInstanceRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::DeactivateConfiguration(
    google::cloud::licensemanager::v1::DeactivateConfigurationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::ReactivateConfiguration(
    google::cloud::licensemanager::v1::ReactivateConfigurationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
LicenseManagerConnectionIdempotencyPolicy::QueryConfigurationLicenseUsage(
    google::cloud::licensemanager::v1::
        QueryConfigurationLicenseUsageRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::AggregateUsage(
    google::cloud::licensemanager::v1::AggregateUsageRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::ListProducts(
    google::cloud::licensemanager::v1::ListProductsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::GetProduct(
    google::cloud::licensemanager::v1::GetProductRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::ListLocations(
    google::cloud::location::ListLocationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::ListOperations(
    google::longrunning::ListOperationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency LicenseManagerConnectionIdempotencyPolicy::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<LicenseManagerConnectionIdempotencyPolicy>
MakeDefaultLicenseManagerConnectionIdempotencyPolicy() {
  return std::make_unique<LicenseManagerConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace licensemanager_v1
}  // namespace cloud
}  // namespace google
