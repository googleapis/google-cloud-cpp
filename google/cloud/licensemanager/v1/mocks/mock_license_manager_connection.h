// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/licensemanager/v1/licensemanager.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_LICENSEMANAGER_V1_MOCKS_MOCK_LICENSE_MANAGER_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_LICENSEMANAGER_V1_MOCKS_MOCK_LICENSE_MANAGER_CONNECTION_H

#include "google/cloud/licensemanager/v1/license_manager_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace licensemanager_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `LicenseManagerConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `LicenseManagerClient`. To do so,
 * construct an object of type `LicenseManagerClient` with an instance of this
 * class. Then use the Google Test framework functions to program the behavior
 * of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockLicenseManagerConnection
    : public licensemanager_v1::LicenseManagerConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::licensemanager::v1::Configuration>),
      ListConfigurations,
      (google::cloud::licensemanager::v1::ListConfigurationsRequest request),
      (override));

  MOCK_METHOD(StatusOr<google::cloud::licensemanager::v1::Configuration>,
              GetConfiguration,
              (google::cloud::licensemanager::v1::GetConfigurationRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateConfiguration(Matcher<google::cloud::licensemanager::v1::CreateConfigurationRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::Configuration>>,
      CreateConfiguration,
      (google::cloud::licensemanager::v1::CreateConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateConfiguration(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateConfiguration,
      (NoAwaitTag,
       google::cloud::licensemanager::v1::CreateConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateConfiguration(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::Configuration>>,
      CreateConfiguration, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateConfiguration(Matcher<google::cloud::licensemanager::v1::UpdateConfigurationRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::Configuration>>,
      UpdateConfiguration,
      (google::cloud::licensemanager::v1::UpdateConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateConfiguration(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, UpdateConfiguration,
      (NoAwaitTag,
       google::cloud::licensemanager::v1::UpdateConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateConfiguration(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::Configuration>>,
      UpdateConfiguration, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteConfiguration(Matcher<google::cloud::licensemanager::v1::DeleteConfigurationRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::OperationMetadata>>,
      DeleteConfiguration,
      (google::cloud::licensemanager::v1::DeleteConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteConfiguration(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteConfiguration,
      (NoAwaitTag,
       google::cloud::licensemanager::v1::DeleteConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteConfiguration(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::OperationMetadata>>,
      DeleteConfiguration, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD((StreamRange<google::cloud::licensemanager::v1::Instance>),
              ListInstances,
              (google::cloud::licensemanager::v1::ListInstancesRequest request),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::licensemanager::v1::Instance>, GetInstance,
      (google::cloud::licensemanager::v1::GetInstanceRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeactivateConfiguration(Matcher<google::cloud::licensemanager::v1::DeactivateConfigurationRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::Configuration>>,
      DeactivateConfiguration,
      (google::cloud::licensemanager::v1::DeactivateConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeactivateConfiguration(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeactivateConfiguration,
      (NoAwaitTag,
       google::cloud::licensemanager::v1::DeactivateConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeactivateConfiguration(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::Configuration>>,
      DeactivateConfiguration,
      (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// ReactivateConfiguration(Matcher<google::cloud::licensemanager::v1::ReactivateConfigurationRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::Configuration>>,
      ReactivateConfiguration,
      (google::cloud::licensemanager::v1::ReactivateConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, ReactivateConfiguration(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, ReactivateConfiguration,
      (NoAwaitTag,
       google::cloud::licensemanager::v1::ReactivateConfigurationRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// ReactivateConfiguration(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::licensemanager::v1::Configuration>>,
      ReactivateConfiguration,
      (google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(StatusOr<google::cloud::licensemanager::v1::
                           QueryConfigurationLicenseUsageResponse>,
              QueryConfigurationLicenseUsage,
              (google::cloud::licensemanager::v1::
                   QueryConfigurationLicenseUsageRequest const& request),
              (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::licensemanager::v1::Usage>), AggregateUsage,
      (google::cloud::licensemanager::v1::AggregateUsageRequest request),
      (override));

  MOCK_METHOD((StreamRange<google::cloud::licensemanager::v1::Product>),
              ListProducts,
              (google::cloud::licensemanager::v1::ListProductsRequest request),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::licensemanager::v1::Product>, GetProduct,
      (google::cloud::licensemanager::v1::GetProductRequest const& request),
      (override));

  MOCK_METHOD((StreamRange<google::cloud::location::Location>), ListLocations,
              (google::cloud::location::ListLocationsRequest request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::location::Location>, GetLocation,
              (google::cloud::location::GetLocationRequest const& request),
              (override));

  MOCK_METHOD((StreamRange<google::longrunning::Operation>), ListOperations,
              (google::longrunning::ListOperationsRequest request), (override));

  MOCK_METHOD(StatusOr<google::longrunning::Operation>, GetOperation,
              (google::longrunning::GetOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, DeleteOperation,
              (google::longrunning::DeleteOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, CancelOperation,
              (google::longrunning::CancelOperationRequest const& request),
              (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace licensemanager_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_LICENSEMANAGER_V1_MOCKS_MOCK_LICENSE_MANAGER_CONNECTION_H
