// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/licensemanager/v1/licensemanager.proto

#include "google/cloud/licensemanager/v1/license_manager_connection.h"
#include "google/cloud/licensemanager/v1/internal/license_manager_connection_impl.h"
#include "google/cloud/licensemanager/v1/internal/license_manager_option_defaults.h"
#include "google/cloud/licensemanager/v1/internal/license_manager_stub_factory.h"
#include "google/cloud/licensemanager/v1/internal/license_manager_tracing_connection.h"
#include "google/cloud/licensemanager/v1/license_manager_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace licensemanager_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

LicenseManagerConnection::~LicenseManagerConnection() = default;

StreamRange<google::cloud::licensemanager::v1::Configuration>
LicenseManagerConnection::ListConfigurations(
    google::cloud::licensemanager::v1::
        ListConfigurationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::licensemanager::v1::Configuration>>();
}

StatusOr<google::cloud::licensemanager::v1::Configuration>
LicenseManagerConnection::GetConfiguration(
    google::cloud::licensemanager::v1::GetConfigurationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::licensemanager::v1::Configuration>>
LicenseManagerConnection::CreateConfiguration(
    google::cloud::licensemanager::v1::CreateConfigurationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::Configuration>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation>
LicenseManagerConnection::CreateConfiguration(
    NoAwaitTag,
    google::cloud::licensemanager::v1::CreateConfigurationRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::licensemanager::v1::Configuration>>
LicenseManagerConnection::CreateConfiguration(
    google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::Configuration>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::licensemanager::v1::Configuration>>
LicenseManagerConnection::UpdateConfiguration(
    google::cloud::licensemanager::v1::UpdateConfigurationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::Configuration>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation>
LicenseManagerConnection::UpdateConfiguration(
    NoAwaitTag,
    google::cloud::licensemanager::v1::UpdateConfigurationRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::licensemanager::v1::Configuration>>
LicenseManagerConnection::UpdateConfiguration(
    google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::Configuration>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::licensemanager::v1::OperationMetadata>>
LicenseManagerConnection::DeleteConfiguration(
    google::cloud::licensemanager::v1::DeleteConfigurationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation>
LicenseManagerConnection::DeleteConfiguration(
    NoAwaitTag,
    google::cloud::licensemanager::v1::DeleteConfigurationRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::licensemanager::v1::OperationMetadata>>
LicenseManagerConnection::DeleteConfiguration(
    google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::licensemanager::v1::Instance>
LicenseManagerConnection::ListInstances(
    google::cloud::licensemanager::v1::
        ListInstancesRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::licensemanager::v1::Instance>>();
}

StatusOr<google::cloud::licensemanager::v1::Instance>
LicenseManagerConnection::GetInstance(
    google::cloud::licensemanager::v1::GetInstanceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::licensemanager::v1::Configuration>>
LicenseManagerConnection::DeactivateConfiguration(
    google::cloud::licensemanager::v1::DeactivateConfigurationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::Configuration>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation>
LicenseManagerConnection::DeactivateConfiguration(
    NoAwaitTag,
    google::cloud::licensemanager::v1::DeactivateConfigurationRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::licensemanager::v1::Configuration>>
LicenseManagerConnection::DeactivateConfiguration(
    google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::Configuration>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::licensemanager::v1::Configuration>>
LicenseManagerConnection::ReactivateConfiguration(
    google::cloud::licensemanager::v1::ReactivateConfigurationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::Configuration>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation>
LicenseManagerConnection::ReactivateConfiguration(
    NoAwaitTag,
    google::cloud::licensemanager::v1::ReactivateConfigurationRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::licensemanager::v1::Configuration>>
LicenseManagerConnection::ReactivateConfiguration(
    google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::licensemanager::v1::Configuration>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<
    google::cloud::licensemanager::v1::QueryConfigurationLicenseUsageResponse>
LicenseManagerConnection::QueryConfigurationLicenseUsage(
    google::cloud::licensemanager::v1::
        QueryConfigurationLicenseUsageRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::licensemanager::v1::Usage>
LicenseManagerConnection::AggregateUsage(
    google::cloud::licensemanager::v1::
        AggregateUsageRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::licensemanager::v1::Usage>>();
}

StreamRange<google::cloud::licensemanager::v1::Product>
LicenseManagerConnection::ListProducts(
    google::cloud::licensemanager::v1::
        ListProductsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::licensemanager::v1::Product>>();
}

StatusOr<google::cloud::licensemanager::v1::Product>
LicenseManagerConnection::GetProduct(
    google::cloud::licensemanager::v1::GetProductRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::location::Location>
LicenseManagerConnection::ListLocations(
    google::cloud::location::
        ListLocationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::location::Location>>();
}

StatusOr<google::cloud::location::Location>
LicenseManagerConnection::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::longrunning::Operation>
LicenseManagerConnection::ListOperations(
    google::longrunning::
        ListOperationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::longrunning::Operation>>();
}

StatusOr<google::longrunning::Operation> LicenseManagerConnection::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status LicenseManagerConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status LicenseManagerConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<LicenseManagerConnection> MakeLicenseManagerConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 LicenseManagerPolicyOptionList>(options,
                                                                 __func__);
  options = licensemanager_v1_internal::LicenseManagerDefaultOptions(
      std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = licensemanager_v1_internal::CreateDefaultLicenseManagerStub(
      std::move(auth), options);
  return licensemanager_v1_internal::MakeLicenseManagerTracingConnection(
      std::make_shared<
          licensemanager_v1_internal::LicenseManagerConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace licensemanager_v1
}  // namespace cloud
}  // namespace google
