// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/licensemanager/v1/licensemanager.proto

#include "google/cloud/licensemanager/v1/internal/license_manager_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace licensemanager_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

LicenseManagerTracingStub::LicenseManagerTracingStub(
    std::shared_ptr<LicenseManagerStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::licensemanager::v1::ListConfigurationsResponse>
LicenseManagerTracingStub::ListConfigurations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::licensemanager::v1::ListConfigurationsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "ListConfigurations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListConfigurations(context, options, request));
}

StatusOr<google::cloud::licensemanager::v1::Configuration>
LicenseManagerTracingStub::GetConfiguration(
    grpc::ClientContext& context, Options const& options,
    google::cloud::licensemanager::v1::GetConfigurationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "GetConfiguration");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetConfiguration(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
LicenseManagerTracingStub::AsyncCreateConfiguration(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::licensemanager::v1::CreateConfigurationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "CreateConfiguration");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateConfiguration(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
LicenseManagerTracingStub::CreateConfiguration(
    grpc::ClientContext& context, Options options,
    google::cloud::licensemanager::v1::CreateConfigurationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "CreateConfiguration");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateConfiguration(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
LicenseManagerTracingStub::AsyncUpdateConfiguration(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::licensemanager::v1::UpdateConfigurationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "UpdateConfiguration");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateConfiguration(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
LicenseManagerTracingStub::UpdateConfiguration(
    grpc::ClientContext& context, Options options,
    google::cloud::licensemanager::v1::UpdateConfigurationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "UpdateConfiguration");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateConfiguration(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
LicenseManagerTracingStub::AsyncDeleteConfiguration(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::licensemanager::v1::DeleteConfigurationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "DeleteConfiguration");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteConfiguration(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
LicenseManagerTracingStub::DeleteConfiguration(
    grpc::ClientContext& context, Options options,
    google::cloud::licensemanager::v1::DeleteConfigurationRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "DeleteConfiguration");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteConfiguration(context, options, request));
}

StatusOr<google::cloud::licensemanager::v1::ListInstancesResponse>
LicenseManagerTracingStub::ListInstances(
    grpc::ClientContext& context, Options const& options,
    google::cloud::licensemanager::v1::ListInstancesRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "ListInstances");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListInstances(context, options, request));
}

StatusOr<google::cloud::licensemanager::v1::Instance>
LicenseManagerTracingStub::GetInstance(
    grpc::ClientContext& context, Options const& options,
    google::cloud::licensemanager::v1::GetInstanceRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "GetInstance");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetInstance(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
LicenseManagerTracingStub::AsyncDeactivateConfiguration(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::licensemanager::v1::DeactivateConfigurationRequest const&
        request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.licensemanager.v1.LicenseManager",
                             "DeactivateConfiguration");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeactivateConfiguration(cq, context, std::move(options),
                                                request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
LicenseManagerTracingStub::DeactivateConfiguration(
    grpc::ClientContext& context, Options options,
    google::cloud::licensemanager::v1::DeactivateConfigurationRequest const&
        request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.licensemanager.v1.LicenseManager",
                             "DeactivateConfiguration");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->DeactivateConfiguration(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
LicenseManagerTracingStub::AsyncReactivateConfiguration(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::licensemanager::v1::ReactivateConfigurationRequest const&
        request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.licensemanager.v1.LicenseManager",
                             "ReactivateConfiguration");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncReactivateConfiguration(cq, context, std::move(options),
                                                request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
LicenseManagerTracingStub::ReactivateConfiguration(
    grpc::ClientContext& context, Options options,
    google::cloud::licensemanager::v1::ReactivateConfigurationRequest const&
        request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.licensemanager.v1.LicenseManager",
                             "ReactivateConfiguration");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ReactivateConfiguration(context, options, request));
}

StatusOr<
    google::cloud::licensemanager::v1::QueryConfigurationLicenseUsageResponse>
LicenseManagerTracingStub::QueryConfigurationLicenseUsage(
    grpc::ClientContext& context, Options const& options,
    google::cloud::licensemanager::v1::
        QueryConfigurationLicenseUsageRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.licensemanager.v1.LicenseManager",
                             "QueryConfigurationLicenseUsage");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->QueryConfigurationLicenseUsage(context, options, request));
}

StatusOr<google::cloud::licensemanager::v1::AggregateUsageResponse>
LicenseManagerTracingStub::AggregateUsage(
    grpc::ClientContext& context, Options const& options,
    google::cloud::licensemanager::v1::AggregateUsageRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "AggregateUsage");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->AggregateUsage(context, options, request));
}

StatusOr<google::cloud::licensemanager::v1::ListProductsResponse>
LicenseManagerTracingStub::ListProducts(
    grpc::ClientContext& context, Options const& options,
    google::cloud::licensemanager::v1::ListProductsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "ListProducts");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListProducts(context, options, request));
}

StatusOr<google::cloud::licensemanager::v1::Product>
LicenseManagerTracingStub::GetProduct(
    grpc::ClientContext& context, Options const& options,
    google::cloud::licensemanager::v1::GetProductRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "GetProduct");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetProduct(context, options, request));
}

StatusOr<google::cloud::location::ListLocationsResponse>
LicenseManagerTracingStub::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "ListLocations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListLocations(context, options, request));
}

StatusOr<google::cloud::location::Location>
LicenseManagerTracingStub::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetLocation(context, options, request));
}

StatusOr<google::longrunning::ListOperationsResponse>
LicenseManagerTracingStub::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "ListOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListOperations(context, options, request));
}

StatusOr<google::longrunning::Operation>
LicenseManagerTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

Status LicenseManagerTracingStub::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteOperation(context, options, request));
}

Status LicenseManagerTracingStub::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.licensemanager.v1.LicenseManager", "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CancelOperation(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
LicenseManagerTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.longrunning.Operations", "GetOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGetOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<Status> LicenseManagerTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.longrunning.Operations",
                                     "CancelOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCancelOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<LicenseManagerStub> MakeLicenseManagerTracingStub(
    std::shared_ptr<LicenseManagerStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<LicenseManagerTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace licensemanager_v1_internal
}  // namespace cloud
}  // namespace google
