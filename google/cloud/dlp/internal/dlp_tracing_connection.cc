// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/privacy/dlp/v2/dlp.proto

#include "google/cloud/dlp/internal/dlp_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>

namespace google {
namespace cloud {
namespace dlp_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DlpServiceTracingConnection::DlpServiceTracingConnection(
    std::shared_ptr<dlp::DlpServiceConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::privacy::dlp::v2::InspectContentResponse>
DlpServiceTracingConnection::InspectContent(
    google::privacy::dlp::v2::InspectContentRequest const& request) {
  return child_->InspectContent(request);
}

StatusOr<google::privacy::dlp::v2::RedactImageResponse>
DlpServiceTracingConnection::RedactImage(
    google::privacy::dlp::v2::RedactImageRequest const& request) {
  return child_->RedactImage(request);
}

StatusOr<google::privacy::dlp::v2::DeidentifyContentResponse>
DlpServiceTracingConnection::DeidentifyContent(
    google::privacy::dlp::v2::DeidentifyContentRequest const& request) {
  return child_->DeidentifyContent(request);
}

StatusOr<google::privacy::dlp::v2::ReidentifyContentResponse>
DlpServiceTracingConnection::ReidentifyContent(
    google::privacy::dlp::v2::ReidentifyContentRequest const& request) {
  return child_->ReidentifyContent(request);
}

StatusOr<google::privacy::dlp::v2::ListInfoTypesResponse>
DlpServiceTracingConnection::ListInfoTypes(
    google::privacy::dlp::v2::ListInfoTypesRequest const& request) {
  return child_->ListInfoTypes(request);
}

StatusOr<google::privacy::dlp::v2::InspectTemplate>
DlpServiceTracingConnection::CreateInspectTemplate(
    google::privacy::dlp::v2::CreateInspectTemplateRequest const& request) {
  return child_->CreateInspectTemplate(request);
}

StatusOr<google::privacy::dlp::v2::InspectTemplate>
DlpServiceTracingConnection::UpdateInspectTemplate(
    google::privacy::dlp::v2::UpdateInspectTemplateRequest const& request) {
  return child_->UpdateInspectTemplate(request);
}

StatusOr<google::privacy::dlp::v2::InspectTemplate>
DlpServiceTracingConnection::GetInspectTemplate(
    google::privacy::dlp::v2::GetInspectTemplateRequest const& request) {
  return child_->GetInspectTemplate(request);
}

StreamRange<google::privacy::dlp::v2::InspectTemplate>
DlpServiceTracingConnection::ListInspectTemplates(
    google::privacy::dlp::v2::ListInspectTemplatesRequest request) {
  return child_->ListInspectTemplates(request);
}

Status DlpServiceTracingConnection::DeleteInspectTemplate(
    google::privacy::dlp::v2::DeleteInspectTemplateRequest const& request) {
  return child_->DeleteInspectTemplate(request);
}

StatusOr<google::privacy::dlp::v2::DeidentifyTemplate>
DlpServiceTracingConnection::CreateDeidentifyTemplate(
    google::privacy::dlp::v2::CreateDeidentifyTemplateRequest const& request) {
  return child_->CreateDeidentifyTemplate(request);
}

StatusOr<google::privacy::dlp::v2::DeidentifyTemplate>
DlpServiceTracingConnection::UpdateDeidentifyTemplate(
    google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest const& request) {
  return child_->UpdateDeidentifyTemplate(request);
}

StatusOr<google::privacy::dlp::v2::DeidentifyTemplate>
DlpServiceTracingConnection::GetDeidentifyTemplate(
    google::privacy::dlp::v2::GetDeidentifyTemplateRequest const& request) {
  return child_->GetDeidentifyTemplate(request);
}

StreamRange<google::privacy::dlp::v2::DeidentifyTemplate>
DlpServiceTracingConnection::ListDeidentifyTemplates(
    google::privacy::dlp::v2::ListDeidentifyTemplatesRequest request) {
  return child_->ListDeidentifyTemplates(request);
}

Status DlpServiceTracingConnection::DeleteDeidentifyTemplate(
    google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest const& request) {
  return child_->DeleteDeidentifyTemplate(request);
}

StatusOr<google::privacy::dlp::v2::JobTrigger>
DlpServiceTracingConnection::CreateJobTrigger(
    google::privacy::dlp::v2::CreateJobTriggerRequest const& request) {
  return child_->CreateJobTrigger(request);
}

StatusOr<google::privacy::dlp::v2::JobTrigger>
DlpServiceTracingConnection::UpdateJobTrigger(
    google::privacy::dlp::v2::UpdateJobTriggerRequest const& request) {
  return child_->UpdateJobTrigger(request);
}

StatusOr<google::privacy::dlp::v2::HybridInspectResponse>
DlpServiceTracingConnection::HybridInspectJobTrigger(
    google::privacy::dlp::v2::HybridInspectJobTriggerRequest const& request) {
  return child_->HybridInspectJobTrigger(request);
}

StatusOr<google::privacy::dlp::v2::JobTrigger>
DlpServiceTracingConnection::GetJobTrigger(
    google::privacy::dlp::v2::GetJobTriggerRequest const& request) {
  return child_->GetJobTrigger(request);
}

StreamRange<google::privacy::dlp::v2::JobTrigger>
DlpServiceTracingConnection::ListJobTriggers(
    google::privacy::dlp::v2::ListJobTriggersRequest request) {
  return child_->ListJobTriggers(request);
}

Status DlpServiceTracingConnection::DeleteJobTrigger(
    google::privacy::dlp::v2::DeleteJobTriggerRequest const& request) {
  return child_->DeleteJobTrigger(request);
}

StatusOr<google::privacy::dlp::v2::DlpJob>
DlpServiceTracingConnection::ActivateJobTrigger(
    google::privacy::dlp::v2::ActivateJobTriggerRequest const& request) {
  return child_->ActivateJobTrigger(request);
}

StatusOr<google::privacy::dlp::v2::DlpJob>
DlpServiceTracingConnection::CreateDlpJob(
    google::privacy::dlp::v2::CreateDlpJobRequest const& request) {
  return child_->CreateDlpJob(request);
}

StreamRange<google::privacy::dlp::v2::DlpJob>
DlpServiceTracingConnection::ListDlpJobs(
    google::privacy::dlp::v2::ListDlpJobsRequest request) {
  return child_->ListDlpJobs(request);
}

StatusOr<google::privacy::dlp::v2::DlpJob>
DlpServiceTracingConnection::GetDlpJob(
    google::privacy::dlp::v2::GetDlpJobRequest const& request) {
  return child_->GetDlpJob(request);
}

Status DlpServiceTracingConnection::DeleteDlpJob(
    google::privacy::dlp::v2::DeleteDlpJobRequest const& request) {
  return child_->DeleteDlpJob(request);
}

Status DlpServiceTracingConnection::CancelDlpJob(
    google::privacy::dlp::v2::CancelDlpJobRequest const& request) {
  return child_->CancelDlpJob(request);
}

StatusOr<google::privacy::dlp::v2::StoredInfoType>
DlpServiceTracingConnection::CreateStoredInfoType(
    google::privacy::dlp::v2::CreateStoredInfoTypeRequest const& request) {
  return child_->CreateStoredInfoType(request);
}

StatusOr<google::privacy::dlp::v2::StoredInfoType>
DlpServiceTracingConnection::UpdateStoredInfoType(
    google::privacy::dlp::v2::UpdateStoredInfoTypeRequest const& request) {
  return child_->UpdateStoredInfoType(request);
}

StatusOr<google::privacy::dlp::v2::StoredInfoType>
DlpServiceTracingConnection::GetStoredInfoType(
    google::privacy::dlp::v2::GetStoredInfoTypeRequest const& request) {
  return child_->GetStoredInfoType(request);
}

StreamRange<google::privacy::dlp::v2::StoredInfoType>
DlpServiceTracingConnection::ListStoredInfoTypes(
    google::privacy::dlp::v2::ListStoredInfoTypesRequest request) {
  return child_->ListStoredInfoTypes(request);
}

Status DlpServiceTracingConnection::DeleteStoredInfoType(
    google::privacy::dlp::v2::DeleteStoredInfoTypeRequest const& request) {
  return child_->DeleteStoredInfoType(request);
}

StatusOr<google::privacy::dlp::v2::HybridInspectResponse>
DlpServiceTracingConnection::HybridInspectDlpJob(
    google::privacy::dlp::v2::HybridInspectDlpJobRequest const& request) {
  return child_->HybridInspectDlpJob(request);
}

Status DlpServiceTracingConnection::FinishDlpJob(
    google::privacy::dlp::v2::FinishDlpJobRequest const& request) {
  return child_->FinishDlpJob(request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dlp_internal
}  // namespace cloud
}  // namespace google
