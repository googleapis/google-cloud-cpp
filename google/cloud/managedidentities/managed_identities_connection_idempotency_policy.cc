// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedidentities/v1/managed_identities_service.proto

#include "google/cloud/managedidentities/managed_identities_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace managedidentities {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

ManagedIdentitiesServiceConnectionIdempotencyPolicy::
    ~ManagedIdentitiesServiceConnectionIdempotencyPolicy() = default;

namespace {
class DefaultManagedIdentitiesServiceConnectionIdempotencyPolicy
    : public ManagedIdentitiesServiceConnectionIdempotencyPolicy {
 public:
  ~DefaultManagedIdentitiesServiceConnectionIdempotencyPolicy() override =
      default;

  /// Create a new copy of this object.
  std::unique_ptr<ManagedIdentitiesServiceConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<
        DefaultManagedIdentitiesServiceConnectionIdempotencyPolicy>(*this);
  }

  Idempotency CreateMicrosoftAdDomain(
      google::cloud::managedidentities::v1::
          CreateMicrosoftAdDomainRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ResetAdminPassword(
      google::cloud::managedidentities::v1::ResetAdminPasswordRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListDomains(
      google::cloud::managedidentities::v1::ListDomainsRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetDomain(
      google::cloud::managedidentities::v1::GetDomainRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency UpdateDomain(
      google::cloud::managedidentities::v1::UpdateDomainRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteDomain(
      google::cloud::managedidentities::v1::DeleteDomainRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency AttachTrust(
      google::cloud::managedidentities::v1::AttachTrustRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ReconfigureTrust(
      google::cloud::managedidentities::v1::ReconfigureTrustRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DetachTrust(
      google::cloud::managedidentities::v1::DetachTrustRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ValidateTrust(
      google::cloud::managedidentities::v1::ValidateTrustRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }
};
}  // namespace

std::unique_ptr<ManagedIdentitiesServiceConnectionIdempotencyPolicy>
MakeDefaultManagedIdentitiesServiceConnectionIdempotencyPolicy() {
  return absl::make_unique<
      DefaultManagedIdentitiesServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedidentities
}  // namespace cloud
}  // namespace google
