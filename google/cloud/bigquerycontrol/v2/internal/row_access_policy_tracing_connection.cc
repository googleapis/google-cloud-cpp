// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/v2/row_access_policy.proto

#include "google/cloud/bigquerycontrol/v2/internal/row_access_policy_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquerycontrol_v2_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

RowAccessPolicyServiceTracingConnection::
    RowAccessPolicyServiceTracingConnection(
        std::shared_ptr<bigquerycontrol_v2::RowAccessPolicyServiceConnection>
            child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::bigquery::v2::RowAccessPolicy>
RowAccessPolicyServiceTracingConnection::ListRowAccessPolicies(
    google::cloud::bigquery::v2::ListRowAccessPoliciesRequest request) {
  auto span = internal::MakeSpan(
      "bigquerycontrol_v2::RowAccessPolicyServiceConnection::"
      "ListRowAccessPolicies");
  internal::OTelScope scope(span);
  auto sr = child_->ListRowAccessPolicies(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::bigquery::v2::RowAccessPolicy>(std::move(span),
                                                    std::move(sr));
}

StatusOr<google::cloud::bigquery::v2::RowAccessPolicy>
RowAccessPolicyServiceTracingConnection::GetRowAccessPolicy(
    google::cloud::bigquery::v2::GetRowAccessPolicyRequest const& request) {
  auto span = internal::MakeSpan(
      "bigquerycontrol_v2::RowAccessPolicyServiceConnection::"
      "GetRowAccessPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRowAccessPolicy(request));
}

StatusOr<google::cloud::bigquery::v2::RowAccessPolicy>
RowAccessPolicyServiceTracingConnection::CreateRowAccessPolicy(
    google::cloud::bigquery::v2::CreateRowAccessPolicyRequest const& request) {
  auto span = internal::MakeSpan(
      "bigquerycontrol_v2::RowAccessPolicyServiceConnection::"
      "CreateRowAccessPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateRowAccessPolicy(request));
}

StatusOr<google::cloud::bigquery::v2::RowAccessPolicy>
RowAccessPolicyServiceTracingConnection::UpdateRowAccessPolicy(
    google::cloud::bigquery::v2::UpdateRowAccessPolicyRequest const& request) {
  auto span = internal::MakeSpan(
      "bigquerycontrol_v2::RowAccessPolicyServiceConnection::"
      "UpdateRowAccessPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateRowAccessPolicy(request));
}

Status RowAccessPolicyServiceTracingConnection::DeleteRowAccessPolicy(
    google::cloud::bigquery::v2::DeleteRowAccessPolicyRequest const& request) {
  auto span = internal::MakeSpan(
      "bigquerycontrol_v2::RowAccessPolicyServiceConnection::"
      "DeleteRowAccessPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteRowAccessPolicy(request));
}

Status RowAccessPolicyServiceTracingConnection::BatchDeleteRowAccessPolicies(
    google::cloud::bigquery::v2::BatchDeleteRowAccessPoliciesRequest const&
        request) {
  auto span = internal::MakeSpan(
      "bigquerycontrol_v2::RowAccessPolicyServiceConnection::"
      "BatchDeleteRowAccessPolicies");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span,
                           child_->BatchDeleteRowAccessPolicies(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<bigquerycontrol_v2::RowAccessPolicyServiceConnection>
MakeRowAccessPolicyServiceTracingConnection(
    std::shared_ptr<bigquerycontrol_v2::RowAccessPolicyServiceConnection>
        conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<RowAccessPolicyServiceTracingConnection>(
        std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquerycontrol_v2_internal
}  // namespace cloud
}  // namespace google
