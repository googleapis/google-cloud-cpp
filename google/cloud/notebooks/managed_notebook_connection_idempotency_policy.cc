// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/notebooks/v1/managed_service.proto

#include "google/cloud/notebooks/managed_notebook_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace notebooks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

ManagedNotebookServiceConnectionIdempotencyPolicy::
    ~ManagedNotebookServiceConnectionIdempotencyPolicy() = default;

namespace {
class DefaultManagedNotebookServiceConnectionIdempotencyPolicy
    : public ManagedNotebookServiceConnectionIdempotencyPolicy {
 public:
  ~DefaultManagedNotebookServiceConnectionIdempotencyPolicy() override =
      default;

  /// Create a new copy of this object.
  std::unique_ptr<ManagedNotebookServiceConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<
        DefaultManagedNotebookServiceConnectionIdempotencyPolicy>(*this);
  }

  Idempotency ListRuntimes(
      google::cloud::notebooks::v1::ListRuntimesRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetRuntime(
      google::cloud::notebooks::v1::GetRuntimeRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateRuntime(
      google::cloud::notebooks::v1::CreateRuntimeRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteRuntime(
      google::cloud::notebooks::v1::DeleteRuntimeRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency StartRuntime(
      google::cloud::notebooks::v1::StartRuntimeRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency StopRuntime(
      google::cloud::notebooks::v1::StopRuntimeRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency SwitchRuntime(
      google::cloud::notebooks::v1::SwitchRuntimeRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ResetRuntime(
      google::cloud::notebooks::v1::ResetRuntimeRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ReportRuntimeEvent(
      google::cloud::notebooks::v1::ReportRuntimeEventRequest const&) override {
    return Idempotency::kNonIdempotent;
  }
};
}  // namespace

std::unique_ptr<ManagedNotebookServiceConnectionIdempotencyPolicy>
MakeDefaultManagedNotebookServiceConnectionIdempotencyPolicy() {
  return absl::make_unique<
      DefaultManagedNotebookServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace notebooks
}  // namespace cloud
}  // namespace google
