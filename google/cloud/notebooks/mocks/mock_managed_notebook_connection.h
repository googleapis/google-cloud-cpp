// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/notebooks/v1/managed_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_NOTEBOOKS_MOCKS_MOCK_MANAGED_NOTEBOOK_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_NOTEBOOKS_MOCKS_MOCK_MANAGED_NOTEBOOK_CONNECTION_H

#include "google/cloud/notebooks/managed_notebook_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace notebooks_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `ManagedNotebookServiceConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `ManagedNotebookServiceClient`. To
 * do so, construct an object of type `ManagedNotebookServiceClient` with an
 * instance of this class. Then use the Google Test framework functions to
 * program the behavior of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with
 * GoogleTest. While the example showcases types from the BigQuery library, the
 * underlying principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]:
 * https://googleapis.dev/cpp/google-cloud-bigquery/latest/bigquery-read-mock.html
 */
class MockManagedNotebookServiceConnection
    : public notebooks::ManagedNotebookServiceConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(StreamRange<google::cloud::notebooks::v1::Runtime>, ListRuntimes,
              (google::cloud::notebooks::v1::ListRuntimesRequest request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::notebooks::v1::Runtime>, GetRuntime,
              (google::cloud::notebooks::v1::GetRuntimeRequest const& request),
              (override));

  MOCK_METHOD(
      future<StatusOr<google::cloud::notebooks::v1::Runtime>>, CreateRuntime,
      (google::cloud::notebooks::v1::CreateRuntimeRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<google::cloud::notebooks::v1::OperationMetadata>>,
      DeleteRuntime,
      (google::cloud::notebooks::v1::DeleteRuntimeRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<google::cloud::notebooks::v1::Runtime>>, StartRuntime,
      (google::cloud::notebooks::v1::StartRuntimeRequest const& request),
      (override));

  MOCK_METHOD(future<StatusOr<google::cloud::notebooks::v1::Runtime>>,
              StopRuntime,
              (google::cloud::notebooks::v1::StopRuntimeRequest const& request),
              (override));

  MOCK_METHOD(
      future<StatusOr<google::cloud::notebooks::v1::Runtime>>, SwitchRuntime,
      (google::cloud::notebooks::v1::SwitchRuntimeRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<google::cloud::notebooks::v1::Runtime>>, ResetRuntime,
      (google::cloud::notebooks::v1::ResetRuntimeRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<google::cloud::notebooks::v1::Runtime>>,
      ReportRuntimeEvent,
      (google::cloud::notebooks::v1::ReportRuntimeEventRequest const& request),
      (override));

  MOCK_METHOD(
      StatusOr<
          google::cloud::notebooks::v1::RefreshRuntimeTokenInternalResponse>,
      RefreshRuntimeTokenInternal,
      (google::cloud::notebooks::v1::RefreshRuntimeTokenInternalRequest const&
           request),
      (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace notebooks_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_NOTEBOOKS_MOCKS_MOCK_MANAGED_NOTEBOOK_CONNECTION_H
