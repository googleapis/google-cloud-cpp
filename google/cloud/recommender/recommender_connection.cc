// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/recommender/v1/recommender_service.proto

#include "google/cloud/recommender/recommender_connection.h"
#include "google/cloud/recommender/internal/recommender_option_defaults.h"
#include "google/cloud/recommender/internal/recommender_stub_factory.h"
#include "google/cloud/recommender/recommender_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace recommender {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RecommenderConnection::~RecommenderConnection() = default;

StreamRange<google::cloud::recommender::v1::Insight>
RecommenderConnection::ListInsights(
    google::cloud::recommender::v1::ListInsightsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::recommender::v1::Insight>>(
      std::move(request),
      [](google::cloud::recommender::v1::ListInsightsRequest const&) {
        return StatusOr<google::cloud::recommender::v1::ListInsightsResponse>{};
      },
      [](google::cloud::recommender::v1::ListInsightsResponse const&) {
        return std::vector<google::cloud::recommender::v1::Insight>();
      });
}

StatusOr<google::cloud::recommender::v1::Insight>
RecommenderConnection::GetInsight(
    google::cloud::recommender::v1::GetInsightRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::recommender::v1::Insight>
RecommenderConnection::MarkInsightAccepted(
    google::cloud::recommender::v1::MarkInsightAcceptedRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::recommender::v1::Recommendation>
RecommenderConnection::ListRecommendations(
    google::cloud::recommender::v1::ListRecommendationsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::recommender::v1::Recommendation>>(
      std::move(request),
      [](google::cloud::recommender::v1::ListRecommendationsRequest const&) {
        return StatusOr<
            google::cloud::recommender::v1::ListRecommendationsResponse>{};
      },
      [](google::cloud::recommender::v1::ListRecommendationsResponse const&) {
        return std::vector<google::cloud::recommender::v1::Recommendation>();
      });
}

StatusOr<google::cloud::recommender::v1::Recommendation>
RecommenderConnection::GetRecommendation(
    google::cloud::recommender::v1::GetRecommendationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::recommender::v1::Recommendation>
RecommenderConnection::MarkRecommendationClaimed(
    google::cloud::recommender::v1::MarkRecommendationClaimedRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::recommender::v1::Recommendation>
RecommenderConnection::MarkRecommendationSucceeded(
    google::cloud::recommender::v1::MarkRecommendationSucceededRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::recommender::v1::Recommendation>
RecommenderConnection::MarkRecommendationFailed(
    google::cloud::recommender::v1::MarkRecommendationFailedRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

namespace {
class RecommenderConnectionImpl : public RecommenderConnection {
 public:
  RecommenderConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<recommender_internal::RecommenderStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<RecommenderRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<RecommenderBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<RecommenderConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~RecommenderConnectionImpl() override = default;

  StreamRange<google::cloud::recommender::v1::Insight> ListInsights(
      google::cloud::recommender::v1::ListInsightsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<RecommenderRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListInsights(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::recommender::v1::Insight>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::recommender::v1::ListInsightsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::recommender::v1::ListInsightsRequest const&
                         request) {
                return stub->ListInsights(context, request);
              },
              r, function_name);
        },
        [](google::cloud::recommender::v1::ListInsightsResponse r) {
          std::vector<google::cloud::recommender::v1::Insight> result(
              r.insights().size());
          auto& messages = *r.mutable_insights();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::recommender::v1::Insight> GetInsight(
      google::cloud::recommender::v1::GetInsightRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetInsight(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::recommender::v1::GetInsightRequest const& request) {
          return stub_->GetInsight(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::recommender::v1::Insight> MarkInsightAccepted(
      google::cloud::recommender::v1::MarkInsightAcceptedRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->MarkInsightAccepted(request),
        [this](grpc::ClientContext& context,
               google::cloud::recommender::v1::MarkInsightAcceptedRequest const&
                   request) {
          return stub_->MarkInsightAccepted(context, request);
        },
        request, __func__);
  }

  StreamRange<google::cloud::recommender::v1::Recommendation>
  ListRecommendations(google::cloud::recommender::v1::ListRecommendationsRequest
                          request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<RecommenderRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListRecommendations(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::recommender::v1::Recommendation>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::recommender::v1::ListRecommendationsRequest const&
                r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::recommender::v1::
                         ListRecommendationsRequest const& request) {
                return stub->ListRecommendations(context, request);
              },
              r, function_name);
        },
        [](google::cloud::recommender::v1::ListRecommendationsResponse r) {
          std::vector<google::cloud::recommender::v1::Recommendation> result(
              r.recommendations().size());
          auto& messages = *r.mutable_recommendations();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::recommender::v1::Recommendation> GetRecommendation(
      google::cloud::recommender::v1::GetRecommendationRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetRecommendation(request),
        [this](grpc::ClientContext& context,
               google::cloud::recommender::v1::GetRecommendationRequest const&
                   request) {
          return stub_->GetRecommendation(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::recommender::v1::Recommendation>
  MarkRecommendationClaimed(
      google::cloud::recommender::v1::MarkRecommendationClaimedRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->MarkRecommendationClaimed(request),
        [this](grpc::ClientContext& context,
               google::cloud::recommender::v1::
                   MarkRecommendationClaimedRequest const& request) {
          return stub_->MarkRecommendationClaimed(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::recommender::v1::Recommendation>
  MarkRecommendationSucceeded(
      google::cloud::recommender::v1::MarkRecommendationSucceededRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->MarkRecommendationSucceeded(request),
        [this](grpc::ClientContext& context,
               google::cloud::recommender::v1::
                   MarkRecommendationSucceededRequest const& request) {
          return stub_->MarkRecommendationSucceeded(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::recommender::v1::Recommendation>
  MarkRecommendationFailed(
      google::cloud::recommender::v1::MarkRecommendationFailedRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->MarkRecommendationFailed(request),
        [this](grpc::ClientContext& context,
               google::cloud::recommender::v1::
                   MarkRecommendationFailedRequest const& request) {
          return stub_->MarkRecommendationFailed(context, request);
        },
        request, __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<recommender_internal::RecommenderStub> stub_;
  std::unique_ptr<RecommenderRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<RecommenderConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<RecommenderConnection> MakeRecommenderConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 RecommenderPolicyOptionList>(options,
                                                              __func__);
  options = recommender_internal::RecommenderDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = recommender_internal::CreateDefaultRecommenderStub(
      background->cq(), options);
  return std::make_shared<RecommenderConnectionImpl>(std::move(background),
                                                     std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace recommender
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace recommender_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<recommender::RecommenderConnection> MakeRecommenderConnection(
    std::shared_ptr<RecommenderStub> stub, Options options) {
  options = RecommenderDefaultOptions(std::move(options));
  return std::make_shared<recommender::RecommenderConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace recommender_internal
}  // namespace cloud
}  // namespace google
