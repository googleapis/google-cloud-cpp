// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dialogflow/v2/session_entity_type.proto

#include "google/cloud/dialogflow_es/session_entity_types_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace dialogflow_es {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SessionEntityTypesClient::SessionEntityTypesClient(
    std::shared_ptr<SessionEntityTypesConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
SessionEntityTypesClient::~SessionEntityTypesClient() = default;

StreamRange<google::cloud::dialogflow::v2::SessionEntityType>
SessionEntityTypesClient::ListSessionEntityTypes(std::string const& parent,
                                                 Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::dialogflow::v2::ListSessionEntityTypesRequest request;
  request.set_parent(parent);
  return connection_->ListSessionEntityTypes(request);
}

StreamRange<google::cloud::dialogflow::v2::SessionEntityType>
SessionEntityTypesClient::ListSessionEntityTypes(
    google::cloud::dialogflow::v2::ListSessionEntityTypesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListSessionEntityTypes(std::move(request));
}

StatusOr<google::cloud::dialogflow::v2::SessionEntityType>
SessionEntityTypesClient::GetSessionEntityType(std::string const& name,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::dialogflow::v2::GetSessionEntityTypeRequest request;
  request.set_name(name);
  return connection_->GetSessionEntityType(request);
}

StatusOr<google::cloud::dialogflow::v2::SessionEntityType>
SessionEntityTypesClient::GetSessionEntityType(
    google::cloud::dialogflow::v2::GetSessionEntityTypeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetSessionEntityType(request);
}

StatusOr<google::cloud::dialogflow::v2::SessionEntityType>
SessionEntityTypesClient::CreateSessionEntityType(
    std::string const& parent,
    google::cloud::dialogflow::v2::SessionEntityType const& session_entity_type,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::dialogflow::v2::CreateSessionEntityTypeRequest request;
  request.set_parent(parent);
  *request.mutable_session_entity_type() = session_entity_type;
  return connection_->CreateSessionEntityType(request);
}

StatusOr<google::cloud::dialogflow::v2::SessionEntityType>
SessionEntityTypesClient::CreateSessionEntityType(
    google::cloud::dialogflow::v2::CreateSessionEntityTypeRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateSessionEntityType(request);
}

StatusOr<google::cloud::dialogflow::v2::SessionEntityType>
SessionEntityTypesClient::UpdateSessionEntityType(
    google::cloud::dialogflow::v2::SessionEntityType const& session_entity_type,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::dialogflow::v2::UpdateSessionEntityTypeRequest request;
  *request.mutable_session_entity_type() = session_entity_type;
  return connection_->UpdateSessionEntityType(request);
}

StatusOr<google::cloud::dialogflow::v2::SessionEntityType>
SessionEntityTypesClient::UpdateSessionEntityType(
    google::cloud::dialogflow::v2::SessionEntityType const& session_entity_type,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::dialogflow::v2::UpdateSessionEntityTypeRequest request;
  *request.mutable_session_entity_type() = session_entity_type;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateSessionEntityType(request);
}

StatusOr<google::cloud::dialogflow::v2::SessionEntityType>
SessionEntityTypesClient::UpdateSessionEntityType(
    google::cloud::dialogflow::v2::UpdateSessionEntityTypeRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateSessionEntityType(request);
}

Status SessionEntityTypesClient::DeleteSessionEntityType(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::dialogflow::v2::DeleteSessionEntityTypeRequest request;
  request.set_name(name);
  return connection_->DeleteSessionEntityType(request);
}

Status SessionEntityTypesClient::DeleteSessionEntityType(
    google::cloud::dialogflow::v2::DeleteSessionEntityTypeRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteSessionEntityType(request);
}

StreamRange<google::cloud::location::Location>
SessionEntityTypesClient::ListLocations(
    google::cloud::location::ListLocationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListLocations(std::move(request));
}

StatusOr<google::cloud::location::Location>
SessionEntityTypesClient::GetLocation(
    google::cloud::location::GetLocationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetLocation(request);
}

StreamRange<google::longrunning::Operation>
SessionEntityTypesClient::ListOperations(std::string const& name,
                                         std::string const& filter,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::ListOperationsRequest request;
  request.set_name(name);
  request.set_filter(filter);
  return connection_->ListOperations(request);
}

StreamRange<google::longrunning::Operation>
SessionEntityTypesClient::ListOperations(
    google::longrunning::ListOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListOperations(std::move(request));
}

StatusOr<google::longrunning::Operation> SessionEntityTypesClient::GetOperation(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation> SessionEntityTypesClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

Status SessionEntityTypesClient::CancelOperation(std::string const& name,
                                                 Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::CancelOperationRequest request;
  request.set_name(name);
  return connection_->CancelOperation(request);
}

Status SessionEntityTypesClient::CancelOperation(
    google::longrunning::CancelOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dialogflow_es
}  // namespace cloud
}  // namespace google
