// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dialogflow/v2/intent.proto

#include "google/cloud/dialogflow_es/internal/intents_connection_impl.h"
#include "google/cloud/dialogflow_es/internal/intents_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace dialogflow_es_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

IntentsConnectionImpl::IntentsConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<dialogflow_es_internal::IntentsStub> stub, Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(
          std::move(options), dialogflow_es_internal::IntentsDefaultOptions(
                                  IntentsConnection::options()))) {}

StreamRange<google::cloud::dialogflow::v2::Intent>
IntentsConnectionImpl::ListIntents(
    google::cloud::dialogflow::v2::ListIntentsRequest request) {
  request.clear_page_token();
  auto stub = stub_;
  auto retry =
      std::shared_ptr<dialogflow_es::IntentsRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListIntents(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::dialogflow::v2::Intent>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::dialogflow::v2::ListIntentsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::dialogflow::v2::ListIntentsRequest const&
                       request) { return stub->ListIntents(context, request); },
            r, function_name);
      },
      [](google::cloud::dialogflow::v2::ListIntentsResponse r) {
        std::vector<google::cloud::dialogflow::v2::Intent> result(
            r.intents().size());
        auto& messages = *r.mutable_intents();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::dialogflow::v2::Intent>
IntentsConnectionImpl::GetIntent(
    google::cloud::dialogflow::v2::GetIntentRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetIntent(request),
      [this](grpc::ClientContext& context,
             google::cloud::dialogflow::v2::GetIntentRequest const& request) {
        return stub_->GetIntent(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::dialogflow::v2::Intent>
IntentsConnectionImpl::CreateIntent(
    google::cloud::dialogflow::v2::CreateIntentRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateIntent(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::dialogflow::v2::CreateIntentRequest const& request) {
        return stub_->CreateIntent(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::dialogflow::v2::Intent>
IntentsConnectionImpl::UpdateIntent(
    google::cloud::dialogflow::v2::UpdateIntentRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateIntent(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::dialogflow::v2::UpdateIntentRequest const& request) {
        return stub_->UpdateIntent(context, request);
      },
      request, __func__);
}

Status IntentsConnectionImpl::DeleteIntent(
    google::cloud::dialogflow::v2::DeleteIntentRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteIntent(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::dialogflow::v2::DeleteIntentRequest const& request) {
        return stub_->DeleteIntent(context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::dialogflow::v2::BatchUpdateIntentsResponse>>
IntentsConnectionImpl::BatchUpdateIntents(
    google::cloud::dialogflow::v2::BatchUpdateIntentsRequest const& request) {
  auto stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::dialogflow::v2::BatchUpdateIntentsResponse>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::dialogflow::v2::BatchUpdateIntentsRequest const&
                 request) {
        return stub->AsyncBatchUpdateIntents(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::dialogflow::v2::BatchUpdateIntentsResponse>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->BatchUpdateIntents(request), polling_policy(),
      __func__);
}

future<StatusOr<google::protobuf::Struct>>
IntentsConnectionImpl::BatchDeleteIntents(
    google::cloud::dialogflow::v2::BatchDeleteIntentsRequest const& request) {
  auto stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::protobuf::Struct>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::cloud::dialogflow::v2::BatchDeleteIntentsRequest const&
                 request) {
        return stub->AsyncBatchDeleteIntents(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::unique_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultMetadata<
          google::protobuf::Struct>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->BatchDeleteIntents(request), polling_policy(),
      __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dialogflow_es_internal
}  // namespace cloud
}  // namespace google
