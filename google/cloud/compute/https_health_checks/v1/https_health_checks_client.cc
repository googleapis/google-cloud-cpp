// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/https_health_checks/v1/https_health_checks.proto

#include "google/cloud/compute/https_health_checks/v1/https_health_checks_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_https_health_checks_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

HttpsHealthChecksClient::HttpsHealthChecksClient(
    ExperimentalTag, std::shared_ptr<HttpsHealthChecksConnection> connection,
    Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
HttpsHealthChecksClient::~HttpsHealthChecksClient() = default;

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
HttpsHealthChecksClient::DeleteHttpsHealthChecks(
    std::string const& project, std::string const& https_health_check,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::https_health_checks::v1::
      DeleteHttpsHealthChecksRequest request;
  request.set_project(project);
  request.set_https_health_check(https_health_check);
  return connection_->DeleteHttpsHealthChecks(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
HttpsHealthChecksClient::DeleteHttpsHealthChecks(
    google::cloud::cpp::compute::https_health_checks::v1::
        DeleteHttpsHealthChecksRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteHttpsHealthChecks(request);
}

StatusOr<google::cloud::cpp::compute::v1::HttpsHealthCheck>
HttpsHealthChecksClient::GetHttpsHealthChecks(
    std::string const& project, std::string const& https_health_check,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::https_health_checks::v1::
      GetHttpsHealthChecksRequest request;
  request.set_project(project);
  request.set_https_health_check(https_health_check);
  return connection_->GetHttpsHealthChecks(request);
}

StatusOr<google::cloud::cpp::compute::v1::HttpsHealthCheck>
HttpsHealthChecksClient::GetHttpsHealthChecks(
    google::cloud::cpp::compute::https_health_checks::v1::
        GetHttpsHealthChecksRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetHttpsHealthChecks(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
HttpsHealthChecksClient::InsertHttpsHealthChecks(
    std::string const& project,
    google::cloud::cpp::compute::v1::HttpsHealthCheck const&
        https_health_check_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::https_health_checks::v1::
      InsertHttpsHealthChecksRequest request;
  request.set_project(project);
  *request.mutable_https_health_check_resource() = https_health_check_resource;
  return connection_->InsertHttpsHealthChecks(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
HttpsHealthChecksClient::InsertHttpsHealthChecks(
    google::cloud::cpp::compute::https_health_checks::v1::
        InsertHttpsHealthChecksRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertHttpsHealthChecks(request);
}

StreamRange<google::cloud::cpp::compute::v1::HttpsHealthCheck>
HttpsHealthChecksClient::ListHttpsHealthChecks(std::string const& project,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::https_health_checks::v1::
      ListHttpsHealthChecksRequest request;
  request.set_project(project);
  return connection_->ListHttpsHealthChecks(request);
}

StreamRange<google::cloud::cpp::compute::v1::HttpsHealthCheck>
HttpsHealthChecksClient::ListHttpsHealthChecks(
    google::cloud::cpp::compute::https_health_checks::v1::
        ListHttpsHealthChecksRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListHttpsHealthChecks(std::move(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
HttpsHealthChecksClient::PatchHttpsHealthChecks(
    std::string const& project, std::string const& https_health_check,
    google::cloud::cpp::compute::v1::HttpsHealthCheck const&
        https_health_check_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::https_health_checks::v1::
      PatchHttpsHealthChecksRequest request;
  request.set_project(project);
  request.set_https_health_check(https_health_check);
  *request.mutable_https_health_check_resource() = https_health_check_resource;
  return connection_->PatchHttpsHealthChecks(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
HttpsHealthChecksClient::PatchHttpsHealthChecks(
    google::cloud::cpp::compute::https_health_checks::v1::
        PatchHttpsHealthChecksRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchHttpsHealthChecks(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
HttpsHealthChecksClient::UpdateHttpsHealthChecks(
    std::string const& project, std::string const& https_health_check,
    google::cloud::cpp::compute::v1::HttpsHealthCheck const&
        https_health_check_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::https_health_checks::v1::
      UpdateHttpsHealthChecksRequest request;
  request.set_project(project);
  request.set_https_health_check(https_health_check);
  *request.mutable_https_health_check_resource() = https_health_check_resource;
  return connection_->UpdateHttpsHealthChecks(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
HttpsHealthChecksClient::UpdateHttpsHealthChecks(
    google::cloud::cpp::compute::https_health_checks::v1::
        UpdateHttpsHealthChecksRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateHttpsHealthChecks(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_https_health_checks_v1
}  // namespace cloud
}  // namespace google
