// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_instances/v1/target_instances.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_INSTANCES_V1_TARGET_INSTANCES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_INSTANCES_V1_TARGET_INSTANCES_CLIENT_H

#include "google/cloud/compute/target_instances/v1/target_instances_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_instances_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the targetInstances resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/targetInstances
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class TargetInstancesClient {
 public:
  explicit TargetInstancesClient(
      ExperimentalTag, std::shared_ptr<TargetInstancesConnection> connection,
      Options opts = {});
  ~TargetInstancesClient();

  ///@{
  /// @name Copy and move support
  TargetInstancesClient(TargetInstancesClient const&) = default;
  TargetInstancesClient& operator=(TargetInstancesClient const&) = default;
  TargetInstancesClient(TargetInstancesClient&&) = default;
  TargetInstancesClient& operator=(TargetInstancesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(TargetInstancesClient const& a,
                         TargetInstancesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(TargetInstancesClient const& a,
                         TargetInstancesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves an aggregated list of target instances.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetInstanceAggregatedList,google/cloud/compute/v1/internal/common.proto#L27215}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.AggregatedListTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L81}
  /// [google.cloud.cpp.compute.v1.TargetInstanceAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L27215}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetInstanceAggregatedList>
  AggregatedListTargetInstances(std::string const& project, Options opts = {});

  ///
  /// Retrieves an aggregated list of target instances.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetInstances::v1::AggregatedListTargetInstancesRequest,google/cloud/compute/target_instances/v1/target_instances.proto#L81}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetInstanceAggregatedList,google/cloud/compute/v1/internal/common.proto#L27215}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.AggregatedListTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L81}
  /// [google.cloud.cpp.compute.v1.TargetInstanceAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L27215}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetInstanceAggregatedList>
  AggregatedListTargetInstances(
      google::cloud::cpp::compute::targetInstances::v1::
          AggregatedListTargetInstancesRequest const& request,
      Options opts = {});

  ///
  /// Deletes the specified TargetInstance resource.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone scoping this request.
  /// @param target_instance  Name of the TargetInstance resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.DeleteTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L155}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteTargetInstances(
      std::string const& project, std::string const& zone,
      std::string const& target_instance, Options opts = {});

  ///
  /// Deletes the specified TargetInstance resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetInstances::v1::DeleteTargetInstancesRequest,google/cloud/compute/target_instances/v1/target_instances.proto#L155}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.DeleteTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L155}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteTargetInstances(
      google::cloud::cpp::compute::targetInstances::v1::
          DeleteTargetInstancesRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified TargetInstance resource.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone scoping this request.
  /// @param target_instance  Name of the TargetInstance resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetInstance,google/cloud/compute/v1/internal/common.proto#L27161}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.GetTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L179}
  /// [google.cloud.cpp.compute.v1.TargetInstance]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L27161}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetInstance> GetTargetInstances(
      std::string const& project, std::string const& zone,
      std::string const& target_instance, Options opts = {});

  ///
  /// Returns the specified TargetInstance resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetInstances::v1::GetTargetInstancesRequest,google/cloud/compute/target_instances/v1/target_instances.proto#L179}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetInstance,google/cloud/compute/v1/internal/common.proto#L27161}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.GetTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L179}
  /// [google.cloud.cpp.compute.v1.TargetInstance]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L27161}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetInstance> GetTargetInstances(
      google::cloud::cpp::compute::targetInstances::v1::
          GetTargetInstancesRequest const& request,
      Options opts = {});

  ///
  /// Creates a TargetInstance resource in the specified project and zone using
  /// the data included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone scoping this request.
  /// @param target_instance_resource  The TargetInstance for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.InsertTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L191}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertTargetInstances(
      std::string const& project, std::string const& zone,
      google::cloud::cpp::compute::v1::TargetInstance const&
          target_instance_resource,
      Options opts = {});

  ///
  /// Creates a TargetInstance resource in the specified project and zone using
  /// the data included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetInstances::v1::InsertTargetInstancesRequest,google/cloud/compute/target_instances/v1/target_instances.proto#L191}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.InsertTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L191}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertTargetInstances(
      google::cloud::cpp::compute::targetInstances::v1::
          InsertTargetInstancesRequest const& request,
      Options opts = {});

  ///
  /// Retrieves a list of TargetInstance resources available to the specified
  /// project and zone.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetInstance,google/cloud/compute/v1/internal/common.proto#L27161}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.ListTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L215}
  /// [google.cloud.cpp.compute.v1.TargetInstance]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L27161}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetInstance>
  ListTargetInstances(std::string const& project, std::string const& zone,
                      Options opts = {});

  ///
  /// Retrieves a list of TargetInstance resources available to the specified
  /// project and zone.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetInstances::v1::ListTargetInstancesRequest,google/cloud/compute/target_instances/v1/target_instances.proto#L215}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetInstance,google/cloud/compute/v1/internal/common.proto#L27161}
  ///
  /// [google.cloud.cpp.compute.targetInstances.v1.ListTargetInstancesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_instances/v1/target_instances.proto#L215}
  /// [google.cloud.cpp.compute.v1.TargetInstance]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L27161}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetInstance>
  ListTargetInstances(google::cloud::cpp::compute::targetInstances::v1::
                          ListTargetInstancesRequest request,
                      Options opts = {});

 private:
  std::shared_ptr<TargetInstancesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_instances_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_INSTANCES_V1_TARGET_INSTANCES_CLIENT_H
