// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto

#include "google/cloud/compute/region_notification_endpoints/v1/internal/region_notification_endpoints_rest_connection_impl.h"
#include "google/cloud/compute/region_notification_endpoints/v1/internal/region_notification_endpoints_rest_stub_factory.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_notification_endpoints_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegionNotificationEndpointsRestConnectionImpl::
    RegionNotificationEndpointsRestConnectionImpl(
        std::unique_ptr<google::cloud::BackgroundThreads> background,
        std::shared_ptr<compute_region_notification_endpoints_v1_internal::
                            RegionNotificationEndpointsRestStub>
            stub,
        Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(
          std::move(options),
          RegionNotificationEndpointsConnection::options())) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionNotificationEndpointsRestConnectionImpl::
    DeleteRegionNotificationEndpoints(
        google::cloud::cpp::compute::regionNotificationEndpoints::v1::
            DeleteRegionNotificationEndpointsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteRegionNotificationEndpoints(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionNotificationEndpoints::v1::
                 DeleteRegionNotificationEndpointsRequest const& request) {
        return stub_->DeleteRegionNotificationEndpoints(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::NotificationEndpoint>
RegionNotificationEndpointsRestConnectionImpl::GetRegionNotificationEndpoints(
    google::cloud::cpp::compute::regionNotificationEndpoints::v1::
        GetRegionNotificationEndpointsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetRegionNotificationEndpoints(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionNotificationEndpoints::v1::
                 GetRegionNotificationEndpointsRequest const& request) {
        return stub_->GetRegionNotificationEndpoints(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionNotificationEndpointsRestConnectionImpl::
    InsertRegionNotificationEndpoints(
        google::cloud::cpp::compute::regionNotificationEndpoints::v1::
            InsertRegionNotificationEndpointsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->InsertRegionNotificationEndpoints(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionNotificationEndpoints::v1::
                 InsertRegionNotificationEndpointsRequest const& request) {
        return stub_->InsertRegionNotificationEndpoints(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::cpp::compute::v1::NotificationEndpoint>
RegionNotificationEndpointsRestConnectionImpl::ListRegionNotificationEndpoints(
    google::cloud::cpp::compute::regionNotificationEndpoints::v1::
        ListRegionNotificationEndpointsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<compute_region_notification_endpoints_v1::
                          RegionNotificationEndpointsRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency =
      idempotency_policy()->ListRegionNotificationEndpoints(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::NotificationEndpoint>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::regionNotificationEndpoints::
                          v1::ListRegionNotificationEndpointsRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                rest_internal::RestContext& rest_context,
                google::cloud::cpp::compute::regionNotificationEndpoints::v1::
                    ListRegionNotificationEndpointsRequest const& request) {
              return stub->ListRegionNotificationEndpoints(rest_context,
                                                           request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::NotificationEndpointList r) {
        std::vector<google::cloud::cpp::compute::v1::NotificationEndpoint>
            result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_notification_endpoints_v1_internal
}  // namespace cloud
}  // namespace google
