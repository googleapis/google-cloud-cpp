// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_NOTIFICATION_ENDPOINTS_V1_REGION_NOTIFICATION_ENDPOINTS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_NOTIFICATION_ENDPOINTS_V1_REGION_NOTIFICATION_ENDPOINTS_CLIENT_H

#include "google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_notification_endpoints_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the regionNotificationEndpoints resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/regionNotificationEndpoints
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class RegionNotificationEndpointsClient {
 public:
  explicit RegionNotificationEndpointsClient(
      ExperimentalTag,
      std::shared_ptr<RegionNotificationEndpointsConnection> connection,
      Options opts = {});
  ~RegionNotificationEndpointsClient();

  ///@{
  /// @name Copy and move support
  RegionNotificationEndpointsClient(RegionNotificationEndpointsClient const&) =
      default;
  RegionNotificationEndpointsClient& operator=(
      RegionNotificationEndpointsClient const&) = default;
  RegionNotificationEndpointsClient(RegionNotificationEndpointsClient&&) =
      default;
  RegionNotificationEndpointsClient& operator=(
      RegionNotificationEndpointsClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(RegionNotificationEndpointsClient const& a,
                         RegionNotificationEndpointsClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(RegionNotificationEndpointsClient const& a,
                         RegionNotificationEndpointsClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified NotificationEndpoint in the given region
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param notification_endpoint  Name of the NotificationEndpoint resource to
  /// delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNotificationEndpoints.v1.DeleteRegionNotificationEndpointsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L72}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionNotificationEndpoints(std::string const& project,
                                    std::string const& region,
                                    std::string const& notification_endpoint,
                                    Options opts = {});

  ///
  /// Deletes the specified NotificationEndpoint in the given region
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionNotificationEndpoints::v1::DeleteRegionNotificationEndpointsRequest,google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L72}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNotificationEndpoints.v1.DeleteRegionNotificationEndpointsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L72}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionNotificationEndpoints(
      google::cloud::cpp::compute::regionNotificationEndpoints::v1::
          DeleteRegionNotificationEndpointsRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified NotificationEndpoint resource in the given region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param notification_endpoint  Name of the NotificationEndpoint resource to
  /// return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::NotificationEndpoint,google/cloud/compute/v1/internal/common.proto#L17242}
  ///
  /// [google.cloud.cpp.compute.regionNotificationEndpoints.v1.GetRegionNotificationEndpointsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L96}
  /// [google.cloud.cpp.compute.v1.NotificationEndpoint]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17242}
  ///
  StatusOr<google::cloud::cpp::compute::v1::NotificationEndpoint>
  GetRegionNotificationEndpoints(std::string const& project,
                                 std::string const& region,
                                 std::string const& notification_endpoint,
                                 Options opts = {});

  ///
  /// Returns the specified NotificationEndpoint resource in the given region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionNotificationEndpoints::v1::GetRegionNotificationEndpointsRequest,google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L96}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::NotificationEndpoint,google/cloud/compute/v1/internal/common.proto#L17242}
  ///
  /// [google.cloud.cpp.compute.regionNotificationEndpoints.v1.GetRegionNotificationEndpointsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L96}
  /// [google.cloud.cpp.compute.v1.NotificationEndpoint]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17242}
  ///
  StatusOr<google::cloud::cpp::compute::v1::NotificationEndpoint>
  GetRegionNotificationEndpoints(
      google::cloud::cpp::compute::regionNotificationEndpoints::v1::
          GetRegionNotificationEndpointsRequest const& request,
      Options opts = {});

  ///
  /// Create a NotificationEndpoint in the specified project in the given region
  /// using the parameters that are included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param notification_endpoint_resource  The NotificationEndpoint for this
  /// request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNotificationEndpoints.v1.InsertRegionNotificationEndpointsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L108}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionNotificationEndpoints(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::NotificationEndpoint const&
          notification_endpoint_resource,
      Options opts = {});

  ///
  /// Create a NotificationEndpoint in the specified project in the given region
  /// using the parameters that are included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionNotificationEndpoints::v1::InsertRegionNotificationEndpointsRequest,google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L108}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNotificationEndpoints.v1.InsertRegionNotificationEndpointsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L108}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionNotificationEndpoints(
      google::cloud::cpp::compute::regionNotificationEndpoints::v1::
          InsertRegionNotificationEndpointsRequest const& request,
      Options opts = {});

  ///
  /// Lists the NotificationEndpoints for a project in the given region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::NotificationEndpoint,google/cloud/compute/v1/internal/common.proto#L17242}
  ///
  /// [google.cloud.cpp.compute.regionNotificationEndpoints.v1.ListRegionNotificationEndpointsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L132}
  /// [google.cloud.cpp.compute.v1.NotificationEndpoint]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17242}
  ///
  StreamRange<google::cloud::cpp::compute::v1::NotificationEndpoint>
  ListRegionNotificationEndpoints(std::string const& project,
                                  std::string const& region, Options opts = {});

  ///
  /// Lists the NotificationEndpoints for a project in the given region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionNotificationEndpoints::v1::ListRegionNotificationEndpointsRequest,google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L132}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::NotificationEndpoint,google/cloud/compute/v1/internal/common.proto#L17242}
  ///
  /// [google.cloud.cpp.compute.regionNotificationEndpoints.v1.ListRegionNotificationEndpointsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_notification_endpoints/v1/region_notification_endpoints.proto#L132}
  /// [google.cloud.cpp.compute.v1.NotificationEndpoint]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17242}
  ///
  StreamRange<google::cloud::cpp::compute::v1::NotificationEndpoint>
  ListRegionNotificationEndpoints(
      google::cloud::cpp::compute::regionNotificationEndpoints::v1::
          ListRegionNotificationEndpointsRequest request,
      Options opts = {});

 private:
  std::shared_ptr<RegionNotificationEndpointsConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_notification_endpoints_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_NOTIFICATION_ENDPOINTS_V1_REGION_NOTIFICATION_ENDPOINTS_CLIENT_H
