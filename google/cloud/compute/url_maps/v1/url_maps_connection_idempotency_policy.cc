// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/url_maps/v1/url_maps.proto

#include "google/cloud/compute/url_maps/v1/url_maps_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_url_maps_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

UrlMapsConnectionIdempotencyPolicy::~UrlMapsConnectionIdempotencyPolicy() =
    default;

std::unique_ptr<UrlMapsConnectionIdempotencyPolicy>
UrlMapsConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<UrlMapsConnectionIdempotencyPolicy>(*this);
}

Idempotency UrlMapsConnectionIdempotencyPolicy::AggregatedListUrlMaps(
    google::cloud::cpp::compute::url_maps::v1::
        AggregatedListUrlMapsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency UrlMapsConnectionIdempotencyPolicy::DeleteUrlMaps(
    google::cloud::cpp::compute::url_maps::v1::DeleteUrlMapsRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency UrlMapsConnectionIdempotencyPolicy::GetUrlMaps(
    google::cloud::cpp::compute::url_maps::v1::GetUrlMapsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency UrlMapsConnectionIdempotencyPolicy::InsertUrlMaps(
    google::cloud::cpp::compute::url_maps::v1::InsertUrlMapsRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency UrlMapsConnectionIdempotencyPolicy::InvalidateCache(
    google::cloud::cpp::compute::url_maps::v1::InvalidateCacheRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency UrlMapsConnectionIdempotencyPolicy::ListUrlMaps(
    google::cloud::cpp::compute::url_maps::v1::ListUrlMapsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency UrlMapsConnectionIdempotencyPolicy::PatchUrlMaps(
    google::cloud::cpp::compute::url_maps::v1::PatchUrlMapsRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency UrlMapsConnectionIdempotencyPolicy::UpdateUrlMaps(
    google::cloud::cpp::compute::url_maps::v1::UpdateUrlMapsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency UrlMapsConnectionIdempotencyPolicy::Validate(
    google::cloud::cpp::compute::url_maps::v1::ValidateRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<UrlMapsConnectionIdempotencyPolicy>
MakeDefaultUrlMapsConnectionIdempotencyPolicy() {
  return std::make_unique<UrlMapsConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_url_maps_v1
}  // namespace cloud
}  // namespace google
