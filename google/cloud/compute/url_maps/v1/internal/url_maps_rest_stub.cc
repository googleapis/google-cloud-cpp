// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/url_maps/v1/url_maps.proto

#include "google/cloud/compute/url_maps/v1/internal/url_maps_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/url_maps/v1/url_maps.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_url_maps_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultUrlMapsRestStub::DefaultUrlMapsRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultUrlMapsRestStub::DefaultUrlMapsRestStub(
    std::shared_ptr<rest_internal::RestClient> service,
    Options options)
    : service_(std::move(service)),
      options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::UrlMapsAggregatedList>
DefaultUrlMapsRestStub::AggregatedListUrlMaps(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::urlMaps::v1::AggregatedListUrlMapsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::UrlMapsAggregatedList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/aggregated/urlMaps",
      {std::make_pair("filter", request.filter()),
       std::make_pair("include_all_scopes", std::to_string(request.include_all_scopes())),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultUrlMapsRestStub::DeleteUrlMaps(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::urlMaps::v1::DeleteUrlMapsRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/urlMaps/{url_map}");
}

StatusOr<google::cloud::cpp::compute::v1::UrlMap>
DefaultUrlMapsRestStub::GetUrlMaps(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::urlMaps::v1::GetUrlMapsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::UrlMap>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/urlMaps/{url_map}",
      {std::make_pair("project", request.project()),
       std::make_pair("url_map", request.url_map())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultUrlMapsRestStub::InsertUrlMaps(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::urlMaps::v1::InsertUrlMapsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/urlMaps");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultUrlMapsRestStub::InvalidateCache(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::urlMaps::v1::InvalidateCacheRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/urlMaps/{url_map}/invalidateCache");
}

StatusOr<google::cloud::cpp::compute::v1::UrlMapList>
DefaultUrlMapsRestStub::ListUrlMaps(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::urlMaps::v1::ListUrlMapsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::UrlMapList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/urlMaps",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultUrlMapsRestStub::PatchUrlMaps(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::urlMaps::v1::PatchUrlMapsRequest const& request) {
  return rest_internal::Patch<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/urlMaps/{url_map}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultUrlMapsRestStub::UpdateUrlMaps(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::urlMaps::v1::UpdateUrlMapsRequest const& request) {
  return rest_internal::Put<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/urlMaps/{url_map}");
}

StatusOr<google::cloud::cpp::compute::v1::UrlMapsValidateResponse>
DefaultUrlMapsRestStub::Validate(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::urlMaps::v1::ValidateRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::UrlMapsValidateResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/urlMaps/{url_map}/validate");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_url_maps_v1_internal
}  // namespace cloud
}  // namespace google
