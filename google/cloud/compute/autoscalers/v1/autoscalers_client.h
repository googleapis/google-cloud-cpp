// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/autoscalers/v1/autoscalers.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_AUTOSCALERS_V1_AUTOSCALERS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_AUTOSCALERS_V1_AUTOSCALERS_CLIENT_H

#include "google/cloud/compute/autoscalers/v1/autoscalers_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_autoscalers_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the autoscalers resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/autoscalers
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class AutoscalersClient {
 public:
  explicit AutoscalersClient(ExperimentalTag,
                             std::shared_ptr<AutoscalersConnection> connection,
                             Options opts = {});
  ~AutoscalersClient();

  ///@{
  /// @name Copy and move support
  AutoscalersClient(AutoscalersClient const&) = default;
  AutoscalersClient& operator=(AutoscalersClient const&) = default;
  AutoscalersClient(AutoscalersClient&&) = default;
  AutoscalersClient& operator=(AutoscalersClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(AutoscalersClient const& a,
                         AutoscalersClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(AutoscalersClient const& a,
                         AutoscalersClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves an aggregated list of autoscalers.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::AutoscalerAggregatedList,google/cloud/compute/v1/internal/common.proto#L1342}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.AggregatedListAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L110}
  /// [google.cloud.cpp.compute.v1.AutoscalerAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L1342}
  ///
  StatusOr<google::cloud::cpp::compute::v1::AutoscalerAggregatedList>
  AggregatedListAutoscalers(std::string const& project, Options opts = {});

  ///
  /// Retrieves an aggregated list of autoscalers.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::autoscalers::v1::AggregatedListAutoscalersRequest,google/cloud/compute/autoscalers/v1/autoscalers.proto#L110}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::AutoscalerAggregatedList,google/cloud/compute/v1/internal/common.proto#L1342}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.AggregatedListAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L110}
  /// [google.cloud.cpp.compute.v1.AutoscalerAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L1342}
  ///
  StatusOr<google::cloud::cpp::compute::v1::AutoscalerAggregatedList>
  AggregatedListAutoscalers(google::cloud::cpp::compute::autoscalers::v1::
                                AggregatedListAutoscalersRequest const& request,
                            Options opts = {});

  ///
  /// Deletes the specified autoscaler.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone for this request.
  /// @param autoscaler  Name of the autoscaler to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.DeleteAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L184}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteAutoscalers(
      std::string const& project, std::string const& zone,
      std::string const& autoscaler, Options opts = {});

  ///
  /// Deletes the specified autoscaler.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::autoscalers::v1::DeleteAutoscalersRequest,google/cloud/compute/autoscalers/v1/autoscalers.proto#L184}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.DeleteAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L184}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteAutoscalers(
      google::cloud::cpp::compute::autoscalers::v1::
          DeleteAutoscalersRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified autoscaler resource.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone for this request.
  /// @param autoscaler  Name of the autoscaler to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Autoscaler,google/cloud/compute/v1/internal/common.proto#L1266}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.GetAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L214}
  /// [google.cloud.cpp.compute.v1.Autoscaler]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L1266}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Autoscaler> GetAutoscalers(
      std::string const& project, std::string const& zone,
      std::string const& autoscaler, Options opts = {});

  ///
  /// Returns the specified autoscaler resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::autoscalers::v1::GetAutoscalersRequest,google/cloud/compute/autoscalers/v1/autoscalers.proto#L214}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Autoscaler,google/cloud/compute/v1/internal/common.proto#L1266}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.GetAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L214}
  /// [google.cloud.cpp.compute.v1.Autoscaler]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L1266}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Autoscaler> GetAutoscalers(
      google::cloud::cpp::compute::autoscalers::v1::GetAutoscalersRequest const&
          request,
      Options opts = {});

  ///
  /// Creates an autoscaler in the specified project using the data included in
  /// the request.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone for this request.
  /// @param autoscaler_resource  The Autoscaler for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.InsertAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L226}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertAutoscalers(
      std::string const& project, std::string const& zone,
      google::cloud::cpp::compute::v1::Autoscaler const& autoscaler_resource,
      Options opts = {});

  ///
  /// Creates an autoscaler in the specified project using the data included in
  /// the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::autoscalers::v1::InsertAutoscalersRequest,google/cloud/compute/autoscalers/v1/autoscalers.proto#L226}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.InsertAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L226}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertAutoscalers(
      google::cloud::cpp::compute::autoscalers::v1::
          InsertAutoscalersRequest const& request,
      Options opts = {});

  ///
  /// Retrieves a list of autoscalers contained within the specified zone.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Autoscaler,google/cloud/compute/v1/internal/common.proto#L1266}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.ListAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L256}
  /// [google.cloud.cpp.compute.v1.Autoscaler]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L1266}
  ///
  StreamRange<google::cloud::cpp::compute::v1::Autoscaler> ListAutoscalers(
      std::string const& project, std::string const& zone, Options opts = {});

  ///
  /// Retrieves a list of autoscalers contained within the specified zone.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::autoscalers::v1::ListAutoscalersRequest,google/cloud/compute/autoscalers/v1/autoscalers.proto#L256}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Autoscaler,google/cloud/compute/v1/internal/common.proto#L1266}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.ListAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L256}
  /// [google.cloud.cpp.compute.v1.Autoscaler]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L1266}
  ///
  StreamRange<google::cloud::cpp::compute::v1::Autoscaler> ListAutoscalers(
      google::cloud::cpp::compute::autoscalers::v1::ListAutoscalersRequest
          request,
      Options opts = {});

  ///
  /// Updates an autoscaler in the specified project using the data included in
  /// the request. This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone for this request.
  /// @param autoscaler_resource  The Autoscaler for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.PatchAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L324}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchAutoscalers(
      std::string const& project, std::string const& zone,
      google::cloud::cpp::compute::v1::Autoscaler const& autoscaler_resource,
      Options opts = {});

  ///
  /// Updates an autoscaler in the specified project using the data included in
  /// the request. This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::autoscalers::v1::PatchAutoscalersRequest,google/cloud/compute/autoscalers/v1/autoscalers.proto#L324}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.PatchAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L324}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchAutoscalers(
      google::cloud::cpp::compute::autoscalers::v1::
          PatchAutoscalersRequest const& request,
      Options opts = {});

  ///
  /// Updates an autoscaler in the specified project using the data included in
  /// the request.
  ///
  /// @param project  Project ID for this request.
  /// @param zone  Name of the zone for this request.
  /// @param autoscaler_resource  The Autoscaler for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.UpdateAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L357}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> UpdateAutoscalers(
      std::string const& project, std::string const& zone,
      google::cloud::cpp::compute::v1::Autoscaler const& autoscaler_resource,
      Options opts = {});

  ///
  /// Updates an autoscaler in the specified project using the data included in
  /// the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::autoscalers::v1::UpdateAutoscalersRequest,google/cloud/compute/autoscalers/v1/autoscalers.proto#L357}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.autoscalers.v1.UpdateAutoscalersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/autoscalers/v1/autoscalers.proto#L357}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> UpdateAutoscalers(
      google::cloud::cpp::compute::autoscalers::v1::
          UpdateAutoscalersRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<AutoscalersConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_autoscalers_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_AUTOSCALERS_V1_AUTOSCALERS_CLIENT_H
