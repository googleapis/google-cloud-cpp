// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_VPN_GATEWAYS_V1_VPN_GATEWAYS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_VPN_GATEWAYS_V1_VPN_GATEWAYS_CLIENT_H

#include "google/cloud/compute/vpn_gateways/v1/vpn_gateways_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_vpn_gateways_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the vpnGateways resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/vpnGateways
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class VpnGatewaysClient {
 public:
  explicit VpnGatewaysClient(ExperimentalTag, std::shared_ptr<VpnGatewaysConnection> connection, Options opts = {});
  ~VpnGatewaysClient();

  ///@{
  /// @name Copy and move support
  VpnGatewaysClient(VpnGatewaysClient const&) = default;
  VpnGatewaysClient& operator=(VpnGatewaysClient const&) = default;
  VpnGatewaysClient(VpnGatewaysClient&&) = default;
  VpnGatewaysClient& operator=(VpnGatewaysClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(VpnGatewaysClient const& a, VpnGatewaysClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(VpnGatewaysClient const& a, VpnGatewaysClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves an aggregated list of VPN gateways.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::VpnGatewayAggregatedList,google/cloud/compute/v1/internal/common.proto#L29865}
  ///
  /// [google.cloud.cpp.compute.v1.VpnGatewayAggregatedList]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29865}
  /// [google.cloud.cpp.compute.vpnGateways.v1.AggregatedListVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L109}
  ///
  StatusOr<google::cloud::cpp::compute::v1::VpnGatewayAggregatedList>
  AggregatedListVpnGateways(std::string const& project, Options opts = {});

  ///
  /// Retrieves an aggregated list of VPN gateways.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::vpnGateways::v1::AggregatedListVpnGatewaysRequest,google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L109}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::VpnGatewayAggregatedList,google/cloud/compute/v1/internal/common.proto#L29865}
  ///
  /// [google.cloud.cpp.compute.v1.VpnGatewayAggregatedList]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29865}
  /// [google.cloud.cpp.compute.vpnGateways.v1.AggregatedListVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L109}
  ///
  StatusOr<google::cloud::cpp::compute::v1::VpnGatewayAggregatedList>
  AggregatedListVpnGateways(google::cloud::cpp::compute::vpnGateways::v1::AggregatedListVpnGatewaysRequest const& request, Options opts = {});

  ///
  /// Deletes the specified VPN gateway.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param vpn_gateway  Name of the VPN gateway to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  /// [google.cloud.cpp.compute.vpnGateways.v1.DeleteVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L183}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteVpnGateways(std::string const& project, std::string const& region, std::string const& vpn_gateway, Options opts = {});

  ///
  /// Deletes the specified VPN gateway.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::vpnGateways::v1::DeleteVpnGatewaysRequest,google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L183}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  /// [google.cloud.cpp.compute.vpnGateways.v1.DeleteVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L183}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteVpnGateways(google::cloud::cpp::compute::vpnGateways::v1::DeleteVpnGatewaysRequest const& request, Options opts = {});

  ///
  /// Returns the specified VPN gateway.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param vpn_gateway  Name of the VPN gateway to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::VpnGateway,google/cloud/compute/v1/internal/common.proto#L29806}
  ///
  /// [google.cloud.cpp.compute.v1.VpnGateway]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29806}
  /// [google.cloud.cpp.compute.vpnGateways.v1.GetVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L219}
  ///
  StatusOr<google::cloud::cpp::compute::v1::VpnGateway>
  GetVpnGateways(std::string const& project, std::string const& region, std::string const& vpn_gateway, Options opts = {});

  ///
  /// Returns the specified VPN gateway.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::vpnGateways::v1::GetVpnGatewaysRequest,google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L219}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::VpnGateway,google/cloud/compute/v1/internal/common.proto#L29806}
  ///
  /// [google.cloud.cpp.compute.v1.VpnGateway]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29806}
  /// [google.cloud.cpp.compute.vpnGateways.v1.GetVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L219}
  ///
  StatusOr<google::cloud::cpp::compute::v1::VpnGateway>
  GetVpnGateways(google::cloud::cpp::compute::vpnGateways::v1::GetVpnGatewaysRequest const& request, Options opts = {});

  ///
  /// Returns the status for the specified VPN gateway.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param vpn_gateway  Name of the VPN gateway to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::VpnGatewaysGetStatusResponse,google/cloud/compute/v1/internal/common.proto#L30159}
  ///
  /// [google.cloud.cpp.compute.v1.VpnGatewaysGetStatusResponse]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L30159}
  /// [google.cloud.cpp.compute.vpnGateways.v1.GetStatusRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L207}
  ///
  StatusOr<google::cloud::cpp::compute::v1::VpnGatewaysGetStatusResponse>
  GetStatus(std::string const& project, std::string const& region, std::string const& vpn_gateway, Options opts = {});

  ///
  /// Returns the status for the specified VPN gateway.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::vpnGateways::v1::GetStatusRequest,google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L207}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::VpnGatewaysGetStatusResponse,google/cloud/compute/v1/internal/common.proto#L30159}
  ///
  /// [google.cloud.cpp.compute.v1.VpnGatewaysGetStatusResponse]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L30159}
  /// [google.cloud.cpp.compute.vpnGateways.v1.GetStatusRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L207}
  ///
  StatusOr<google::cloud::cpp::compute::v1::VpnGatewaysGetStatusResponse>
  GetStatus(google::cloud::cpp::compute::vpnGateways::v1::GetStatusRequest const& request, Options opts = {});

  ///
  /// Creates a VPN gateway in the specified project and region using the data
  /// included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param vpn_gateway_resource  The VpnGateway for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  /// [google.cloud.cpp.compute.vpnGateways.v1.InsertVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L231}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertVpnGateways(std::string const& project, std::string const& region, google::cloud::cpp::compute::v1::VpnGateway const& vpn_gateway_resource, Options opts = {});

  ///
  /// Creates a VPN gateway in the specified project and region using the data
  /// included in the request.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::vpnGateways::v1::InsertVpnGatewaysRequest,google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L231}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  /// [google.cloud.cpp.compute.vpnGateways.v1.InsertVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L231}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertVpnGateways(google::cloud::cpp::compute::vpnGateways::v1::InsertVpnGatewaysRequest const& request, Options opts = {});

  ///
  /// Retrieves a list of VPN gateways available to the specified project and
  /// region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::VpnGateway,google/cloud/compute/v1/internal/common.proto#L29806}
  ///
  /// [google.cloud.cpp.compute.v1.VpnGateway]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29806}
  /// [google.cloud.cpp.compute.vpnGateways.v1.ListVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L255}
  ///
  StreamRange<google::cloud::cpp::compute::v1::VpnGateway>
  ListVpnGateways(std::string const& project, std::string const& region, Options opts = {});

  ///
  /// Retrieves a list of VPN gateways available to the specified project and
  /// region.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::vpnGateways::v1::ListVpnGatewaysRequest,google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L255}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::VpnGateway,google/cloud/compute/v1/internal/common.proto#L29806}
  ///
  /// [google.cloud.cpp.compute.v1.VpnGateway]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29806}
  /// [google.cloud.cpp.compute.vpnGateways.v1.ListVpnGatewaysRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L255}
  ///
  StreamRange<google::cloud::cpp::compute::v1::VpnGateway>
  ListVpnGateways(google::cloud::cpp::compute::vpnGateways::v1::ListVpnGatewaysRequest request, Options opts = {});

  ///
  /// Sets the labels on a VpnGateway. To learn more about labels, read the
  /// Labeling Resources documentation.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param region_set_labels_request_resource  The RegionSetLabelsRequest for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  /// [google.cloud.cpp.compute.vpnGateways.v1.SetLabelsRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L323}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  SetLabels(std::string const& project, std::string const& region, std::string const& resource, google::cloud::cpp::compute::v1::RegionSetLabelsRequest const& region_set_labels_request_resource, Options opts = {});

  ///
  /// Sets the labels on a VpnGateway. To learn more about labels, read the
  /// Labeling Resources documentation.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::vpnGateways::v1::SetLabelsRequest,google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L323}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  /// [google.cloud.cpp.compute.vpnGateways.v1.SetLabelsRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L323}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  SetLabels(google::cloud::cpp::compute::vpnGateways::v1::SetLabelsRequest const& request, Options opts = {});

  ///
  /// Returns permissions that a caller has on the specified resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param test_permissions_request_resource  The TestPermissionsRequest for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TestPermissionsResponse,google/cloud/compute/v1/internal/common.proto#L28901}
  ///
  /// [google.cloud.cpp.compute.v1.TestPermissionsResponse]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28901}
  /// [google.cloud.cpp.compute.vpnGateways.v1.TestIamPermissionsRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L350}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
  TestIamPermissions(std::string const& project, std::string const& region, std::string const& resource, google::cloud::cpp::compute::v1::TestPermissionsRequest const& test_permissions_request_resource, Options opts = {});

  ///
  /// Returns permissions that a caller has on the specified resource.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::vpnGateways::v1::TestIamPermissionsRequest,google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L350}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TestPermissionsResponse,google/cloud/compute/v1/internal/common.proto#L28901}
  ///
  /// [google.cloud.cpp.compute.v1.TestPermissionsResponse]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28901}
  /// [google.cloud.cpp.compute.vpnGateways.v1.TestIamPermissionsRequest]: @googleapis_reference_link{google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto#L350}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
  TestIamPermissions(google::cloud::cpp::compute::vpnGateways::v1::TestIamPermissionsRequest const& request, Options opts = {});

 private:
  std::shared_ptr<VpnGatewaysConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_vpn_gateways_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_VPN_GATEWAYS_V1_VPN_GATEWAYS_CLIENT_H
