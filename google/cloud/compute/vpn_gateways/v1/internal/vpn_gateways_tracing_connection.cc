// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/vpn_gateways/v1/vpn_gateways.proto

#include "google/cloud/compute/vpn_gateways/v1/internal/vpn_gateways_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_vpn_gateways_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

VpnGatewaysTracingConnection::VpnGatewaysTracingConnection(
    std::shared_ptr<compute_vpn_gateways_v1::VpnGatewaysConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::cpp::compute::v1::VpnGatewayAggregatedList>
VpnGatewaysTracingConnection::AggregatedListVpnGateways(
    google::cloud::cpp::compute::vpn_gateways::v1::
        AggregatedListVpnGatewaysRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_vpn_gateways_v1::VpnGatewaysConnection::"
      "AggregatedListVpnGateways");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->AggregatedListVpnGateways(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
VpnGatewaysTracingConnection::DeleteVpnGateways(
    google::cloud::cpp::compute::vpn_gateways::v1::
        DeleteVpnGatewaysRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_vpn_gateways_v1::VpnGatewaysConnection::DeleteVpnGateways");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteVpnGateways(request));
}

StatusOr<google::cloud::cpp::compute::v1::VpnGateway>
VpnGatewaysTracingConnection::GetVpnGateways(
    google::cloud::cpp::compute::vpn_gateways::v1::GetVpnGatewaysRequest const&
        request) {
  auto span = internal::MakeSpan(
      "compute_vpn_gateways_v1::VpnGatewaysConnection::GetVpnGateways");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVpnGateways(request));
}

StatusOr<google::cloud::cpp::compute::v1::VpnGatewaysGetStatusResponse>
VpnGatewaysTracingConnection::GetStatus(
    google::cloud::cpp::compute::vpn_gateways::v1::GetStatusRequest const&
        request) {
  auto span = internal::MakeSpan(
      "compute_vpn_gateways_v1::VpnGatewaysConnection::GetStatus");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetStatus(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
VpnGatewaysTracingConnection::InsertVpnGateways(
    google::cloud::cpp::compute::vpn_gateways::v1::
        InsertVpnGatewaysRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_vpn_gateways_v1::VpnGatewaysConnection::InsertVpnGateways");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->InsertVpnGateways(request));
}

StreamRange<google::cloud::cpp::compute::v1::VpnGateway>
VpnGatewaysTracingConnection::ListVpnGateways(
    google::cloud::cpp::compute::vpn_gateways::v1::ListVpnGatewaysRequest
        request) {
  auto span = internal::MakeSpan(
      "compute_vpn_gateways_v1::VpnGatewaysConnection::ListVpnGateways");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListVpnGateways(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::cpp::compute::v1::VpnGateway>(std::move(span),
                                                   std::move(sr));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
VpnGatewaysTracingConnection::SetLabels(
    google::cloud::cpp::compute::vpn_gateways::v1::SetLabelsRequest const&
        request) {
  auto span = internal::MakeSpan(
      "compute_vpn_gateways_v1::VpnGatewaysConnection::SetLabels");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->SetLabels(request));
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
VpnGatewaysTracingConnection::TestIamPermissions(
    google::cloud::cpp::compute::vpn_gateways::v1::
        TestIamPermissionsRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_vpn_gateways_v1::VpnGatewaysConnection::TestIamPermissions");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->TestIamPermissions(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<compute_vpn_gateways_v1::VpnGatewaysConnection>
MakeVpnGatewaysTracingConnection(
    std::shared_ptr<compute_vpn_gateways_v1::VpnGatewaysConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<VpnGatewaysTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_vpn_gateways_v1_internal
}  // namespace cloud
}  // namespace google
