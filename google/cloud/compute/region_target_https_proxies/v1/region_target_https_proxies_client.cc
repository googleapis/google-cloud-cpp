// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_target_https_proxies/v1/region_target_https_proxies.proto

#include "google/cloud/compute/region_target_https_proxies/v1/region_target_https_proxies_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_target_https_proxies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegionTargetHttpsProxiesClient::RegionTargetHttpsProxiesClient(ExperimentalTag,
    std::shared_ptr<RegionTargetHttpsProxiesConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(internal::MergeOptions(std::move(opts),
      connection_->options())) {}
RegionTargetHttpsProxiesClient::~RegionTargetHttpsProxiesClient() = default;

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::DeleteRegionTargetHttpsProxies(std::string const& project, std::string const& region, std::string const& target_https_proxy, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_target_https_proxies::v1::DeleteRegionTargetHttpsProxiesRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_target_https_proxy(target_https_proxy);
  return connection_->DeleteRegionTargetHttpsProxies(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::DeleteRegionTargetHttpsProxies(google::cloud::cpp::compute::region_target_https_proxies::v1::DeleteRegionTargetHttpsProxiesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteRegionTargetHttpsProxies(request);
}

StatusOr<google::cloud::cpp::compute::v1::TargetHttpsProxy>
RegionTargetHttpsProxiesClient::GetRegionTargetHttpsProxies(std::string const& project, std::string const& region, std::string const& target_https_proxy, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_target_https_proxies::v1::GetRegionTargetHttpsProxiesRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_target_https_proxy(target_https_proxy);
  return connection_->GetRegionTargetHttpsProxies(request);
}

StatusOr<google::cloud::cpp::compute::v1::TargetHttpsProxy>
RegionTargetHttpsProxiesClient::GetRegionTargetHttpsProxies(google::cloud::cpp::compute::region_target_https_proxies::v1::GetRegionTargetHttpsProxiesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRegionTargetHttpsProxies(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::InsertRegionTargetHttpsProxies(std::string const& project, std::string const& region, google::cloud::cpp::compute::v1::TargetHttpsProxy const& target_https_proxy_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_target_https_proxies::v1::InsertRegionTargetHttpsProxiesRequest request;
  request.set_project(project);
  request.set_region(region);
  *request.mutable_target_https_proxy_resource() = target_https_proxy_resource;
  return connection_->InsertRegionTargetHttpsProxies(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::InsertRegionTargetHttpsProxies(google::cloud::cpp::compute::region_target_https_proxies::v1::InsertRegionTargetHttpsProxiesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertRegionTargetHttpsProxies(request);
}

StreamRange<google::cloud::cpp::compute::v1::TargetHttpsProxy>
RegionTargetHttpsProxiesClient::ListRegionTargetHttpsProxies(std::string const& project, std::string const& region, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_target_https_proxies::v1::ListRegionTargetHttpsProxiesRequest request;
  request.set_project(project);
  request.set_region(region);
  return connection_->ListRegionTargetHttpsProxies(request);
}

StreamRange<google::cloud::cpp::compute::v1::TargetHttpsProxy>
RegionTargetHttpsProxiesClient::ListRegionTargetHttpsProxies(google::cloud::cpp::compute::region_target_https_proxies::v1::ListRegionTargetHttpsProxiesRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRegionTargetHttpsProxies(std::move(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::PatchRegionTargetHttpsProxies(std::string const& project, std::string const& region, std::string const& target_https_proxy, google::cloud::cpp::compute::v1::TargetHttpsProxy const& target_https_proxy_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_target_https_proxies::v1::PatchRegionTargetHttpsProxiesRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_target_https_proxy(target_https_proxy);
  *request.mutable_target_https_proxy_resource() = target_https_proxy_resource;
  return connection_->PatchRegionTargetHttpsProxies(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::PatchRegionTargetHttpsProxies(google::cloud::cpp::compute::region_target_https_proxies::v1::PatchRegionTargetHttpsProxiesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchRegionTargetHttpsProxies(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::SetSslCertificates(std::string const& project, std::string const& region, std::string const& target_https_proxy, google::cloud::cpp::compute::v1::RegionTargetHttpsProxiesSetSslCertificatesRequest const& region_target_https_proxies_set_ssl_certificates_request_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_target_https_proxies::v1::SetSslCertificatesRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_target_https_proxy(target_https_proxy);
  *request.mutable_region_target_https_proxies_set_ssl_certificates_request_resource() = region_target_https_proxies_set_ssl_certificates_request_resource;
  return connection_->SetSslCertificates(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::SetSslCertificates(google::cloud::cpp::compute::region_target_https_proxies::v1::SetSslCertificatesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SetSslCertificates(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::SetUrlMap(std::string const& project, std::string const& region, std::string const& target_https_proxy, google::cloud::cpp::compute::v1::UrlMapReference const& url_map_reference_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_target_https_proxies::v1::SetUrlMapRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_target_https_proxy(target_https_proxy);
  *request.mutable_url_map_reference_resource() = url_map_reference_resource;
  return connection_->SetUrlMap(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionTargetHttpsProxiesClient::SetUrlMap(google::cloud::cpp::compute::region_target_https_proxies::v1::SetUrlMapRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SetUrlMap(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_target_https_proxies_v1
}  // namespace cloud
}  // namespace google
