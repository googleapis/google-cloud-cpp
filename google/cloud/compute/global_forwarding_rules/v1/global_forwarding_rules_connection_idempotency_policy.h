// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_GLOBAL_FORWARDING_RULES_V1_GLOBAL_FORWARDING_RULES_CONNECTION_IDEMPOTENCY_POLICY_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_GLOBAL_FORWARDING_RULES_V1_GLOBAL_FORWARDING_RULES_CONNECTION_IDEMPOTENCY_POLICY_H

#include "google/cloud/idempotency.h"
#include "google/cloud/internal/retry_policy.h"
#include "google/cloud/version.h"
#include <google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_global_forwarding_rules_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class GlobalForwardingRulesConnectionIdempotencyPolicy {
 public:
  virtual ~GlobalForwardingRulesConnectionIdempotencyPolicy();

  /// Create a new copy of this object.
  virtual std::unique_ptr<GlobalForwardingRulesConnectionIdempotencyPolicy>
  clone() const;

  virtual google::cloud::Idempotency DeleteGlobalForwardingRules(
      google::cloud::cpp::compute::global_forwarding_rules::v1::
          DeleteGlobalForwardingRulesRequest const& request);

  virtual google::cloud::Idempotency GetGlobalForwardingRules(
      google::cloud::cpp::compute::global_forwarding_rules::v1::
          GetGlobalForwardingRulesRequest const& request);

  virtual google::cloud::Idempotency InsertGlobalForwardingRules(
      google::cloud::cpp::compute::global_forwarding_rules::v1::
          InsertGlobalForwardingRulesRequest const& request);

  virtual google::cloud::Idempotency ListGlobalForwardingRules(
      google::cloud::cpp::compute::global_forwarding_rules::v1::
          ListGlobalForwardingRulesRequest request);

  virtual google::cloud::Idempotency PatchGlobalForwardingRules(
      google::cloud::cpp::compute::global_forwarding_rules::v1::
          PatchGlobalForwardingRulesRequest const& request);

  virtual google::cloud::Idempotency SetLabels(
      google::cloud::cpp::compute::global_forwarding_rules::v1::
          SetLabelsRequest const& request);

  virtual google::cloud::Idempotency SetTarget(
      google::cloud::cpp::compute::global_forwarding_rules::v1::
          SetTargetRequest const& request);
};

std::unique_ptr<GlobalForwardingRulesConnectionIdempotencyPolicy>
MakeDefaultGlobalForwardingRulesConnectionIdempotencyPolicy();

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_global_forwarding_rules_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_GLOBAL_FORWARDING_RULES_V1_GLOBAL_FORWARDING_RULES_CONNECTION_IDEMPOTENCY_POLICY_H
