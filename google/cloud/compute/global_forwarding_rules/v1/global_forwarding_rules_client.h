// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_GLOBAL_FORWARDING_RULES_V1_GLOBAL_FORWARDING_RULES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_GLOBAL_FORWARDING_RULES_V1_GLOBAL_FORWARDING_RULES_CLIENT_H

#include "google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_global_forwarding_rules_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the globalForwardingRules resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/globalForwardingRules
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class GlobalForwardingRulesClient {
 public:
  explicit GlobalForwardingRulesClient(
      ExperimentalTag,
      std::shared_ptr<GlobalForwardingRulesConnection> connection,
      Options opts = {});
  ~GlobalForwardingRulesClient();

  ///@{
  /// @name Copy and move support
  GlobalForwardingRulesClient(GlobalForwardingRulesClient const&) = default;
  GlobalForwardingRulesClient& operator=(GlobalForwardingRulesClient const&) =
      default;
  GlobalForwardingRulesClient(GlobalForwardingRulesClient&&) = default;
  GlobalForwardingRulesClient& operator=(GlobalForwardingRulesClient&&) =
      default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(GlobalForwardingRulesClient const& a,
                         GlobalForwardingRulesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(GlobalForwardingRulesClient const& a,
                         GlobalForwardingRulesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified GlobalForwardingRule resource.
  ///
  /// @param project  Project ID for this request.
  /// @param forwarding_rule  Name of the ForwardingRule resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.DeleteGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L119}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteGlobalForwardingRules(std::string const& project,
                              std::string const& forwarding_rule,
                              Options opts = {});

  ///
  /// Deletes the specified GlobalForwardingRule resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::globalForwardingRules::v1::DeleteGlobalForwardingRulesRequest,google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L119}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.DeleteGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L119}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteGlobalForwardingRules(
      google::cloud::cpp::compute::globalForwardingRules::v1::
          DeleteGlobalForwardingRulesRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified GlobalForwardingRule resource. Gets a list of
  /// available forwarding rules by making a list() request.
  ///
  /// @param project  Project ID for this request.
  /// @param forwarding_rule  Name of the ForwardingRule resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRule,google/cloud/compute/v1/internal/common.proto#L6344}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.GetGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L143}
  /// [google.cloud.cpp.compute.v1.ForwardingRule]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6344}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ForwardingRule>
  GetGlobalForwardingRules(std::string const& project,
                           std::string const& forwarding_rule,
                           Options opts = {});

  ///
  /// Returns the specified GlobalForwardingRule resource. Gets a list of
  /// available forwarding rules by making a list() request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::globalForwardingRules::v1::GetGlobalForwardingRulesRequest,google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L143}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRule,google/cloud/compute/v1/internal/common.proto#L6344}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.GetGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L143}
  /// [google.cloud.cpp.compute.v1.ForwardingRule]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6344}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ForwardingRule>
  GetGlobalForwardingRules(
      google::cloud::cpp::compute::globalForwardingRules::v1::
          GetGlobalForwardingRulesRequest const& request,
      Options opts = {});

  ///
  /// Creates a GlobalForwardingRule resource in the specified project using the
  /// data included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param forwarding_rule_resource  The ForwardingRule for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.InsertGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L152}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertGlobalForwardingRules(
      std::string const& project,
      google::cloud::cpp::compute::v1::ForwardingRule const&
          forwarding_rule_resource,
      Options opts = {});

  ///
  /// Creates a GlobalForwardingRule resource in the specified project using the
  /// data included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::globalForwardingRules::v1::InsertGlobalForwardingRulesRequest,google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L152}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.InsertGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L152}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertGlobalForwardingRules(
      google::cloud::cpp::compute::globalForwardingRules::v1::
          InsertGlobalForwardingRulesRequest const& request,
      Options opts = {});

  ///
  /// Retrieves a list of GlobalForwardingRule resources available to the
  /// specified project.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRule,google/cloud/compute/v1/internal/common.proto#L6344}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.ListGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L177}
  /// [google.cloud.cpp.compute.v1.ForwardingRule]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6344}
  ///
  StreamRange<google::cloud::cpp::compute::v1::ForwardingRule>
  ListGlobalForwardingRules(std::string const& project, Options opts = {});

  ///
  /// Retrieves a list of GlobalForwardingRule resources available to the
  /// specified project.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::globalForwardingRules::v1::ListGlobalForwardingRulesRequest,google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L177}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRule,google/cloud/compute/v1/internal/common.proto#L6344}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.ListGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L177}
  /// [google.cloud.cpp.compute.v1.ForwardingRule]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6344}
  ///
  StreamRange<google::cloud::cpp::compute::v1::ForwardingRule>
  ListGlobalForwardingRules(google::cloud::cpp::compute::globalForwardingRules::
                                v1::ListGlobalForwardingRulesRequest request,
                            Options opts = {});

  ///
  /// Updates the specified forwarding rule with the data included in the
  /// request. This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules. Currently, you can only patch the
  /// network_tier field.
  ///
  /// @param project  Project ID for this request.
  /// @param forwarding_rule  Name of the ForwardingRule resource to patch.
  /// @param forwarding_rule_resource  The ForwardingRule for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.PatchGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L242}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchGlobalForwardingRules(
      std::string const& project, std::string const& forwarding_rule,
      google::cloud::cpp::compute::v1::ForwardingRule const&
          forwarding_rule_resource,
      Options opts = {});

  ///
  /// Updates the specified forwarding rule with the data included in the
  /// request. This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules. Currently, you can only patch the
  /// network_tier field.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::globalForwardingRules::v1::PatchGlobalForwardingRulesRequest,google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L242}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.PatchGlobalForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L242}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchGlobalForwardingRules(
      google::cloud::cpp::compute::globalForwardingRules::v1::
          PatchGlobalForwardingRulesRequest const& request,
      Options opts = {});

  ///
  /// Sets the labels on the specified resource. To learn more about labels,
  /// read the Labeling resources documentation.
  ///
  /// @param project  Project ID for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param global_set_labels_request_resource  The GlobalSetLabelsRequest for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.SetLabelsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L270}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetLabels(
      std::string const& project, std::string const& resource,
      google::cloud::cpp::compute::v1::GlobalSetLabelsRequest const&
          global_set_labels_request_resource,
      Options opts = {});

  ///
  /// Sets the labels on the specified resource. To learn more about labels,
  /// read the Labeling resources documentation.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::globalForwardingRules::v1::SetLabelsRequest,google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L270}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.SetLabelsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L270}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetLabels(
      google::cloud::cpp::compute::globalForwardingRules::v1::
          SetLabelsRequest const& request,
      Options opts = {});

  ///
  /// Changes target URL for the GlobalForwardingRule resource. The new target
  /// should be of the same type as the old target.
  ///
  /// @param project  Project ID for this request.
  /// @param forwarding_rule  Name of the ForwardingRule resource in which
  /// target is to be set.
  /// @param target_reference_resource  The TargetReference for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.SetTargetRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L286}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetTarget(
      std::string const& project, std::string const& forwarding_rule,
      google::cloud::cpp::compute::v1::TargetReference const&
          target_reference_resource,
      Options opts = {});

  ///
  /// Changes target URL for the GlobalForwardingRule resource. The new target
  /// should be of the same type as the old target.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::globalForwardingRules::v1::SetTargetRequest,google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L286}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.globalForwardingRules.v1.SetTargetRequest]:
  /// @googleapis_reference_link{google/cloud/compute/global_forwarding_rules/v1/global_forwarding_rules.proto#L286}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetTarget(
      google::cloud::cpp::compute::globalForwardingRules::v1::
          SetTargetRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<GlobalForwardingRulesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_global_forwarding_rules_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_GLOBAL_FORWARDING_RULES_V1_GLOBAL_FORWARDING_RULES_CLIENT_H
