// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/firewalls/v1/firewalls.proto

#include "google/cloud/compute/firewalls/v1/firewalls_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_firewalls_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

FirewallsClient::FirewallsClient(ExperimentalTag,
    std::shared_ptr<FirewallsConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(internal::MergeOptions(std::move(opts),
      connection_->options())) {}
FirewallsClient::~FirewallsClient() = default;

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallsClient::DeleteFirewalls(std::string const& project, std::string const& firewall, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::firewalls::v1::DeleteFirewallsRequest request;
  request.set_project(project);
  request.set_firewall(firewall);
  return connection_->DeleteFirewalls(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallsClient::DeleteFirewalls(google::cloud::cpp::compute::firewalls::v1::DeleteFirewallsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteFirewalls(request);
}

StatusOr<google::cloud::cpp::compute::v1::Firewall>
FirewallsClient::GetFirewalls(std::string const& project, std::string const& firewall, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::firewalls::v1::GetFirewallsRequest request;
  request.set_project(project);
  request.set_firewall(firewall);
  return connection_->GetFirewalls(request);
}

StatusOr<google::cloud::cpp::compute::v1::Firewall>
FirewallsClient::GetFirewalls(google::cloud::cpp::compute::firewalls::v1::GetFirewallsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetFirewalls(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallsClient::InsertFirewalls(std::string const& project, google::cloud::cpp::compute::v1::Firewall const& firewall_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::firewalls::v1::InsertFirewallsRequest request;
  request.set_project(project);
  *request.mutable_firewall_resource() = firewall_resource;
  return connection_->InsertFirewalls(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallsClient::InsertFirewalls(google::cloud::cpp::compute::firewalls::v1::InsertFirewallsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertFirewalls(request);
}

StreamRange<google::cloud::cpp::compute::v1::Firewall>
FirewallsClient::ListFirewalls(std::string const& project, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::firewalls::v1::ListFirewallsRequest request;
  request.set_project(project);
  return connection_->ListFirewalls(request);
}

StreamRange<google::cloud::cpp::compute::v1::Firewall>
FirewallsClient::ListFirewalls(google::cloud::cpp::compute::firewalls::v1::ListFirewallsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListFirewalls(std::move(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallsClient::PatchFirewalls(std::string const& project, std::string const& firewall, google::cloud::cpp::compute::v1::Firewall const& firewall_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::firewalls::v1::PatchFirewallsRequest request;
  request.set_project(project);
  request.set_firewall(firewall);
  *request.mutable_firewall_resource() = firewall_resource;
  return connection_->PatchFirewalls(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallsClient::PatchFirewalls(google::cloud::cpp::compute::firewalls::v1::PatchFirewallsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchFirewalls(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallsClient::UpdateFirewalls(std::string const& project, std::string const& firewall, google::cloud::cpp::compute::v1::Firewall const& firewall_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::firewalls::v1::UpdateFirewallsRequest request;
  request.set_project(project);
  request.set_firewall(firewall);
  *request.mutable_firewall_resource() = firewall_resource;
  return connection_->UpdateFirewalls(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallsClient::UpdateFirewalls(google::cloud::cpp::compute::firewalls::v1::UpdateFirewallsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateFirewalls(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_firewalls_v1
}  // namespace cloud
}  // namespace google
