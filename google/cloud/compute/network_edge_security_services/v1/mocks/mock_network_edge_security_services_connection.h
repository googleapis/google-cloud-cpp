// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/network_edge_security_services/v1/network_edge_security_services.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_NETWORK_EDGE_SECURITY_SERVICES_V1_MOCKS_MOCK_NETWORK_EDGE_SECURITY_SERVICES_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_NETWORK_EDGE_SECURITY_SERVICES_V1_MOCKS_MOCK_NETWORK_EDGE_SECURITY_SERVICES_CONNECTION_H

#include "google/cloud/compute/network_edge_security_services/v1/network_edge_security_services_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace compute_network_edge_security_services_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `NetworkEdgeSecurityServicesConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `NetworkEdgeSecurityServicesClient`.
 * To do so, construct an object of type `NetworkEdgeSecurityServicesClient`
 * with an instance of this class. Then use the Google Test framework functions
 * to program the behavior of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockNetworkEdgeSecurityServicesConnection
    : public compute_network_edge_security_services_v1::
          NetworkEdgeSecurityServicesConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::compute::v1::
                   NetworkEdgeSecurityServiceAggregatedList>,
      AggregatedListNetworkEdgeSecurityServices,
      (google::cloud::cpp::compute::network_edge_security_services::v1::
           AggregatedListNetworkEdgeSecurityServicesRequest const& request),
      (override));

  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              DeleteNetworkEdgeSecurityService,
              (google::cloud::cpp::compute::network_edge_security_services::v1::
                   DeleteNetworkEdgeSecurityServiceRequest const& request),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::compute::v1::NetworkEdgeSecurityService>,
      GetNetworkEdgeSecurityService,
      (google::cloud::cpp::compute::network_edge_security_services::v1::
           GetNetworkEdgeSecurityServiceRequest const& request),
      (override));

  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              InsertNetworkEdgeSecurityService,
              (google::cloud::cpp::compute::network_edge_security_services::v1::
                   InsertNetworkEdgeSecurityServiceRequest const& request),
              (override));

  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              PatchNetworkEdgeSecurityService,
              (google::cloud::cpp::compute::network_edge_security_services::v1::
                   PatchNetworkEdgeSecurityServiceRequest const& request),
              (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_network_edge_security_services_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_NETWORK_EDGE_SECURITY_SERVICES_V1_MOCKS_MOCK_NETWORK_EDGE_SECURITY_SERVICES_CONNECTION_H
