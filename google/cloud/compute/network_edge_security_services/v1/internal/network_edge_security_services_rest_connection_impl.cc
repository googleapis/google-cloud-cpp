// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/network_edge_security_services/v1/network_edge_security_services.proto

#include "google/cloud/compute/network_edge_security_services/v1/internal/network_edge_security_services_rest_connection_impl.h"
#include "google/cloud/common_options.h"
#include "google/cloud/compute/network_edge_security_services/v1/internal/network_edge_security_services_rest_stub_factory.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_network_edge_security_services_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

NetworkEdgeSecurityServicesRestConnectionImpl::NetworkEdgeSecurityServicesRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<compute_network_edge_security_services_v1_internal::NetworkEdgeSecurityServicesRestStub> stub,
    Options options)
  : background_(std::move(background)), stub_(std::move(stub)),
    options_(internal::MergeOptions(
        std::move(options),
        NetworkEdgeSecurityServicesConnection::options())) {}

StatusOr<google::cloud::cpp::compute::v1::NetworkEdgeSecurityServiceAggregatedList>
NetworkEdgeSecurityServicesRestConnectionImpl::AggregatedListNetworkEdgeSecurityServices(google::cloud::cpp::compute::networkEdgeSecurityServices::v1::AggregatedListNetworkEdgeSecurityServicesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AggregatedListNetworkEdgeSecurityServices(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::networkEdgeSecurityServices::v1::AggregatedListNetworkEdgeSecurityServicesRequest const& request) {
        return stub_->AggregatedListNetworkEdgeSecurityServices(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworkEdgeSecurityServicesRestConnectionImpl::DeleteNetworkEdgeSecurityServices(google::cloud::cpp::compute::networkEdgeSecurityServices::v1::DeleteNetworkEdgeSecurityServicesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteNetworkEdgeSecurityServices(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::networkEdgeSecurityServices::v1::DeleteNetworkEdgeSecurityServicesRequest const& request) {
        return stub_->DeleteNetworkEdgeSecurityServices(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::NetworkEdgeSecurityService>
NetworkEdgeSecurityServicesRestConnectionImpl::GetNetworkEdgeSecurityServices(google::cloud::cpp::compute::networkEdgeSecurityServices::v1::GetNetworkEdgeSecurityServicesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetNetworkEdgeSecurityServices(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::networkEdgeSecurityServices::v1::GetNetworkEdgeSecurityServicesRequest const& request) {
        return stub_->GetNetworkEdgeSecurityServices(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworkEdgeSecurityServicesRestConnectionImpl::InsertNetworkEdgeSecurityServices(google::cloud::cpp::compute::networkEdgeSecurityServices::v1::InsertNetworkEdgeSecurityServicesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->InsertNetworkEdgeSecurityServices(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::networkEdgeSecurityServices::v1::InsertNetworkEdgeSecurityServicesRequest const& request) {
        return stub_->InsertNetworkEdgeSecurityServices(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworkEdgeSecurityServicesRestConnectionImpl::PatchNetworkEdgeSecurityServices(google::cloud::cpp::compute::networkEdgeSecurityServices::v1::PatchNetworkEdgeSecurityServicesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->PatchNetworkEdgeSecurityServices(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::networkEdgeSecurityServices::v1::PatchNetworkEdgeSecurityServicesRequest const& request) {
        return stub_->PatchNetworkEdgeSecurityServices(rest_context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_network_edge_security_services_v1_internal
}  // namespace cloud
}  // namespace google
