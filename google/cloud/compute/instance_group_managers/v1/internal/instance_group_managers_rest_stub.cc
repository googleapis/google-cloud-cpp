// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/instance_group_managers/v1/instance_group_managers.proto

#include "google/cloud/compute/instance_group_managers/v1/internal/instance_group_managers_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/instance_group_managers/v1/instance_group_managers.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_instance_group_managers_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultInstanceGroupManagersRestStub::DefaultInstanceGroupManagersRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultInstanceGroupManagersRestStub::DefaultInstanceGroupManagersRestStub(
    std::shared_ptr<rest_internal::RestClient> service,
    Options options)
    : service_(std::move(service)),
      options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::AbandonInstances(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::AbandonInstancesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/abandonInstances");
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManagerAggregatedList>
DefaultInstanceGroupManagersRestStub::AggregatedListInstanceGroupManagers(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::AggregatedListInstanceGroupManagersRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::InstanceGroupManagerAggregatedList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/aggregated/instanceGroupManagers",
      {std::make_pair("filter", request.filter()),
       std::make_pair("include_all_scopes", std::to_string(request.include_all_scopes())),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::ApplyUpdatesToInstances(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::ApplyUpdatesToInstancesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/applyUpdatesToInstances");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::CreateInstances(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::CreateInstancesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/createInstances");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::DeleteInstanceGroupManagers(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::DeleteInstanceGroupManagersRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::DeleteInstances(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::DeleteInstancesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/deleteInstances");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::DeletePerInstanceConfigs(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::DeletePerInstanceConfigsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/deletePerInstanceConfigs");
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManager>
DefaultInstanceGroupManagersRestStub::GetInstanceGroupManagers(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::GetInstanceGroupManagersRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::InstanceGroupManager>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}",
      {std::make_pair("instance_group_manager", request.instance_group_manager()),
       std::make_pair("project", request.project()),
       std::make_pair("zone", request.zone())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::InsertInstanceGroupManagers(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::InsertInstanceGroupManagersRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers");
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManagerList>
DefaultInstanceGroupManagersRestStub::ListInstanceGroupManagers(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::ListInstanceGroupManagersRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::InstanceGroupManagerList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success())),
       std::make_pair("zone", request.zone())});
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManagersListErrorsResponse>
DefaultInstanceGroupManagersRestStub::ListErrors(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::ListErrorsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::InstanceGroupManagersListErrorsResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/listErrors",
      {std::make_pair("filter", request.filter()),
       std::make_pair("instance_group_manager", request.instance_group_manager()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success())),
       std::make_pair("zone", request.zone())});
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManagersListManagedInstancesResponse>
DefaultInstanceGroupManagersRestStub::ListManagedInstances(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::ListManagedInstancesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::InstanceGroupManagersListManagedInstancesResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/listManagedInstances");
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManagersListPerInstanceConfigsResp>
DefaultInstanceGroupManagersRestStub::ListPerInstanceConfigs(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::ListPerInstanceConfigsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::InstanceGroupManagersListPerInstanceConfigsResp>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/listPerInstanceConfigs");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::PatchInstanceGroupManagers(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::PatchInstanceGroupManagersRequest const& request) {
  return rest_internal::Patch<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::PatchPerInstanceConfigs(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::PatchPerInstanceConfigsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/patchPerInstanceConfigs");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::RecreateInstances(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::RecreateInstancesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/recreateInstances");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::Resize(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::ResizeRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/resize");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::SetInstanceTemplate(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::SetInstanceTemplateRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/setInstanceTemplate");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::SetTargetPools(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::SetTargetPoolsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/setTargetPools");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInstanceGroupManagersRestStub::UpdatePerInstanceConfigs(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::instanceGroupManagers::v1::UpdatePerInstanceConfigsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/updatePerInstanceConfigs");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_instance_group_managers_v1_internal
}  // namespace cloud
}  // namespace google
