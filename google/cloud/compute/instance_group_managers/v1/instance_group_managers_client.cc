// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/instance_group_managers/v1/instance_group_managers.proto

#include "google/cloud/compute/instance_group_managers/v1/instance_group_managers_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_instance_group_managers_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

InstanceGroupManagersClient::InstanceGroupManagersClient(ExperimentalTag,
    std::shared_ptr<InstanceGroupManagersConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(internal::MergeOptions(std::move(opts),
      connection_->options())) {}
InstanceGroupManagersClient::~InstanceGroupManagersClient() = default;

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::AbandonInstances(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersAbandonInstancesRequest const& instance_group_managers_abandon_instances_request_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::AbandonInstancesRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_abandon_instances_request_resource() = instance_group_managers_abandon_instances_request_resource;
  return connection_->AbandonInstances(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::AbandonInstances(google::cloud::cpp::compute::instance_group_managers::v1::AbandonInstancesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->AbandonInstances(request);
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManagerAggregatedList>
InstanceGroupManagersClient::AggregatedListInstanceGroupManagers(std::string const& project, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::AggregatedListInstanceGroupManagersRequest request;
  request.set_project(project);
  return connection_->AggregatedListInstanceGroupManagers(request);
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManagerAggregatedList>
InstanceGroupManagersClient::AggregatedListInstanceGroupManagers(google::cloud::cpp::compute::instance_group_managers::v1::AggregatedListInstanceGroupManagersRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->AggregatedListInstanceGroupManagers(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::ApplyUpdatesToInstances(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersApplyUpdatesRequest const& instance_group_managers_apply_updates_request_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::ApplyUpdatesToInstancesRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_apply_updates_request_resource() = instance_group_managers_apply_updates_request_resource;
  return connection_->ApplyUpdatesToInstances(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::ApplyUpdatesToInstances(google::cloud::cpp::compute::instance_group_managers::v1::ApplyUpdatesToInstancesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ApplyUpdatesToInstances(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::CreateInstances(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersCreateInstancesRequest const& instance_group_managers_create_instances_request_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::CreateInstancesRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_create_instances_request_resource() = instance_group_managers_create_instances_request_resource;
  return connection_->CreateInstances(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::CreateInstances(google::cloud::cpp::compute::instance_group_managers::v1::CreateInstancesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateInstances(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::DeleteInstanceGroupManagers(std::string const& project, std::string const& zone, std::string const& instance_group_manager, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::DeleteInstanceGroupManagersRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  return connection_->DeleteInstanceGroupManagers(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::DeleteInstanceGroupManagers(google::cloud::cpp::compute::instance_group_managers::v1::DeleteInstanceGroupManagersRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteInstanceGroupManagers(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::DeleteInstances(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersDeleteInstancesRequest const& instance_group_managers_delete_instances_request_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::DeleteInstancesRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_delete_instances_request_resource() = instance_group_managers_delete_instances_request_resource;
  return connection_->DeleteInstances(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::DeleteInstances(google::cloud::cpp::compute::instance_group_managers::v1::DeleteInstancesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteInstances(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::DeletePerInstanceConfigs(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersDeletePerInstanceConfigsReq const& instance_group_managers_delete_per_instance_configs_req_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::DeletePerInstanceConfigsRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_delete_per_instance_configs_req_resource() = instance_group_managers_delete_per_instance_configs_req_resource;
  return connection_->DeletePerInstanceConfigs(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::DeletePerInstanceConfigs(google::cloud::cpp::compute::instance_group_managers::v1::DeletePerInstanceConfigsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePerInstanceConfigs(request);
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManager>
InstanceGroupManagersClient::GetInstanceGroupManagers(std::string const& project, std::string const& zone, std::string const& instance_group_manager, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::GetInstanceGroupManagersRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  return connection_->GetInstanceGroupManagers(request);
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManager>
InstanceGroupManagersClient::GetInstanceGroupManagers(google::cloud::cpp::compute::instance_group_managers::v1::GetInstanceGroupManagersRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetInstanceGroupManagers(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::InsertInstanceGroupManagers(std::string const& project, std::string const& zone, google::cloud::cpp::compute::v1::InstanceGroupManager const& instance_group_manager_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::InsertInstanceGroupManagersRequest request;
  request.set_project(project);
  request.set_zone(zone);
  *request.mutable_instance_group_manager_resource() = instance_group_manager_resource;
  return connection_->InsertInstanceGroupManagers(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::InsertInstanceGroupManagers(google::cloud::cpp::compute::instance_group_managers::v1::InsertInstanceGroupManagersRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertInstanceGroupManagers(request);
}

StreamRange<google::cloud::cpp::compute::v1::InstanceGroupManager>
InstanceGroupManagersClient::ListInstanceGroupManagers(std::string const& project, std::string const& zone, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::ListInstanceGroupManagersRequest request;
  request.set_project(project);
  request.set_zone(zone);
  return connection_->ListInstanceGroupManagers(request);
}

StreamRange<google::cloud::cpp::compute::v1::InstanceGroupManager>
InstanceGroupManagersClient::ListInstanceGroupManagers(google::cloud::cpp::compute::instance_group_managers::v1::ListInstanceGroupManagersRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListInstanceGroupManagers(std::move(request));
}

StreamRange<google::cloud::cpp::compute::v1::InstanceManagedByIgmError>
InstanceGroupManagersClient::ListErrors(std::string const& project, std::string const& zone, std::string const& instance_group_manager, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::ListErrorsRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  return connection_->ListErrors(request);
}

StreamRange<google::cloud::cpp::compute::v1::InstanceManagedByIgmError>
InstanceGroupManagersClient::ListErrors(google::cloud::cpp::compute::instance_group_managers::v1::ListErrorsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListErrors(std::move(request));
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManagersListManagedInstancesResponse>
InstanceGroupManagersClient::ListManagedInstances(std::string const& project, std::string const& zone, std::string const& instance_group_manager, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::ListManagedInstancesRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  return connection_->ListManagedInstances(request);
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManagersListManagedInstancesResponse>
InstanceGroupManagersClient::ListManagedInstances(google::cloud::cpp::compute::instance_group_managers::v1::ListManagedInstancesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListManagedInstances(request);
}

StreamRange<google::cloud::cpp::compute::v1::PerInstanceConfig>
InstanceGroupManagersClient::ListPerInstanceConfigs(std::string const& project, std::string const& zone, std::string const& instance_group_manager, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::ListPerInstanceConfigsRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  return connection_->ListPerInstanceConfigs(request);
}

StreamRange<google::cloud::cpp::compute::v1::PerInstanceConfig>
InstanceGroupManagersClient::ListPerInstanceConfigs(google::cloud::cpp::compute::instance_group_managers::v1::ListPerInstanceConfigsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListPerInstanceConfigs(std::move(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::PatchInstanceGroupManagers(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManager const& instance_group_manager_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::PatchInstanceGroupManagersRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_manager_resource() = instance_group_manager_resource;
  return connection_->PatchInstanceGroupManagers(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::PatchInstanceGroupManagers(google::cloud::cpp::compute::instance_group_managers::v1::PatchInstanceGroupManagersRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchInstanceGroupManagers(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::PatchPerInstanceConfigs(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersPatchPerInstanceConfigsReq const& instance_group_managers_patch_per_instance_configs_req_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::PatchPerInstanceConfigsRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_patch_per_instance_configs_req_resource() = instance_group_managers_patch_per_instance_configs_req_resource;
  return connection_->PatchPerInstanceConfigs(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::PatchPerInstanceConfigs(google::cloud::cpp::compute::instance_group_managers::v1::PatchPerInstanceConfigsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchPerInstanceConfigs(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::RecreateInstances(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersRecreateInstancesRequest const& instance_group_managers_recreate_instances_request_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::RecreateInstancesRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_recreate_instances_request_resource() = instance_group_managers_recreate_instances_request_resource;
  return connection_->RecreateInstances(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::RecreateInstances(google::cloud::cpp::compute::instance_group_managers::v1::RecreateInstancesRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->RecreateInstances(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::Resize(std::string const& project, std::string const& zone, std::string const& instance_group_manager, std::int32_t size, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::ResizeRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  request.set_size(size);
  return connection_->Resize(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::Resize(google::cloud::cpp::compute::instance_group_managers::v1::ResizeRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->Resize(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::SetInstanceTemplate(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersSetInstanceTemplateRequest const& instance_group_managers_set_instance_template_request_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::SetInstanceTemplateRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_set_instance_template_request_resource() = instance_group_managers_set_instance_template_request_resource;
  return connection_->SetInstanceTemplate(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::SetInstanceTemplate(google::cloud::cpp::compute::instance_group_managers::v1::SetInstanceTemplateRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SetInstanceTemplate(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::SetTargetPools(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersSetTargetPoolsRequest const& instance_group_managers_set_target_pools_request_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::SetTargetPoolsRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_set_target_pools_request_resource() = instance_group_managers_set_target_pools_request_resource;
  return connection_->SetTargetPools(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::SetTargetPools(google::cloud::cpp::compute::instance_group_managers::v1::SetTargetPoolsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SetTargetPools(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::UpdatePerInstanceConfigs(std::string const& project, std::string const& zone, std::string const& instance_group_manager, google::cloud::cpp::compute::v1::InstanceGroupManagersUpdatePerInstanceConfigsReq const& instance_group_managers_update_per_instance_configs_req_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::instance_group_managers::v1::UpdatePerInstanceConfigsRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_instance_group_manager(instance_group_manager);
  *request.mutable_instance_group_managers_update_per_instance_configs_req_resource() = instance_group_managers_update_per_instance_configs_req_resource;
  return connection_->UpdatePerInstanceConfigs(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InstanceGroupManagersClient::UpdatePerInstanceConfigs(google::cloud::cpp::compute::instance_group_managers::v1::UpdatePerInstanceConfigsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePerInstanceConfigs(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_instance_group_managers_v1
}  // namespace cloud
}  // namespace google
