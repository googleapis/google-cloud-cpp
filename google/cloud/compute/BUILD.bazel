# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(default_visibility = ["//visibility:private"])

licenses(["notice"])  # Apache 2.0

load("@rules_proto//proto:defs.bzl", "proto_library")

proto_library(
    name = "google_cloud_cpp_compute_proto",
    srcs = [
        "disks/v1/disks.proto",
        "v1/internal/common.proto",
        "zone_operations/v1/zone_operations.proto",
    ],
    visibility = ["//:__pkg__"],
    deps = [
        "@com_google_googleapis//google/api:annotations_proto",
        "@com_google_googleapis//google/api:client_proto",
        "@com_google_googleapis//google/api:field_behavior_proto",
        "@com_google_googleapis//google/api:http_proto",
        "@com_google_googleapis//google/api:resource_proto",
        "@com_google_googleapis//google/api:routing_proto",
        "@com_google_googleapis//google/cloud:extended_operations_proto",
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:empty_proto",
        "@com_google_protobuf//:field_mask_proto",
        "@com_google_protobuf//:struct_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
)

load(
    "@com_google_googleapis_imports//:imports.bzl",
    "cc_grpc_library",
    "cc_proto_library",
)

cc_proto_library(
    name = "google_cloud_cpp_compute_cc_proto",
    deps = [":google_cloud_cpp_compute_proto"],
)

cc_grpc_library(
    name = "google_cloud_cpp_compute_cc_grpc",
    srcs = [":google_cloud_cpp_compute_proto"],
    grpc_only = True,
    deps = [":google_cloud_cpp_compute_cc_proto"],
)

service_dirs = [
    "disks/v1/",
    "v1/",
    "zone_operations/v1/",
]

src_dirs = service_dirs + [d + "internal/" for d in service_dirs]

filegroup(
    name = "srcs",
    srcs = glob([d + "*.cc" for d in src_dirs]),
)

filegroup(
    name = "hdrs",
    srcs = glob([d + "*.h" for d in src_dirs]),
)

filegroup(
    name = "mocks",
    srcs = glob([d + "mocks/*.h" for d in service_dirs]),
)

cc_library(
    name = "google_cloud_cpp_compute",
    srcs = [":srcs"],
    hdrs = [":hdrs"],
    copts = [
        "-I$(BINDIR)",
    ],
    visibility = ["//:__pkg__"],
    deps = [
        ":google_cloud_cpp_compute_cc_grpc",
        "//:common",
        "//:grpc_utils",
        "//google/cloud:google_cloud_cpp_rest_internal",
        "//google/cloud:google_cloud_cpp_rest_protobuf_internal",
    ],
)

cc_library(
    name = "google_cloud_cpp_compute_mocks",
    hdrs = [":mocks"],
    visibility = ["//:__pkg__"],
    deps = [
        ":google_cloud_cpp_compute",
        "@com_google_googletest//:gtest",
    ],
)

[cc_test(
    name = sample.replace("/", "_").replace(".cc", ""),
    srcs = [sample],
    copts = [
        "-I$(BINDIR)",
    ],
    tags = ["integration-test"],
    deps = [
        "//:experimental-compute",
        "//google/cloud/testing_util:google_cloud_cpp_testing_private",
    ],
) for sample in glob([d + "samples/*.cc" for d in service_dirs])]
