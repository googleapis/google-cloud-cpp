# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load(":service_dirs.bzl", "operation_service_dirs", "service_dirs")

package(default_visibility = ["//visibility:private"])

licenses(["notice"])  # Apache 2.0

# Service C++ files and mocks targets
[[
    filegroup(
        name = service.replace("/v1/", "_srcs"),
        srcs = glob([service + "*.cc"]) + glob([service + "internal/*.cc"]),
    ),
    filegroup(
        name = service.replace("/v1/", "_hdrs"),
        srcs = glob([service + "*.h"]) + glob([service + "internal/*.h"]),
    ),
    filegroup(
        name = service.replace("/v1/", "_public_hdrs"),
        srcs = glob([service + "*.h"]),
        visibility = ["//:__pkg__"],
    ),
    filegroup(
        name = service.replace("/v1/", "_mock_hdrs"),
        srcs = glob([service + "mocks/*.h"]),
        visibility = ["//:__pkg__"],
    ),
    cc_library(
        name = "google_cloud_cpp_compute_" + service.replace("/v1/", "_mocks"),
        hdrs = [":" + service.replace("/v1/", "_mock_hdrs")],
        visibility = ["//:__pkg__"],
        deps = [
            ":google_cloud_cpp_compute_" + service.replace("/v1/", ""),
            "@com_google_googletest//:gtest",
        ],
    ),
] for service in service_dirs + operation_service_dirs]

# Operation services
[cc_library(
    name = "google_cloud_cpp_compute_" + service.replace("/v1/", ""),
    srcs = [":" + service.replace("/v1/", "_srcs")],
    hdrs = [":" + service.replace("/v1/", "_hdrs")],
    visibility = ["//:__pkg__"],
    deps = [
        "//protos/google/cloud/compute:" + service.replace("/v1/", "") + "_cc_proto",
        "//:common",
        "//:grpc_utils",
        "//google/cloud:google_cloud_cpp_rest_internal",
        "//google/cloud:google_cloud_cpp_rest_protobuf_internal",
        "//protos:system_includes",
    ],
) for service in operation_service_dirs]

# Services
[cc_library(
    name = "google_cloud_cpp_compute_" + service.replace("/v1/", ""),
    srcs = [":" + service.replace("/v1/", "_srcs")],
    hdrs = [":" + service.replace("/v1/", "_hdrs")],
    visibility = ["//:__pkg__"],
    deps = [
        ":google_cloud_cpp_compute_global_operations",
        ":google_cloud_cpp_compute_global_organization_operations",
        ":google_cloud_cpp_compute_region_operations",
        ":google_cloud_cpp_compute_zone_operations",
        "//protos/google/cloud/compute:" + service.replace("/v1/", "") + "_cc_proto",
        "//:common",
        "//:grpc_utils",
        "//google/cloud:google_cloud_cpp_rest_internal",
        "//google/cloud:google_cloud_cpp_rest_protobuf_internal",
        "//protos:system_includes",
    ],
) for service in service_dirs]

[cc_test(
    name = sample.replace("/", "_").replace(".cc", ""),
    srcs = [sample],
    tags = ["integration-test"],
    deps = [
        ":google_cloud_cpp_compute_" + sample[0:sample.find("/v")],
        "//google/cloud/testing_util:google_cloud_cpp_testing_private",
    ],
) for sample in glob([d + "samples/*.cc" for d in service_dirs])]
