# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(default_visibility = ["//visibility:private"])

licenses(["notice"])  # Apache 2.0

load("@rules_proto//proto:defs.bzl", "proto_library")
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "cc_proto_library",
)

service_dirs = [
    "accelerator_types/v1/",
    "addresses/v1/",
    "autoscalers/v1/",
    "backend_buckets/v1/",
    "backend_services/v1/",
    "disks/v1/",
    "disk_types/v1/",
    "external_vpn_gateways/v1/",
    "firewall_policies/v1/",
    "firewalls/v1/",
    "forwarding_rules/v1/",
    "global_addresses/v1/",
    "global_forwarding_rules/v1/",
    "global_network_endpoint_groups/v1/",
    "global_public_delegated_prefixes/v1/",
    "health_checks/v1/",
    "http_health_checks/v1/",
    "https_health_checks/v1/",
    "image_family_views/v1/",
    "images/v1/",
    "instance_group_managers/v1/",
    "instance_groups/v1/",
    "instances/v1/",
    "instance_templates/v1/",
    "interconnect_attachments/v1/",
    "interconnect_locations/v1/",
    "interconnects/v1/",
    "license_codes/v1/",
    "licenses/v1/",
    "machine_images/v1/",
    "machine_types/v1/",
    "network_attachments/v1/",
    "network_edge_security_services/v1/",
    "network_endpoint_groups/v1/",
    "network_firewall_policies/v1/",
    "networks/v1/",
    "node_groups/v1/",
    "node_templates/v1/",
    "node_types/v1/",
    "packet_mirrorings/v1/",
    "projects/v1/",
    "public_advertised_prefixes/v1/",
    "public_delegated_prefixes/v1/",
    "region_autoscalers/v1/",
    "region_backend_services/v1/",
    "region_commitments/v1/",
    "region_disks/v1/",
    "region_disk_types/v1/",
    "region_health_check_services/v1/",
    "region_health_checks/v1/",
    "region_instance_group_managers/v1/",
    "region_instance_groups/v1/",
    "region_instances/v1/",
    "region_instance_templates/v1/",
    "region_network_endpoint_groups/v1/",
    "region_network_firewall_policies/v1/",
    "region_notification_endpoints/v1/",
    "region_security_policies/v1/",
    "region_ssl_certificates/v1/",
    "ssl_policies/v1/",
    "subnetworks/v1/",
    "target_grpc_proxies/v1/",
    "target_http_proxies/v1/",
    "target_https_proxies/v1/",
    "target_instances/v1/",
    "target_pools/v1/",
    "target_ssl_proxies/v1/",
    "target_tcp_proxies/v1/",
    "target_vpn_gateways/v1/",
    "url_maps/v1/",
    "vpn_gateways/v1/",
    "vpn_tunnels/v1/",
    "zones/v1/",
]

operation_service_dirs = [
    "global_operations/v1/",
    "global_organization_operations/v1/",
    "region_operations/v1/",
    "zone_operations/v1/",
]

# Internal protos target
filegroup(
    name = "internal_protos",
    srcs = glob(["v1/internal/*.proto"]),
)

proto_library(
    name = "google_cloud_cpp_compute_internal_proto",
    srcs = [":internal_protos"],
    visibility = ["//:__pkg__"],
    deps = [
        "@com_google_googleapis//google/cloud:extended_operations_proto",
        "@com_google_protobuf//:any_proto",
    ],
)

cc_proto_library(
    name = "google_cloud_cpp_compute_internal_cc_proto",
    deps = [":google_cloud_cpp_compute_internal_proto"],
)

# Service proto targets
[[
    filegroup(
        name = service.replace("/v1/", "_proto_srcs"),
        srcs = glob([service + "*.proto"]),
    ),
    proto_library(
        name = "google_cloud_cpp_compute_" + service.replace("/v1/", "_proto"),
        srcs = [":" + service.replace("/v1/", "_proto_srcs")],
        visibility = ["//:__pkg__"],
        deps = [
            ":google_cloud_cpp_compute_internal_proto",
            "@com_google_googleapis//google/api:annotations_proto",
            "@com_google_googleapis//google/api:client_proto",
            "@com_google_googleapis//google/api:field_behavior_proto",
            "@com_google_googleapis//google/api:http_proto",
            "@com_google_googleapis//google/api:resource_proto",
            "@com_google_googleapis//google/api:routing_proto",
            "@com_google_googleapis//google/cloud:extended_operations_proto",
            "@com_google_protobuf//:empty_proto",
        ],
    ),
    cc_proto_library(
        name = "google_cloud_cpp_compute_" + service.replace("/v1/", "_cc_proto"),
        deps = [":google_cloud_cpp_compute_" + service.replace("/v1/", "_proto")],
    ),
] for service in service_dirs + operation_service_dirs]

# Service C++ files and mocks targets
[[
    filegroup(
        name = service.replace("/v1/", "_srcs"),
        srcs = glob([service + "*.cc"]) + glob([service + "internal/*.cc"]),
    ),
    filegroup(
        name = service.replace("/v1/", "_hdrs"),
        srcs = glob([service + "*.h"]) + glob([service + "internal/*.h"]),
    ),
    filegroup(
        name = service.replace("/v1/", "_public_hdrs"),
        srcs = glob([service + "*.h"]),
        visibility = ["//:__pkg__"],
    ),
    filegroup(
        name = service.replace("/v1/", "_mock_hdrs"),
        srcs = glob([service + "mocks/*.h"]),
        visibility = ["//:__pkg__"],
    ),
    cc_library(
        name = "google_cloud_cpp_compute_" + service.replace("/v1/", "_mocks"),
        hdrs = [":" + service.replace("/v1/", "_mock_hdrs")],
        visibility = ["//:__pkg__"],
        deps = [
            ":google_cloud_cpp_compute_" + service.replace("/v1/", ""),
            "@com_google_googletest//:gtest",
        ],
    ),
] for service in service_dirs + operation_service_dirs]

# Operation services
[cc_library(
    name = "google_cloud_cpp_compute_" + service.replace("/v1/", ""),
    srcs = [":" + service.replace("/v1/", "_srcs")],
    hdrs = [":" + service.replace("/v1/", "_hdrs")],
    copts = [
        "-I$(BINDIR)",
    ],
    visibility = ["//:__pkg__"],
    deps = [
        ":google_cloud_cpp_compute_" + service.replace("/v1/", "") + "_cc_proto",
        "//:common",
        "//:grpc_utils",
        "//google/cloud:google_cloud_cpp_rest_internal",
        "//google/cloud:google_cloud_cpp_rest_protobuf_internal",
    ],
) for service in operation_service_dirs]

# Services
[cc_library(
    name = "google_cloud_cpp_compute_" + service.replace("/v1/", ""),
    srcs = [":" + service.replace("/v1/", "_srcs")],
    hdrs = [":" + service.replace("/v1/", "_hdrs")],
    copts = [
        "-I$(BINDIR)",
    ],
    visibility = ["//:__pkg__"],
    deps = [
        ":google_cloud_cpp_compute_global_operations",
        ":google_cloud_cpp_compute_global_organization_operations",
        ":google_cloud_cpp_compute_region_operations",
        ":google_cloud_cpp_compute_zone_operations",
        ":google_cloud_cpp_compute_" + service.replace("/v1/", "") + "_cc_proto",
        "//:common",
        "//:grpc_utils",
        "//google/cloud:google_cloud_cpp_rest_internal",
        "//google/cloud:google_cloud_cpp_rest_protobuf_internal",
    ],
) for service in service_dirs]

[cc_test(
    name = sample.replace("/", "_").replace(".cc", ""),
    srcs = [sample],
    copts = [
        "-I$(BINDIR)",
    ],
    tags = ["integration-test"],
    deps = [
        ":google_cloud_cpp_compute_" + sample[0:sample.find("/v")],
        "//google/cloud/testing_util:google_cloud_cpp_testing_private",
    ],
) for sample in glob([d + "samples/*.cc" for d in service_dirs])]
