// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_disks/v1/region_disks.proto

#include "google/cloud/compute/region_disks/v1/region_disks_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_disks_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

RegionDisksConnectionIdempotencyPolicy::~RegionDisksConnectionIdempotencyPolicy() = default;

std::unique_ptr<RegionDisksConnectionIdempotencyPolicy>
RegionDisksConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<RegionDisksConnectionIdempotencyPolicy>(*this);
}

Idempotency RegionDisksConnectionIdempotencyPolicy::AddResourcePolicies(google::cloud::cpp::compute::region_disks::v1::AddResourcePoliciesRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::CreateSnapshot(google::cloud::cpp::compute::region_disks::v1::CreateSnapshotRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::DeleteRegionDisks(google::cloud::cpp::compute::region_disks::v1::DeleteRegionDisksRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::GetRegionDisks(google::cloud::cpp::compute::region_disks::v1::GetRegionDisksRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::GetIamPolicy(google::cloud::cpp::compute::region_disks::v1::GetIamPolicyRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::InsertRegionDisks(google::cloud::cpp::compute::region_disks::v1::InsertRegionDisksRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::ListRegionDisks(google::cloud::cpp::compute::region_disks::v1::ListRegionDisksRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::RemoveResourcePolicies(google::cloud::cpp::compute::region_disks::v1::RemoveResourcePoliciesRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::Resize(google::cloud::cpp::compute::region_disks::v1::ResizeRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::SetIamPolicy(google::cloud::cpp::compute::region_disks::v1::SetIamPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::SetLabels(google::cloud::cpp::compute::region_disks::v1::SetLabelsRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::TestIamPermissions(google::cloud::cpp::compute::region_disks::v1::TestIamPermissionsRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionDisksConnectionIdempotencyPolicy::UpdateRegionDisks(google::cloud::cpp::compute::region_disks::v1::UpdateRegionDisksRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<RegionDisksConnectionIdempotencyPolicy>
    MakeDefaultRegionDisksConnectionIdempotencyPolicy() {
  return std::make_unique<RegionDisksConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_disks_v1
}  // namespace cloud
}  // namespace google
