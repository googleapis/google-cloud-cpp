// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_VPN_GATEWAYS_V1_TARGET_VPN_GATEWAYS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_VPN_GATEWAYS_V1_TARGET_VPN_GATEWAYS_CLIENT_H

#include "google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_vpn_gateways_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the targetVpnGateways resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/targetVpnGateways
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class TargetVpnGatewaysClient {
 public:
  explicit TargetVpnGatewaysClient(
      ExperimentalTag, std::shared_ptr<TargetVpnGatewaysConnection> connection,
      Options opts = {});
  ~TargetVpnGatewaysClient();

  ///@{
  /// @name Copy and move support
  TargetVpnGatewaysClient(TargetVpnGatewaysClient const&) = default;
  TargetVpnGatewaysClient& operator=(TargetVpnGatewaysClient const&) = default;
  TargetVpnGatewaysClient(TargetVpnGatewaysClient&&) = default;
  TargetVpnGatewaysClient& operator=(TargetVpnGatewaysClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(TargetVpnGatewaysClient const& a,
                         TargetVpnGatewaysClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(TargetVpnGatewaysClient const& a,
                         TargetVpnGatewaysClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves an aggregated list of target VPN gateways.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetVpnGatewayAggregatedList,google/cloud/compute/v1/internal/common.proto#L28564}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.AggregatedListTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L92}
  /// [google.cloud.cpp.compute.v1.TargetVpnGatewayAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28564}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetVpnGatewayAggregatedList>
  AggregatedListTargetVpnGateways(std::string const& project,
                                  Options opts = {});

  ///
  /// Retrieves an aggregated list of target VPN gateways.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetVpnGateways::v1::AggregatedListTargetVpnGatewaysRequest,google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L92}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetVpnGatewayAggregatedList,google/cloud/compute/v1/internal/common.proto#L28564}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.AggregatedListTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L92}
  /// [google.cloud.cpp.compute.v1.TargetVpnGatewayAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28564}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetVpnGatewayAggregatedList>
  AggregatedListTargetVpnGateways(
      google::cloud::cpp::compute::targetVpnGateways::v1::
          AggregatedListTargetVpnGatewaysRequest const& request,
      Options opts = {});

  ///
  /// Deletes the specified target VPN gateway.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param target_vpn_gateway  Name of the target VPN gateway to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.DeleteTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L166}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteTargetVpnGateways(
      std::string const& project, std::string const& region,
      std::string const& target_vpn_gateway, Options opts = {});

  ///
  /// Deletes the specified target VPN gateway.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetVpnGateways::v1::DeleteTargetVpnGatewaysRequest,google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L166}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.DeleteTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L166}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteTargetVpnGateways(
      google::cloud::cpp::compute::targetVpnGateways::v1::
          DeleteTargetVpnGatewaysRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified target VPN gateway.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param target_vpn_gateway  Name of the target VPN gateway to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetVpnGateway,google/cloud/compute/v1/internal/common.proto#L28508}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.GetTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L190}
  /// [google.cloud.cpp.compute.v1.TargetVpnGateway]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28508}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetVpnGateway>
  GetTargetVpnGateways(std::string const& project, std::string const& region,
                       std::string const& target_vpn_gateway,
                       Options opts = {});

  ///
  /// Returns the specified target VPN gateway.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetVpnGateways::v1::GetTargetVpnGatewaysRequest,google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L190}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetVpnGateway,google/cloud/compute/v1/internal/common.proto#L28508}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.GetTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L190}
  /// [google.cloud.cpp.compute.v1.TargetVpnGateway]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28508}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetVpnGateway>
  GetTargetVpnGateways(google::cloud::cpp::compute::targetVpnGateways::v1::
                           GetTargetVpnGatewaysRequest const& request,
                       Options opts = {});

  ///
  /// Creates a target VPN gateway in the specified project and region using the
  /// data included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param target_vpn_gateway_resource  The TargetVpnGateway for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.InsertTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L202}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertTargetVpnGateways(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::TargetVpnGateway const&
          target_vpn_gateway_resource,
      Options opts = {});

  ///
  /// Creates a target VPN gateway in the specified project and region using the
  /// data included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetVpnGateways::v1::InsertTargetVpnGatewaysRequest,google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L202}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.InsertTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L202}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertTargetVpnGateways(
      google::cloud::cpp::compute::targetVpnGateways::v1::
          InsertTargetVpnGatewaysRequest const& request,
      Options opts = {});

  ///
  /// Retrieves a list of target VPN gateways available to the specified project
  /// and region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetVpnGateway,google/cloud/compute/v1/internal/common.proto#L28508}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.ListTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L226}
  /// [google.cloud.cpp.compute.v1.TargetVpnGateway]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28508}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetVpnGateway>
  ListTargetVpnGateways(std::string const& project, std::string const& region,
                        Options opts = {});

  ///
  /// Retrieves a list of target VPN gateways available to the specified project
  /// and region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetVpnGateways::v1::ListTargetVpnGatewaysRequest,google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L226}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetVpnGateway,google/cloud/compute/v1/internal/common.proto#L28508}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.ListTargetVpnGatewaysRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L226}
  /// [google.cloud.cpp.compute.v1.TargetVpnGateway]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28508}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetVpnGateway>
  ListTargetVpnGateways(google::cloud::cpp::compute::targetVpnGateways::v1::
                            ListTargetVpnGatewaysRequest request,
                        Options opts = {});

  ///
  /// Sets the labels on a TargetVpnGateway. To learn more about labels, read
  /// the Labeling Resources documentation.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param region_set_labels_request_resource  The RegionSetLabelsRequest for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.SetLabelsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L294}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetLabels(
      std::string const& project, std::string const& region,
      std::string const& resource,
      google::cloud::cpp::compute::v1::RegionSetLabelsRequest const&
          region_set_labels_request_resource,
      Options opts = {});

  ///
  /// Sets the labels on a TargetVpnGateway. To learn more about labels, read
  /// the Labeling Resources documentation.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetVpnGateways::v1::SetLabelsRequest,google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L294}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetVpnGateways.v1.SetLabelsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_vpn_gateways/v1/target_vpn_gateways.proto#L294}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetLabels(
      google::cloud::cpp::compute::targetVpnGateways::v1::
          SetLabelsRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<TargetVpnGatewaysConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_vpn_gateways_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_VPN_GATEWAYS_V1_TARGET_VPN_GATEWAYS_CLIENT_H
