// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/interconnects/v1/interconnects.proto

#include "google/cloud/compute/interconnects/v1/internal/interconnects_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/interconnects/v1/interconnects.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_interconnects_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultInterconnectsRestStub::DefaultInterconnectsRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultInterconnectsRestStub::DefaultInterconnectsRestStub(
    std::shared_ptr<rest_internal::RestClient> service, Options options)
    : service_(std::move(service)), options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInterconnectsRestStub::DeleteInterconnects(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::interconnects::v1::
        DeleteInterconnectsRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/interconnects/{interconnect}");
}

StatusOr<google::cloud::cpp::compute::v1::Interconnect>
DefaultInterconnectsRestStub::GetInterconnects(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::interconnects::v1::
        GetInterconnectsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Interconnect>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/interconnects/{interconnect}",
      {std::make_pair("interconnect", request.interconnect()),
       std::make_pair("project", request.project())});
}

StatusOr<google::cloud::cpp::compute::v1::InterconnectsGetDiagnosticsResponse>
DefaultInterconnectsRestStub::GetDiagnostics(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::interconnects::v1::GetDiagnosticsRequest const&
        request) {
  return rest_internal::Get<
      google::cloud::cpp::compute::v1::InterconnectsGetDiagnosticsResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/interconnects/{interconnect}/"
      "getDiagnostics",
      {std::make_pair("interconnect", request.interconnect()),
       std::make_pair("project", request.project())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInterconnectsRestStub::InsertInterconnects(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::interconnects::v1::
        InsertInterconnectsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/interconnects");
}

StatusOr<google::cloud::cpp::compute::v1::InterconnectList>
DefaultInterconnectsRestStub::ListInterconnects(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::interconnects::v1::
        ListInterconnectsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::InterconnectList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/interconnects",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInterconnectsRestStub::PatchInterconnects(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::interconnects::v1::
        PatchInterconnectsRequest const& request) {
  return rest_internal::Patch<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/interconnects/{interconnect}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultInterconnectsRestStub::SetLabels(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::interconnects::v1::SetLabelsRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/interconnects/{resource}/"
      "setLabels");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_interconnects_v1_internal
}  // namespace cloud
}  // namespace google
