// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/interconnects/v1/interconnects.proto

#include "google/cloud/compute/interconnects/v1/internal/interconnects_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_interconnects_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

InterconnectsTracingConnection::InterconnectsTracingConnection(
    std::shared_ptr<compute_interconnects_v1::InterconnectsConnection> child)
    : child_(std::move(child)) {}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectsTracingConnection::DeleteInterconnects(google::cloud::cpp::compute::interconnects::v1::DeleteInterconnectsRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnects_v1::InterconnectsConnection::DeleteInterconnects");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteInterconnects(request));
}

StatusOr<google::cloud::cpp::compute::v1::Interconnect>
InterconnectsTracingConnection::GetInterconnects(google::cloud::cpp::compute::interconnects::v1::GetInterconnectsRequest const& request) {
  auto span = internal::MakeSpan("compute_interconnects_v1::InterconnectsConnection::GetInterconnects");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetInterconnects(request));
}

StatusOr<google::cloud::cpp::compute::v1::InterconnectsGetDiagnosticsResponse>
InterconnectsTracingConnection::GetDiagnostics(google::cloud::cpp::compute::interconnects::v1::GetDiagnosticsRequest const& request) {
  auto span = internal::MakeSpan("compute_interconnects_v1::InterconnectsConnection::GetDiagnostics");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetDiagnostics(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectsTracingConnection::InsertInterconnects(google::cloud::cpp::compute::interconnects::v1::InsertInterconnectsRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnects_v1::InterconnectsConnection::InsertInterconnects");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->InsertInterconnects(request));
}

StreamRange<google::cloud::cpp::compute::v1::Interconnect>
InterconnectsTracingConnection::ListInterconnects(google::cloud::cpp::compute::interconnects::v1::ListInterconnectsRequest request) {
  auto span = internal::MakeSpan("compute_interconnects_v1::InterconnectsConnection::ListInterconnects");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListInterconnects(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::cpp::compute::v1::Interconnect>(
        std::move(span), std::move(sr));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectsTracingConnection::PatchInterconnects(google::cloud::cpp::compute::interconnects::v1::PatchInterconnectsRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnects_v1::InterconnectsConnection::PatchInterconnects");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->PatchInterconnects(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectsTracingConnection::SetLabels(google::cloud::cpp::compute::interconnects::v1::SetLabelsRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnects_v1::InterconnectsConnection::SetLabels");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->SetLabels(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<compute_interconnects_v1::InterconnectsConnection>
MakeInterconnectsTracingConnection(
    std::shared_ptr<compute_interconnects_v1::InterconnectsConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<InterconnectsTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_interconnects_v1_internal
}  // namespace cloud
}  // namespace google
