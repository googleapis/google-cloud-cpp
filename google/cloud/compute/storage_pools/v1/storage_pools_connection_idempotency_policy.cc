// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/storage_pools/v1/storage_pools.proto

#include "google/cloud/compute/storage_pools/v1/storage_pools_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_storage_pools_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

StoragePoolsConnectionIdempotencyPolicy::
    ~StoragePoolsConnectionIdempotencyPolicy() = default;

std::unique_ptr<StoragePoolsConnectionIdempotencyPolicy>
StoragePoolsConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<StoragePoolsConnectionIdempotencyPolicy>(*this);
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::AggregatedListStoragePools(
    google::cloud::cpp::compute::storage_pools::v1::
        AggregatedListStoragePoolsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::DeleteStoragePool(
    google::cloud::cpp::compute::storage_pools::v1::
        DeleteStoragePoolRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::GetStoragePool(
    google::cloud::cpp::compute::storage_pools::v1::
        GetStoragePoolRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::GetIamPolicy(
    google::cloud::cpp::compute::storage_pools::v1::
        GetIamPolicyRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::InsertStoragePool(
    google::cloud::cpp::compute::storage_pools::v1::
        InsertStoragePoolRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::ListStoragePools(
    google::cloud::cpp::compute::storage_pools::v1::
        ListStoragePoolsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::ListDisks(
    google::cloud::cpp::compute::storage_pools::v1::
        ListDisksRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::SetIamPolicy(
    google::cloud::cpp::compute::storage_pools::v1::
        SetIamPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::TestIamPermissions(
    google::cloud::cpp::compute::storage_pools::v1::
        TestIamPermissionsRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency StoragePoolsConnectionIdempotencyPolicy::UpdateStoragePool(
    google::cloud::cpp::compute::storage_pools::v1::
        UpdateStoragePoolRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<StoragePoolsConnectionIdempotencyPolicy>
MakeDefaultStoragePoolsConnectionIdempotencyPolicy() {
  return std::make_unique<StoragePoolsConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_storage_pools_v1
}  // namespace cloud
}  // namespace google
