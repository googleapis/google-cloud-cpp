// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_ssl_certificates/v1/region_ssl_certificates.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_SSL_CERTIFICATES_V1_INTERNAL_REGION_SSL_CERTIFICATES_REST_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_SSL_CERTIFICATES_V1_INTERNAL_REGION_SSL_CERTIFICATES_REST_CONNECTION_IMPL_H

#include "google/cloud/compute/region_ssl_certificates/v1/internal/region_ssl_certificates_rest_stub.h"
#include "google/cloud/compute/region_ssl_certificates/v1/internal/region_ssl_certificates_retry_traits.h"
#include "google/cloud/compute/region_ssl_certificates/v1/region_ssl_certificates_connection.h"
#include "google/cloud/compute/region_ssl_certificates/v1/region_ssl_certificates_connection_idempotency_policy.h"
#include "google/cloud/compute/region_ssl_certificates/v1/region_ssl_certificates_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_ssl_certificates_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class RegionSslCertificatesRestConnectionImpl
    : public compute_region_ssl_certificates_v1::
          RegionSslCertificatesConnection {
 public:
  ~RegionSslCertificatesRestConnectionImpl() override = default;

  RegionSslCertificatesRestConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<compute_region_ssl_certificates_v1_internal::
                          RegionSslCertificatesRestStub>
          stub,
      Options options);

  Options options() override { return options_; }

  future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  DeleteRegionSslCertificates(
      google::cloud::cpp::compute::region_ssl_certificates::v1::
          DeleteRegionSslCertificatesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::SslCertificate>
  GetRegionSslCertificates(
      google::cloud::cpp::compute::region_ssl_certificates::v1::
          GetRegionSslCertificatesRequest const& request) override;

  future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  InsertRegionSslCertificates(
      google::cloud::cpp::compute::region_ssl_certificates::v1::
          InsertRegionSslCertificatesRequest const& request) override;

  StreamRange<google::cloud::cpp::compute::v1::SslCertificate>
  ListRegionSslCertificates(
      google::cloud::cpp::compute::region_ssl_certificates::v1::
          ListRegionSslCertificatesRequest request) override;

 private:
  std::unique_ptr<
      compute_region_ssl_certificates_v1::RegionSslCertificatesRetryPolicy>
  retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<compute_region_ssl_certificates_v1::
                        RegionSslCertificatesRetryPolicyOption>()) {
      return options
          .get<compute_region_ssl_certificates_v1::
                   RegionSslCertificatesRetryPolicyOption>()
          ->clone();
    }
    return options_
        .get<compute_region_ssl_certificates_v1::
                 RegionSslCertificatesRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<compute_region_ssl_certificates_v1::
                        RegionSslCertificatesBackoffPolicyOption>()) {
      return options
          .get<compute_region_ssl_certificates_v1::
                   RegionSslCertificatesBackoffPolicyOption>()
          ->clone();
    }
    return options_
        .get<compute_region_ssl_certificates_v1::
                 RegionSslCertificatesBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<compute_region_ssl_certificates_v1::
                      RegionSslCertificatesConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            compute_region_ssl_certificates_v1::
                RegionSslCertificatesConnectionIdempotencyPolicyOption>()) {
      return options
          .get<compute_region_ssl_certificates_v1::
                   RegionSslCertificatesConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<compute_region_ssl_certificates_v1::
                 RegionSslCertificatesConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<PollingPolicy> polling_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<compute_region_ssl_certificates_v1::
                        RegionSslCertificatesPollingPolicyOption>()) {
      return options
          .get<compute_region_ssl_certificates_v1::
                   RegionSslCertificatesPollingPolicyOption>()
          ->clone();
    }
    return options_
        .get<compute_region_ssl_certificates_v1::
                 RegionSslCertificatesPollingPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<compute_region_ssl_certificates_v1_internal::
                      RegionSslCertificatesRestStub>
      stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_ssl_certificates_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_SSL_CERTIFICATES_V1_INTERNAL_REGION_SSL_CERTIFICATES_REST_CONNECTION_IMPL_H
