// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_backend_services/v1/region_backend_services.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_BACKEND_SERVICES_V1_REGION_BACKEND_SERVICES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_BACKEND_SERVICES_V1_REGION_BACKEND_SERVICES_CLIENT_H

#include "google/cloud/compute/region_backend_services/v1/region_backend_services_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_backend_services_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the regionBackendServices resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/regionBackendServices
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class RegionBackendServicesClient {
 public:
  explicit RegionBackendServicesClient(
      ExperimentalTag,
      std::shared_ptr<RegionBackendServicesConnection> connection,
      Options opts = {});
  ~RegionBackendServicesClient();

  ///@{
  /// @name Copy and move support
  RegionBackendServicesClient(RegionBackendServicesClient const&) = default;
  RegionBackendServicesClient& operator=(RegionBackendServicesClient const&) =
      default;
  RegionBackendServicesClient(RegionBackendServicesClient&&) = default;
  RegionBackendServicesClient& operator=(RegionBackendServicesClient&&) =
      default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(RegionBackendServicesClient const& a,
                         RegionBackendServicesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(RegionBackendServicesClient const& a,
                         RegionBackendServicesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified regional BackendService resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param backend_service  Name of the BackendService resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.DeleteRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L141}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionBackendServices(std::string const& project,
                              std::string const& region,
                              std::string const& backend_service,
                              Options opts = {});

  ///
  /// Deletes the specified regional BackendService resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionBackendServices::v1::DeleteRegionBackendServicesRequest,google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L141}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.DeleteRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L141}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionBackendServices(
      google::cloud::cpp::compute::regionBackendServices::v1::
          DeleteRegionBackendServicesRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified regional BackendService resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param backend_service  Name of the BackendService resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendService,google/cloud/compute/v1/internal/common.proto#L2337}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.GetRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L201}
  /// [google.cloud.cpp.compute.v1.BackendService]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L2337}
  ///
  StatusOr<google::cloud::cpp::compute::v1::BackendService>
  GetRegionBackendServices(std::string const& project,
                           std::string const& region,
                           std::string const& backend_service,
                           Options opts = {});

  ///
  /// Returns the specified regional BackendService resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionBackendServices::v1::GetRegionBackendServicesRequest,google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L201}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendService,google/cloud/compute/v1/internal/common.proto#L2337}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.GetRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L201}
  /// [google.cloud.cpp.compute.v1.BackendService]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L2337}
  ///
  StatusOr<google::cloud::cpp::compute::v1::BackendService>
  GetRegionBackendServices(
      google::cloud::cpp::compute::regionBackendServices::v1::
          GetRegionBackendServicesRequest const& request,
      Options opts = {});

  ///
  /// Gets the most recent health check results for this regional
  /// BackendService.
  ///
  /// @param project
  /// @param region  Name of the region scoping this request.
  /// @param backend_service  Name of the BackendService resource for which to
  /// get health.
  /// @param resource_group_reference_resource  The ResourceGroupReference for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendServiceGroupHealth,google/cloud/compute/v1/internal/common.proto#L3003}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.GetHealthRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L171}
  /// [google.cloud.cpp.compute.v1.BackendServiceGroupHealth]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L3003}
  ///
  StatusOr<google::cloud::cpp::compute::v1::BackendServiceGroupHealth>
  GetHealth(std::string const& project, std::string const& region,
            std::string const& backend_service,
            google::cloud::cpp::compute::v1::ResourceGroupReference const&
                resource_group_reference_resource,
            Options opts = {});

  ///
  /// Gets the most recent health check results for this regional
  /// BackendService.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionBackendServices::v1::GetHealthRequest,google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L171}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendServiceGroupHealth,google/cloud/compute/v1/internal/common.proto#L3003}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.GetHealthRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L171}
  /// [google.cloud.cpp.compute.v1.BackendServiceGroupHealth]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L3003}
  ///
  StatusOr<google::cloud::cpp::compute::v1::BackendServiceGroupHealth>
  GetHealth(google::cloud::cpp::compute::regionBackendServices::v1::
                GetHealthRequest const& request,
            Options opts = {});

  ///
  /// Gets the access control policy for a resource. May be empty if no such
  /// policy or resource exists.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.GetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L186}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> GetIamPolicy(
      std::string const& project, std::string const& region,
      std::string const& resource, Options opts = {});

  ///
  /// Gets the access control policy for a resource. May be empty if no such
  /// policy or resource exists.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionBackendServices::v1::GetIamPolicyRequest,google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L186}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.GetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L186}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> GetIamPolicy(
      google::cloud::cpp::compute::regionBackendServices::v1::
          GetIamPolicyRequest const& request,
      Options opts = {});

  ///
  /// Creates a regional BackendService resource in the specified project using
  /// the data included in the request. For more information, see Backend
  /// services overview.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param backend_service_resource  The BackendService for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.InsertRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L213}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionBackendServices(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::BackendService const&
          backend_service_resource,
      Options opts = {});

  ///
  /// Creates a regional BackendService resource in the specified project using
  /// the data included in the request. For more information, see Backend
  /// services overview.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionBackendServices::v1::InsertRegionBackendServicesRequest,google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L213}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.InsertRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L213}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionBackendServices(
      google::cloud::cpp::compute::regionBackendServices::v1::
          InsertRegionBackendServicesRequest const& request,
      Options opts = {});

  ///
  /// Retrieves the list of regional BackendService resources available to the
  /// specified project in the given region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendService,google/cloud/compute/v1/internal/common.proto#L2337}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.ListRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L244}
  /// [google.cloud.cpp.compute.v1.BackendService]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L2337}
  ///
  StreamRange<google::cloud::cpp::compute::v1::BackendService>
  ListRegionBackendServices(std::string const& project,
                            std::string const& region, Options opts = {});

  ///
  /// Retrieves the list of regional BackendService resources available to the
  /// specified project in the given region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionBackendServices::v1::ListRegionBackendServicesRequest,google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L244}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendService,google/cloud/compute/v1/internal/common.proto#L2337}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.ListRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L244}
  /// [google.cloud.cpp.compute.v1.BackendService]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L2337}
  ///
  StreamRange<google::cloud::cpp::compute::v1::BackendService>
  ListRegionBackendServices(google::cloud::cpp::compute::regionBackendServices::
                                v1::ListRegionBackendServicesRequest request,
                            Options opts = {});

  ///
  /// Updates the specified regional BackendService resource with the data
  /// included in the request. For more information, see Understanding backend
  /// services This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param backend_service  Name of the BackendService resource to patch.
  /// @param backend_service_resource  The BackendService for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.PatchRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L312}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchRegionBackendServices(
      std::string const& project, std::string const& region,
      std::string const& backend_service,
      google::cloud::cpp::compute::v1::BackendService const&
          backend_service_resource,
      Options opts = {});

  ///
  /// Updates the specified regional BackendService resource with the data
  /// included in the request. For more information, see Understanding backend
  /// services This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionBackendServices::v1::PatchRegionBackendServicesRequest,google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L312}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.PatchRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L312}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchRegionBackendServices(
      google::cloud::cpp::compute::regionBackendServices::v1::
          PatchRegionBackendServicesRequest const& request,
      Options opts = {});

  ///
  /// Sets the access control policy on the specified resource. Replaces any
  /// existing policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param region_set_policy_request_resource  The RegionSetPolicyRequest for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.SetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L346}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> SetIamPolicy(
      std::string const& project, std::string const& region,
      std::string const& resource,
      google::cloud::cpp::compute::v1::RegionSetPolicyRequest const&
          region_set_policy_request_resource,
      Options opts = {});

  ///
  /// Sets the access control policy on the specified resource. Replaces any
  /// existing policy.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionBackendServices::v1::SetIamPolicyRequest,google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L346}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.SetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L346}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> SetIamPolicy(
      google::cloud::cpp::compute::regionBackendServices::v1::
          SetIamPolicyRequest const& request,
      Options opts = {});

  ///
  /// Updates the specified regional BackendService resource with the data
  /// included in the request. For more information, see Backend services
  /// overview .
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param backend_service  Name of the BackendService resource to update.
  /// @param backend_service_resource  The BackendService for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.UpdateRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L362}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  UpdateRegionBackendServices(
      std::string const& project, std::string const& region,
      std::string const& backend_service,
      google::cloud::cpp::compute::v1::BackendService const&
          backend_service_resource,
      Options opts = {});

  ///
  /// Updates the specified regional BackendService resource with the data
  /// included in the request. For more information, see Backend services
  /// overview .
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionBackendServices::v1::UpdateRegionBackendServicesRequest,google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L362}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionBackendServices.v1.UpdateRegionBackendServicesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_backend_services/v1/region_backend_services.proto#L362}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  UpdateRegionBackendServices(
      google::cloud::cpp::compute::regionBackendServices::v1::
          UpdateRegionBackendServicesRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<RegionBackendServicesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_backend_services_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_BACKEND_SERVICES_V1_REGION_BACKEND_SERVICES_CLIENT_H
