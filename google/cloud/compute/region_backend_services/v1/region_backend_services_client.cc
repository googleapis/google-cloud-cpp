// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_backend_services/v1/region_backend_services.proto

#include "google/cloud/compute/region_backend_services/v1/region_backend_services_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_backend_services_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegionBackendServicesClient::RegionBackendServicesClient(
    ExperimentalTag,
    std::shared_ptr<RegionBackendServicesConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
RegionBackendServicesClient::~RegionBackendServicesClient() = default;

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionBackendServicesClient::DeleteRegionBackendServices(
    std::string const& project, std::string const& region,
    std::string const& backend_service, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_backend_services::v1::
      DeleteRegionBackendServicesRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_backend_service(backend_service);
  return connection_->DeleteRegionBackendServices(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionBackendServicesClient::DeleteRegionBackendServices(
    google::cloud::cpp::compute::region_backend_services::v1::
        DeleteRegionBackendServicesRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteRegionBackendServices(request);
}

StatusOr<google::cloud::cpp::compute::v1::BackendService>
RegionBackendServicesClient::GetRegionBackendServices(
    std::string const& project, std::string const& region,
    std::string const& backend_service, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_backend_services::v1::
      GetRegionBackendServicesRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_backend_service(backend_service);
  return connection_->GetRegionBackendServices(request);
}

StatusOr<google::cloud::cpp::compute::v1::BackendService>
RegionBackendServicesClient::GetRegionBackendServices(
    google::cloud::cpp::compute::region_backend_services::v1::
        GetRegionBackendServicesRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRegionBackendServices(request);
}

StatusOr<google::cloud::cpp::compute::v1::BackendServiceGroupHealth>
RegionBackendServicesClient::GetHealth(
    std::string const& project, std::string const& region,
    std::string const& backend_service,
    google::cloud::cpp::compute::v1::ResourceGroupReference const&
        resource_group_reference_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_backend_services::v1::GetHealthRequest
      request;
  request.set_project(project);
  request.set_region(region);
  request.set_backend_service(backend_service);
  *request.mutable_resource_group_reference_resource() =
      resource_group_reference_resource;
  return connection_->GetHealth(request);
}

StatusOr<google::cloud::cpp::compute::v1::BackendServiceGroupHealth>
RegionBackendServicesClient::GetHealth(
    google::cloud::cpp::compute::region_backend_services::v1::
        GetHealthRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetHealth(request);
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
RegionBackendServicesClient::GetIamPolicy(std::string const& project,
                                          std::string const& region,
                                          std::string const& resource,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_backend_services::v1::GetIamPolicyRequest
      request;
  request.set_project(project);
  request.set_region(region);
  request.set_resource(resource);
  return connection_->GetIamPolicy(request);
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
RegionBackendServicesClient::GetIamPolicy(
    google::cloud::cpp::compute::region_backend_services::v1::
        GetIamPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetIamPolicy(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionBackendServicesClient::InsertRegionBackendServices(
    std::string const& project, std::string const& region,
    google::cloud::cpp::compute::v1::BackendService const&
        backend_service_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_backend_services::v1::
      InsertRegionBackendServicesRequest request;
  request.set_project(project);
  request.set_region(region);
  *request.mutable_backend_service_resource() = backend_service_resource;
  return connection_->InsertRegionBackendServices(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionBackendServicesClient::InsertRegionBackendServices(
    google::cloud::cpp::compute::region_backend_services::v1::
        InsertRegionBackendServicesRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertRegionBackendServices(request);
}

StreamRange<google::cloud::cpp::compute::v1::BackendService>
RegionBackendServicesClient::ListRegionBackendServices(
    std::string const& project, std::string const& region, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_backend_services::v1::
      ListRegionBackendServicesRequest request;
  request.set_project(project);
  request.set_region(region);
  return connection_->ListRegionBackendServices(request);
}

StreamRange<google::cloud::cpp::compute::v1::BackendService>
RegionBackendServicesClient::ListRegionBackendServices(
    google::cloud::cpp::compute::region_backend_services::v1::
        ListRegionBackendServicesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRegionBackendServices(std::move(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionBackendServicesClient::PatchRegionBackendServices(
    std::string const& project, std::string const& region,
    std::string const& backend_service,
    google::cloud::cpp::compute::v1::BackendService const&
        backend_service_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_backend_services::v1::
      PatchRegionBackendServicesRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_backend_service(backend_service);
  *request.mutable_backend_service_resource() = backend_service_resource;
  return connection_->PatchRegionBackendServices(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionBackendServicesClient::PatchRegionBackendServices(
    google::cloud::cpp::compute::region_backend_services::v1::
        PatchRegionBackendServicesRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchRegionBackendServices(request);
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
RegionBackendServicesClient::SetIamPolicy(
    std::string const& project, std::string const& region,
    std::string const& resource,
    google::cloud::cpp::compute::v1::RegionSetPolicyRequest const&
        region_set_policy_request_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_backend_services::v1::SetIamPolicyRequest
      request;
  request.set_project(project);
  request.set_region(region);
  request.set_resource(resource);
  *request.mutable_region_set_policy_request_resource() =
      region_set_policy_request_resource;
  return connection_->SetIamPolicy(request);
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
RegionBackendServicesClient::SetIamPolicy(
    google::cloud::cpp::compute::region_backend_services::v1::
        SetIamPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SetIamPolicy(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionBackendServicesClient::UpdateRegionBackendServices(
    std::string const& project, std::string const& region,
    std::string const& backend_service,
    google::cloud::cpp::compute::v1::BackendService const&
        backend_service_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_backend_services::v1::
      UpdateRegionBackendServicesRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_backend_service(backend_service);
  *request.mutable_backend_service_resource() = backend_service_resource;
  return connection_->UpdateRegionBackendServices(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionBackendServicesClient::UpdateRegionBackendServices(
    google::cloud::cpp::compute::region_backend_services::v1::
        UpdateRegionBackendServicesRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRegionBackendServices(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_backend_services_v1
}  // namespace cloud
}  // namespace google
