// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_NETWORK_FIREWALL_POLICIES_V1_REGION_NETWORK_FIREWALL_POLICIES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_NETWORK_FIREWALL_POLICIES_V1_REGION_NETWORK_FIREWALL_POLICIES_CLIENT_H

#include "google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_network_firewall_policies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the regionNetworkFirewallPolicies resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/regionNetworkFirewallPolicies
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class RegionNetworkFirewallPoliciesClient {
 public:
  explicit RegionNetworkFirewallPoliciesClient(ExperimentalTag, std::shared_ptr<RegionNetworkFirewallPoliciesConnection> connection, Options opts = {});
  ~RegionNetworkFirewallPoliciesClient();

  ///@{
  /// @name Copy and move support
  RegionNetworkFirewallPoliciesClient(RegionNetworkFirewallPoliciesClient const&) = default;
  RegionNetworkFirewallPoliciesClient& operator=(RegionNetworkFirewallPoliciesClient const&) = default;
  RegionNetworkFirewallPoliciesClient(RegionNetworkFirewallPoliciesClient&&) = default;
  RegionNetworkFirewallPoliciesClient& operator=(RegionNetworkFirewallPoliciesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(RegionNetworkFirewallPoliciesClient const& a, RegionNetworkFirewallPoliciesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(RegionNetworkFirewallPoliciesClient const& a, RegionNetworkFirewallPoliciesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Inserts an association for the specified network firewall policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to update.
  /// @param firewall_policy_association_resource  The FirewallPolicyAssociation for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.AddAssociationRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L194}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  AddAssociation(std::string const& project, std::string const& region, std::string const& firewall_policy, google::cloud::cpp::compute::v1::FirewallPolicyAssociation const& firewall_policy_association_resource, Options opts = {});

  ///
  /// Inserts an association for the specified network firewall policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::AddAssociationRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L194}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.AddAssociationRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L194}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  AddAssociation(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::AddAssociationRequest const& request, Options opts = {});

  ///
  /// Inserts a rule into a network firewall policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to update.
  /// @param firewall_policy_rule_resource  The FirewallPolicyRule for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.AddRuleRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L226}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  AddRule(std::string const& project, std::string const& region, std::string const& firewall_policy, google::cloud::cpp::compute::v1::FirewallPolicyRule const& firewall_policy_rule_resource, Options opts = {});

  ///
  /// Inserts a rule into a network firewall policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::AddRuleRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L226}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.AddRuleRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L226}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  AddRule(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::AddRuleRequest const& request, Options opts = {});

  ///
  /// Copies rules to the specified network firewall policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to update.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.CloneRulesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L261}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  CloneRules(std::string const& project, std::string const& region, std::string const& firewall_policy, Options opts = {});

  ///
  /// Copies rules to the specified network firewall policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::CloneRulesRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L261}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.CloneRulesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L261}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  CloneRules(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::CloneRulesRequest const& request, Options opts = {});

  ///
  /// Deletes the specified network firewall policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.DeleteRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L288}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionNetworkFirewallPolicies(std::string const& project, std::string const& region, std::string const& firewall_policy, Options opts = {});

  ///
  /// Deletes the specified network firewall policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::DeleteRegionNetworkFirewallPoliciesRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L288}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.DeleteRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L288}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionNetworkFirewallPolicies(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::DeleteRegionNetworkFirewallPoliciesRequest const& request, Options opts = {});

  ///
  /// Returns the specified network firewall policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to get.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::FirewallPolicy,google/cloud/compute/v1/internal/common.proto#L5986}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L354}
  /// [google.cloud.cpp.compute.v1.FirewallPolicy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L5986}
  ///
  StatusOr<google::cloud::cpp::compute::v1::FirewallPolicy>
  GetRegionNetworkFirewallPolicies(std::string const& project, std::string const& region, std::string const& firewall_policy, Options opts = {});

  ///
  /// Returns the specified network firewall policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetRegionNetworkFirewallPoliciesRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L354}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::FirewallPolicy,google/cloud/compute/v1/internal/common.proto#L5986}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L354}
  /// [google.cloud.cpp.compute.v1.FirewallPolicy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L5986}
  ///
  StatusOr<google::cloud::cpp::compute::v1::FirewallPolicy>
  GetRegionNetworkFirewallPolicies(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetRegionNetworkFirewallPoliciesRequest const& request, Options opts = {});

  ///
  /// Gets an association with the specified name.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to which the queried association belongs.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::FirewallPolicyAssociation,google/cloud/compute/v1/internal/common.proto#L6069}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetAssociationRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L312}
  /// [google.cloud.cpp.compute.v1.FirewallPolicyAssociation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6069}
  ///
  StatusOr<google::cloud::cpp::compute::v1::FirewallPolicyAssociation>
  GetAssociation(std::string const& project, std::string const& region, std::string const& firewall_policy, Options opts = {});

  ///
  /// Gets an association with the specified name.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetAssociationRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L312}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::FirewallPolicyAssociation,google/cloud/compute/v1/internal/common.proto#L6069}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetAssociationRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L312}
  /// [google.cloud.cpp.compute.v1.FirewallPolicyAssociation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6069}
  ///
  StatusOr<google::cloud::cpp::compute::v1::FirewallPolicyAssociation>
  GetAssociation(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetAssociationRequest const& request, Options opts = {});

  ///
  /// Returns the effective firewalls on a given network.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param network  Network reference
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse,google/cloud/compute/v1/internal/common.proto#L20578}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetEffectiveFirewallsRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L327}
  /// [google.cloud.cpp.compute.v1.RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L20578}
  ///
  StatusOr<google::cloud::cpp::compute::v1::RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse>
  GetEffectiveFirewalls(std::string const& project, std::string const& region, std::string const& network, Options opts = {});

  ///
  /// Returns the effective firewalls on a given network.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetEffectiveFirewallsRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L327}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse,google/cloud/compute/v1/internal/common.proto#L20578}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetEffectiveFirewallsRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L327}
  /// [google.cloud.cpp.compute.v1.RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L20578}
  ///
  StatusOr<google::cloud::cpp::compute::v1::RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse>
  GetEffectiveFirewalls(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetEffectiveFirewallsRequest const& request, Options opts = {});

  ///
  /// Gets the access control policy for a resource. May be empty if no such
  /// policy or resource exists.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18654}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetIamPolicyRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L339}
  /// [google.cloud.cpp.compute.v1.Policy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18654}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy>
  GetIamPolicy(std::string const& project, std::string const& region, std::string const& resource, Options opts = {});

  ///
  /// Gets the access control policy for a resource. May be empty if no such
  /// policy or resource exists.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetIamPolicyRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L339}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18654}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetIamPolicyRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L339}
  /// [google.cloud.cpp.compute.v1.Policy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18654}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy>
  GetIamPolicy(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetIamPolicyRequest const& request, Options opts = {});

  ///
  /// Gets a rule of the specified priority.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to which the queried rule belongs.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::FirewallPolicyRule,google/cloud/compute/v1/internal/common.proto#L6189}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetRuleRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L366}
  /// [google.cloud.cpp.compute.v1.FirewallPolicyRule]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6189}
  ///
  StatusOr<google::cloud::cpp::compute::v1::FirewallPolicyRule>
  GetRule(std::string const& project, std::string const& region, std::string const& firewall_policy, Options opts = {});

  ///
  /// Gets a rule of the specified priority.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetRuleRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L366}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::FirewallPolicyRule,google/cloud/compute/v1/internal/common.proto#L6189}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.GetRuleRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L366}
  /// [google.cloud.cpp.compute.v1.FirewallPolicyRule]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6189}
  ///
  StatusOr<google::cloud::cpp::compute::v1::FirewallPolicyRule>
  GetRule(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::GetRuleRequest const& request, Options opts = {});

  ///
  /// Creates a new network firewall policy in the specified project and region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy_resource  The FirewallPolicy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.InsertRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L381}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionNetworkFirewallPolicies(std::string const& project, std::string const& region, google::cloud::cpp::compute::v1::FirewallPolicy const& firewall_policy_resource, Options opts = {});

  ///
  /// Creates a new network firewall policy in the specified project and region.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::InsertRegionNetworkFirewallPoliciesRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L381}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.InsertRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L381}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionNetworkFirewallPolicies(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::InsertRegionNetworkFirewallPoliciesRequest const& request, Options opts = {});

  ///
  /// Lists all the network firewall policies that have been configured for the
  /// specified project in the given region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::FirewallPolicy,google/cloud/compute/v1/internal/common.proto#L5986}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.ListRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L405}
  /// [google.cloud.cpp.compute.v1.FirewallPolicy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L5986}
  ///
  StreamRange<google::cloud::cpp::compute::v1::FirewallPolicy>
  ListRegionNetworkFirewallPolicies(std::string const& project, std::string const& region, Options opts = {});

  ///
  /// Lists all the network firewall policies that have been configured for the
  /// specified project in the given region.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::ListRegionNetworkFirewallPoliciesRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L405}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::FirewallPolicy,google/cloud/compute/v1/internal/common.proto#L5986}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.ListRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L405}
  /// [google.cloud.cpp.compute.v1.FirewallPolicy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L5986}
  ///
  StreamRange<google::cloud::cpp::compute::v1::FirewallPolicy>
  ListRegionNetworkFirewallPolicies(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::ListRegionNetworkFirewallPoliciesRequest request, Options opts = {});

  ///
  /// Patches the specified network firewall policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to update.
  /// @param firewall_policy_resource  The FirewallPolicy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.PatchRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L473}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchRegionNetworkFirewallPolicies(std::string const& project, std::string const& region, std::string const& firewall_policy, google::cloud::cpp::compute::v1::FirewallPolicy const& firewall_policy_resource, Options opts = {});

  ///
  /// Patches the specified network firewall policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::PatchRegionNetworkFirewallPoliciesRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L473}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.PatchRegionNetworkFirewallPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L473}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchRegionNetworkFirewallPolicies(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::PatchRegionNetworkFirewallPoliciesRequest const& request, Options opts = {});

  ///
  /// Patches a rule of the specified priority.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to update.
  /// @param firewall_policy_rule_resource  The FirewallPolicyRule for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.PatchRuleRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L500}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchRule(std::string const& project, std::string const& region, std::string const& firewall_policy, google::cloud::cpp::compute::v1::FirewallPolicyRule const& firewall_policy_rule_resource, Options opts = {});

  ///
  /// Patches a rule of the specified priority.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::PatchRuleRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L500}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.PatchRuleRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L500}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchRule(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::PatchRuleRequest const& request, Options opts = {});

  ///
  /// Removes an association for the specified network firewall policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to update.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.RemoveAssociationRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L530}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  RemoveAssociation(std::string const& project, std::string const& region, std::string const& firewall_policy, Options opts = {});

  ///
  /// Removes an association for the specified network firewall policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::RemoveAssociationRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L530}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.RemoveAssociationRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L530}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  RemoveAssociation(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::RemoveAssociationRequest const& request, Options opts = {});

  ///
  /// Deletes a rule of the specified priority.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param firewall_policy  Name of the firewall policy to update.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.RemoveRuleRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L557}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  RemoveRule(std::string const& project, std::string const& region, std::string const& firewall_policy, Options opts = {});

  ///
  /// Deletes a rule of the specified priority.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::RemoveRuleRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L557}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.RemoveRuleRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L557}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  RemoveRule(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::RemoveRuleRequest const& request, Options opts = {});

  ///
  /// Sets the access control policy on the specified resource. Replaces any
  /// existing policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param region_set_policy_request_resource  The RegionSetPolicyRequest for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18654}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.SetIamPolicyRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L584}
  /// [google.cloud.cpp.compute.v1.Policy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18654}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy>
  SetIamPolicy(std::string const& project, std::string const& region, std::string const& resource, google::cloud::cpp::compute::v1::RegionSetPolicyRequest const& region_set_policy_request_resource, Options opts = {});

  ///
  /// Sets the access control policy on the specified resource. Replaces any
  /// existing policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::SetIamPolicyRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L584}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18654}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.SetIamPolicyRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L584}
  /// [google.cloud.cpp.compute.v1.Policy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18654}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy>
  SetIamPolicy(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::SetIamPolicyRequest const& request, Options opts = {});

  ///
  /// Returns permissions that a caller has on the specified resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param test_permissions_request_resource  The TestPermissionsRequest for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TestPermissionsResponse,google/cloud/compute/v1/internal/common.proto#L28901}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.TestIamPermissionsRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L599}
  /// [google.cloud.cpp.compute.v1.TestPermissionsResponse]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28901}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
  TestIamPermissions(std::string const& project, std::string const& region, std::string const& resource, google::cloud::cpp::compute::v1::TestPermissionsRequest const& test_permissions_request_resource, Options opts = {});

  ///
  /// Returns permissions that a caller has on the specified resource.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::TestIamPermissionsRequest,google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L599}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TestPermissionsResponse,google/cloud/compute/v1/internal/common.proto#L28901}
  ///
  /// [google.cloud.cpp.compute.regionNetworkFirewallPolicies.v1.TestIamPermissionsRequest]: @googleapis_reference_link{google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto#L599}
  /// [google.cloud.cpp.compute.v1.TestPermissionsResponse]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28901}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
  TestIamPermissions(google::cloud::cpp::compute::regionNetworkFirewallPolicies::v1::TestIamPermissionsRequest const& request, Options opts = {});

 private:
  std::shared_ptr<RegionNetworkFirewallPoliciesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_network_firewall_policies_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_NETWORK_FIREWALL_POLICIES_V1_REGION_NETWORK_FIREWALL_POLICIES_CLIENT_H
