// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies.proto

#include "google/cloud/compute/region_network_firewall_policies/v1/region_network_firewall_policies_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_network_firewall_policies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::
    ~RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy() = default;

std::unique_ptr<RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy>
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<
      RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy>(*this);
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::AddAssociation(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        AddAssociationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::AddRule(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        AddRuleRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::CloneRules(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        CloneRulesRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::DeleteFirewallPolicy(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        DeleteFirewallPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::GetFirewallPolicy(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        GetFirewallPolicyRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::GetAssociation(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        GetAssociationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::GetEffectiveFirewalls(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        GetEffectiveFirewallsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::GetIamPolicy(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        GetIamPolicyRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::GetRule(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        GetRuleRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::InsertFirewallPolicy(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        InsertFirewallPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::
    ListRegionNetworkFirewallPolicies(
        google::cloud::cpp::compute::region_network_firewall_policies::v1::
            ListRegionNetworkFirewallPoliciesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::PatchFirewallPolicy(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        PatchFirewallPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::PatchRule(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        PatchRuleRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::RemoveAssociation(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        RemoveAssociationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::RemoveRule(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        RemoveRuleRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::SetIamPolicy(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        SetIamPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy::TestIamPermissions(
    google::cloud::cpp::compute::region_network_firewall_policies::v1::
        TestIamPermissionsRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy>
MakeDefaultRegionNetworkFirewallPoliciesConnectionIdempotencyPolicy() {
  return std::make_unique<
      RegionNetworkFirewallPoliciesConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_network_firewall_policies_v1
}  // namespace cloud
}  // namespace google
