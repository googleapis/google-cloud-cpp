// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/backend_buckets/v1/backend_buckets.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_BACKEND_BUCKETS_V1_BACKEND_BUCKETS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_BACKEND_BUCKETS_V1_BACKEND_BUCKETS_CLIENT_H

#include "google/cloud/compute/backend_buckets/v1/backend_buckets_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_backend_buckets_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the backendBuckets resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/backendBuckets
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class BackendBucketsClient {
 public:
  explicit BackendBucketsClient(
      ExperimentalTag, std::shared_ptr<BackendBucketsConnection> connection,
      Options opts = {});
  ~BackendBucketsClient();

  ///@{
  /// @name Copy and move support
  BackendBucketsClient(BackendBucketsClient const&) = default;
  BackendBucketsClient& operator=(BackendBucketsClient const&) = default;
  BackendBucketsClient(BackendBucketsClient&&) = default;
  BackendBucketsClient& operator=(BackendBucketsClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(BackendBucketsClient const& a,
                         BackendBucketsClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(BackendBucketsClient const& a,
                         BackendBucketsClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Adds a key for validating requests with signed URLs for this backend
  /// bucket.
  ///
  /// @param project  Project ID for this request.
  /// @param backend_bucket  Name of the BackendBucket resource to which the
  /// Signed URL Key should be
  ///  added. The name should conform to RFC1035.
  /// @param signed_url_key_resource  The SignedUrlKey for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.AddSignedUrlKeyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L141}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> AddSignedUrlKey(
      std::string const& project, std::string const& backend_bucket,
      google::cloud::cpp::compute::v1::SignedUrlKey const&
          signed_url_key_resource,
      Options opts = {});

  ///
  /// Adds a key for validating requests with signed URLs for this backend
  /// bucket.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::backendBuckets::v1::AddSignedUrlKeyRequest,google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L141}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.AddSignedUrlKeyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L141}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> AddSignedUrlKey(
      google::cloud::cpp::compute::backendBuckets::v1::
          AddSignedUrlKeyRequest const& request,
      Options opts = {});

  ///
  /// Deletes the specified BackendBucket resource.
  ///
  /// @param project  Project ID for this request.
  /// @param backend_bucket  Name of the BackendBucket resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.DeleteBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L169}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteBackendBuckets(
      std::string const& project, std::string const& backend_bucket,
      Options opts = {});

  ///
  /// Deletes the specified BackendBucket resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::backendBuckets::v1::DeleteBackendBucketsRequest,google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L169}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.DeleteBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L169}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteBackendBuckets(
      google::cloud::cpp::compute::backendBuckets::v1::
          DeleteBackendBucketsRequest const& request,
      Options opts = {});

  ///
  /// Deletes a key for validating requests with signed URLs for this backend
  /// bucket.
  ///
  /// @param project  Project ID for this request.
  /// @param backend_bucket  Name of the BackendBucket resource to which the
  /// Signed URL Key should be
  ///  added. The name should conform to RFC1035.
  /// @param key_name  The name of the Signed URL Key to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.DeleteSignedUrlKeyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L193}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteSignedUrlKey(
      std::string const& project, std::string const& backend_bucket,
      std::string const& key_name, Options opts = {});

  ///
  /// Deletes a key for validating requests with signed URLs for this backend
  /// bucket.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::backendBuckets::v1::DeleteSignedUrlKeyRequest,google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L193}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.DeleteSignedUrlKeyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L193}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteSignedUrlKey(
      google::cloud::cpp::compute::backendBuckets::v1::
          DeleteSignedUrlKeyRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified BackendBucket resource.
  ///
  /// @param project  Project ID for this request.
  /// @param backend_bucket  Name of the BackendBucket resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendBucket,google/cloud/compute/v1/internal/common.proto#L2012}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.GetBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L221}
  /// [google.cloud.cpp.compute.v1.BackendBucket]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L2012}
  ///
  StatusOr<google::cloud::cpp::compute::v1::BackendBucket> GetBackendBuckets(
      std::string const& project, std::string const& backend_bucket,
      Options opts = {});

  ///
  /// Returns the specified BackendBucket resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::backendBuckets::v1::GetBackendBucketsRequest,google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L221}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendBucket,google/cloud/compute/v1/internal/common.proto#L2012}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.GetBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L221}
  /// [google.cloud.cpp.compute.v1.BackendBucket]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L2012}
  ///
  StatusOr<google::cloud::cpp::compute::v1::BackendBucket> GetBackendBuckets(
      google::cloud::cpp::compute::backendBuckets::v1::
          GetBackendBucketsRequest const& request,
      Options opts = {});

  ///
  /// Creates a BackendBucket resource in the specified project using the data
  /// included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param backend_bucket_resource  The BackendBucket for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.InsertBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L230}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertBackendBuckets(
      std::string const& project,
      google::cloud::cpp::compute::v1::BackendBucket const&
          backend_bucket_resource,
      Options opts = {});

  ///
  /// Creates a BackendBucket resource in the specified project using the data
  /// included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::backendBuckets::v1::InsertBackendBucketsRequest,google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L230}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.InsertBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L230}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertBackendBuckets(
      google::cloud::cpp::compute::backendBuckets::v1::
          InsertBackendBucketsRequest const& request,
      Options opts = {});

  ///
  /// Retrieves the list of BackendBucket resources available to the specified
  /// project.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendBucket,google/cloud/compute/v1/internal/common.proto#L2012}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.ListBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L255}
  /// [google.cloud.cpp.compute.v1.BackendBucket]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L2012}
  ///
  StreamRange<google::cloud::cpp::compute::v1::BackendBucket>
  ListBackendBuckets(std::string const& project, Options opts = {});

  ///
  /// Retrieves the list of BackendBucket resources available to the specified
  /// project.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::backendBuckets::v1::ListBackendBucketsRequest,google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L255}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::BackendBucket,google/cloud/compute/v1/internal/common.proto#L2012}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.ListBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L255}
  /// [google.cloud.cpp.compute.v1.BackendBucket]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L2012}
  ///
  StreamRange<google::cloud::cpp::compute::v1::BackendBucket>
  ListBackendBuckets(
      google::cloud::cpp::compute::backendBuckets::v1::ListBackendBucketsRequest
          request,
      Options opts = {});

  ///
  /// Updates the specified BackendBucket resource with the data included in the
  /// request. This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules.
  ///
  /// @param project  Project ID for this request.
  /// @param backend_bucket  Name of the BackendBucket resource to patch.
  /// @param backend_bucket_resource  The BackendBucket for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.PatchBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L320}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchBackendBuckets(
      std::string const& project, std::string const& backend_bucket,
      google::cloud::cpp::compute::v1::BackendBucket const&
          backend_bucket_resource,
      Options opts = {});

  ///
  /// Updates the specified BackendBucket resource with the data included in the
  /// request. This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::backendBuckets::v1::PatchBackendBucketsRequest,google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L320}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.PatchBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L320}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchBackendBuckets(
      google::cloud::cpp::compute::backendBuckets::v1::
          PatchBackendBucketsRequest const& request,
      Options opts = {});

  ///
  /// Sets the edge security policy for the specified backend bucket.
  ///
  /// @param project  Project ID for this request.
  /// @param backend_bucket  Name of the BackendService resource to which the
  /// security policy should be
  ///  set. The name should conform to RFC1035.
  /// @param security_policy_reference_resource  The SecurityPolicyReference for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.SetEdgeSecurityPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L348}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetEdgeSecurityPolicy(
      std::string const& project, std::string const& backend_bucket,
      google::cloud::cpp::compute::v1::SecurityPolicyReference const&
          security_policy_reference_resource,
      Options opts = {});

  ///
  /// Sets the edge security policy for the specified backend bucket.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::backendBuckets::v1::SetEdgeSecurityPolicyRequest,google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L348}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.SetEdgeSecurityPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L348}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetEdgeSecurityPolicy(
      google::cloud::cpp::compute::backendBuckets::v1::
          SetEdgeSecurityPolicyRequest const& request,
      Options opts = {});

  ///
  /// Updates the specified BackendBucket resource with the data included in the
  /// request.
  ///
  /// @param project  Project ID for this request.
  /// @param backend_bucket  Name of the BackendBucket resource to update.
  /// @param backend_bucket_resource  The BackendBucket for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.UpdateBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L377}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> UpdateBackendBuckets(
      std::string const& project, std::string const& backend_bucket,
      google::cloud::cpp::compute::v1::BackendBucket const&
          backend_bucket_resource,
      Options opts = {});

  ///
  /// Updates the specified BackendBucket resource with the data included in the
  /// request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::backendBuckets::v1::UpdateBackendBucketsRequest,google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L377}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.backendBuckets.v1.UpdateBackendBucketsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/backend_buckets/v1/backend_buckets.proto#L377}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> UpdateBackendBuckets(
      google::cloud::cpp::compute::backendBuckets::v1::
          UpdateBackendBucketsRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<BackendBucketsConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_backend_buckets_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_BACKEND_BUCKETS_V1_BACKEND_BUCKETS_CLIENT_H
