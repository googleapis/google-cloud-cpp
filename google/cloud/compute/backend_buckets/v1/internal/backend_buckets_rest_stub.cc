// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/backend_buckets/v1/backend_buckets.proto

#include "google/cloud/compute/backend_buckets/v1/internal/backend_buckets_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/backend_buckets/v1/backend_buckets.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_backend_buckets_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultBackendBucketsRestStub::DefaultBackendBucketsRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultBackendBucketsRestStub::DefaultBackendBucketsRestStub(
    std::shared_ptr<rest_internal::RestClient> service,
    Options options)
    : service_(std::move(service)),
      options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultBackendBucketsRestStub::AddSignedUrlKey(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::backendBuckets::v1::AddSignedUrlKeyRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}/addSignedUrlKey");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultBackendBucketsRestStub::DeleteBackendBuckets(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::backendBuckets::v1::DeleteBackendBucketsRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultBackendBucketsRestStub::DeleteSignedUrlKey(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::backendBuckets::v1::DeleteSignedUrlKeyRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}/deleteSignedUrlKey");
}

StatusOr<google::cloud::cpp::compute::v1::BackendBucket>
DefaultBackendBucketsRestStub::GetBackendBuckets(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::backendBuckets::v1::GetBackendBucketsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::BackendBucket>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}",
      {std::make_pair("backend_bucket", request.backend_bucket()),
       std::make_pair("project", request.project())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultBackendBucketsRestStub::InsertBackendBuckets(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::backendBuckets::v1::InsertBackendBucketsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/backendBuckets");
}

StatusOr<google::cloud::cpp::compute::v1::BackendBucketList>
DefaultBackendBucketsRestStub::ListBackendBuckets(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::backendBuckets::v1::ListBackendBucketsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::BackendBucketList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/backendBuckets",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultBackendBucketsRestStub::PatchBackendBuckets(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::backendBuckets::v1::PatchBackendBucketsRequest const& request) {
  return rest_internal::Patch<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultBackendBucketsRestStub::SetEdgeSecurityPolicy(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::backendBuckets::v1::SetEdgeSecurityPolicyRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}/setEdgeSecurityPolicy");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultBackendBucketsRestStub::UpdateBackendBuckets(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::backendBuckets::v1::UpdateBackendBucketsRequest const& request) {
  return rest_internal::Put<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_backend_buckets_v1_internal
}  // namespace cloud
}  // namespace google
