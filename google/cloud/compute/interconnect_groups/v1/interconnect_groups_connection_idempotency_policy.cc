// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/interconnect_groups/v1/interconnect_groups.proto

#include "google/cloud/compute/interconnect_groups/v1/interconnect_groups_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_interconnect_groups_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

InterconnectGroupsConnectionIdempotencyPolicy::
    ~InterconnectGroupsConnectionIdempotencyPolicy() = default;

std::unique_ptr<InterconnectGroupsConnectionIdempotencyPolicy>
InterconnectGroupsConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<InterconnectGroupsConnectionIdempotencyPolicy>(*this);
}

Idempotency InterconnectGroupsConnectionIdempotencyPolicy::CreateMembers(
    google::cloud::cpp::compute::interconnect_groups::v1::
        CreateMembersRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
InterconnectGroupsConnectionIdempotencyPolicy::DeleteInterconnectGroup(
    google::cloud::cpp::compute::interconnect_groups::v1::
        DeleteInterconnectGroupRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency InterconnectGroupsConnectionIdempotencyPolicy::GetInterconnectGroup(
    google::cloud::cpp::compute::interconnect_groups::v1::
        GetInterconnectGroupRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency InterconnectGroupsConnectionIdempotencyPolicy::GetIamPolicy(
    google::cloud::cpp::compute::interconnect_groups::v1::
        GetIamPolicyRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency InterconnectGroupsConnectionIdempotencyPolicy::GetOperationalStatus(
    google::cloud::cpp::compute::interconnect_groups::v1::
        GetOperationalStatusRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
InterconnectGroupsConnectionIdempotencyPolicy::InsertInterconnectGroup(
    google::cloud::cpp::compute::interconnect_groups::v1::
        InsertInterconnectGroupRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
InterconnectGroupsConnectionIdempotencyPolicy::ListInterconnectGroups(
    google::cloud::cpp::compute::interconnect_groups::v1::
        ListInterconnectGroupsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency
InterconnectGroupsConnectionIdempotencyPolicy::PatchInterconnectGroup(
    google::cloud::cpp::compute::interconnect_groups::v1::
        PatchInterconnectGroupRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency InterconnectGroupsConnectionIdempotencyPolicy::SetIamPolicy(
    google::cloud::cpp::compute::interconnect_groups::v1::
        SetIamPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency InterconnectGroupsConnectionIdempotencyPolicy::TestIamPermissions(
    google::cloud::cpp::compute::interconnect_groups::v1::
        TestIamPermissionsRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<InterconnectGroupsConnectionIdempotencyPolicy>
MakeDefaultInterconnectGroupsConnectionIdempotencyPolicy() {
  return std::make_unique<InterconnectGroupsConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_interconnect_groups_v1
}  // namespace cloud
}  // namespace google
