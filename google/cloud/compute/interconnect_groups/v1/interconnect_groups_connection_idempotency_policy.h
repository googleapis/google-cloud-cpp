// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/interconnect_groups/v1/interconnect_groups.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_INTERCONNECT_GROUPS_V1_INTERCONNECT_GROUPS_CONNECTION_IDEMPOTENCY_POLICY_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_INTERCONNECT_GROUPS_V1_INTERCONNECT_GROUPS_CONNECTION_IDEMPOTENCY_POLICY_H

#include "google/cloud/idempotency.h"
#include "google/cloud/version.h"
#include <google/cloud/compute/interconnect_groups/v1/interconnect_groups.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_interconnect_groups_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class InterconnectGroupsConnectionIdempotencyPolicy {
 public:
  virtual ~InterconnectGroupsConnectionIdempotencyPolicy();

  /// Create a new copy of this object.
  virtual std::unique_ptr<InterconnectGroupsConnectionIdempotencyPolicy> clone()
      const;

  virtual google::cloud::Idempotency CreateMembers(
      google::cloud::cpp::compute::interconnect_groups::v1::
          CreateMembersRequest const& request);

  virtual google::cloud::Idempotency DeleteInterconnectGroup(
      google::cloud::cpp::compute::interconnect_groups::v1::
          DeleteInterconnectGroupRequest const& request);

  virtual google::cloud::Idempotency GetInterconnectGroup(
      google::cloud::cpp::compute::interconnect_groups::v1::
          GetInterconnectGroupRequest const& request);

  virtual google::cloud::Idempotency GetIamPolicy(
      google::cloud::cpp::compute::interconnect_groups::v1::
          GetIamPolicyRequest const& request);

  virtual google::cloud::Idempotency GetOperationalStatus(
      google::cloud::cpp::compute::interconnect_groups::v1::
          GetOperationalStatusRequest const& request);

  virtual google::cloud::Idempotency InsertInterconnectGroup(
      google::cloud::cpp::compute::interconnect_groups::v1::
          InsertInterconnectGroupRequest const& request);

  virtual google::cloud::Idempotency ListInterconnectGroups(
      google::cloud::cpp::compute::interconnect_groups::v1::
          ListInterconnectGroupsRequest request);

  virtual google::cloud::Idempotency PatchInterconnectGroup(
      google::cloud::cpp::compute::interconnect_groups::v1::
          PatchInterconnectGroupRequest const& request);

  virtual google::cloud::Idempotency SetIamPolicy(
      google::cloud::cpp::compute::interconnect_groups::v1::
          SetIamPolicyRequest const& request);

  virtual google::cloud::Idempotency TestIamPermissions(
      google::cloud::cpp::compute::interconnect_groups::v1::
          TestIamPermissionsRequest const& request);
};

std::unique_ptr<InterconnectGroupsConnectionIdempotencyPolicy>
MakeDefaultInterconnectGroupsConnectionIdempotencyPolicy();

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_interconnect_groups_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_INTERCONNECT_GROUPS_V1_INTERCONNECT_GROUPS_CONNECTION_IDEMPOTENCY_POLICY_H
