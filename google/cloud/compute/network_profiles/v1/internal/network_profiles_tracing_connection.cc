// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/network_profiles/v1/network_profiles.proto

#include "google/cloud/compute/network_profiles/v1/internal/network_profiles_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace compute_network_profiles_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

NetworkProfilesTracingConnection::NetworkProfilesTracingConnection(
    std::shared_ptr<compute_network_profiles_v1::NetworkProfilesConnection>
        child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::cpp::compute::v1::NetworkProfile>
NetworkProfilesTracingConnection::GetNetworkProfile(
    google::cloud::cpp::compute::network_profiles::v1::
        GetNetworkProfileRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_network_profiles_v1::NetworkProfilesConnection::"
      "GetNetworkProfile");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetNetworkProfile(request));
}

StreamRange<google::cloud::cpp::compute::v1::NetworkProfile>
NetworkProfilesTracingConnection::ListNetworkProfiles(
    google::cloud::cpp::compute::network_profiles::v1::
        ListNetworkProfilesRequest request) {
  auto span = internal::MakeSpan(
      "compute_network_profiles_v1::NetworkProfilesConnection::"
      "ListNetworkProfiles");
  internal::OTelScope scope(span);
  auto sr = child_->ListNetworkProfiles(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::cpp::compute::v1::NetworkProfile>(std::move(span),
                                                       std::move(sr));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<compute_network_profiles_v1::NetworkProfilesConnection>
MakeNetworkProfilesTracingConnection(
    std::shared_ptr<compute_network_profiles_v1::NetworkProfilesConnection>
        conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<NetworkProfilesTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_network_profiles_v1_internal
}  // namespace cloud
}  // namespace google
