// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/machine_images/v1/machine_images.proto

#include "google/cloud/compute/machine_images/v1/internal/machine_images_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/machine_images/v1/machine_images.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_machine_images_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultMachineImagesRestStub::DefaultMachineImagesRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultMachineImagesRestStub::DefaultMachineImagesRestStub(
    std::shared_ptr<rest_internal::RestClient> service,
    Options options)
    : service_(std::move(service)),
      options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultMachineImagesRestStub::DeleteMachineImages(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::machineImages::v1::DeleteMachineImagesRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/machineImages/{machine_image}");
}

StatusOr<google::cloud::cpp::compute::v1::MachineImage>
DefaultMachineImagesRestStub::GetMachineImages(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::machineImages::v1::GetMachineImagesRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::MachineImage>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/machineImages/{machine_image}",
      {std::make_pair("machine_image", request.machine_image()),
       std::make_pair("project", request.project())});
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DefaultMachineImagesRestStub::GetIamPolicy(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::machineImages::v1::GetIamPolicyRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Policy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/machineImages/{resource}/getIamPolicy",
      {std::make_pair("options_requested_policy_version", std::to_string(request.options_requested_policy_version())),
       std::make_pair("project", request.project()),
       std::make_pair("resource", request.resource())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultMachineImagesRestStub::InsertMachineImages(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::machineImages::v1::InsertMachineImagesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/machineImages");
}

StatusOr<google::cloud::cpp::compute::v1::MachineImageList>
DefaultMachineImagesRestStub::ListMachineImages(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::machineImages::v1::ListMachineImagesRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::MachineImageList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/machineImages",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DefaultMachineImagesRestStub::SetIamPolicy(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::machineImages::v1::SetIamPolicyRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Policy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/machineImages/{resource}/setIamPolicy");
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
DefaultMachineImagesRestStub::TestIamPermissions(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::machineImages::v1::TestIamPermissionsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::TestPermissionsResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/machineImages/{resource}/testIamPermissions");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_machine_images_v1_internal
}  // namespace cloud
}  // namespace google
