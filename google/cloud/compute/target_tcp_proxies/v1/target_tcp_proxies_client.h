// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_TCP_PROXIES_V1_TARGET_TCP_PROXIES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_TCP_PROXIES_V1_TARGET_TCP_PROXIES_CLIENT_H

#include "google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_tcp_proxies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the targetTcpProxies resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/targetTcpProxies
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class TargetTcpProxiesClient {
 public:
  explicit TargetTcpProxiesClient(ExperimentalTag, std::shared_ptr<TargetTcpProxiesConnection> connection, Options opts = {});
  ~TargetTcpProxiesClient();

  ///@{
  /// @name Copy and move support
  TargetTcpProxiesClient(TargetTcpProxiesClient const&) = default;
  TargetTcpProxiesClient& operator=(TargetTcpProxiesClient const&) = default;
  TargetTcpProxiesClient(TargetTcpProxiesClient&&) = default;
  TargetTcpProxiesClient& operator=(TargetTcpProxiesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(TargetTcpProxiesClient const& a, TargetTcpProxiesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(TargetTcpProxiesClient const& a, TargetTcpProxiesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves the list of all TargetTcpProxy resources, regional and global,
  /// available to the specified project.
  ///
  /// @param project  Name of the project scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TargetTcpProxyAggregatedList,google/cloud/compute/v1/internal/common.proto#L28296}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.AggregatedListTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L102}
  /// [google.cloud.cpp.compute.v1.TargetTcpProxyAggregatedList]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28296}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetTcpProxyAggregatedList>
  AggregatedListTargetTcpProxies(std::string const& project, Options opts = {});

  ///
  /// Retrieves the list of all TargetTcpProxy resources, regional and global,
  /// available to the specified project.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::targetTcpProxies::v1::AggregatedListTargetTcpProxiesRequest,google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L102}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TargetTcpProxyAggregatedList,google/cloud/compute/v1/internal/common.proto#L28296}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.AggregatedListTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L102}
  /// [google.cloud.cpp.compute.v1.TargetTcpProxyAggregatedList]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28296}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetTcpProxyAggregatedList>
  AggregatedListTargetTcpProxies(google::cloud::cpp::compute::targetTcpProxies::v1::AggregatedListTargetTcpProxiesRequest const& request, Options opts = {});

  ///
  /// Deletes the specified TargetTcpProxy resource.
  ///
  /// @param project  Project ID for this request.
  /// @param target_tcp_proxy  Name of the TargetTcpProxy resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.DeleteTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L176}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteTargetTcpProxies(std::string const& project, std::string const& target_tcp_proxy, Options opts = {});

  ///
  /// Deletes the specified TargetTcpProxy resource.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::targetTcpProxies::v1::DeleteTargetTcpProxiesRequest,google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L176}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.DeleteTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L176}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteTargetTcpProxies(google::cloud::cpp::compute::targetTcpProxies::v1::DeleteTargetTcpProxiesRequest const& request, Options opts = {});

  ///
  /// Returns the specified TargetTcpProxy resource.
  ///
  /// @param project  Project ID for this request.
  /// @param target_tcp_proxy  Name of the TargetTcpProxy resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TargetTcpProxy,google/cloud/compute/v1/internal/common.proto#L28244}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.GetTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L197}
  /// [google.cloud.cpp.compute.v1.TargetTcpProxy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28244}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetTcpProxy>
  GetTargetTcpProxies(std::string const& project, std::string const& target_tcp_proxy, Options opts = {});

  ///
  /// Returns the specified TargetTcpProxy resource.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::targetTcpProxies::v1::GetTargetTcpProxiesRequest,google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L197}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TargetTcpProxy,google/cloud/compute/v1/internal/common.proto#L28244}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.GetTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L197}
  /// [google.cloud.cpp.compute.v1.TargetTcpProxy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28244}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetTcpProxy>
  GetTargetTcpProxies(google::cloud::cpp::compute::targetTcpProxies::v1::GetTargetTcpProxiesRequest const& request, Options opts = {});

  ///
  /// Creates a TargetTcpProxy resource in the specified project using the data
  /// included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param target_tcp_proxy_resource  The TargetTcpProxy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.InsertTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L206}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertTargetTcpProxies(std::string const& project, google::cloud::cpp::compute::v1::TargetTcpProxy const& target_tcp_proxy_resource, Options opts = {});

  ///
  /// Creates a TargetTcpProxy resource in the specified project using the data
  /// included in the request.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::targetTcpProxies::v1::InsertTargetTcpProxiesRequest,google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L206}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.InsertTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L206}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertTargetTcpProxies(google::cloud::cpp::compute::targetTcpProxies::v1::InsertTargetTcpProxiesRequest const& request, Options opts = {});

  ///
  /// Retrieves the list of TargetTcpProxy resources available to the specified
  /// project.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TargetTcpProxy,google/cloud/compute/v1/internal/common.proto#L28244}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.ListTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L227}
  /// [google.cloud.cpp.compute.v1.TargetTcpProxy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28244}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetTcpProxy>
  ListTargetTcpProxies(std::string const& project, Options opts = {});

  ///
  /// Retrieves the list of TargetTcpProxy resources available to the specified
  /// project.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::targetTcpProxies::v1::ListTargetTcpProxiesRequest,google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L227}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::TargetTcpProxy,google/cloud/compute/v1/internal/common.proto#L28244}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.ListTargetTcpProxiesRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L227}
  /// [google.cloud.cpp.compute.v1.TargetTcpProxy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28244}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetTcpProxy>
  ListTargetTcpProxies(google::cloud::cpp::compute::targetTcpProxies::v1::ListTargetTcpProxiesRequest request, Options opts = {});

  ///
  /// Changes the BackendService for TargetTcpProxy.
  ///
  /// @param project  Project ID for this request.
  /// @param target_tcp_proxy  Name of the TargetTcpProxy resource whose BackendService resource is to be
  ///  set.
  /// @param target_tcp_proxies_set_backend_service_request_resource  The TargetTcpProxiesSetBackendServiceRequest for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.SetBackendServiceRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L292}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  SetBackendService(std::string const& project, std::string const& target_tcp_proxy, google::cloud::cpp::compute::v1::TargetTcpProxiesSetBackendServiceRequest const& target_tcp_proxies_set_backend_service_request_resource, Options opts = {});

  ///
  /// Changes the BackendService for TargetTcpProxy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::targetTcpProxies::v1::SetBackendServiceRequest,google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L292}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.SetBackendServiceRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L292}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  SetBackendService(google::cloud::cpp::compute::targetTcpProxies::v1::SetBackendServiceRequest const& request, Options opts = {});

  ///
  /// Changes the ProxyHeaderType for TargetTcpProxy.
  ///
  /// @param project  Project ID for this request.
  /// @param target_tcp_proxy  Name of the TargetTcpProxy resource whose ProxyHeader is to be set.
  /// @param target_tcp_proxies_set_proxy_header_request_resource  The TargetTcpProxiesSetProxyHeaderRequest for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.SetProxyHeaderRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L317}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  SetProxyHeader(std::string const& project, std::string const& target_tcp_proxy, google::cloud::cpp::compute::v1::TargetTcpProxiesSetProxyHeaderRequest const& target_tcp_proxies_set_proxy_header_request_resource, Options opts = {});

  ///
  /// Changes the ProxyHeaderType for TargetTcpProxy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::targetTcpProxies::v1::SetProxyHeaderRequest,google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L317}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.targetTcpProxies.v1.SetProxyHeaderRequest]: @googleapis_reference_link{google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto#L317}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  SetProxyHeader(google::cloud::cpp::compute::targetTcpProxies::v1::SetProxyHeaderRequest const& request, Options opts = {});

 private:
  std::shared_ptr<TargetTcpProxiesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_tcp_proxies_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_TCP_PROXIES_V1_TARGET_TCP_PROXIES_CLIENT_H
