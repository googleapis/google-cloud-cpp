// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_TCP_PROXIES_V1_INTERNAL_TARGET_TCP_PROXIES_REST_STUB_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_TCP_PROXIES_V1_INTERNAL_TARGET_TCP_PROXIES_REST_STUB_H

#include "google/cloud/completion_queue.h"
#include "google/cloud/internal/rest_client.h"
#include "google/cloud/internal/rest_context.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <google/cloud/compute/target_tcp_proxies/v1/target_tcp_proxies.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_tcp_proxies_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class TargetTcpProxiesRestStub {
 public:
  virtual ~TargetTcpProxiesRestStub() = default;

  virtual StatusOr<
      google::cloud::cpp::compute::v1::TargetTcpProxyAggregatedList>
  AggregatedListTargetTcpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          AggregatedListTargetTcpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteTargetTcpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          DeleteTargetTcpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::TargetTcpProxy>
  GetTargetTcpProxies(google::cloud::rest_internal::RestContext& rest_context,
                      google::cloud::cpp::compute::targetTcpProxies::v1::
                          GetTargetTcpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertTargetTcpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          InsertTargetTcpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::TargetTcpProxyList>
  ListTargetTcpProxies(google::cloud::rest_internal::RestContext& rest_context,
                       google::cloud::cpp::compute::targetTcpProxies::v1::
                           ListTargetTcpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::Operation>
  SetBackendService(google::cloud::rest_internal::RestContext& rest_context,
                    google::cloud::cpp::compute::targetTcpProxies::v1::
                        SetBackendServiceRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::Operation> SetProxyHeader(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          SetProxyHeaderRequest const& request) = 0;
};

class DefaultTargetTcpProxiesRestStub : public TargetTcpProxiesRestStub {
 public:
  ~DefaultTargetTcpProxiesRestStub() override = default;

  explicit DefaultTargetTcpProxiesRestStub(Options options);
  DefaultTargetTcpProxiesRestStub(
      std::shared_ptr<rest_internal::RestClient> service, Options options);

  StatusOr<google::cloud::cpp::compute::v1::TargetTcpProxyAggregatedList>
  AggregatedListTargetTcpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          AggregatedListTargetTcpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteTargetTcpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          DeleteTargetTcpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::TargetTcpProxy> GetTargetTcpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          GetTargetTcpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertTargetTcpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          InsertTargetTcpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::TargetTcpProxyList>
  ListTargetTcpProxies(google::cloud::rest_internal::RestContext& rest_context,
                       google::cloud::cpp::compute::targetTcpProxies::v1::
                           ListTargetTcpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::Operation> SetBackendService(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          SetBackendServiceRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::Operation> SetProxyHeader(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetTcpProxies::v1::
          SetProxyHeaderRequest const& request) override;

 private:
  std::shared_ptr<rest_internal::RestClient> service_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_tcp_proxies_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_TCP_PROXIES_V1_INTERNAL_TARGET_TCP_PROXIES_REST_STUB_H
