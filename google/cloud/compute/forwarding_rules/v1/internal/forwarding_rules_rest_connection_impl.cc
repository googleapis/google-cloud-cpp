// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto

#include "google/cloud/compute/forwarding_rules/v1/internal/forwarding_rules_rest_connection_impl.h"
#include "google/cloud/compute/forwarding_rules/v1/internal/forwarding_rules_rest_stub_factory.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_forwarding_rules_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ForwardingRulesRestConnectionImpl::ForwardingRulesRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<
        compute_forwarding_rules_v1_internal::ForwardingRulesRestStub>
        stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      ForwardingRulesConnection::options())) {}

StatusOr<google::cloud::cpp::compute::v1::ForwardingRuleAggregatedList>
ForwardingRulesRestConnectionImpl::AggregatedListForwardingRules(
    google::cloud::cpp::compute::forwardingRules::v1::
        AggregatedListForwardingRulesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AggregatedListForwardingRules(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::forwardingRules::v1::
                 AggregatedListForwardingRulesRequest const& request) {
        return stub_->AggregatedListForwardingRules(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ForwardingRulesRestConnectionImpl::DeleteForwardingRules(
    google::cloud::cpp::compute::forwardingRules::v1::
        DeleteForwardingRulesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteForwardingRules(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::forwardingRules::v1::
                 DeleteForwardingRulesRequest const& request) {
        return stub_->DeleteForwardingRules(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::ForwardingRule>
ForwardingRulesRestConnectionImpl::GetForwardingRules(
    google::cloud::cpp::compute::forwardingRules::v1::
        GetForwardingRulesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetForwardingRules(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::forwardingRules::v1::
                 GetForwardingRulesRequest const& request) {
        return stub_->GetForwardingRules(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ForwardingRulesRestConnectionImpl::InsertForwardingRules(
    google::cloud::cpp::compute::forwardingRules::v1::
        InsertForwardingRulesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->InsertForwardingRules(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::forwardingRules::v1::
                 InsertForwardingRulesRequest const& request) {
        return stub_->InsertForwardingRules(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::cpp::compute::v1::ForwardingRule>
ForwardingRulesRestConnectionImpl::ListForwardingRules(
    google::cloud::cpp::compute::forwardingRules::v1::ListForwardingRulesRequest
        request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<
      compute_forwarding_rules_v1::ForwardingRulesRetryPolicy const>(
      retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListForwardingRules(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::ForwardingRule>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::forwardingRules::v1::
                          ListForwardingRulesRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::forwardingRules::v1::
                       ListForwardingRulesRequest const& request) {
              return stub->ListForwardingRules(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::ForwardingRuleList r) {
        std::vector<google::cloud::cpp::compute::v1::ForwardingRule> result(
            r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ForwardingRulesRestConnectionImpl::PatchForwardingRules(
    google::cloud::cpp::compute::forwardingRules::v1::
        PatchForwardingRulesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->PatchForwardingRules(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::forwardingRules::v1::
                 PatchForwardingRulesRequest const& request) {
        return stub_->PatchForwardingRules(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ForwardingRulesRestConnectionImpl::SetLabels(
    google::cloud::cpp::compute::forwardingRules::v1::SetLabelsRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetLabels(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::forwardingRules::v1::
                 SetLabelsRequest const& request) {
        return stub_->SetLabels(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ForwardingRulesRestConnectionImpl::SetTarget(
    google::cloud::cpp::compute::forwardingRules::v1::SetTargetRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetTarget(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::forwardingRules::v1::
                 SetTargetRequest const& request) {
        return stub_->SetTarget(rest_context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_forwarding_rules_v1_internal
}  // namespace cloud
}  // namespace google
