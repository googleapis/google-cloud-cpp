// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_FORWARDING_RULES_V1_FORWARDING_RULES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_FORWARDING_RULES_V1_FORWARDING_RULES_CLIENT_H

#include "google/cloud/compute/forwarding_rules/v1/forwarding_rules_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_forwarding_rules_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the forwardingRules resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/forwardingRules
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class ForwardingRulesClient {
 public:
  explicit ForwardingRulesClient(
      ExperimentalTag, std::shared_ptr<ForwardingRulesConnection> connection,
      Options opts = {});
  ~ForwardingRulesClient();

  ///@{
  /// @name Copy and move support
  ForwardingRulesClient(ForwardingRulesClient const&) = default;
  ForwardingRulesClient& operator=(ForwardingRulesClient const&) = default;
  ForwardingRulesClient(ForwardingRulesClient&&) = default;
  ForwardingRulesClient& operator=(ForwardingRulesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(ForwardingRulesClient const& a,
                         ForwardingRulesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(ForwardingRulesClient const& a,
                         ForwardingRulesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves an aggregated list of forwarding rules.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRuleAggregatedList,google/cloud/compute/v1/internal/common.proto#L6615}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.AggregatedListForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L116}
  /// [google.cloud.cpp.compute.v1.ForwardingRuleAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6615}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ForwardingRuleAggregatedList>
  AggregatedListForwardingRules(std::string const& project, Options opts = {});

  ///
  /// Retrieves an aggregated list of forwarding rules.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::forwardingRules::v1::AggregatedListForwardingRulesRequest,google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L116}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRuleAggregatedList,google/cloud/compute/v1/internal/common.proto#L6615}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.AggregatedListForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L116}
  /// [google.cloud.cpp.compute.v1.ForwardingRuleAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6615}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ForwardingRuleAggregatedList>
  AggregatedListForwardingRules(
      google::cloud::cpp::compute::forwardingRules::v1::
          AggregatedListForwardingRulesRequest const& request,
      Options opts = {});

  ///
  /// Deletes the specified ForwardingRule resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param forwarding_rule  Name of the ForwardingRule resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.DeleteForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L190}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteForwardingRules(
      std::string const& project, std::string const& region,
      std::string const& forwarding_rule, Options opts = {});

  ///
  /// Deletes the specified ForwardingRule resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::forwardingRules::v1::DeleteForwardingRulesRequest,google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L190}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.DeleteForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L190}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteForwardingRules(
      google::cloud::cpp::compute::forwardingRules::v1::
          DeleteForwardingRulesRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified ForwardingRule resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param forwarding_rule  Name of the ForwardingRule resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRule,google/cloud/compute/v1/internal/common.proto#L6330}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.GetForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L214}
  /// [google.cloud.cpp.compute.v1.ForwardingRule]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6330}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ForwardingRule> GetForwardingRules(
      std::string const& project, std::string const& region,
      std::string const& forwarding_rule, Options opts = {});

  ///
  /// Returns the specified ForwardingRule resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::forwardingRules::v1::GetForwardingRulesRequest,google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L214}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRule,google/cloud/compute/v1/internal/common.proto#L6330}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.GetForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L214}
  /// [google.cloud.cpp.compute.v1.ForwardingRule]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6330}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ForwardingRule> GetForwardingRules(
      google::cloud::cpp::compute::forwardingRules::v1::
          GetForwardingRulesRequest const& request,
      Options opts = {});

  ///
  /// Creates a ForwardingRule resource in the specified project and region
  /// using the data included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param forwarding_rule_resource  The ForwardingRule for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.InsertForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L226}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertForwardingRules(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::ForwardingRule const&
          forwarding_rule_resource,
      Options opts = {});

  ///
  /// Creates a ForwardingRule resource in the specified project and region
  /// using the data included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::forwardingRules::v1::InsertForwardingRulesRequest,google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L226}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.InsertForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L226}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertForwardingRules(
      google::cloud::cpp::compute::forwardingRules::v1::
          InsertForwardingRulesRequest const& request,
      Options opts = {});

  ///
  /// Retrieves a list of ForwardingRule resources available to the specified
  /// project and region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRule,google/cloud/compute/v1/internal/common.proto#L6330}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.ListForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L250}
  /// [google.cloud.cpp.compute.v1.ForwardingRule]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6330}
  ///
  StreamRange<google::cloud::cpp::compute::v1::ForwardingRule>
  ListForwardingRules(std::string const& project, std::string const& region,
                      Options opts = {});

  ///
  /// Retrieves a list of ForwardingRule resources available to the specified
  /// project and region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::forwardingRules::v1::ListForwardingRulesRequest,google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L250}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ForwardingRule,google/cloud/compute/v1/internal/common.proto#L6330}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.ListForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L250}
  /// [google.cloud.cpp.compute.v1.ForwardingRule]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L6330}
  ///
  StreamRange<google::cloud::cpp::compute::v1::ForwardingRule>
  ListForwardingRules(google::cloud::cpp::compute::forwardingRules::v1::
                          ListForwardingRulesRequest request,
                      Options opts = {});

  ///
  /// Updates the specified forwarding rule with the data included in the
  /// request. This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules. Currently, you can only patch the
  /// network_tier field.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param forwarding_rule  Name of the ForwardingRule resource to patch.
  /// @param forwarding_rule_resource  The ForwardingRule for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.PatchForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L318}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchForwardingRules(
      std::string const& project, std::string const& region,
      std::string const& forwarding_rule,
      google::cloud::cpp::compute::v1::ForwardingRule const&
          forwarding_rule_resource,
      Options opts = {});

  ///
  /// Updates the specified forwarding rule with the data included in the
  /// request. This method supports PATCH semantics and uses the JSON merge
  /// patch format and processing rules. Currently, you can only patch the
  /// network_tier field.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::forwardingRules::v1::PatchForwardingRulesRequest,google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L318}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.PatchForwardingRulesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L318}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchForwardingRules(
      google::cloud::cpp::compute::forwardingRules::v1::
          PatchForwardingRulesRequest const& request,
      Options opts = {});

  ///
  /// Sets the labels on the specified resource. To learn more about labels,
  /// read the Labeling Resources documentation.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param region_set_labels_request_resource  The RegionSetLabelsRequest for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.SetLabelsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L345}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetLabels(
      std::string const& project, std::string const& region,
      std::string const& resource,
      google::cloud::cpp::compute::v1::RegionSetLabelsRequest const&
          region_set_labels_request_resource,
      Options opts = {});

  ///
  /// Sets the labels on the specified resource. To learn more about labels,
  /// read the Labeling Resources documentation.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::forwardingRules::v1::SetLabelsRequest,google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L345}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.SetLabelsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L345}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetLabels(
      google::cloud::cpp::compute::forwardingRules::v1::SetLabelsRequest const&
          request,
      Options opts = {});

  ///
  /// Changes target URL for forwarding rule. The new target should be of the
  /// same type as the old target.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param forwarding_rule  Name of the ForwardingRule resource in which
  /// target is to be set.
  /// @param target_reference_resource  The TargetReference for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.SetTargetRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L372}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetTarget(
      std::string const& project, std::string const& region,
      std::string const& forwarding_rule,
      google::cloud::cpp::compute::v1::TargetReference const&
          target_reference_resource,
      Options opts = {});

  ///
  /// Changes target URL for forwarding rule. The new target should be of the
  /// same type as the old target.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::forwardingRules::v1::SetTargetRequest,google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L372}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.forwardingRules.v1.SetTargetRequest]:
  /// @googleapis_reference_link{google/cloud/compute/forwarding_rules/v1/forwarding_rules.proto#L372}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetTarget(
      google::cloud::cpp::compute::forwardingRules::v1::SetTargetRequest const&
          request,
      Options opts = {});

 private:
  std::shared_ptr<ForwardingRulesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_forwarding_rules_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_FORWARDING_RULES_V1_FORWARDING_RULES_CLIENT_H
