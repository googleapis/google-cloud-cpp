// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_pools/v1/target_pools.proto

#include "google/cloud/compute/target_pools/v1/internal/target_pools_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/target_pools/v1/target_pools.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_pools_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultTargetPoolsRestStub::DefaultTargetPoolsRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultTargetPoolsRestStub::DefaultTargetPoolsRestStub(
    std::shared_ptr<rest_internal::RestClient> service, Options options)
    : service_(std::move(service)), options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetPoolsRestStub::AddHealthCheck(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::AddHealthCheckRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools/"
      "{target_pool}/addHealthCheck");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetPoolsRestStub::AddInstance(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::AddInstanceRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools/"
      "{target_pool}/addInstance");
}

StatusOr<google::cloud::cpp::compute::v1::TargetPoolAggregatedList>
DefaultTargetPoolsRestStub::AggregatedListTargetPools(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::
        AggregatedListTargetPoolsRequest const& request) {
  return rest_internal::Get<
      google::cloud::cpp::compute::v1::TargetPoolAggregatedList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/aggregated/targetPools",
      {std::make_pair("filter", request.filter()),
       std::make_pair("include_all_scopes",
                      std::to_string(request.include_all_scopes())),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetPoolsRestStub::DeleteTargetPools(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::
        DeleteTargetPoolsRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools/"
      "{target_pool}");
}

StatusOr<google::cloud::cpp::compute::v1::TargetPool>
DefaultTargetPoolsRestStub::GetTargetPools(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::GetTargetPoolsRequest const&
        request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::TargetPool>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools/"
      "{target_pool}",
      {std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("target_pool", request.target_pool())});
}

StatusOr<google::cloud::cpp::compute::v1::TargetPoolInstanceHealth>
DefaultTargetPoolsRestStub::GetHealth(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::GetHealthRequest const&
        request) {
  return rest_internal::Post<
      google::cloud::cpp::compute::v1::TargetPoolInstanceHealth>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools/"
      "{target_pool}/getHealth");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetPoolsRestStub::InsertTargetPools(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::
        InsertTargetPoolsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools");
}

StatusOr<google::cloud::cpp::compute::v1::TargetPoolList>
DefaultTargetPoolsRestStub::ListTargetPools(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::ListTargetPoolsRequest const&
        request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::TargetPoolList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetPoolsRestStub::RemoveHealthCheck(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::
        RemoveHealthCheckRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools/"
      "{target_pool}/removeHealthCheck");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetPoolsRestStub::RemoveInstance(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::RemoveInstanceRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools/"
      "{target_pool}/removeInstance");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetPoolsRestStub::SetBackup(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::SetBackupRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/targetPools/"
      "{target_pool}/setBackup");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_pools_v1_internal
}  // namespace cloud
}  // namespace google
