// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_pools/v1/target_pools.proto

#include "google/cloud/compute/target_pools/v1/internal/target_pools_rest_logging_decorator.h"
#include "google/cloud/internal/log_wrapper.h"
#include "google/cloud/status_or.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_pools_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

TargetPoolsRestLogging::TargetPoolsRestLogging(
    std::shared_ptr<TargetPoolsRestStub> child, TracingOptions tracing_options,
    std::set<std::string> components)
    : child_(std::move(child)),
      tracing_options_(std::move(tracing_options)),
      components_(std::move(components)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
TargetPoolsRestLogging::AddHealthCheck(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::AddHealthCheckRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::targetPools::v1::
                 AddHealthCheckRequest const& request) {
        return child_->AddHealthCheck(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
TargetPoolsRestLogging::AddInstance(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::AddInstanceRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::targetPools::v1::
                 AddInstanceRequest const& request) {
        return child_->AddInstance(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::TargetPoolAggregatedList>
TargetPoolsRestLogging::AggregatedListTargetPools(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::
        AggregatedListTargetPoolsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::targetPools::v1::
                 AggregatedListTargetPoolsRequest const& request) {
        return child_->AggregatedListTargetPools(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
TargetPoolsRestLogging::DeleteTargetPools(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::
        DeleteTargetPoolsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::targetPools::v1::
                 DeleteTargetPoolsRequest const& request) {
        return child_->DeleteTargetPools(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::TargetPool>
TargetPoolsRestLogging::GetTargetPools(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::GetTargetPoolsRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::targetPools::v1::
                 GetTargetPoolsRequest const& request) {
        return child_->GetTargetPools(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::TargetPoolInstanceHealth>
TargetPoolsRestLogging::GetHealth(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::GetHealthRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::targetPools::v1::GetHealthRequest const&
              request) { return child_->GetHealth(rest_context, request); },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
TargetPoolsRestLogging::InsertTargetPools(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::
        InsertTargetPoolsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::targetPools::v1::
                 InsertTargetPoolsRequest const& request) {
        return child_->InsertTargetPools(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::TargetPoolList>
TargetPoolsRestLogging::ListTargetPools(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::ListTargetPoolsRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::targetPools::v1::
                 ListTargetPoolsRequest const& request) {
        return child_->ListTargetPools(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
TargetPoolsRestLogging::RemoveHealthCheck(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::
        RemoveHealthCheckRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::targetPools::v1::
                 RemoveHealthCheckRequest const& request) {
        return child_->RemoveHealthCheck(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
TargetPoolsRestLogging::RemoveInstance(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::RemoveInstanceRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::targetPools::v1::
                 RemoveInstanceRequest const& request) {
        return child_->RemoveInstance(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
TargetPoolsRestLogging::SetBackup(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::targetPools::v1::SetBackupRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::targetPools::v1::SetBackupRequest const&
              request) { return child_->SetBackup(rest_context, request); },
      rest_context, request, __func__, tracing_options_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_pools_v1_internal
}  // namespace cloud
}  // namespace google
