// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_url_maps/v1/region_url_maps.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_URL_MAPS_V1_REGION_URL_MAPS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_URL_MAPS_V1_REGION_URL_MAPS_CLIENT_H

#include "google/cloud/compute/region_url_maps/v1/region_url_maps_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_url_maps_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the regionUrlMaps resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/regionUrlMaps
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class RegionUrlMapsClient {
 public:
  explicit RegionUrlMapsClient(
      ExperimentalTag, std::shared_ptr<RegionUrlMapsConnection> connection,
      Options opts = {});
  ~RegionUrlMapsClient();

  ///@{
  /// @name Copy and move support
  RegionUrlMapsClient(RegionUrlMapsClient const&) = default;
  RegionUrlMapsClient& operator=(RegionUrlMapsClient const&) = default;
  RegionUrlMapsClient(RegionUrlMapsClient&&) = default;
  RegionUrlMapsClient& operator=(RegionUrlMapsClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(RegionUrlMapsClient const& a,
                         RegionUrlMapsClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(RegionUrlMapsClient const& a,
                         RegionUrlMapsClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified UrlMap resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param url_map  Name of the UrlMap resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.DeleteRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L107}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteRegionUrlMaps(
      std::string const& project, std::string const& region,
      std::string const& url_map, Options opts = {});

  ///
  /// Deletes the specified UrlMap resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionUrlMaps::v1::DeleteRegionUrlMapsRequest,google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L107}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.DeleteRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L107}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteRegionUrlMaps(
      google::cloud::cpp::compute::regionUrlMaps::v1::
          DeleteRegionUrlMapsRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified UrlMap resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param url_map  Name of the UrlMap resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::UrlMap,google/cloud/compute/v1/internal/common.proto#L28928}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.GetRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L123}
  /// [google.cloud.cpp.compute.v1.UrlMap]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28928}
  ///
  StatusOr<google::cloud::cpp::compute::v1::UrlMap> GetRegionUrlMaps(
      std::string const& project, std::string const& region,
      std::string const& url_map, Options opts = {});

  ///
  /// Returns the specified UrlMap resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionUrlMaps::v1::GetRegionUrlMapsRequest,google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L123}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::UrlMap,google/cloud/compute/v1/internal/common.proto#L28928}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.GetRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L123}
  /// [google.cloud.cpp.compute.v1.UrlMap]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28928}
  ///
  StatusOr<google::cloud::cpp::compute::v1::UrlMap> GetRegionUrlMaps(
      google::cloud::cpp::compute::regionUrlMaps::v1::
          GetRegionUrlMapsRequest const& request,
      Options opts = {});

  ///
  /// Creates a UrlMap resource in the specified project using the data included
  /// in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param url_map_resource  The UrlMap for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.InsertRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L135}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertRegionUrlMaps(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::UrlMap const& url_map_resource,
      Options opts = {});

  ///
  /// Creates a UrlMap resource in the specified project using the data included
  /// in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionUrlMaps::v1::InsertRegionUrlMapsRequest,google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L135}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.InsertRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L135}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertRegionUrlMaps(
      google::cloud::cpp::compute::regionUrlMaps::v1::
          InsertRegionUrlMapsRequest const& request,
      Options opts = {});

  ///
  /// Retrieves the list of UrlMap resources available to the specified project
  /// in the specified region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::UrlMap,google/cloud/compute/v1/internal/common.proto#L28928}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.ListRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L151}
  /// [google.cloud.cpp.compute.v1.UrlMap]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28928}
  ///
  StreamRange<google::cloud::cpp::compute::v1::UrlMap> ListRegionUrlMaps(
      std::string const& project, std::string const& region, Options opts = {});

  ///
  /// Retrieves the list of UrlMap resources available to the specified project
  /// in the specified region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionUrlMaps::v1::ListRegionUrlMapsRequest,google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L151}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::UrlMap,google/cloud/compute/v1/internal/common.proto#L28928}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.ListRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L151}
  /// [google.cloud.cpp.compute.v1.UrlMap]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28928}
  ///
  StreamRange<google::cloud::cpp::compute::v1::UrlMap> ListRegionUrlMaps(
      google::cloud::cpp::compute::regionUrlMaps::v1::ListRegionUrlMapsRequest
          request,
      Options opts = {});

  ///
  /// Patches the specified UrlMap resource with the data included in the
  /// request. This method supports PATCH semantics and uses JSON merge patch
  /// format and processing rules.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param url_map  Name of the UrlMap resource to patch.
  /// @param url_map_resource  The UrlMap for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.PatchRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L219}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchRegionUrlMaps(
      std::string const& project, std::string const& region,
      std::string const& url_map,
      google::cloud::cpp::compute::v1::UrlMap const& url_map_resource,
      Options opts = {});

  ///
  /// Patches the specified UrlMap resource with the data included in the
  /// request. This method supports PATCH semantics and uses JSON merge patch
  /// format and processing rules.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionUrlMaps::v1::PatchRegionUrlMapsRequest,google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L219}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.PatchRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L219}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchRegionUrlMaps(
      google::cloud::cpp::compute::regionUrlMaps::v1::
          PatchRegionUrlMapsRequest const& request,
      Options opts = {});

  ///
  /// Updates the specified UrlMap resource with the data included in the
  /// request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param url_map  Name of the UrlMap resource to update.
  /// @param url_map_resource  The UrlMap for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.UpdateRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L238}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> UpdateRegionUrlMaps(
      std::string const& project, std::string const& region,
      std::string const& url_map,
      google::cloud::cpp::compute::v1::UrlMap const& url_map_resource,
      Options opts = {});

  ///
  /// Updates the specified UrlMap resource with the data included in the
  /// request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionUrlMaps::v1::UpdateRegionUrlMapsRequest,google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L238}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.UpdateRegionUrlMapsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L238}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> UpdateRegionUrlMaps(
      google::cloud::cpp::compute::regionUrlMaps::v1::
          UpdateRegionUrlMapsRequest const& request,
      Options opts = {});

  ///
  /// Runs static validation for the UrlMap. In particular, the tests of the
  /// provided UrlMap will be run. Calling this method does NOT create the
  /// UrlMap.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param url_map  Name of the UrlMap resource to be validated as.
  /// @param region_url_maps_validate_request_resource  The
  /// RegionUrlMapsValidateRequest for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::UrlMapsValidateResponse,google/cloud/compute/v1/internal/common.proto#L29406}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.ValidateRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L257}
  /// [google.cloud.cpp.compute.v1.UrlMapsValidateResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29406}
  ///
  StatusOr<google::cloud::cpp::compute::v1::UrlMapsValidateResponse> Validate(
      std::string const& project, std::string const& region,
      std::string const& url_map,
      google::cloud::cpp::compute::v1::RegionUrlMapsValidateRequest const&
          region_url_maps_validate_request_resource,
      Options opts = {});

  ///
  /// Runs static validation for the UrlMap. In particular, the tests of the
  /// provided UrlMap will be run. Calling this method does NOT create the
  /// UrlMap.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionUrlMaps::v1::ValidateRequest,google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L257}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::UrlMapsValidateResponse,google/cloud/compute/v1/internal/common.proto#L29406}
  ///
  /// [google.cloud.cpp.compute.regionUrlMaps.v1.ValidateRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_url_maps/v1/region_url_maps.proto#L257}
  /// [google.cloud.cpp.compute.v1.UrlMapsValidateResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29406}
  ///
  StatusOr<google::cloud::cpp::compute::v1::UrlMapsValidateResponse> Validate(
      google::cloud::cpp::compute::regionUrlMaps::v1::ValidateRequest const&
          request,
      Options opts = {});

 private:
  std::shared_ptr<RegionUrlMapsConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_url_maps_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_URL_MAPS_V1_REGION_URL_MAPS_CLIENT_H
