// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_url_maps/v1/region_url_maps.proto

#include "google/cloud/compute/region_url_maps/v1/region_url_maps_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_url_maps_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegionUrlMapsClient::RegionUrlMapsClient(
    ExperimentalTag, std::shared_ptr<RegionUrlMapsConnection> connection,
    Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
RegionUrlMapsClient::~RegionUrlMapsClient() = default;

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::DeleteRegionUrlMap(std::string const& project,
                                        std::string const& region,
                                        std::string const& url_map,
                                        Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::DeleteRegionUrlMapRequest
      request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  return connection_->DeleteRegionUrlMap(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::DeleteRegionUrlMap(
    google::cloud::cpp::compute::region_url_maps::v1::
        DeleteRegionUrlMapRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteRegionUrlMap(request);
}

StatusOr<google::cloud::cpp::compute::v1::UrlMap>
RegionUrlMapsClient::GetRegionUrlMap(std::string const& project,
                                     std::string const& region,
                                     std::string const& url_map, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::GetRegionUrlMapRequest
      request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  return connection_->GetRegionUrlMap(request);
}

StatusOr<google::cloud::cpp::compute::v1::UrlMap>
RegionUrlMapsClient::GetRegionUrlMap(
    google::cloud::cpp::compute::region_url_maps::v1::
        GetRegionUrlMapRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRegionUrlMap(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::InsertRegionUrlMap(
    std::string const& project, std::string const& region,
    google::cloud::cpp::compute::v1::UrlMap const& url_map_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::InsertRegionUrlMapRequest
      request;
  request.set_project(project);
  request.set_region(region);
  *request.mutable_url_map_resource() = url_map_resource;
  return connection_->InsertRegionUrlMap(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::InsertRegionUrlMap(
    google::cloud::cpp::compute::region_url_maps::v1::
        InsertRegionUrlMapRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertRegionUrlMap(request);
}

StreamRange<google::cloud::cpp::compute::v1::UrlMap>
RegionUrlMapsClient::ListRegionUrlMaps(std::string const& project,
                                       std::string const& region,
                                       Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::ListRegionUrlMapsRequest
      request;
  request.set_project(project);
  request.set_region(region);
  return connection_->ListRegionUrlMaps(request);
}

StreamRange<google::cloud::cpp::compute::v1::UrlMap>
RegionUrlMapsClient::ListRegionUrlMaps(
    google::cloud::cpp::compute::region_url_maps::v1::ListRegionUrlMapsRequest
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRegionUrlMaps(std::move(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::PatchRegionUrlMap(
    std::string const& project, std::string const& region,
    std::string const& url_map,
    google::cloud::cpp::compute::v1::UrlMap const& url_map_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::PatchRegionUrlMapRequest
      request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  *request.mutable_url_map_resource() = url_map_resource;
  return connection_->PatchRegionUrlMap(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::PatchRegionUrlMap(
    google::cloud::cpp::compute::region_url_maps::v1::
        PatchRegionUrlMapRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchRegionUrlMap(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::UpdateRegionUrlMap(
    std::string const& project, std::string const& region,
    std::string const& url_map,
    google::cloud::cpp::compute::v1::UrlMap const& url_map_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::UpdateRegionUrlMapRequest
      request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  *request.mutable_url_map_resource() = url_map_resource;
  return connection_->UpdateRegionUrlMap(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::UpdateRegionUrlMap(
    google::cloud::cpp::compute::region_url_maps::v1::
        UpdateRegionUrlMapRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRegionUrlMap(request);
}

StatusOr<google::cloud::cpp::compute::v1::UrlMapsValidateResponse>
RegionUrlMapsClient::Validate(
    std::string const& project, std::string const& region,
    std::string const& url_map,
    google::cloud::cpp::compute::v1::RegionUrlMapsValidateRequest const&
        region_url_maps_validate_request_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::ValidateRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  *request.mutable_region_url_maps_validate_request_resource() =
      region_url_maps_validate_request_resource;
  return connection_->Validate(request);
}

StatusOr<google::cloud::cpp::compute::v1::UrlMapsValidateResponse>
RegionUrlMapsClient::Validate(
    google::cloud::cpp::compute::region_url_maps::v1::ValidateRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->Validate(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_url_maps_v1
}  // namespace cloud
}  // namespace google
