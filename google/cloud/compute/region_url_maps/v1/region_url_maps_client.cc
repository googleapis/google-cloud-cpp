// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_url_maps/v1/region_url_maps.proto

#include "google/cloud/compute/region_url_maps/v1/region_url_maps_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_url_maps_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegionUrlMapsClient::RegionUrlMapsClient(ExperimentalTag,
    std::shared_ptr<RegionUrlMapsConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(internal::MergeOptions(std::move(opts),
      connection_->options())) {}
RegionUrlMapsClient::~RegionUrlMapsClient() = default;

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::DeleteRegionUrlMaps(std::string const& project, std::string const& region, std::string const& url_map, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::DeleteRegionUrlMapsRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  return connection_->DeleteRegionUrlMaps(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::DeleteRegionUrlMaps(google::cloud::cpp::compute::region_url_maps::v1::DeleteRegionUrlMapsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteRegionUrlMaps(request);
}

StatusOr<google::cloud::cpp::compute::v1::UrlMap>
RegionUrlMapsClient::GetRegionUrlMaps(std::string const& project, std::string const& region, std::string const& url_map, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::GetRegionUrlMapsRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  return connection_->GetRegionUrlMaps(request);
}

StatusOr<google::cloud::cpp::compute::v1::UrlMap>
RegionUrlMapsClient::GetRegionUrlMaps(google::cloud::cpp::compute::region_url_maps::v1::GetRegionUrlMapsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRegionUrlMaps(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::InsertRegionUrlMaps(std::string const& project, std::string const& region, google::cloud::cpp::compute::v1::UrlMap const& url_map_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::InsertRegionUrlMapsRequest request;
  request.set_project(project);
  request.set_region(region);
  *request.mutable_url_map_resource() = url_map_resource;
  return connection_->InsertRegionUrlMaps(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::InsertRegionUrlMaps(google::cloud::cpp::compute::region_url_maps::v1::InsertRegionUrlMapsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertRegionUrlMaps(request);
}

StreamRange<google::cloud::cpp::compute::v1::UrlMap>
RegionUrlMapsClient::ListRegionUrlMaps(std::string const& project, std::string const& region, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::ListRegionUrlMapsRequest request;
  request.set_project(project);
  request.set_region(region);
  return connection_->ListRegionUrlMaps(request);
}

StreamRange<google::cloud::cpp::compute::v1::UrlMap>
RegionUrlMapsClient::ListRegionUrlMaps(google::cloud::cpp::compute::region_url_maps::v1::ListRegionUrlMapsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRegionUrlMaps(std::move(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::PatchRegionUrlMaps(std::string const& project, std::string const& region, std::string const& url_map, google::cloud::cpp::compute::v1::UrlMap const& url_map_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::PatchRegionUrlMapsRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  *request.mutable_url_map_resource() = url_map_resource;
  return connection_->PatchRegionUrlMaps(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::PatchRegionUrlMaps(google::cloud::cpp::compute::region_url_maps::v1::PatchRegionUrlMapsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchRegionUrlMaps(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::UpdateRegionUrlMaps(std::string const& project, std::string const& region, std::string const& url_map, google::cloud::cpp::compute::v1::UrlMap const& url_map_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::UpdateRegionUrlMapsRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  *request.mutable_url_map_resource() = url_map_resource;
  return connection_->UpdateRegionUrlMaps(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionUrlMapsClient::UpdateRegionUrlMaps(google::cloud::cpp::compute::region_url_maps::v1::UpdateRegionUrlMapsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRegionUrlMaps(request);
}

StatusOr<google::cloud::cpp::compute::v1::UrlMapsValidateResponse>
RegionUrlMapsClient::Validate(std::string const& project, std::string const& region, std::string const& url_map, google::cloud::cpp::compute::v1::RegionUrlMapsValidateRequest const& region_url_maps_validate_request_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_url_maps::v1::ValidateRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_url_map(url_map);
  *request.mutable_region_url_maps_validate_request_resource() = region_url_maps_validate_request_resource;
  return connection_->Validate(request);
}

StatusOr<google::cloud::cpp::compute::v1::UrlMapsValidateResponse>
RegionUrlMapsClient::Validate(google::cloud::cpp::compute::region_url_maps::v1::ValidateRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->Validate(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_url_maps_v1
}  // namespace cloud
}  // namespace google
