// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_url_maps/v1/region_url_maps.proto

#include "google/cloud/compute/region_url_maps/v1/internal/region_url_maps_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/region_url_maps/v1/region_url_maps.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_url_maps_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultRegionUrlMapsRestStub::DefaultRegionUrlMapsRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultRegionUrlMapsRestStub::DefaultRegionUrlMapsRestStub(
    std::shared_ptr<rest_internal::RestClient> service, Options options)
    : service_(std::move(service)), options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultRegionUrlMapsRestStub::DeleteRegionUrlMaps(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::regionUrlMaps::v1::
        DeleteRegionUrlMapsRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}");
}

StatusOr<google::cloud::cpp::compute::v1::UrlMap>
DefaultRegionUrlMapsRestStub::GetRegionUrlMaps(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::regionUrlMaps::v1::
        GetRegionUrlMapsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::UrlMap>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}",
      {std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("url_map", request.url_map())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultRegionUrlMapsRestStub::InsertRegionUrlMaps(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::regionUrlMaps::v1::
        InsertRegionUrlMapsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/urlMaps");
}

StatusOr<google::cloud::cpp::compute::v1::UrlMapList>
DefaultRegionUrlMapsRestStub::ListRegionUrlMaps(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::regionUrlMaps::v1::
        ListRegionUrlMapsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::UrlMapList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/urlMaps",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultRegionUrlMapsRestStub::PatchRegionUrlMaps(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::regionUrlMaps::v1::
        PatchRegionUrlMapsRequest const& request) {
  return rest_internal::Patch<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultRegionUrlMapsRestStub::UpdateRegionUrlMaps(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::regionUrlMaps::v1::
        UpdateRegionUrlMapsRequest const& request) {
  return rest_internal::Put<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}");
}

StatusOr<google::cloud::cpp::compute::v1::UrlMapsValidateResponse>
DefaultRegionUrlMapsRestStub::Validate(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::regionUrlMaps::v1::ValidateRequest const&
        request) {
  return rest_internal::Post<
      google::cloud::cpp::compute::v1::UrlMapsValidateResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}/"
      "validate");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_url_maps_v1_internal
}  // namespace cloud
}  // namespace google
