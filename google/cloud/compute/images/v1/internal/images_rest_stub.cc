// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/images/v1/images.proto

#include "google/cloud/compute/images/v1/internal/images_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/images/v1/images.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_images_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultImagesRestStub::DefaultImagesRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultImagesRestStub::DefaultImagesRestStub(
    std::shared_ptr<rest_internal::RestClient> service, Options options)
    : service_(std::move(service)), options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultImagesRestStub::DeleteImages(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::DeleteImagesRequest const&
        request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images/{image}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultImagesRestStub::Deprecate(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::DeprecateRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images/{image}/deprecate");
}

StatusOr<google::cloud::cpp::compute::v1::Image>
DefaultImagesRestStub::GetImages(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::GetImagesRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Image>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images/{image}",
      {std::make_pair("image", request.image()),
       std::make_pair("project", request.project())});
}

StatusOr<google::cloud::cpp::compute::v1::Image>
DefaultImagesRestStub::GetFromFamily(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::GetFromFamilyRequest const&
        request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Image>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images/family/{family}",
      {std::make_pair("family", request.family()),
       std::make_pair("project", request.project())});
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DefaultImagesRestStub::GetIamPolicy(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::GetIamPolicyRequest const&
        request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Policy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images/{resource}/getIamPolicy",
      {std::make_pair(
           "options_requested_policy_version",
           std::to_string(request.options_requested_policy_version())),
       std::make_pair("project", request.project()),
       std::make_pair("resource", request.resource())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultImagesRestStub::InsertImages(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::InsertImagesRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images");
}

StatusOr<google::cloud::cpp::compute::v1::ImageList>
DefaultImagesRestStub::ListImages(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::ListImagesRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::ImageList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultImagesRestStub::PatchImages(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::PatchImagesRequest const&
        request) {
  return rest_internal::Patch<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images/{image}");
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DefaultImagesRestStub::SetIamPolicy(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::SetIamPolicyRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Policy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images/{resource}/setIamPolicy");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultImagesRestStub::SetLabels(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::SetLabelsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images/{resource}/setLabels");
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
DefaultImagesRestStub::TestIamPermissions(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::images::v1::TestIamPermissionsRequest const&
        request) {
  return rest_internal::Post<
      google::cloud::cpp::compute::v1::TestPermissionsResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/images/{resource}/"
      "testIamPermissions");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_images_v1_internal
}  // namespace cloud
}  // namespace google
