// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_INSTANCE_TEMPLATES_V1_REGION_INSTANCE_TEMPLATES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_INSTANCE_TEMPLATES_V1_REGION_INSTANCE_TEMPLATES_CLIENT_H

#include "google/cloud/compute/region_instance_templates/v1/region_instance_templates_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_instance_templates_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the regionInstanceTemplates resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/regionInstanceTemplates
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class RegionInstanceTemplatesClient {
 public:
  explicit RegionInstanceTemplatesClient(
      ExperimentalTag,
      std::shared_ptr<RegionInstanceTemplatesConnection> connection,
      Options opts = {});
  ~RegionInstanceTemplatesClient();

  ///@{
  /// @name Copy and move support
  RegionInstanceTemplatesClient(RegionInstanceTemplatesClient const&) = default;
  RegionInstanceTemplatesClient& operator=(
      RegionInstanceTemplatesClient const&) = default;
  RegionInstanceTemplatesClient(RegionInstanceTemplatesClient&&) = default;
  RegionInstanceTemplatesClient& operator=(RegionInstanceTemplatesClient&&) =
      default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(RegionInstanceTemplatesClient const& a,
                         RegionInstanceTemplatesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(RegionInstanceTemplatesClient const& a,
                         RegionInstanceTemplatesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified instance template. Deleting an instance template is
  /// permanent and cannot be undone.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param instance_template  The name of the instance template to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionInstanceTemplates.v1.DeleteRegionInstanceTemplatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L79}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionInstanceTemplates(std::string const& project,
                                std::string const& region,
                                std::string const& instance_template,
                                Options opts = {});

  ///
  /// Deletes the specified instance template. Deleting an instance template is
  /// permanent and cannot be undone.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionInstanceTemplates::v1::DeleteRegionInstanceTemplatesRequest,google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L79}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionInstanceTemplates.v1.DeleteRegionInstanceTemplatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L79}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionInstanceTemplates(
      google::cloud::cpp::compute::regionInstanceTemplates::v1::
          DeleteRegionInstanceTemplatesRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified instance template.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param instance_template  The name of the instance template.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::InstanceTemplate,google/cloud/compute/v1/internal/common.proto#L11263}
  ///
  /// [google.cloud.cpp.compute.regionInstanceTemplates.v1.GetRegionInstanceTemplatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L109}
  /// [google.cloud.cpp.compute.v1.InstanceTemplate]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L11263}
  ///
  StatusOr<google::cloud::cpp::compute::v1::InstanceTemplate>
  GetRegionInstanceTemplates(std::string const& project,
                             std::string const& region,
                             std::string const& instance_template,
                             Options opts = {});

  ///
  /// Returns the specified instance template.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionInstanceTemplates::v1::GetRegionInstanceTemplatesRequest,google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L109}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::InstanceTemplate,google/cloud/compute/v1/internal/common.proto#L11263}
  ///
  /// [google.cloud.cpp.compute.regionInstanceTemplates.v1.GetRegionInstanceTemplatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L109}
  /// [google.cloud.cpp.compute.v1.InstanceTemplate]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L11263}
  ///
  StatusOr<google::cloud::cpp::compute::v1::InstanceTemplate>
  GetRegionInstanceTemplates(
      google::cloud::cpp::compute::regionInstanceTemplates::v1::
          GetRegionInstanceTemplatesRequest const& request,
      Options opts = {});

  ///
  /// Creates an instance template in the specified project and region using the
  /// global instance template whose URL is included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param instance_template_resource  The InstanceTemplate for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionInstanceTemplates.v1.InsertRegionInstanceTemplatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L121}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionInstanceTemplates(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::InstanceTemplate const&
          instance_template_resource,
      Options opts = {});

  ///
  /// Creates an instance template in the specified project and region using the
  /// global instance template whose URL is included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionInstanceTemplates::v1::InsertRegionInstanceTemplatesRequest,google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L121}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionInstanceTemplates.v1.InsertRegionInstanceTemplatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L121}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionInstanceTemplates(
      google::cloud::cpp::compute::regionInstanceTemplates::v1::
          InsertRegionInstanceTemplatesRequest const& request,
      Options opts = {});

  ///
  /// Retrieves a list of instance templates that are contained within the
  /// specified project and region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the regions for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::InstanceTemplate,google/cloud/compute/v1/internal/common.proto#L11263}
  ///
  /// [google.cloud.cpp.compute.regionInstanceTemplates.v1.ListRegionInstanceTemplatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L152}
  /// [google.cloud.cpp.compute.v1.InstanceTemplate]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L11263}
  ///
  StreamRange<google::cloud::cpp::compute::v1::InstanceTemplate>
  ListRegionInstanceTemplates(std::string const& project,
                              std::string const& region, Options opts = {});

  ///
  /// Retrieves a list of instance templates that are contained within the
  /// specified project and region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionInstanceTemplates::v1::ListRegionInstanceTemplatesRequest,google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L152}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::InstanceTemplate,google/cloud/compute/v1/internal/common.proto#L11263}
  ///
  /// [google.cloud.cpp.compute.regionInstanceTemplates.v1.ListRegionInstanceTemplatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_instance_templates/v1/region_instance_templates.proto#L152}
  /// [google.cloud.cpp.compute.v1.InstanceTemplate]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L11263}
  ///
  StreamRange<google::cloud::cpp::compute::v1::InstanceTemplate>
  ListRegionInstanceTemplates(
      google::cloud::cpp::compute::regionInstanceTemplates::v1::
          ListRegionInstanceTemplatesRequest request,
      Options opts = {});

 private:
  std::shared_ptr<RegionInstanceTemplatesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_instance_templates_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_INSTANCE_TEMPLATES_V1_REGION_INSTANCE_TEMPLATES_CLIENT_H
