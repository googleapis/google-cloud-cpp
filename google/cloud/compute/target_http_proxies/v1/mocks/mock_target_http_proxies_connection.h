// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_http_proxies/v1/target_http_proxies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_HTTP_PROXIES_V1_MOCKS_MOCK_TARGET_HTTP_PROXIES_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_HTTP_PROXIES_V1_MOCKS_MOCK_TARGET_HTTP_PROXIES_CONNECTION_H

#include "google/cloud/compute/target_http_proxies/v1/target_http_proxies_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace compute_target_http_proxies_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `TargetHttpProxiesConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `TargetHttpProxiesClient`. To do so,
 * construct an object of type `TargetHttpProxiesClient` with an instance of
 * this class. Then use the Google Test framework functions to program the
 * behavior of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockTargetHttpProxiesConnection
    : public compute_target_http_proxies_v1::TargetHttpProxiesConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(
      (StreamRange<std::pair<std::string, google::cloud::cpp::compute::v1::
                                              TargetHttpProxiesScopedList>>),
      AggregatedListTargetHttpProxies,
      (google::cloud::cpp::compute::target_http_proxies::v1::
           AggregatedListTargetHttpProxiesRequest request),
      (override));

  /// Due to additional overloads for this method
  /// `EXPECT_CALL(*mock, DeleteTargetHttpProxy)` is now ambiguous. Use
  /// `EXPECT_CALL(*mock, DeleteTargetHttpProxy(::testing::_))` instead.
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              DeleteTargetHttpProxy,
              (google::cloud::cpp::compute::target_http_proxies::v1::
                   DeleteTargetHttpProxyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::Operation>,
              DeleteTargetHttpProxy,
              (ExperimentalTag, NoAwaitTag,
               google::cloud::cpp::compute::target_http_proxies::v1::
                   DeleteTargetHttpProxyRequest const& request),
              (override));

  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              DeleteTargetHttpProxy,
              (ExperimentalTag,
               google::cloud::cpp::compute::v1::Operation const& operation),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxy>,
              GetTargetHttpProxy,
              (google::cloud::cpp::compute::target_http_proxies::v1::
                   GetTargetHttpProxyRequest const& request),
              (override));

  /// Due to additional overloads for this method
  /// `EXPECT_CALL(*mock, InsertTargetHttpProxy)` is now ambiguous. Use
  /// `EXPECT_CALL(*mock, InsertTargetHttpProxy(::testing::_))` instead.
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              InsertTargetHttpProxy,
              (google::cloud::cpp::compute::target_http_proxies::v1::
                   InsertTargetHttpProxyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::Operation>,
              InsertTargetHttpProxy,
              (ExperimentalTag, NoAwaitTag,
               google::cloud::cpp::compute::target_http_proxies::v1::
                   InsertTargetHttpProxyRequest const& request),
              (override));

  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              InsertTargetHttpProxy,
              (ExperimentalTag,
               google::cloud::cpp::compute::v1::Operation const& operation),
              (override));

  MOCK_METHOD((StreamRange<google::cloud::cpp::compute::v1::TargetHttpProxy>),
              ListTargetHttpProxies,
              (google::cloud::cpp::compute::target_http_proxies::v1::
                   ListTargetHttpProxiesRequest request),
              (override));

  /// Due to additional overloads for this method
  /// `EXPECT_CALL(*mock, PatchTargetHttpProxy)` is now ambiguous. Use
  /// `EXPECT_CALL(*mock, PatchTargetHttpProxy(::testing::_))` instead.
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              PatchTargetHttpProxy,
              (google::cloud::cpp::compute::target_http_proxies::v1::
                   PatchTargetHttpProxyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::Operation>,
              PatchTargetHttpProxy,
              (ExperimentalTag, NoAwaitTag,
               google::cloud::cpp::compute::target_http_proxies::v1::
                   PatchTargetHttpProxyRequest const& request),
              (override));

  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              PatchTargetHttpProxy,
              (ExperimentalTag,
               google::cloud::cpp::compute::v1::Operation const& operation),
              (override));

  /// Due to additional overloads for this method
  /// `EXPECT_CALL(*mock, SetUrlMap)` is now ambiguous. Use
  /// `EXPECT_CALL(*mock, SetUrlMap(::testing::_))` instead.
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              SetUrlMap,
              (google::cloud::cpp::compute::target_http_proxies::v1::
                   SetUrlMapRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::Operation>, SetUrlMap,
              (ExperimentalTag, NoAwaitTag,
               google::cloud::cpp::compute::target_http_proxies::v1::
                   SetUrlMapRequest const& request),
              (override));

  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              SetUrlMap,
              (ExperimentalTag,
               google::cloud::cpp::compute::v1::Operation const& operation),
              (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_http_proxies_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_HTTP_PROXIES_V1_MOCKS_MOCK_TARGET_HTTP_PROXIES_CONNECTION_H
