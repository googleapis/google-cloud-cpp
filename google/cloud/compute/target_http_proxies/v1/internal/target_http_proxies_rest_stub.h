// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_http_proxies/v1/target_http_proxies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_HTTP_PROXIES_V1_INTERNAL_TARGET_HTTP_PROXIES_REST_STUB_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_HTTP_PROXIES_V1_INTERNAL_TARGET_HTTP_PROXIES_REST_STUB_H

#include "google/cloud/completion_queue.h"
#include "google/cloud/internal/rest_client.h"
#include "google/cloud/internal/rest_context.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <google/cloud/compute/target_http_proxies/v1/target_http_proxies.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_http_proxies_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class TargetHttpProxiesRestStub {
 public:
  virtual ~TargetHttpProxiesRestStub() = default;

  virtual StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxyAggregatedList> AggregatedListTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::AggregatedListTargetHttpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::DeleteTargetHttpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxy> GetTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::GetTargetHttpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::Operation> InsertTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::InsertTargetHttpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxyList> ListTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::ListTargetHttpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::Operation> PatchTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::PatchTargetHttpProxiesRequest const& request) = 0;

  virtual StatusOr<google::cloud::cpp::compute::v1::Operation> SetUrlMap(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::SetUrlMapRequest const& request) = 0;
};

class DefaultTargetHttpProxiesRestStub : public TargetHttpProxiesRestStub {
 public:
  ~DefaultTargetHttpProxiesRestStub() override = default;

  explicit DefaultTargetHttpProxiesRestStub(Options options);
  DefaultTargetHttpProxiesRestStub(
      std::shared_ptr<rest_internal::RestClient> service,
      Options options);

  StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxyAggregatedList> AggregatedListTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::AggregatedListTargetHttpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::DeleteTargetHttpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxy> GetTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::GetTargetHttpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::InsertTargetHttpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxyList> ListTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::ListTargetHttpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchTargetHttpProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::PatchTargetHttpProxiesRequest const& request) override;

  StatusOr<google::cloud::cpp::compute::v1::Operation> SetUrlMap(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetHttpProxies::v1::SetUrlMapRequest const& request) override;

 private:
  std::shared_ptr<rest_internal::RestClient> service_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_http_proxies_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_HTTP_PROXIES_V1_INTERNAL_TARGET_HTTP_PROXIES_REST_STUB_H
