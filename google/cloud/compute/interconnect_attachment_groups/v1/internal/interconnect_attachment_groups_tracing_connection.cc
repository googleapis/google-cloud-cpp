// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/interconnect_attachment_groups/v1/interconnect_attachment_groups.proto

#include "google/cloud/compute/interconnect_attachment_groups/v1/internal/interconnect_attachment_groups_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace compute_interconnect_attachment_groups_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

InterconnectAttachmentGroupsTracingConnection::
    InterconnectAttachmentGroupsTracingConnection(
        std::shared_ptr<compute_interconnect_attachment_groups_v1::
                            InterconnectAttachmentGroupsConnection>
            child)
    : child_(std::move(child)) {}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectAttachmentGroupsTracingConnection::
    DeleteInterconnectAttachmentGroup(
        google::cloud::cpp::compute::interconnect_attachment_groups::v1::
            DeleteInterconnectAttachmentGroupRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "DeleteInterconnectAttachmentGroup");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeleteInterconnectAttachmentGroup(request));
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InterconnectAttachmentGroupsTracingConnection::
    DeleteInterconnectAttachmentGroup(
        NoAwaitTag,
        google::cloud::cpp::compute::interconnect_attachment_groups::v1::
            DeleteInterconnectAttachmentGroupRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "DeleteInterconnectAttachmentGroup");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->DeleteInterconnectAttachmentGroup(NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectAttachmentGroupsTracingConnection::
    DeleteInterconnectAttachmentGroup(
        google::cloud::cpp::compute::v1::Operation const& operation) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "DeleteInterconnectAttachmentGroup");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->DeleteInterconnectAttachmentGroup(operation));
}

StatusOr<google::cloud::cpp::compute::v1::InterconnectAttachmentGroup>
InterconnectAttachmentGroupsTracingConnection::GetInterconnectAttachmentGroup(
    google::cloud::cpp::compute::interconnect_attachment_groups::v1::
        GetInterconnectAttachmentGroupRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::GetInterconnectAttachmentGroup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span,
                           child_->GetInterconnectAttachmentGroup(request));
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
InterconnectAttachmentGroupsTracingConnection::GetIamPolicy(
    google::cloud::cpp::compute::interconnect_attachment_groups::v1::
        GetIamPolicyRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::GetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetIamPolicy(request));
}

StatusOr<google::cloud::cpp::compute::v1::
             InterconnectAttachmentGroupsGetOperationalStatusResponse>
InterconnectAttachmentGroupsTracingConnection::GetOperationalStatus(
    google::cloud::cpp::compute::interconnect_attachment_groups::v1::
        GetOperationalStatusRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::GetOperationalStatus");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetOperationalStatus(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectAttachmentGroupsTracingConnection::
    InsertInterconnectAttachmentGroup(
        google::cloud::cpp::compute::interconnect_attachment_groups::v1::
            InsertInterconnectAttachmentGroupRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "InsertInterconnectAttachmentGroup");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->InsertInterconnectAttachmentGroup(request));
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InterconnectAttachmentGroupsTracingConnection::
    InsertInterconnectAttachmentGroup(
        NoAwaitTag,
        google::cloud::cpp::compute::interconnect_attachment_groups::v1::
            InsertInterconnectAttachmentGroupRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "InsertInterconnectAttachmentGroup");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->InsertInterconnectAttachmentGroup(NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectAttachmentGroupsTracingConnection::
    InsertInterconnectAttachmentGroup(
        google::cloud::cpp::compute::v1::Operation const& operation) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "InsertInterconnectAttachmentGroup");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->InsertInterconnectAttachmentGroup(operation));
}

StreamRange<google::cloud::cpp::compute::v1::InterconnectAttachmentGroup>
InterconnectAttachmentGroupsTracingConnection::ListInterconnectAttachmentGroups(
    google::cloud::cpp::compute::interconnect_attachment_groups::v1::
        ListInterconnectAttachmentGroupsRequest request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "ListInterconnectAttachmentGroups");
  internal::OTelScope scope(span);
  auto sr = child_->ListInterconnectAttachmentGroups(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::cpp::compute::v1::InterconnectAttachmentGroup>(
      std::move(span), std::move(sr));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectAttachmentGroupsTracingConnection::PatchInterconnectAttachmentGroup(
    google::cloud::cpp::compute::interconnect_attachment_groups::v1::
        PatchInterconnectAttachmentGroupRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "PatchInterconnectAttachmentGroup");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->PatchInterconnectAttachmentGroup(request));
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InterconnectAttachmentGroupsTracingConnection::PatchInterconnectAttachmentGroup(
    NoAwaitTag,
    google::cloud::cpp::compute::interconnect_attachment_groups::v1::
        PatchInterconnectAttachmentGroupRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "PatchInterconnectAttachmentGroup");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->PatchInterconnectAttachmentGroup(NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
InterconnectAttachmentGroupsTracingConnection::PatchInterconnectAttachmentGroup(
    google::cloud::cpp::compute::v1::Operation const& operation) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::"
      "PatchInterconnectAttachmentGroup");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->PatchInterconnectAttachmentGroup(operation));
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
InterconnectAttachmentGroupsTracingConnection::SetIamPolicy(
    google::cloud::cpp::compute::interconnect_attachment_groups::v1::
        SetIamPolicyRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::SetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->SetIamPolicy(request));
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
InterconnectAttachmentGroupsTracingConnection::TestIamPermissions(
    google::cloud::cpp::compute::interconnect_attachment_groups::v1::
        TestIamPermissionsRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_interconnect_attachment_groups_v1::"
      "InterconnectAttachmentGroupsConnection::TestIamPermissions");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->TestIamPermissions(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<compute_interconnect_attachment_groups_v1::
                    InterconnectAttachmentGroupsConnection>
MakeInterconnectAttachmentGroupsTracingConnection(
    std::shared_ptr<compute_interconnect_attachment_groups_v1::
                        InterconnectAttachmentGroupsConnection>
        conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<InterconnectAttachmentGroupsTracingConnection>(
        std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_interconnect_attachment_groups_v1_internal
}  // namespace cloud
}  // namespace google
