// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/interconnect_attachment_groups/v1/interconnect_attachment_groups.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_INTERCONNECT_ATTACHMENT_GROUPS_V1_MOCKS_MOCK_INTERCONNECT_ATTACHMENT_GROUPS_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_INTERCONNECT_ATTACHMENT_GROUPS_V1_MOCKS_MOCK_INTERCONNECT_ATTACHMENT_GROUPS_CONNECTION_H

#include "google/cloud/compute/interconnect_attachment_groups/v1/interconnect_attachment_groups_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace compute_interconnect_attachment_groups_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `InterconnectAttachmentGroupsConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type
 * `InterconnectAttachmentGroupsClient`. To do so, construct an object of type
 * `InterconnectAttachmentGroupsClient` with an instance of this class. Then use
 * the Google Test framework functions to program the behavior of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockInterconnectAttachmentGroupsConnection
    : public compute_interconnect_attachment_groups_v1::
          InterconnectAttachmentGroupsConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteInterconnectAttachmentGroup(Matcher<google::cloud::cpp::compute::interconnect_attachment_groups::v1::DeleteInterconnectAttachmentGroupRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              DeleteInterconnectAttachmentGroup,
              (google::cloud::cpp::compute::interconnect_attachment_groups::v1::
                   DeleteInterconnectAttachmentGroupRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteInterconnectAttachmentGroup(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::Operation>,
              DeleteInterconnectAttachmentGroup,
              (NoAwaitTag,
               google::cloud::cpp::compute::interconnect_attachment_groups::v1::
                   DeleteInterconnectAttachmentGroupRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteInterconnectAttachmentGroup(Matcher<google::cloud::cpp::compute::v1::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              DeleteInterconnectAttachmentGroup,
              (google::cloud::cpp::compute::v1::Operation const& operation),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::compute::v1::InterconnectAttachmentGroup>,
      GetInterconnectAttachmentGroup,
      (google::cloud::cpp::compute::interconnect_attachment_groups::v1::
           GetInterconnectAttachmentGroupRequest const& request),
      (override));

  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::Policy>, GetIamPolicy,
              (google::cloud::cpp::compute::interconnect_attachment_groups::v1::
                   GetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::compute::v1::
                   InterconnectAttachmentGroupsGetOperationalStatusResponse>,
      GetOperationalStatus,
      (google::cloud::cpp::compute::interconnect_attachment_groups::v1::
           GetOperationalStatusRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// InsertInterconnectAttachmentGroup(Matcher<google::cloud::cpp::compute::interconnect_attachment_groups::v1::InsertInterconnectAttachmentGroupRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              InsertInterconnectAttachmentGroup,
              (google::cloud::cpp::compute::interconnect_attachment_groups::v1::
                   InsertInterconnectAttachmentGroupRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, InsertInterconnectAttachmentGroup(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::Operation>,
              InsertInterconnectAttachmentGroup,
              (NoAwaitTag,
               google::cloud::cpp::compute::interconnect_attachment_groups::v1::
                   InsertInterconnectAttachmentGroupRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// InsertInterconnectAttachmentGroup(Matcher<google::cloud::cpp::compute::v1::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              InsertInterconnectAttachmentGroup,
              (google::cloud::cpp::compute::v1::Operation const& operation),
              (override));

  MOCK_METHOD(
      (StreamRange<
          google::cloud::cpp::compute::v1::InterconnectAttachmentGroup>),
      ListInterconnectAttachmentGroups,
      (google::cloud::cpp::compute::interconnect_attachment_groups::v1::
           ListInterconnectAttachmentGroupsRequest request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// PatchInterconnectAttachmentGroup(Matcher<google::cloud::cpp::compute::interconnect_attachment_groups::v1::PatchInterconnectAttachmentGroupRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              PatchInterconnectAttachmentGroup,
              (google::cloud::cpp::compute::interconnect_attachment_groups::v1::
                   PatchInterconnectAttachmentGroupRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, PatchInterconnectAttachmentGroup(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::Operation>,
              PatchInterconnectAttachmentGroup,
              (NoAwaitTag,
               google::cloud::cpp::compute::interconnect_attachment_groups::v1::
                   PatchInterconnectAttachmentGroupRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// PatchInterconnectAttachmentGroup(Matcher<google::cloud::cpp::compute::v1::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::cpp::compute::v1::Operation>>,
              PatchInterconnectAttachmentGroup,
              (google::cloud::cpp::compute::v1::Operation const& operation),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::cpp::compute::v1::Policy>, SetIamPolicy,
              (google::cloud::cpp::compute::interconnect_attachment_groups::v1::
                   SetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>,
      TestIamPermissions,
      (google::cloud::cpp::compute::interconnect_attachment_groups::v1::
           TestIamPermissionsRequest const& request),
      (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_interconnect_attachment_groups_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_INTERCONNECT_ATTACHMENT_GROUPS_V1_MOCKS_MOCK_INTERCONNECT_ATTACHMENT_GROUPS_CONNECTION_H
