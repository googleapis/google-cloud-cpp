// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/networks/v1/networks.proto

#include "google/cloud/compute/networks/v1/internal/networks_rest_connection_impl.h"
#include "google/cloud/compute/networks/v1/internal/networks_rest_stub_factory.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_networks_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

NetworksRestConnectionImpl::NetworksRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<compute_networks_v1_internal::NetworksRestStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      NetworksConnection::options())) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworksRestConnectionImpl::AddPeering(
    google::cloud::cpp::compute::networks::v1::AddPeeringRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AddPeering(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networks::v1::AddPeeringRequest const&
                 request) { return stub_->AddPeering(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworksRestConnectionImpl::DeleteNetworks(
    google::cloud::cpp::compute::networks::v1::DeleteNetworksRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteNetworks(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networks::v1::
                 DeleteNetworksRequest const& request) {
        return stub_->DeleteNetworks(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Network>
NetworksRestConnectionImpl::GetNetworks(
    google::cloud::cpp::compute::networks::v1::GetNetworksRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetNetworks(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::networks::v1::GetNetworksRequest const&
              request) { return stub_->GetNetworks(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::NetworksGetEffectiveFirewallsResponse>
NetworksRestConnectionImpl::GetEffectiveFirewalls(
    google::cloud::cpp::compute::networks::v1::
        GetEffectiveFirewallsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetEffectiveFirewalls(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networks::v1::
                 GetEffectiveFirewallsRequest const& request) {
        return stub_->GetEffectiveFirewalls(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworksRestConnectionImpl::InsertNetworks(
    google::cloud::cpp::compute::networks::v1::InsertNetworksRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->InsertNetworks(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networks::v1::
                 InsertNetworksRequest const& request) {
        return stub_->InsertNetworks(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::cpp::compute::v1::Network>
NetworksRestConnectionImpl::ListNetworks(
    google::cloud::cpp::compute::networks::v1::ListNetworksRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<compute_networks_v1::NetworksRetryPolicy const>(
      retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListNetworks(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::Network>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::cpp::compute::networks::v1::ListNetworksRequest const&
              r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::networks::v1::
                       ListNetworksRequest const& request) {
              return stub->ListNetworks(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::NetworkList r) {
        std::vector<google::cloud::cpp::compute::v1::Network> result(
            r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StreamRange<google::cloud::cpp::compute::v1::ExchangedPeeringRoute>
NetworksRestConnectionImpl::ListPeeringRoutes(
    google::cloud::cpp::compute::networks::v1::ListPeeringRoutesRequest
        request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<compute_networks_v1::NetworksRetryPolicy const>(
      retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListPeeringRoutes(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::ExchangedPeeringRoute>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::networks::v1::
                          ListPeeringRoutesRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::networks::v1::
                       ListPeeringRoutesRequest const& request) {
              return stub->ListPeeringRoutes(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::ExchangedPeeringRoutesList r) {
        std::vector<google::cloud::cpp::compute::v1::ExchangedPeeringRoute>
            result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworksRestConnectionImpl::PatchNetworks(
    google::cloud::cpp::compute::networks::v1::PatchNetworksRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->PatchNetworks(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::networks::v1::PatchNetworksRequest const&
              request) { return stub_->PatchNetworks(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworksRestConnectionImpl::RemovePeering(
    google::cloud::cpp::compute::networks::v1::RemovePeeringRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->RemovePeering(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::networks::v1::RemovePeeringRequest const&
              request) { return stub_->RemovePeering(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworksRestConnectionImpl::SwitchToCustomMode(
    google::cloud::cpp::compute::networks::v1::SwitchToCustomModeRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SwitchToCustomMode(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networks::v1::
                 SwitchToCustomModeRequest const& request) {
        return stub_->SwitchToCustomMode(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworksRestConnectionImpl::UpdatePeering(
    google::cloud::cpp::compute::networks::v1::UpdatePeeringRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdatePeering(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::networks::v1::UpdatePeeringRequest const&
              request) { return stub_->UpdatePeering(rest_context, request); },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_networks_v1_internal
}  // namespace cloud
}  // namespace google
