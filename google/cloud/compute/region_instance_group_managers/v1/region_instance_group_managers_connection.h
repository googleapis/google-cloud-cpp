// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_instance_group_managers/v1/region_instance_group_managers.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_INSTANCE_GROUP_MANAGERS_V1_REGION_INSTANCE_GROUP_MANAGERS_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_INSTANCE_GROUP_MANAGERS_V1_REGION_INSTANCE_GROUP_MANAGERS_CONNECTION_H

#include "google/cloud/compute/region_instance_group_managers/v1/internal/region_instance_group_managers_retry_traits.h"
#include "google/cloud/compute/region_instance_group_managers/v1/region_instance_group_managers_connection_idempotency_policy.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/cloud/compute/region_instance_group_managers/v1/region_instance_group_managers.pb.h>
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_instance_group_managers_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using RegionInstanceGroupManagersRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        compute_region_instance_group_managers_v1_internal::
            RegionInstanceGroupManagersRetryTraits>;

using RegionInstanceGroupManagersLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        compute_region_instance_group_managers_v1_internal::
            RegionInstanceGroupManagersRetryTraits>;

using RegionInstanceGroupManagersLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        compute_region_instance_group_managers_v1_internal::
            RegionInstanceGroupManagersRetryTraits>;

/**
 * The `RegionInstanceGroupManagersConnection` object for
 * `RegionInstanceGroupManagersClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `RegionInstanceGroupManagersClient`. This allows users to inject
 * custom behavior (e.g., with a Google Mock object) when writing tests that use
 * objects of type `RegionInstanceGroupManagersClient`.
 *
 * To create a concrete instance, see
 * `MakeRegionInstanceGroupManagersConnection()`.
 *
 * For mocking, see
 * `compute_region_instance_group_managers_v1_mocks::MockRegionInstanceGroupManagersConnection`.
 */
class RegionInstanceGroupManagersConnection {
 public:
  virtual ~RegionInstanceGroupManagersConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  AbandonInstances(google::cloud::cpp::compute::region_instance_group_managers::
                       v1::AbandonInstancesRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  ApplyUpdatesToInstances(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          ApplyUpdatesToInstancesRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  CreateInstances(google::cloud::cpp::compute::region_instance_group_managers::
                      v1::CreateInstancesRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  DeleteRegionInstanceGroupManagers(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          DeleteRegionInstanceGroupManagersRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  DeleteInstances(google::cloud::cpp::compute::region_instance_group_managers::
                      v1::DeleteInstancesRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  DeletePerInstanceConfigs(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          DeletePerInstanceConfigsRequest const& request);

  virtual StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManager>
  GetRegionInstanceGroupManagers(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          GetRegionInstanceGroupManagersRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  InsertRegionInstanceGroupManagers(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          InsertRegionInstanceGroupManagersRequest const& request);

  virtual StreamRange<google::cloud::cpp::compute::v1::InstanceGroupManager>
  ListRegionInstanceGroupManagers(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          ListRegionInstanceGroupManagersRequest request);

  virtual StreamRange<
      google::cloud::cpp::compute::v1::InstanceManagedByIgmError>
  ListErrors(google::cloud::cpp::compute::region_instance_group_managers::v1::
                 ListErrorsRequest request);

  virtual StatusOr<google::cloud::cpp::compute::v1::
                       RegionInstanceGroupManagersListInstancesResponse>
  ListManagedInstances(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          ListManagedInstancesRequest const& request);

  virtual StreamRange<google::cloud::cpp::compute::v1::PerInstanceConfig>
  ListPerInstanceConfigs(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          ListPerInstanceConfigsRequest request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  PatchRegionInstanceGroupManagers(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          PatchRegionInstanceGroupManagersRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  PatchPerInstanceConfigs(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          PatchPerInstanceConfigsRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  RecreateInstances(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          RecreateInstancesRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>> Resize(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          ResizeRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  SetInstanceTemplate(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          SetInstanceTemplateRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  SetTargetPools(google::cloud::cpp::compute::region_instance_group_managers::
                     v1::SetTargetPoolsRequest const& request);

  virtual future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
  UpdatePerInstanceConfigs(
      google::cloud::cpp::compute::region_instance_group_managers::v1::
          UpdatePerInstanceConfigsRequest const& request);
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_instance_group_managers_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_INSTANCE_GROUP_MANAGERS_V1_REGION_INSTANCE_GROUP_MANAGERS_CONNECTION_H
