// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_instance_group_managers/v1/region_instance_group_managers.proto

#include "google/cloud/compute/region_instance_group_managers/v1/internal/region_instance_group_managers_rest_connection_impl.h"
#include "google/cloud/compute/region_instance_group_managers/v1/internal/region_instance_group_managers_rest_stub_factory.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_instance_group_managers_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegionInstanceGroupManagersRestConnectionImpl::
    RegionInstanceGroupManagersRestConnectionImpl(
        std::unique_ptr<google::cloud::BackgroundThreads> background,
        std::shared_ptr<compute_region_instance_group_managers_v1_internal::
                            RegionInstanceGroupManagersRestStub>
            stub,
        Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(
          std::move(options),
          RegionInstanceGroupManagersConnection::options())) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::AbandonInstances(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        AbandonInstancesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AbandonInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 AbandonInstancesRequest const& request) {
        return stub_->AbandonInstances(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::ApplyUpdatesToInstances(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        ApplyUpdatesToInstancesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ApplyUpdatesToInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 ApplyUpdatesToInstancesRequest const& request) {
        return stub_->ApplyUpdatesToInstances(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::CreateInstances(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        CreateInstancesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 CreateInstancesRequest const& request) {
        return stub_->CreateInstances(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::
    DeleteRegionInstanceGroupManagers(
        google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
            DeleteRegionInstanceGroupManagersRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteRegionInstanceGroupManagers(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 DeleteRegionInstanceGroupManagersRequest const& request) {
        return stub_->DeleteRegionInstanceGroupManagers(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::DeleteInstances(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        DeleteInstancesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 DeleteInstancesRequest const& request) {
        return stub_->DeleteInstances(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::DeletePerInstanceConfigs(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        DeletePerInstanceConfigsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeletePerInstanceConfigs(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 DeletePerInstanceConfigsRequest const& request) {
        return stub_->DeletePerInstanceConfigs(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManager>
RegionInstanceGroupManagersRestConnectionImpl::GetRegionInstanceGroupManagers(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        GetRegionInstanceGroupManagersRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetRegionInstanceGroupManagers(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 GetRegionInstanceGroupManagersRequest const& request) {
        return stub_->GetRegionInstanceGroupManagers(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::
    InsertRegionInstanceGroupManagers(
        google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
            InsertRegionInstanceGroupManagersRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->InsertRegionInstanceGroupManagers(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 InsertRegionInstanceGroupManagersRequest const& request) {
        return stub_->InsertRegionInstanceGroupManagers(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::cpp::compute::v1::InstanceGroupManager>
RegionInstanceGroupManagersRestConnectionImpl::ListRegionInstanceGroupManagers(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        ListRegionInstanceGroupManagersRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<compute_region_instance_group_managers_v1::
                          RegionInstanceGroupManagersRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency =
      idempotency_policy()->ListRegionInstanceGroupManagers(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::InstanceGroupManager>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::regionInstanceGroupManagers::
                          v1::ListRegionInstanceGroupManagersRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                rest_internal::RestContext& rest_context,
                google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                    ListRegionInstanceGroupManagersRequest const& request) {
              return stub->ListRegionInstanceGroupManagers(rest_context,
                                                           request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::RegionInstanceGroupManagerList r) {
        std::vector<google::cloud::cpp::compute::v1::InstanceGroupManager>
            result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StreamRange<google::cloud::cpp::compute::v1::InstanceManagedByIgmError>
RegionInstanceGroupManagersRestConnectionImpl::ListErrors(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        ListErrorsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<compute_region_instance_group_managers_v1::
                          RegionInstanceGroupManagersRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListErrors(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::InstanceManagedByIgmError>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::regionInstanceGroupManagers::
                          v1::ListErrorsRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::regionInstanceGroupManagers::
                       v1::ListErrorsRequest const& request) {
              return stub->ListErrors(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::
             RegionInstanceGroupManagersListErrorsResponse r) {
        std::vector<google::cloud::cpp::compute::v1::InstanceManagedByIgmError>
            result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cpp::compute::v1::
             RegionInstanceGroupManagersListInstancesResponse>
RegionInstanceGroupManagersRestConnectionImpl::ListManagedInstances(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        ListManagedInstancesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ListManagedInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 ListManagedInstancesRequest const& request) {
        return stub_->ListManagedInstances(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::cpp::compute::v1::PerInstanceConfig>
RegionInstanceGroupManagersRestConnectionImpl::ListPerInstanceConfigs(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        ListPerInstanceConfigsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<compute_region_instance_group_managers_v1::
                          RegionInstanceGroupManagersRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListPerInstanceConfigs(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::PerInstanceConfig>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::regionInstanceGroupManagers::
                          v1::ListPerInstanceConfigsRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::regionInstanceGroupManagers::
                       v1::ListPerInstanceConfigsRequest const& request) {
              return stub->ListPerInstanceConfigs(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::
             RegionInstanceGroupManagersListInstanceConfigsResp r) {
        std::vector<google::cloud::cpp::compute::v1::PerInstanceConfig> result(
            r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::PatchRegionInstanceGroupManagers(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        PatchRegionInstanceGroupManagersRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->PatchRegionInstanceGroupManagers(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 PatchRegionInstanceGroupManagersRequest const& request) {
        return stub_->PatchRegionInstanceGroupManagers(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::PatchPerInstanceConfigs(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        PatchPerInstanceConfigsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->PatchPerInstanceConfigs(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 PatchPerInstanceConfigsRequest const& request) {
        return stub_->PatchPerInstanceConfigs(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::RecreateInstances(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        RecreateInstancesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->RecreateInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 RecreateInstancesRequest const& request) {
        return stub_->RecreateInstances(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::Resize(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        ResizeRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Resize(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 ResizeRequest const& request) {
        return stub_->Resize(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::SetInstanceTemplate(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        SetInstanceTemplateRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetInstanceTemplate(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 SetInstanceTemplateRequest const& request) {
        return stub_->SetInstanceTemplate(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::SetTargetPools(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        SetTargetPoolsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetTargetPools(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 SetTargetPoolsRequest const& request) {
        return stub_->SetTargetPools(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionInstanceGroupManagersRestConnectionImpl::UpdatePerInstanceConfigs(
    google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
        UpdatePerInstanceConfigsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdatePerInstanceConfigs(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::regionInstanceGroupManagers::v1::
                 UpdatePerInstanceConfigsRequest const& request) {
        return stub_->UpdatePerInstanceConfigs(rest_context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_instance_group_managers_v1_internal
}  // namespace cloud
}  // namespace google
