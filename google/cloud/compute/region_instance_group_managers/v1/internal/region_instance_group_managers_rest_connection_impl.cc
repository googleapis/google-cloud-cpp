// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_instance_group_managers/v1/region_instance_group_managers.proto

#include "google/cloud/compute/region_instance_group_managers/v1/internal/region_instance_group_managers_rest_connection_impl.h"
#include "google/cloud/common_options.h"
#include "google/cloud/compute/region_instance_group_managers/v1/internal/region_instance_group_managers_rest_stub_factory.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/async_rest_long_running_operation.h"
#include "google/cloud/internal/extract_long_running_result.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_instance_group_managers_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegionInstanceGroupManagersRestConnectionImpl::RegionInstanceGroupManagersRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<compute_region_instance_group_managers_v1_internal::RegionInstanceGroupManagersRestStub> stub,
    Options options)
  : background_(std::move(background)), stub_(std::move(stub)),
    options_(internal::MergeOptions(
        std::move(options),
        RegionInstanceGroupManagersConnection::options())) {}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::AbandonInstances(google::cloud::cpp::compute::region_instance_group_managers::v1::AbandonInstancesRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::AbandonInstancesRequest const& request) {
     return stub->AsyncAbandonInstances(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->AbandonInstances(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::ApplyUpdatesToInstances(google::cloud::cpp::compute::region_instance_group_managers::v1::ApplyUpdatesToInstancesRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::ApplyUpdatesToInstancesRequest const& request) {
     return stub->AsyncApplyUpdatesToInstances(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->ApplyUpdatesToInstances(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::CreateInstances(google::cloud::cpp::compute::region_instance_group_managers::v1::CreateInstancesRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::CreateInstancesRequest const& request) {
     return stub->AsyncCreateInstances(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->CreateInstances(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::DeleteRegionInstanceGroupManagers(google::cloud::cpp::compute::region_instance_group_managers::v1::DeleteRegionInstanceGroupManagersRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::DeleteRegionInstanceGroupManagersRequest const& request) {
     return stub->AsyncDeleteRegionInstanceGroupManagers(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->DeleteRegionInstanceGroupManagers(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::DeleteInstances(google::cloud::cpp::compute::region_instance_group_managers::v1::DeleteInstancesRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::DeleteInstancesRequest const& request) {
     return stub->AsyncDeleteInstances(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->DeleteInstances(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::DeletePerInstanceConfigs(google::cloud::cpp::compute::region_instance_group_managers::v1::DeletePerInstanceConfigsRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::DeletePerInstanceConfigsRequest const& request) {
     return stub->AsyncDeletePerInstanceConfigs(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->DeletePerInstanceConfigs(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

StatusOr<google::cloud::cpp::compute::v1::InstanceGroupManager>
RegionInstanceGroupManagersRestConnectionImpl::GetRegionInstanceGroupManagers(google::cloud::cpp::compute::region_instance_group_managers::v1::GetRegionInstanceGroupManagersRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetRegionInstanceGroupManagers(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::GetRegionInstanceGroupManagersRequest const& request) {
        return stub_->GetRegionInstanceGroupManagers(rest_context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::InsertRegionInstanceGroupManagers(google::cloud::cpp::compute::region_instance_group_managers::v1::InsertRegionInstanceGroupManagersRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::InsertRegionInstanceGroupManagersRequest const& request) {
     return stub->AsyncInsertRegionInstanceGroupManagers(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->InsertRegionInstanceGroupManagers(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

StreamRange<google::cloud::cpp::compute::v1::InstanceGroupManager>
RegionInstanceGroupManagersRestConnectionImpl::ListRegionInstanceGroupManagers(google::cloud::cpp::compute::region_instance_group_managers::v1::ListRegionInstanceGroupManagersRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<compute_region_instance_group_managers_v1::RegionInstanceGroupManagersRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListRegionInstanceGroupManagers(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<StreamRange<google::cloud::cpp::compute::v1::InstanceGroupManager>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name]
        (google::cloud::cpp::compute::region_instance_group_managers::v1::ListRegionInstanceGroupManagersRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context, google::cloud::cpp::compute::region_instance_group_managers::v1::ListRegionInstanceGroupManagersRequest const& request) {
              return stub->ListRegionInstanceGroupManagers(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::RegionInstanceGroupManagerList r) {
        std::vector<google::cloud::cpp::compute::v1::InstanceGroupManager> result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StreamRange<google::cloud::cpp::compute::v1::InstanceManagedByIgmError>
RegionInstanceGroupManagersRestConnectionImpl::ListErrors(google::cloud::cpp::compute::region_instance_group_managers::v1::ListErrorsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<compute_region_instance_group_managers_v1::RegionInstanceGroupManagersRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListErrors(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<StreamRange<google::cloud::cpp::compute::v1::InstanceManagedByIgmError>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name]
        (google::cloud::cpp::compute::region_instance_group_managers::v1::ListErrorsRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context, google::cloud::cpp::compute::region_instance_group_managers::v1::ListErrorsRequest const& request) {
              return stub->ListErrors(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::RegionInstanceGroupManagersListErrorsResponse r) {
        std::vector<google::cloud::cpp::compute::v1::InstanceManagedByIgmError> result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cpp::compute::v1::RegionInstanceGroupManagersListInstancesResponse>
RegionInstanceGroupManagersRestConnectionImpl::ListManagedInstances(google::cloud::cpp::compute::region_instance_group_managers::v1::ListManagedInstancesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ListManagedInstances(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::ListManagedInstancesRequest const& request) {
        return stub_->ListManagedInstances(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::cpp::compute::v1::PerInstanceConfig>
RegionInstanceGroupManagersRestConnectionImpl::ListPerInstanceConfigs(google::cloud::cpp::compute::region_instance_group_managers::v1::ListPerInstanceConfigsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<compute_region_instance_group_managers_v1::RegionInstanceGroupManagersRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListPerInstanceConfigs(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<StreamRange<google::cloud::cpp::compute::v1::PerInstanceConfig>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name]
        (google::cloud::cpp::compute::region_instance_group_managers::v1::ListPerInstanceConfigsRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context, google::cloud::cpp::compute::region_instance_group_managers::v1::ListPerInstanceConfigsRequest const& request) {
              return stub->ListPerInstanceConfigs(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::RegionInstanceGroupManagersListInstanceConfigsResp r) {
        std::vector<google::cloud::cpp::compute::v1::PerInstanceConfig> result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::PatchRegionInstanceGroupManagers(google::cloud::cpp::compute::region_instance_group_managers::v1::PatchRegionInstanceGroupManagersRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::PatchRegionInstanceGroupManagersRequest const& request) {
     return stub->AsyncPatchRegionInstanceGroupManagers(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->PatchRegionInstanceGroupManagers(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::PatchPerInstanceConfigs(google::cloud::cpp::compute::region_instance_group_managers::v1::PatchPerInstanceConfigsRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::PatchPerInstanceConfigsRequest const& request) {
     return stub->AsyncPatchPerInstanceConfigs(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->PatchPerInstanceConfigs(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::RecreateInstances(google::cloud::cpp::compute::region_instance_group_managers::v1::RecreateInstancesRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::RecreateInstancesRequest const& request) {
     return stub->AsyncRecreateInstances(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->RecreateInstances(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::Resize(google::cloud::cpp::compute::region_instance_group_managers::v1::ResizeRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::ResizeRequest const& request) {
     return stub->AsyncResize(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->Resize(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::SetInstanceTemplate(google::cloud::cpp::compute::region_instance_group_managers::v1::SetInstanceTemplateRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::SetInstanceTemplateRequest const& request) {
     return stub->AsyncSetInstanceTemplate(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->SetInstanceTemplate(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::SetTargetPools(google::cloud::cpp::compute::region_instance_group_managers::v1::SetTargetPoolsRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::SetTargetPoolsRequest const& request) {
     return stub->AsyncSetTargetPools(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->SetTargetPools(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionInstanceGroupManagersRestConnectionImpl::UpdatePerInstanceConfigs(google::cloud::cpp::compute::region_instance_group_managers::v1::UpdatePerInstanceConfigsRequest const& request) {
  auto& stub = stub_;
  return rest_internal::AsyncRestLongRunningOperation<
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::v1::Operation,
    google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest,
    google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest>(
    background_->cq(), request,
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_instance_group_managers::v1::UpdatePerInstanceConfigsRequest const& request) {
     return stub->AsyncUpdatePerInstanceConfigs(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest const& request) {
     return stub->AsyncGetOperation(cq, std::move(context), request);
    },
    [stub](CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest const& request) {
     return stub->AsyncCancelOperation(cq, std::move(context), request);
    },
    [](StatusOr<google::cloud::cpp::compute::v1::Operation> op, std::string const&) {
        return op;
    },
    retry_policy(), backoff_policy(),
    idempotency_policy()->UpdatePerInstanceConfigs(request),
    polling_policy(), __func__,
    [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::GetRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    },
    [request](std::string const& op, google::cloud::cpp::compute::region_operations::v1::DeleteRegionOperationsRequest& r) {

      r.set_project(request.project());
      r.set_region(request.region());
      r.set_operation(op);

    });

}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_instance_group_managers_v1_internal
}  // namespace cloud
}  // namespace google
