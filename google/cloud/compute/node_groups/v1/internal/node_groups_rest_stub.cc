// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/node_groups/v1/node_groups.proto

#include "google/cloud/compute/node_groups/v1/internal/node_groups_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/node_groups/v1/node_groups.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_node_groups_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultNodeGroupsRestStub::DefaultNodeGroupsRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultNodeGroupsRestStub::DefaultNodeGroupsRestStub(
    std::shared_ptr<rest_internal::RestClient> service, Options options)
    : service_(std::move(service)), options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultNodeGroupsRestStub::AddNodes(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::AddNodesRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}/"
      "addNodes");
}

StatusOr<google::cloud::cpp::compute::v1::NodeGroupAggregatedList>
DefaultNodeGroupsRestStub::AggregatedListNodeGroups(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::
        AggregatedListNodeGroupsRequest const& request) {
  return rest_internal::Get<
      google::cloud::cpp::compute::v1::NodeGroupAggregatedList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/aggregated/nodeGroups",
      {std::make_pair("filter", request.filter()),
       std::make_pair("include_all_scopes",
                      std::to_string(request.include_all_scopes())),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultNodeGroupsRestStub::DeleteNodeGroups(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::DeleteNodeGroupsRequest const&
        request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultNodeGroupsRestStub::DeleteNodes(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::DeleteNodesRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}/"
      "deleteNodes");
}

StatusOr<google::cloud::cpp::compute::v1::NodeGroup>
DefaultNodeGroupsRestStub::GetNodeGroups(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::GetNodeGroupsRequest const&
        request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::NodeGroup>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}",
      {std::make_pair("node_group", request.node_group()),
       std::make_pair("project", request.project()),
       std::make_pair("zone", request.zone())});
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DefaultNodeGroupsRestStub::GetIamPolicy(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::GetIamPolicyRequest const&
        request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Policy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/"
      "getIamPolicy",
      {std::make_pair(
           "options_requested_policy_version",
           std::to_string(request.options_requested_policy_version())),
       std::make_pair("project", request.project()),
       std::make_pair("resource", request.resource()),
       std::make_pair("zone", request.zone())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultNodeGroupsRestStub::InsertNodeGroups(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::InsertNodeGroupsRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups");
}

StatusOr<google::cloud::cpp::compute::v1::NodeGroupList>
DefaultNodeGroupsRestStub::ListNodeGroups(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::ListNodeGroupsRequest const&
        request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::NodeGroupList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success())),
       std::make_pair("zone", request.zone())});
}

StatusOr<google::cloud::cpp::compute::v1::NodeGroupsListNodes>
DefaultNodeGroupsRestStub::ListNodes(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::ListNodesRequest const&
        request) {
  return rest_internal::Post<
      google::cloud::cpp::compute::v1::NodeGroupsListNodes>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}/"
      "listNodes");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultNodeGroupsRestStub::PatchNodeGroups(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::PatchNodeGroupsRequest const&
        request) {
  return rest_internal::Patch<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}");
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DefaultNodeGroupsRestStub::SetIamPolicy(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::SetIamPolicyRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Policy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/"
      "setIamPolicy");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultNodeGroupsRestStub::SetNodeTemplate(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::SetNodeTemplateRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}/"
      "setNodeTemplate");
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
DefaultNodeGroupsRestStub::TestIamPermissions(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::nodeGroups::v1::
        TestIamPermissionsRequest const& request) {
  return rest_internal::Post<
      google::cloud::cpp::compute::v1::TestPermissionsResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/"
      "testIamPermissions");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_node_groups_v1_internal
}  // namespace cloud
}  // namespace google
