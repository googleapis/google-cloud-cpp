// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_ssl_proxies/v1/target_ssl_proxies.proto

#include "google/cloud/compute/target_ssl_proxies/v1/internal/target_ssl_proxies_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/target_ssl_proxies/v1/target_ssl_proxies.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_ssl_proxies_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultTargetSslProxiesRestStub::DefaultTargetSslProxiesRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultTargetSslProxiesRestStub::DefaultTargetSslProxiesRestStub(
    std::shared_ptr<rest_internal::RestClient> service,
    Options options)
    : service_(std::move(service)),
      options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetSslProxiesRestStub::DeleteTargetSslProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetSslProxies::v1::DeleteTargetSslProxiesRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}");
}

StatusOr<google::cloud::cpp::compute::v1::TargetSslProxy>
DefaultTargetSslProxiesRestStub::GetTargetSslProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetSslProxies::v1::GetTargetSslProxiesRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::TargetSslProxy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}",
      {std::make_pair("project", request.project()),
       std::make_pair("target_ssl_proxy", request.target_ssl_proxy())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetSslProxiesRestStub::InsertTargetSslProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetSslProxies::v1::InsertTargetSslProxiesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/targetSslProxies");
}

StatusOr<google::cloud::cpp::compute::v1::TargetSslProxyList>
DefaultTargetSslProxiesRestStub::ListTargetSslProxies(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetSslProxies::v1::ListTargetSslProxiesRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::TargetSslProxyList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/targetSslProxies",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetSslProxiesRestStub::SetBackendService(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetSslProxies::v1::SetBackendServiceRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}/setBackendService");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetSslProxiesRestStub::SetCertificateMap(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetSslProxies::v1::SetCertificateMapRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}/setCertificateMap");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetSslProxiesRestStub::SetProxyHeader(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetSslProxies::v1::SetProxyHeaderRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}/setProxyHeader");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetSslProxiesRestStub::SetSslCertificates(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetSslProxies::v1::SetSslCertificatesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}/setSslCertificates");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultTargetSslProxiesRestStub::SetSslPolicy(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::targetSslProxies::v1::SetSslPolicyRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}/setSslPolicy");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_ssl_proxies_v1_internal
}  // namespace cloud
}  // namespace google
