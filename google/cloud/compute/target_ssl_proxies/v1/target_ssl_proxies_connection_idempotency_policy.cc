// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_ssl_proxies/v1/target_ssl_proxies.proto

#include "google/cloud/compute/target_ssl_proxies/v1/target_ssl_proxies_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_ssl_proxies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

TargetSslProxiesConnectionIdempotencyPolicy::
    ~TargetSslProxiesConnectionIdempotencyPolicy() = default;

std::unique_ptr<TargetSslProxiesConnectionIdempotencyPolicy>
TargetSslProxiesConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<TargetSslProxiesConnectionIdempotencyPolicy>(*this);
}

Idempotency TargetSslProxiesConnectionIdempotencyPolicy::DeleteTargetSslProxies(
    google::cloud::cpp::compute::target_ssl_proxies::v1::
        DeleteTargetSslProxiesRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TargetSslProxiesConnectionIdempotencyPolicy::GetTargetSslProxies(
    google::cloud::cpp::compute::target_ssl_proxies::v1::
        GetTargetSslProxiesRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency TargetSslProxiesConnectionIdempotencyPolicy::InsertTargetSslProxies(
    google::cloud::cpp::compute::target_ssl_proxies::v1::
        InsertTargetSslProxiesRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TargetSslProxiesConnectionIdempotencyPolicy::ListTargetSslProxies(
    google::cloud::cpp::compute::target_ssl_proxies::v1::
        ListTargetSslProxiesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TargetSslProxiesConnectionIdempotencyPolicy::SetBackendService(
    google::cloud::cpp::compute::target_ssl_proxies::v1::
        SetBackendServiceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TargetSslProxiesConnectionIdempotencyPolicy::SetCertificateMap(
    google::cloud::cpp::compute::target_ssl_proxies::v1::
        SetCertificateMapRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TargetSslProxiesConnectionIdempotencyPolicy::SetProxyHeader(
    google::cloud::cpp::compute::target_ssl_proxies::v1::
        SetProxyHeaderRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TargetSslProxiesConnectionIdempotencyPolicy::SetSslCertificates(
    google::cloud::cpp::compute::target_ssl_proxies::v1::
        SetSslCertificatesRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TargetSslProxiesConnectionIdempotencyPolicy::SetSslPolicy(
    google::cloud::cpp::compute::target_ssl_proxies::v1::
        SetSslPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<TargetSslProxiesConnectionIdempotencyPolicy>
MakeDefaultTargetSslProxiesConnectionIdempotencyPolicy() {
  return std::make_unique<TargetSslProxiesConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_ssl_proxies_v1
}  // namespace cloud
}  // namespace google
