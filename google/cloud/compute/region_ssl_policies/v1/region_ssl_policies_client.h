// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_SSL_POLICIES_V1_REGION_SSL_POLICIES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_SSL_POLICIES_V1_REGION_SSL_POLICIES_CLIENT_H

#include "google/cloud/compute/region_ssl_policies/v1/region_ssl_policies_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_ssl_policies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the regionSslPolicies resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/regionSslPolicies
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class RegionSslPoliciesClient {
 public:
  explicit RegionSslPoliciesClient(
      ExperimentalTag, std::shared_ptr<RegionSslPoliciesConnection> connection,
      Options opts = {});
  ~RegionSslPoliciesClient();

  ///@{
  /// @name Copy and move support
  RegionSslPoliciesClient(RegionSslPoliciesClient const&) = default;
  RegionSslPoliciesClient& operator=(RegionSslPoliciesClient const&) = default;
  RegionSslPoliciesClient(RegionSslPoliciesClient&&) = default;
  RegionSslPoliciesClient& operator=(RegionSslPoliciesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(RegionSslPoliciesClient const& a,
                         RegionSslPoliciesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(RegionSslPoliciesClient const& a,
                         RegionSslPoliciesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified SSL policy. The SSL policy resource can be deleted
  /// only if it is not in use by any TargetHttpsProxy or TargetSslProxy
  /// resources.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param ssl_policy  Name of the SSL policy to delete. The name must be 1-63
  /// characters long,
  ///  and comply with RFC1035.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.DeleteRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L101}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteRegionSslPolicies(
      std::string const& project, std::string const& region,
      std::string const& ssl_policy, Options opts = {});

  ///
  /// Deletes the specified SSL policy. The SSL policy resource can be deleted
  /// only if it is not in use by any TargetHttpsProxy or TargetSslProxy
  /// resources.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionSslPolicies::v1::DeleteRegionSslPoliciesRequest,google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L101}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.DeleteRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L101}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteRegionSslPolicies(
      google::cloud::cpp::compute::regionSslPolicies::v1::
          DeleteRegionSslPoliciesRequest const& request,
      Options opts = {});

  ///
  /// Lists all of the ordered rules present in a single specified policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param ssl_policy  Name of the SSL policy to update. The name must be 1-63
  /// characters long,
  ///  and comply with RFC1035.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslPolicy,google/cloud/compute/v1/internal/common.proto#L25520}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.GetRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L132}
  /// [google.cloud.cpp.compute.v1.SslPolicy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L25520}
  ///
  StatusOr<google::cloud::cpp::compute::v1::SslPolicy> GetRegionSslPolicies(
      std::string const& project, std::string const& region,
      std::string const& ssl_policy, Options opts = {});

  ///
  /// Lists all of the ordered rules present in a single specified policy.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionSslPolicies::v1::GetRegionSslPoliciesRequest,google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L132}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslPolicy,google/cloud/compute/v1/internal/common.proto#L25520}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.GetRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L132}
  /// [google.cloud.cpp.compute.v1.SslPolicy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L25520}
  ///
  StatusOr<google::cloud::cpp::compute::v1::SslPolicy> GetRegionSslPolicies(
      google::cloud::cpp::compute::regionSslPolicies::v1::
          GetRegionSslPoliciesRequest const& request,
      Options opts = {});

  ///
  /// Creates a new policy in the specified project and region using the data
  /// included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param ssl_policy_resource  The SslPolicy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.InsertRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L145}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertRegionSslPolicies(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::SslPolicy const& ssl_policy_resource,
      Options opts = {});

  ///
  /// Creates a new policy in the specified project and region using the data
  /// included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionSslPolicies::v1::InsertRegionSslPoliciesRequest,google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L145}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.InsertRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L145}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertRegionSslPolicies(
      google::cloud::cpp::compute::regionSslPolicies::v1::
          InsertRegionSslPoliciesRequest const& request,
      Options opts = {});

  ///
  /// Lists all the SSL policies that have been configured for the specified
  /// project and region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslPolicy,google/cloud/compute/v1/internal/common.proto#L25520}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.ListRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L243}
  /// [google.cloud.cpp.compute.v1.SslPolicy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L25520}
  ///
  StreamRange<google::cloud::cpp::compute::v1::SslPolicy> ListRegionSslPolicies(
      std::string const& project, std::string const& region, Options opts = {});

  ///
  /// Lists all the SSL policies that have been configured for the specified
  /// project and region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionSslPolicies::v1::ListRegionSslPoliciesRequest,google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L243}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslPolicy,google/cloud/compute/v1/internal/common.proto#L25520}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.ListRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L243}
  /// [google.cloud.cpp.compute.v1.SslPolicy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L25520}
  ///
  StreamRange<google::cloud::cpp::compute::v1::SslPolicy> ListRegionSslPolicies(
      google::cloud::cpp::compute::regionSslPolicies::v1::
          ListRegionSslPoliciesRequest request,
      Options opts = {});

  ///
  /// Lists all features that can be specified in the SSL policy when using
  /// custom profile.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslPoliciesListAvailableFeaturesResponse,google/cloud/compute/v1/internal/common.proto#L25426}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.ListAvailableFeaturesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L175}
  /// [google.cloud.cpp.compute.v1.SslPoliciesListAvailableFeaturesResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L25426}
  ///
  StatusOr<
      google::cloud::cpp::compute::v1::SslPoliciesListAvailableFeaturesResponse>
  ListAvailableFeatures(std::string const& project, std::string const& region,
                        Options opts = {});

  ///
  /// Lists all features that can be specified in the SSL policy when using
  /// custom profile.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionSslPolicies::v1::ListAvailableFeaturesRequest,google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L175}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslPoliciesListAvailableFeaturesResponse,google/cloud/compute/v1/internal/common.proto#L25426}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.ListAvailableFeaturesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L175}
  /// [google.cloud.cpp.compute.v1.SslPoliciesListAvailableFeaturesResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L25426}
  ///
  StatusOr<
      google::cloud::cpp::compute::v1::SslPoliciesListAvailableFeaturesResponse>
  ListAvailableFeatures(google::cloud::cpp::compute::regionSslPolicies::v1::
                            ListAvailableFeaturesRequest const& request,
                        Options opts = {});

  ///
  /// Patches the specified SSL policy with the data included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param ssl_policy  Name of the SSL policy to update. The name must be 1-63
  /// characters long,
  ///  and comply with RFC1035.
  /// @param ssl_policy_resource  The SslPolicy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.PatchRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L311}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchRegionSslPolicies(
      std::string const& project, std::string const& region,
      std::string const& ssl_policy,
      google::cloud::cpp::compute::v1::SslPolicy const& ssl_policy_resource,
      Options opts = {});

  ///
  /// Patches the specified SSL policy with the data included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionSslPolicies::v1::PatchRegionSslPoliciesRequest,google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L311}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.regionSslPolicies.v1.PatchRegionSslPoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_ssl_policies/v1/region_ssl_policies.proto#L311}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchRegionSslPolicies(
      google::cloud::cpp::compute::regionSslPolicies::v1::
          PatchRegionSslPoliciesRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<RegionSslPoliciesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_ssl_policies_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_SSL_POLICIES_V1_REGION_SSL_POLICIES_CLIENT_H
