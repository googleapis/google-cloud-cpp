// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/instances/v1/instances.proto

#include "google/cloud/compute/instances/v1/internal/instances_rest_connection_impl.h"
#include "google/cloud/compute/instances/v1/internal/instances_rest_stub_factory.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_instances_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

InstancesRestConnectionImpl::InstancesRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<compute_instances_v1_internal::InstancesRestStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      InstancesConnection::options())) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::AddAccessConfig(
    google::cloud::cpp::compute::instances::v1::AddAccessConfigRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AddAccessConfig(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 AddAccessConfigRequest const& request) {
        return stub_->AddAccessConfig(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::AddResourcePolicies(
    google::cloud::cpp::compute::instances::v1::
        AddResourcePoliciesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AddResourcePolicies(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 AddResourcePoliciesRequest const& request) {
        return stub_->AddResourcePolicies(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::InstanceAggregatedList>
InstancesRestConnectionImpl::AggregatedListInstances(
    google::cloud::cpp::compute::instances::v1::
        AggregatedListInstancesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AggregatedListInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 AggregatedListInstancesRequest const& request) {
        return stub_->AggregatedListInstances(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::AttachDisk(
    google::cloud::cpp::compute::instances::v1::AttachDiskRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AttachDisk(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::instances::v1::AttachDiskRequest const&
              request) { return stub_->AttachDisk(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::BulkInsert(
    google::cloud::cpp::compute::instances::v1::BulkInsertRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->BulkInsert(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::instances::v1::BulkInsertRequest const&
              request) { return stub_->BulkInsert(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::DeleteInstances(
    google::cloud::cpp::compute::instances::v1::DeleteInstancesRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 DeleteInstancesRequest const& request) {
        return stub_->DeleteInstances(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::DeleteAccessConfig(
    google::cloud::cpp::compute::instances::v1::DeleteAccessConfigRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteAccessConfig(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 DeleteAccessConfigRequest const& request) {
        return stub_->DeleteAccessConfig(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::DetachDisk(
    google::cloud::cpp::compute::instances::v1::DetachDiskRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DetachDisk(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::instances::v1::DetachDiskRequest const&
              request) { return stub_->DetachDisk(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Instance>
InstancesRestConnectionImpl::GetInstances(
    google::cloud::cpp::compute::instances::v1::GetInstancesRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetInstances(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::instances::v1::GetInstancesRequest const&
              request) { return stub_->GetInstances(rest_context, request); },
      request, __func__);
}

StatusOr<
    google::cloud::cpp::compute::v1::InstancesGetEffectiveFirewallsResponse>
InstancesRestConnectionImpl::GetEffectiveFirewalls(
    google::cloud::cpp::compute::instances::v1::
        GetEffectiveFirewallsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetEffectiveFirewalls(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 GetEffectiveFirewallsRequest const& request) {
        return stub_->GetEffectiveFirewalls(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::GuestAttributes>
InstancesRestConnectionImpl::GetGuestAttributes(
    google::cloud::cpp::compute::instances::v1::GetGuestAttributesRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetGuestAttributes(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 GetGuestAttributesRequest const& request) {
        return stub_->GetGuestAttributes(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
InstancesRestConnectionImpl::GetIamPolicy(
    google::cloud::cpp::compute::instances::v1::GetIamPolicyRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetIamPolicy(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::instances::v1::GetIamPolicyRequest const&
              request) { return stub_->GetIamPolicy(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Screenshot>
InstancesRestConnectionImpl::GetScreenshot(
    google::cloud::cpp::compute::instances::v1::GetScreenshotRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetScreenshot(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 GetScreenshotRequest const& request) {
        return stub_->GetScreenshot(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::SerialPortOutput>
InstancesRestConnectionImpl::GetSerialPortOutput(
    google::cloud::cpp::compute::instances::v1::
        GetSerialPortOutputRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetSerialPortOutput(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 GetSerialPortOutputRequest const& request) {
        return stub_->GetSerialPortOutput(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::ShieldedInstanceIdentity>
InstancesRestConnectionImpl::GetShieldedInstanceIdentity(
    google::cloud::cpp::compute::instances::v1::
        GetShieldedInstanceIdentityRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetShieldedInstanceIdentity(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 GetShieldedInstanceIdentityRequest const& request) {
        return stub_->GetShieldedInstanceIdentity(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::InsertInstances(
    google::cloud::cpp::compute::instances::v1::InsertInstancesRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->InsertInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 InsertInstancesRequest const& request) {
        return stub_->InsertInstances(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::cpp::compute::v1::Instance>
InstancesRestConnectionImpl::ListInstances(
    google::cloud::cpp::compute::instances::v1::ListInstancesRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<compute_instances_v1::InstancesRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListInstances(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::Instance>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::instances::v1::
                          ListInstancesRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::instances::v1::
                       ListInstancesRequest const& request) {
              return stub->ListInstances(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::InstanceList r) {
        std::vector<google::cloud::cpp::compute::v1::Instance> result(
            r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StreamRange<google::cloud::cpp::compute::v1::Reference>
InstancesRestConnectionImpl::ListReferrers(
    google::cloud::cpp::compute::instances::v1::ListReferrersRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<compute_instances_v1::InstancesRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListReferrers(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::Reference>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::instances::v1::
                          ListReferrersRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::instances::v1::
                       ListReferrersRequest const& request) {
              return stub->ListReferrers(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::InstanceListReferrers r) {
        std::vector<google::cloud::cpp::compute::v1::Reference> result(
            r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::RemoveResourcePolicies(
    google::cloud::cpp::compute::instances::v1::
        RemoveResourcePoliciesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->RemoveResourcePolicies(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 RemoveResourcePoliciesRequest const& request) {
        return stub_->RemoveResourcePolicies(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::Reset(
    google::cloud::cpp::compute::instances::v1::ResetRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Reset(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::ResetRequest const&
                 request) { return stub_->Reset(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::Resume(
    google::cloud::cpp::compute::instances::v1::ResumeRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Resume(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::ResumeRequest const&
                 request) { return stub_->Resume(rest_context, request); },
      request, __func__);
}

Status InstancesRestConnectionImpl::SendDiagnosticInterrupt(
    google::cloud::cpp::compute::instances::v1::
        SendDiagnosticInterruptRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SendDiagnosticInterrupt(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SendDiagnosticInterruptRequest const& request) {
        return stub_->SendDiagnosticInterrupt(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetDeletionProtection(
    google::cloud::cpp::compute::instances::v1::
        SetDeletionProtectionRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetDeletionProtection(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SetDeletionProtectionRequest const& request) {
        return stub_->SetDeletionProtection(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetDiskAutoDelete(
    google::cloud::cpp::compute::instances::v1::SetDiskAutoDeleteRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetDiskAutoDelete(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SetDiskAutoDeleteRequest const& request) {
        return stub_->SetDiskAutoDelete(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
InstancesRestConnectionImpl::SetIamPolicy(
    google::cloud::cpp::compute::instances::v1::SetIamPolicyRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetIamPolicy(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::instances::v1::SetIamPolicyRequest const&
              request) { return stub_->SetIamPolicy(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetLabels(
    google::cloud::cpp::compute::instances::v1::SetLabelsRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetLabels(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::SetLabelsRequest const&
                 request) { return stub_->SetLabels(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetMachineResources(
    google::cloud::cpp::compute::instances::v1::
        SetMachineResourcesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetMachineResources(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SetMachineResourcesRequest const& request) {
        return stub_->SetMachineResources(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetMachineType(
    google::cloud::cpp::compute::instances::v1::SetMachineTypeRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetMachineType(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SetMachineTypeRequest const& request) {
        return stub_->SetMachineType(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetMetadata(
    google::cloud::cpp::compute::instances::v1::SetMetadataRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetMetadata(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::instances::v1::SetMetadataRequest const&
              request) { return stub_->SetMetadata(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetMinCpuPlatform(
    google::cloud::cpp::compute::instances::v1::SetMinCpuPlatformRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetMinCpuPlatform(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SetMinCpuPlatformRequest const& request) {
        return stub_->SetMinCpuPlatform(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetName(
    google::cloud::cpp::compute::instances::v1::SetNameRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->SetName(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::SetNameRequest const&
                 request) { return stub_->SetName(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetScheduling(
    google::cloud::cpp::compute::instances::v1::SetSchedulingRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetScheduling(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SetSchedulingRequest const& request) {
        return stub_->SetScheduling(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetServiceAccount(
    google::cloud::cpp::compute::instances::v1::SetServiceAccountRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetServiceAccount(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SetServiceAccountRequest const& request) {
        return stub_->SetServiceAccount(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetShieldedInstanceIntegrityPolicy(
    google::cloud::cpp::compute::instances::v1::
        SetShieldedInstanceIntegrityPolicyRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetShieldedInstanceIntegrityPolicy(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SetShieldedInstanceIntegrityPolicyRequest const& request) {
        return stub_->SetShieldedInstanceIntegrityPolicy(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SetTags(
    google::cloud::cpp::compute::instances::v1::SetTagsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->SetTags(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::SetTagsRequest const&
                 request) { return stub_->SetTags(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::SimulateMaintenanceEvent(
    google::cloud::cpp::compute::instances::v1::
        SimulateMaintenanceEventRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SimulateMaintenanceEvent(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 SimulateMaintenanceEventRequest const& request) {
        return stub_->SimulateMaintenanceEvent(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::Start(
    google::cloud::cpp::compute::instances::v1::StartRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Start(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::StartRequest const&
                 request) { return stub_->Start(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::StartWithEncryptionKey(
    google::cloud::cpp::compute::instances::v1::
        StartWithEncryptionKeyRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->StartWithEncryptionKey(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 StartWithEncryptionKeyRequest const& request) {
        return stub_->StartWithEncryptionKey(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::Stop(
    google::cloud::cpp::compute::instances::v1::StopRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Stop(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::StopRequest const&
                 request) { return stub_->Stop(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::Suspend(
    google::cloud::cpp::compute::instances::v1::SuspendRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Suspend(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::SuspendRequest const&
                 request) { return stub_->Suspend(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
InstancesRestConnectionImpl::TestIamPermissions(
    google::cloud::cpp::compute::instances::v1::TestIamPermissionsRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->TestIamPermissions(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 TestIamPermissionsRequest const& request) {
        return stub_->TestIamPermissions(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::UpdateInstances(
    google::cloud::cpp::compute::instances::v1::UpdateInstancesRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateInstances(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 UpdateInstancesRequest const& request) {
        return stub_->UpdateInstances(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::UpdateAccessConfig(
    google::cloud::cpp::compute::instances::v1::UpdateAccessConfigRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateAccessConfig(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 UpdateAccessConfigRequest const& request) {
        return stub_->UpdateAccessConfig(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::UpdateDisplayDevice(
    google::cloud::cpp::compute::instances::v1::
        UpdateDisplayDeviceRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateDisplayDevice(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 UpdateDisplayDeviceRequest const& request) {
        return stub_->UpdateDisplayDevice(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::UpdateNetworkInterface(
    google::cloud::cpp::compute::instances::v1::
        UpdateNetworkInterfaceRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateNetworkInterface(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 UpdateNetworkInterfaceRequest const& request) {
        return stub_->UpdateNetworkInterface(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
InstancesRestConnectionImpl::UpdateShieldedInstanceConfig(
    google::cloud::cpp::compute::instances::v1::
        UpdateShieldedInstanceConfigRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateShieldedInstanceConfig(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::instances::v1::
                 UpdateShieldedInstanceConfigRequest const& request) {
        return stub_->UpdateShieldedInstanceConfig(rest_context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_instances_v1_internal
}  // namespace cloud
}  // namespace google
