// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.cpp.compute.instances.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/cloud/compute/v1/internal/common.proto";
import "google/cloud/extended_operations.proto";
import "google/protobuf/empty.proto";

// Service for the instances resource.
// https://cloud.google.com/compute/docs/reference/rest/v1/instances
service Instances {
  option (google.api.default_host) = "compute.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/cloud-platform,"
      "https://www.googleapis.com/auth/compute,"
      "https://www.googleapis.com/auth/compute.readonly";

  // Adds an access config to an instance's network interface.
  rpc AddAccessConfig(AddAccessConfigRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/addAccessConfig"
      body: "access_config_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,network_interface,access_config_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Adds existing resource policies to an instance. You can only add one policy
  // right now which will be applied to this instance for scheduling live
  // migrations.
  rpc AddResourcePolicies(AddResourcePoliciesRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/addResourcePolicies"
      body: "instances_add_resource_policies_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instances_add_resource_policies_request_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Retrieves an aggregated list of all of the instances in your project across
  // all regions and zones. The performance of this method degrades when a
  // filter is specified on a project that has a very large number of instances.
  rpc AggregatedListInstances(AggregatedListInstancesRequest)
      returns (google.cloud.cpp.compute.v1.InstanceAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/aggregated/instances"
    };
    option (google.api.method_signature) = "project";
  }

  // Attaches an existing Disk resource to an instance. You must first create
  // the disk before you can attach it. It is not possible to create and attach
  // a disk at the same time. For more information, read Adding a persistent
  // disk to your instance.
  rpc AttachDisk(AttachDiskRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/attachDisk"
      body: "attached_disk_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,attached_disk_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Creates multiple instances. Count specifies the number of instances to
  // create. For more information, see About bulk creation of VMs.
  rpc BulkInsert(BulkInsertRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/bulkInsert"
      body: "bulk_insert_instance_resource"
    };
    option (google.api.method_signature) =
        "project,zone,bulk_insert_instance_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Deletes the specified Instance resource. For more information, see Deleting
  // an instance.
  rpc DeleteInstances(DeleteInstancesRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}"
    };
    option (google.api.method_signature) = "project,zone,instance";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Deletes an access config from an instance's network interface.
  rpc DeleteAccessConfig(DeleteAccessConfigRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/deleteAccessConfig"
      body: "*"
    };
    option (google.api.method_signature) =
        "project,zone,instance,access_config,network_interface";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Detaches a disk from an instance.
  rpc DetachDisk(DetachDiskRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/detachDisk"
      body: "*"
    };
    option (google.api.method_signature) = "project,zone,instance,device_name";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Returns the specified Instance resource.
  rpc GetInstances(GetInstancesRequest)
      returns (google.cloud.cpp.compute.v1.Instance) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}"
    };
    option (google.api.method_signature) = "project,zone,instance";
  }

  // Returns effective firewalls applied to an interface of the instance.
  rpc GetEffectiveFirewalls(GetEffectiveFirewallsRequest) returns (
      google.cloud.cpp.compute.v1.InstancesGetEffectiveFirewallsResponse) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/getEffectiveFirewalls"
    };
    option (google.api.method_signature) =
        "project,zone,instance,network_interface";
  }

  // Returns the specified guest attributes entry.
  rpc GetGuestAttributes(GetGuestAttributesRequest)
      returns (google.cloud.cpp.compute.v1.GuestAttributes) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/getGuestAttributes"
    };
    option (google.api.method_signature) = "project,zone,instance";
  }

  // Gets the access control policy for a resource. May be empty if no such
  // policy or resource exists.
  rpc GetIamPolicy(GetIamPolicyRequest)
      returns (google.cloud.cpp.compute.v1.Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{resource=resource}/getIamPolicy"
    };
    option (google.api.method_signature) = "project,zone,resource";
  }

  // Returns the screenshot from the specified instance.
  rpc GetScreenshot(GetScreenshotRequest)
      returns (google.cloud.cpp.compute.v1.Screenshot) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/screenshot"
    };
    option (google.api.method_signature) = "project,zone,instance";
  }

  // Returns the last 1 MB of serial port output from the specified instance.
  rpc GetSerialPortOutput(GetSerialPortOutputRequest)
      returns (google.cloud.cpp.compute.v1.SerialPortOutput) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/serialPort"
    };
    option (google.api.method_signature) = "project,zone,instance";
  }

  // Returns the Shielded Instance Identity of an instance
  rpc GetShieldedInstanceIdentity(GetShieldedInstanceIdentityRequest)
      returns (google.cloud.cpp.compute.v1.ShieldedInstanceIdentity) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/getShieldedInstanceIdentity"
    };
    option (google.api.method_signature) = "project,zone,instance";
  }

  // Creates an instance resource in the specified project using the data
  // included in the request.
  rpc InsertInstances(InsertInstancesRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances"
      body: "instance_resource"
    };
    option (google.api.method_signature) = "project,zone,instance_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Retrieves the list of instances contained within the specified zone.
  rpc ListInstances(ListInstancesRequest)
      returns (google.cloud.cpp.compute.v1.InstanceList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances"
    };
    option (google.api.method_signature) = "project,zone";
  }

  // Retrieves a list of resources that refer to the VM instance specified in
  // the request. For example, if the VM instance is part of a managed or
  // unmanaged instance group, the referrers list includes the instance group.
  // For more information, read Viewing referrers to VM instances.
  rpc ListReferrers(ListReferrersRequest)
      returns (google.cloud.cpp.compute.v1.InstanceListReferrers) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/referrers"
    };
    option (google.api.method_signature) = "project,zone,instance";
  }

  // Removes resource policies from an instance.
  rpc RemoveResourcePolicies(RemoveResourcePoliciesRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/removeResourcePolicies"
      body: "instances_remove_resource_policies_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instances_remove_resource_policies_request_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Performs a reset on the instance. This is a hard reset. The VM does not do
  // a graceful shutdown. For more information, see Resetting an instance.
  rpc Reset(ResetRequest) returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/reset"
      body: "*"
    };
    option (google.api.method_signature) = "project,zone,instance";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Resumes an instance that was suspended using the instances().suspend
  // method.
  rpc Resume(ResumeRequest) returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/resume"
      body: "*"
    };
    option (google.api.method_signature) = "project,zone,instance";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Sends diagnostic interrupt to the instance.
  rpc SendDiagnosticInterrupt(SendDiagnosticInterruptRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/sendDiagnosticInterrupt"
      body: "*"
    };
    option (google.api.method_signature) = "project,zone,instance";
  }

  // Sets deletion protection on the instance.
  rpc SetDeletionProtection(SetDeletionProtectionRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{resource=resource}/setDeletionProtection"
      body: "*"
    };
    option (google.api.method_signature) = "project,zone,resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Sets the auto-delete flag for a disk attached to an instance.
  rpc SetDiskAutoDelete(SetDiskAutoDeleteRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setDiskAutoDelete"
      body: "*"
    };
    option (google.api.method_signature) =
        "project,zone,instance,auto_delete,device_name";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Sets the access control policy on the specified resource. Replaces any
  // existing policy.
  rpc SetIamPolicy(SetIamPolicyRequest)
      returns (google.cloud.cpp.compute.v1.Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{resource=resource}/setIamPolicy"
      body: "zone_set_policy_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,resource,zone_set_policy_request_resource";
  }

  // Sets labels on an instance. To learn more about labels, read the Labeling
  // Resources documentation.
  rpc SetLabels(SetLabelsRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setLabels"
      body: "instances_set_labels_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instances_set_labels_request_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Changes the number and/or type of accelerator for a stopped instance to the
  // values specified in the request.
  rpc SetMachineResources(SetMachineResourcesRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setMachineResources"
      body: "instances_set_machine_resources_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instances_set_machine_resources_request_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Changes the machine type for a stopped instance to the machine type
  // specified in the request.
  rpc SetMachineType(SetMachineTypeRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setMachineType"
      body: "instances_set_machine_type_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instances_set_machine_type_request_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Sets metadata for the specified instance to the data included in the
  // request.
  rpc SetMetadata(SetMetadataRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setMetadata"
      body: "metadata_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,metadata_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Changes the minimum CPU platform that this instance should use. This method
  // can only be called on a stopped instance. For more information, read
  // Specifying a Minimum CPU Platform.
  rpc SetMinCpuPlatform(SetMinCpuPlatformRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setMinCpuPlatform"
      body: "instances_set_min_cpu_platform_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instances_set_min_cpu_platform_request_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Sets name of an instance.
  rpc SetName(SetNameRequest) returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setName"
      body: "instances_set_name_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instances_set_name_request_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Sets an instance's scheduling options. You can only call this method on a
  // stopped instance, that is, a VM instance that is in a `TERMINATED` state.
  // See Instance Life Cycle for more information on the possible instance
  // states. For more information about setting scheduling options for a VM, see
  // Set VM host maintenance policy.
  rpc SetScheduling(SetSchedulingRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setScheduling"
      body: "scheduling_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,scheduling_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Sets the service account on the instance. For more information, read
  // Changing the service account and access scopes for an instance.
  rpc SetServiceAccount(SetServiceAccountRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setServiceAccount"
      body: "instances_set_service_account_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instances_set_service_account_request_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Sets the Shielded Instance integrity policy for an instance. You can only
  // use this method on a running instance. This method supports PATCH semantics
  // and uses the JSON merge patch format and processing rules.
  rpc SetShieldedInstanceIntegrityPolicy(
      SetShieldedInstanceIntegrityPolicyRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setShieldedInstanceIntegrityPolicy"
      body: "shielded_instance_integrity_policy_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,shielded_instance_integrity_policy_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Sets network tags for the specified instance to the data included in the
  // request.
  rpc SetTags(SetTagsRequest) returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/setTags"
      body: "tags_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,tags_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Simulates a host maintenance event on a VM. For more information, see
  // Simulate a host maintenance event.
  rpc SimulateMaintenanceEvent(SimulateMaintenanceEventRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/simulateMaintenanceEvent"
      body: "*"
    };
    option (google.api.method_signature) = "project,zone,instance";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Starts an instance that was stopped using the instances().stop method. For
  // more information, see Restart an instance.
  rpc Start(StartRequest) returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/start"
      body: "*"
    };
    option (google.api.method_signature) = "project,zone,instance";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Starts an instance that was stopped using the instances().stop method. For
  // more information, see Restart an instance.
  rpc StartWithEncryptionKey(StartWithEncryptionKeyRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/startWithEncryptionKey"
      body: "instances_start_with_encryption_key_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instances_start_with_encryption_key_request_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Stops a running instance, shutting it down cleanly, and allows you to
  // restart the instance at a later time. Stopped instances do not incur VM
  // usage charges while they are stopped. However, resources that the VM is
  // using, such as persistent disks and static IP addresses, will continue to
  // be charged until they are deleted. For more information, see Stopping an
  // instance.
  rpc Stop(StopRequest) returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/stop"
      body: "*"
    };
    option (google.api.method_signature) = "project,zone,instance";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // This method suspends a running instance, saving its state to persistent
  // storage, and allows you to resume the instance at a later time. Suspended
  // instances have no compute costs (cores or RAM), and incur only storage
  // charges for the saved VM memory and localSSD data. Any charged resources
  // the virtual machine was using, such as persistent disks and static IP
  // addresses, will continue to be charged while the instance is suspended. For
  // more information, see Suspending and resuming an instance.
  rpc Suspend(SuspendRequest) returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/suspend"
      body: "*"
    };
    option (google.api.method_signature) = "project,zone,instance";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Returns permissions that a caller has on the specified resource.
  rpc TestIamPermissions(TestIamPermissionsRequest)
      returns (google.cloud.cpp.compute.v1.TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{resource=resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
    option (google.api.method_signature) =
        "project,zone,resource,test_permissions_request_resource";
  }

  // Updates an instance only if the necessary resources are available. This
  // method can update only a specific set of instance properties. See Updating
  // a running instance for a list of updatable instance properties.
  rpc UpdateInstances(UpdateInstancesRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}"
      body: "instance_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,instance_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Updates the specified access config from an instance's network interface
  // with the data included in the request. This method supports PATCH semantics
  // and uses the JSON merge patch format and processing rules.
  rpc UpdateAccessConfig(UpdateAccessConfigRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/updateAccessConfig"
      body: "access_config_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,network_interface,access_config_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Updates the Display config for a VM instance. You can only use this method
  // on a stopped VM instance. This method supports PATCH semantics and uses the
  // JSON merge patch format and processing rules.
  rpc UpdateDisplayDevice(UpdateDisplayDeviceRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/updateDisplayDevice"
      body: "display_device_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,display_device_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Updates an instance's network interface. This method can only update an
  // interface's alias IP range and attached network. See Modifying alias IP
  // ranges for an existing instance for instructions on changing alias IP
  // ranges. See Migrating a VM between networks for instructions on migrating
  // an interface. This method follows PATCH semantics.
  rpc UpdateNetworkInterface(UpdateNetworkInterfaceRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/updateNetworkInterface"
      body: "network_interface_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,network_interface,network_interface_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }

  // Updates the Shielded Instance config for an instance. You can only use this
  // method on a stopped instance. This method supports PATCH semantics and uses
  // the JSON merge patch format and processing rules.
  rpc UpdateShieldedInstanceConfig(UpdateShieldedInstanceConfigRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project=project}/zones/{zone=zone}/instances/{instance=instance}/updateShieldedInstanceConfig"
      body: "shielded_instance_config_resource"
    };
    option (google.api.method_signature) =
        "project,zone,instance,shielded_instance_config_resource";
    option (google.cloud.operation_service) = "ZoneOperations";
  }
}

// Request message for AddAccessConfig.
message AddAccessConfigRequest {
  // The AccessConfig for this request.
  optional google.cloud.cpp.compute.v1.AccessConfig access_config_resource = 1
      [json_name = "__json_request_body"];

  // The instance name for this request.
  string instance = 2 [(google.api.field_behavior) = REQUIRED];

  // The name of the network interface to add to this instance.
  string network_interface = 3 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 5;

  // The name of the zone for this request.
  string zone = 6 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for AddResourcePolicies.
message AddResourcePoliciesRequest {
  // The instance name for this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The InstancesAddResourcePoliciesRequest for this request.
  optional google.cloud.cpp.compute.v1.InstancesAddResourcePoliciesRequest
      instances_add_resource_policies_request_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for AggregatedListInstances.
message AggregatedListInstancesRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. If you want to use AIP-160, your expression must specify
  // the field name, an operator, and the value that you want to use for
  // filtering. The value must be a string, a number, or a boolean. The operator
  // must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you
  // are filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:`
  // operator can be used with string fields to match substrings. For non-string
  // fields it is equivalent to the `=` operator. The `:*` comparison can be
  // used to test whether a key has been defined. For example, to find all
  // objects with `owner` label use: ``` labels.owner:* ``` You can also filter
  // nested fields. For example, you could specify `scheduling.automaticRestart
  // = false` to include instances only if they are not scheduled for automatic
  // restarts. You can use filtering on nested fields to filter based on
  // resource labels. To filter on multiple expressions, provide each separate
  // expression within parentheses. For example: ```
  // (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By
  // default, each expression is an `AND` expression. However, you can include
  // `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform =
  // "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`.
  optional string filter = 1;

  // Indicates whether every visible scope for each scope type (zone, region,
  // global) should be included in the response. For new resource types added
  // after this field, the flag has no effect as new resource types will always
  // include every visible scope for each scope type in response. For resource
  // types which predate this field, if this flag is omitted or false, only
  // scopes of the scope types where the resource type is expected to be found
  // will be included.
  optional bool include_all_scopes = 2;

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 3;

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 4;

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 5;

  // Project ID for this request.
  string project = 6 [(google.api.field_behavior) = REQUIRED];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 7;
}

// Request message for AttachDisk.
message AttachDiskRequest {
  // The AttachedDisk for this request.
  optional google.cloud.cpp.compute.v1.AttachedDisk attached_disk_resource = 1
      [json_name = "__json_request_body"];

  // Whether to force attach the regional disk even if it's currently attached
  // to another instance. If you try to force attach a zonal disk to an
  // instance, you will receive an error.
  optional bool force_attach = 2;

  // The instance name for this request.
  string instance = 3 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 5;

  // The name of the zone for this request.
  string zone = 6 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for BulkInsert.
message BulkInsertRequest {
  // The BulkInsertInstanceResource for this request.
  optional google.cloud.cpp.compute.v1.BulkInsertInstanceResource
      bulk_insert_instance_resource = 1 [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // The name of the zone for this request.
  string zone = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for DeleteAccessConfig.
message DeleteAccessConfigRequest {
  // The name of the access config to delete.
  string access_config = 1 [(google.api.field_behavior) = REQUIRED];

  // The instance name for this request.
  string instance = 2 [(google.api.field_behavior) = REQUIRED];

  // The name of the network interface.
  string network_interface = 3 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 5;

  // The name of the zone for this request.
  string zone = 6 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for DeleteInstances.
message DeleteInstancesRequest {
  // Name of the instance resource to delete.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // The name of the zone for this request.
  string zone = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for DetachDisk.
message DetachDiskRequest {
  // The device name of the disk to detach. Make a get() request on the instance
  // to view currently attached disks and device names.
  string device_name = 1 [(google.api.field_behavior) = REQUIRED];

  // Instance name for this request.
  string instance = 2 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for GetEffectiveFirewalls.
message GetEffectiveFirewallsRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The name of the network interface to get the effective firewalls.
  string network_interface = 2 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 3 [(google.api.field_behavior) = REQUIRED];

  // The name of the zone for this request.
  string zone = 4 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetGuestAttributes.
message GetGuestAttributesRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [(google.api.field_behavior) = REQUIRED];

  // Specifies the guest attributes path to be queried.
  optional string query_path = 3;

  // Specifies the key for the guest attributes entry.
  optional string variable_key = 4;

  // The name of the zone for this request.
  string zone = 5 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetIamPolicy.
message GetIamPolicyRequest {
  // Requested IAM Policy version.
  optional int32 options_requested_policy_version = 1;

  // Project ID for this request.
  string project = 2 [(google.api.field_behavior) = REQUIRED];

  // Name or id of the resource for this request.
  string resource = 3 [(google.api.field_behavior) = REQUIRED];

  // The name of the zone for this request.
  string zone = 4 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetInstances.
message GetInstancesRequest {
  // Name of the instance resource to return.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [(google.api.field_behavior) = REQUIRED];

  // The name of the zone for this request.
  string zone = 3 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetScreenshot.
message GetScreenshotRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [(google.api.field_behavior) = REQUIRED];

  // The name of the zone for this request.
  string zone = 3 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetSerialPortOutput.
message GetSerialPortOutputRequest {
  // Name of the instance for this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Specifies which COM or serial port to retrieve data from.
  optional int32 port = 2;

  // Project ID for this request.
  string project = 3 [(google.api.field_behavior) = REQUIRED];

  // Specifies the starting byte position of the output to return. To start with
  // the first byte of output to the specified port, omit this field or set it
  // to `0`. If the output for that byte position is available, this field
  // matches the `start` parameter sent with the request. If the amount of
  // serial console output exceeds the size of the buffer (1 MB), the oldest
  // output is discarded and is no longer available. If the requested start
  // position refers to discarded output, the start position is adjusted to the
  // oldest output still available, and the adjusted start position is returned
  // as the `start` property value. You can also provide a negative start
  // position, which translates to the most recent number of bytes written to
  // the serial port. For example, -3 is interpreted as the most recent 3 bytes
  // written to the serial console.
  optional string start = 4;

  // The name of the zone for this request.
  string zone = 5 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetShieldedInstanceIdentity.
message GetShieldedInstanceIdentityRequest {
  // Name or id of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [(google.api.field_behavior) = REQUIRED];

  // The name of the zone for this request.
  string zone = 3 [(google.api.field_behavior) = REQUIRED];
}

// Request message for InsertInstances.
message InsertInstancesRequest {
  // The Instance for this request.
  optional google.cloud.cpp.compute.v1.Instance instance_resource = 1
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // Specifies instance template to create the instance. This field is optional.
  // It can be a full or partial URL. For example, the following are all valid
  // URLs to an instance template: -
  // https://www.googleapis.com/compute/v1/projects/project
  // /global/instanceTemplates/instanceTemplate -
  // projects/project/global/instanceTemplates/instanceTemplate -
  // global/instanceTemplates/instanceTemplate
  optional string source_instance_template = 4;

  // Specifies the machine image to use to create the instance. This field is
  // optional. It can be a full or partial URL. For example, the following are
  // all valid URLs to a machine image: -
  // https://www.googleapis.com/compute/v1/projects/project/global/global
  // /machineImages/machineImage -
  // projects/project/global/global/machineImages/machineImage -
  // global/machineImages/machineImage
  optional string source_machine_image = 5;

  // The name of the zone for this request.
  string zone = 6 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for ListInstances.
message ListInstancesRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. If you want to use AIP-160, your expression must specify
  // the field name, an operator, and the value that you want to use for
  // filtering. The value must be a string, a number, or a boolean. The operator
  // must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you
  // are filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:`
  // operator can be used with string fields to match substrings. For non-string
  // fields it is equivalent to the `=` operator. The `:*` comparison can be
  // used to test whether a key has been defined. For example, to find all
  // objects with `owner` label use: ``` labels.owner:* ``` You can also filter
  // nested fields. For example, you could specify `scheduling.automaticRestart
  // = false` to include instances only if they are not scheduled for automatic
  // restarts. You can use filtering on nested fields to filter based on
  // resource labels. To filter on multiple expressions, provide each separate
  // expression within parentheses. For example: ```
  // (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By
  // default, each expression is an `AND` expression. However, you can include
  // `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform =
  // "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`.
  optional string filter = 1;

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 2;

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 3;

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 4;

  // Project ID for this request.
  string project = 5 [(google.api.field_behavior) = REQUIRED];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 6;

  // The name of the zone for this request.
  string zone = 7 [(google.api.field_behavior) = REQUIRED];
}

// Request message for ListReferrers.
message ListReferrersRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. If you want to use AIP-160, your expression must specify
  // the field name, an operator, and the value that you want to use for
  // filtering. The value must be a string, a number, or a boolean. The operator
  // must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you
  // are filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:`
  // operator can be used with string fields to match substrings. For non-string
  // fields it is equivalent to the `=` operator. The `:*` comparison can be
  // used to test whether a key has been defined. For example, to find all
  // objects with `owner` label use: ``` labels.owner:* ``` You can also filter
  // nested fields. For example, you could specify `scheduling.automaticRestart
  // = false` to include instances only if they are not scheduled for automatic
  // restarts. You can use filtering on nested fields to filter based on
  // resource labels. To filter on multiple expressions, provide each separate
  // expression within parentheses. For example: ```
  // (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By
  // default, each expression is an `AND` expression. However, you can include
  // `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform =
  // "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`.
  optional string filter = 1;

  // Name of the target instance scoping this request, or '-' if the request
  // should span over all instances in the container.
  string instance = 2 [(google.api.field_behavior) = REQUIRED];

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 3;

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 4;

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 5;

  // Project ID for this request.
  string project = 6 [(google.api.field_behavior) = REQUIRED];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 7;

  // The name of the zone for this request.
  string zone = 8 [(google.api.field_behavior) = REQUIRED];
}

// Request message for RemoveResourcePolicies.
message RemoveResourcePoliciesRequest {
  // The instance name for this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The InstancesRemoveResourcePoliciesRequest for this request.
  optional google.cloud.cpp.compute.v1.InstancesRemoveResourcePoliciesRequest
      instances_remove_resource_policies_request_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for Reset.
message ResetRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // The name of the zone for this request.
  string zone = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for Resume.
message ResumeRequest {
  // Name of the instance resource to resume.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // The name of the zone for this request.
  string zone = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SendDiagnosticInterrupt.
message SendDiagnosticInterruptRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [(google.api.field_behavior) = REQUIRED];

  // The name of the zone for this request.
  string zone = 3 [(google.api.field_behavior) = REQUIRED];
}

// Request message for SetDeletionProtection.
message SetDeletionProtectionRequest {
  // Whether the resource should be protected against deletion.
  optional bool deletion_protection = 1;

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // Name or id of the resource for this request.
  string resource = 4 [(google.api.field_behavior) = REQUIRED];

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetDiskAutoDelete.
message SetDiskAutoDeleteRequest {
  // Whether to auto-delete the disk when the instance is deleted.
  bool auto_delete = 1 [(google.api.field_behavior) = REQUIRED];

  // The device name of the disk to modify. Make a get() request on the instance
  // to view currently attached disks and device names.
  string device_name = 2 [(google.api.field_behavior) = REQUIRED];

  // The instance name for this request.
  string instance = 3 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 5;

  // The name of the zone for this request.
  string zone = 6 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetIamPolicy.
message SetIamPolicyRequest {
  // Project ID for this request.
  string project = 1 [(google.api.field_behavior) = REQUIRED];

  // Name or id of the resource for this request.
  string resource = 2 [(google.api.field_behavior) = REQUIRED];

  // The name of the zone for this request.
  string zone = 3 [(google.api.field_behavior) = REQUIRED];

  // The ZoneSetPolicyRequest for this request.
  optional google.cloud.cpp.compute.v1.ZoneSetPolicyRequest
      zone_set_policy_request_resource = 4 [json_name = "__json_request_body"];
}

// Request message for SetLabels.
message SetLabelsRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The InstancesSetLabelsRequest for this request.
  optional google.cloud.cpp.compute.v1.InstancesSetLabelsRequest
      instances_set_labels_request_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetMachineResources.
message SetMachineResourcesRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The InstancesSetMachineResourcesRequest for this request.
  optional google.cloud.cpp.compute.v1.InstancesSetMachineResourcesRequest
      instances_set_machine_resources_request_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetMachineType.
message SetMachineTypeRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The InstancesSetMachineTypeRequest for this request.
  optional google.cloud.cpp.compute.v1.InstancesSetMachineTypeRequest
      instances_set_machine_type_request_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetMetadata.
message SetMetadataRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The Metadata for this request.
  optional google.cloud.cpp.compute.v1.Metadata metadata_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetMinCpuPlatform.
message SetMinCpuPlatformRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The InstancesSetMinCpuPlatformRequest for this request.
  optional google.cloud.cpp.compute.v1.InstancesSetMinCpuPlatformRequest
      instances_set_min_cpu_platform_request_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetName.
message SetNameRequest {
  // The instance name for this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The InstancesSetNameRequest for this request.
  optional google.cloud.cpp.compute.v1.InstancesSetNameRequest
      instances_set_name_request_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetScheduling.
message SetSchedulingRequest {
  // Instance name for this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // The Scheduling for this request.
  optional google.cloud.cpp.compute.v1.Scheduling scheduling_resource = 4
      [json_name = "__json_request_body"];

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetServiceAccount.
message SetServiceAccountRequest {
  // Name of the instance resource to start.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The InstancesSetServiceAccountRequest for this request.
  optional google.cloud.cpp.compute.v1.InstancesSetServiceAccountRequest
      instances_set_service_account_request_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetShieldedInstanceIntegrityPolicy.
message SetShieldedInstanceIntegrityPolicyRequest {
  // Name or id of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // The ShieldedInstanceIntegrityPolicy for this request.
  optional google.cloud.cpp.compute.v1.ShieldedInstanceIntegrityPolicy
      shielded_instance_integrity_policy_resource = 4
      [json_name = "__json_request_body"];

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SetTags.
message SetTagsRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // The Tags for this request.
  optional google.cloud.cpp.compute.v1.Tags tags_resource = 4
      [json_name = "__json_request_body"];

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for SimulateMaintenanceEvent.
message SimulateMaintenanceEventRequest {
  // Name of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // The name of the zone for this request.
  string zone = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for Start.
message StartRequest {
  // Name of the instance resource to start.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // The name of the zone for this request.
  string zone = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for StartWithEncryptionKey.
message StartWithEncryptionKeyRequest {
  // Name of the instance resource to start.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The InstancesStartWithEncryptionKeyRequest for this request.
  optional google.cloud.cpp.compute.v1.InstancesStartWithEncryptionKeyRequest
      instances_start_with_encryption_key_request_resource = 2
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for Stop.
message StopRequest {
  // If true, discard the contents of any attached localSSD partitions. Default
  // value is false.
  optional bool discard_local_ssd = 1;

  // Name of the instance resource to stop.
  string instance = 2 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for Suspend.
message SuspendRequest {
  // If true, discard the contents of any attached localSSD partitions. Default
  // value is false.
  optional bool discard_local_ssd = 1;

  // Name of the instance resource to suspend.
  string instance = 2 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for TestIamPermissions.
message TestIamPermissionsRequest {
  // Project ID for this request.
  string project = 1 [(google.api.field_behavior) = REQUIRED];

  // Name or id of the resource for this request.
  string resource = 2 [(google.api.field_behavior) = REQUIRED];

  // The TestPermissionsRequest for this request.
  optional google.cloud.cpp.compute.v1.TestPermissionsRequest
      test_permissions_request_resource = 3 [json_name = "__json_request_body"];

  // The name of the zone for this request.
  string zone = 4 [(google.api.field_behavior) = REQUIRED];
}

// Request message for UpdateAccessConfig.
message UpdateAccessConfigRequest {
  // The AccessConfig for this request.
  optional google.cloud.cpp.compute.v1.AccessConfig access_config_resource = 1
      [json_name = "__json_request_body"];

  // The instance name for this request.
  string instance = 2 [(google.api.field_behavior) = REQUIRED];

  // The name of the network interface where the access config is attached.
  string network_interface = 3 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 5;

  // The name of the zone for this request.
  string zone = 6 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for UpdateDisplayDevice.
message UpdateDisplayDeviceRequest {
  // The DisplayDevice for this request.
  optional google.cloud.cpp.compute.v1.DisplayDevice display_device_resource = 1
      [json_name = "__json_request_body"];

  // Name of the instance scoping this request.
  string instance = 2 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 4;

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for UpdateInstances.
message UpdateInstancesRequest {
  // Name of the instance resource to update.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The Instance for this request.
  optional google.cloud.cpp.compute.v1.Instance instance_resource = 2
      [json_name = "__json_request_body"];

  // Specifies the action to take when updating an instance even if the updated
  // properties do not require it. If not specified, then Compute Engine acts
  // based on the minimum action that the updated properties require.
  // INVALID:
  // NO_EFFECT: No changes can be made to the instance.
  // REFRESH: The instance will not restart.
  // RESTART: The instance will restart.
  optional string minimal_action = 3;

  // Specifies the most disruptive action that can be taken on the instance as
  // part of the update. Compute Engine returns an error if the instance
  // properties require a more disruptive action as part of the instance update.
  // Valid options from lowest to highest are NO_EFFECT, REFRESH, and RESTART.
  // INVALID:
  // NO_EFFECT: No changes can be made to the instance.
  // REFRESH: The instance will not restart.
  // RESTART: The instance will restart.
  optional string most_disruptive_allowed_action = 4;

  // Project ID for this request.
  string project = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 6;

  // The name of the zone for this request.
  string zone = 7 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for UpdateNetworkInterface.
message UpdateNetworkInterfaceRequest {
  // The instance name for this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The name of the network interface to update.
  string network_interface = 2 [(google.api.field_behavior) = REQUIRED];

  // The NetworkInterface for this request.
  optional google.cloud.cpp.compute.v1.NetworkInterface
      network_interface_resource = 3 [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 5;

  // The name of the zone for this request.
  string zone = 6 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}

// Request message for UpdateShieldedInstanceConfig.
message UpdateShieldedInstanceConfigRequest {
  // Name or id of the instance scoping this request.
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;

  // The ShieldedInstanceConfig for this request.
  optional google.cloud.cpp.compute.v1.ShieldedInstanceConfig
      shielded_instance_config_resource = 4 [json_name = "__json_request_body"];

  // The name of the zone for this request.
  string zone = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "zone"
  ];
}
