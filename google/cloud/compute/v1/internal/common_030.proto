// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20230920

syntax = "proto3";

package google.cloud.cpp.compute.v1;

import "google/cloud/compute/v1/internal/common_034.proto";
import "google/cloud/compute/v1/internal/common_038.proto";

message ExchangedPeeringRoute {
  // The destination range of the route.
  optional string dest_range = 1;

  // True if the peering route has been imported from a peer. The actual import
  // happens if the field networkPeering.importCustomRoutes is true for this
  // network, and networkPeering.exportCustomRoutes is true for the peer
  // network, and the import does not result in a route conflict.
  optional bool imported = 2;

  // The region of peering route next hop, only applies to dynamic routes.
  optional string next_hop_region = 3;

  // The priority of the peering route.
  optional uint32 priority = 4;

  // The type of the peering route.
  // DYNAMIC_PEERING_ROUTE: For routes exported from local network.
  // STATIC_PEERING_ROUTE: The peering route.
  // SUBNET_PEERING_ROUTE: The peering route corresponding to subnetwork range.
  optional string type = 5;
}

message ExchangedPeeringRoutesList {
  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 1;

  // A list of ExchangedPeeringRoute resources.
  repeated ExchangedPeeringRoute items = 2;

  // [Output Only] Type of resource. Always compute#exchangedPeeringRoutesList
  // for exchanged peering routes lists.
  optional string kind = 3;

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 4;

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 5;

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1;

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1;

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2;
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2;

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3;
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 6;
}

// Represents a VPC Network resource. Networks connect resources to each other
// and to the internet. For more information, read Virtual Private Cloud (VPC)
// Network.
message Network {
  // Deprecated in favor of subnet mode networks. The range of internal
  // addresses that are legal on this network. This range is a CIDR
  // specification, for example: 192.168.0.0/16. Provided by the client when the
  // network is created.
  optional string i_pv4_range = 1;

  // Must be set to create a VPC network. If not set, a legacy network is
  // created. When set to true, the VPC network is created in auto mode. When
  // set to false, the VPC network is created in custom mode. An auto mode VPC
  // network starts with one subnet per region. Each subnet has a predetermined
  // range as described in Auto mode VPC network IP ranges. For custom mode VPC
  // networks, you can add subnets using the subnetworks insert method.
  optional bool auto_create_subnetworks = 2;

  // [Output Only] Creation timestamp in RFC3339 text format.
  optional string creation_timestamp = 3;

  // An optional description of this resource. Provide this field when you
  // create the resource.
  optional string description = 4;

  // Enable ULA internal ipv6 on this network. Enabling this feature will assign
  // a /48 from google defined ULA prefix fd20::/20. .
  optional bool enable_ula_internal_ipv6 = 5;

  // [Output Only] URL of the firewall policy the network is associated with.
  optional string firewall_policy = 6;

  // [Output Only] The gateway address for default routing out of the network,
  // selected by Google Cloud.
  optional string gateway_i_pv4 = 7;

  // [Output Only] The unique identifier for the resource. This identifier is
  // defined by the server.
  optional string id = 8;

  // When enabling ula internal ipv6, caller optionally can specify the /48
  // range they want from the google defined ULA prefix fd20::/20. The input
  // must be a valid /48 ULA IPv6 address and must be within the fd20::/20.
  // Operation will fail if the speficied /48 is already in used by another
  // resource. If the field is not speficied, then a /48 range will be randomly
  // allocated from fd20::/20 and returned via this field. .
  optional string internal_ipv6_range = 9;

  // [Output Only] Type of the resource. Always compute#network for networks.
  optional string kind = 10;

  // Maximum Transmission Unit in bytes. The minimum value for this field is
  // 1300 and the maximum value is 8896. The suggested value is 1500, which is
  // the default MTU used on the Internet, or 8896 if you want to use Jumbo
  // frames. If unspecified, the value defaults to 1460.
  optional int32 mtu = 11;

  // Name of the resource. Provided by the client when the resource is created.
  // The name must be 1-63 characters long, and comply with RFC1035.
  // Specifically, the name must be 1-63 characters long and match the regular
  // expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a
  // lowercase letter, and all following characters (except for the last
  // character) must be a dash, lowercase letter, or digit. The last character
  // must be a lowercase letter or digit.
  optional string name = 12;

  // The network firewall policy enforcement order. Can be either
  // AFTER_CLASSIC_FIREWALL or BEFORE_CLASSIC_FIREWALL. Defaults to
  // AFTER_CLASSIC_FIREWALL if the field is not specified.
  // AFTER_CLASSIC_FIREWALL:
  // BEFORE_CLASSIC_FIREWALL:
  optional string network_firewall_policy_enforcement_order = 13;

  // [Output Only] A list of network peerings for the resource.
  repeated NetworkPeering peerings = 14;

  // The network-level routing configuration for this network. Used by Cloud
  // Router to determine what type of network-wide routing behavior to enforce.
  optional NetworkRoutingConfig routing_config = 15;

  // [Output Only] Server-defined URL for the resource.
  optional string self_link = 16;

  // [Output Only] Server-defined URL for this resource with the resource id.
  optional string self_link_with_id = 17;

  // [Output Only] Server-defined fully-qualified URLs for all subnetworks in
  // this VPC network.
  repeated string subnetworks = 18;
}

// Contains a list of networks.
message NetworkList {
  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 1;

  // A list of Network resources.
  repeated Network items = 2;

  // [Output Only] Type of resource. Always compute#networkList for lists of
  // networks.
  optional string kind = 3;

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 4;

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 5;

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1;

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1;

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2;
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2;

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3;
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 6;
}

// A network peering attached to a network resource. The message includes the
// peering name, peer network, peering state, and a flag indicating whether
// Google Compute Engine should automatically create routes for the peering.
message NetworkPeering {
  // This field will be deprecated soon. Use the exchange_subnet_routes field
  // instead. Indicates whether full mesh connectivity is created and managed
  // automatically between peered networks. Currently this field should always
  // be true since Google Compute Engine will automatically create and manage
  // subnetwork routes between two networks when peering state is ACTIVE.
  optional bool auto_create_routes = 1;

  // Indicates whether full mesh connectivity is created and managed
  // automatically between peered networks. Currently this field should always
  // be true since Google Compute Engine will automatically create and manage
  // subnetwork routes between two networks when peering state is ACTIVE.
  optional bool exchange_subnet_routes = 2;

  // Whether to export the custom routes to peer network. The default value is
  // false.
  optional bool export_custom_routes = 3;

  // Whether subnet routes with public IP range are exported. The default value
  // is true, all subnet routes are exported. IPv4 special-use ranges are always
  // exported to peers and are not controlled by this field.
  optional bool export_subnet_routes_with_public_ip = 4;

  // Whether to import the custom routes from peer network. The default value is
  // false.
  optional bool import_custom_routes = 5;

  // Whether subnet routes with public IP range are imported. The default value
  // is false. IPv4 special-use ranges are always imported from peers and are
  // not controlled by this field.
  optional bool import_subnet_routes_with_public_ip = 6;

  // Name of this peering. Provided by the client when the peering is created.
  // The name must comply with RFC1035. Specifically, the name must be 1-63
  // characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`.
  // The first character must be a lowercase letter, and all the following
  // characters must be a dash, lowercase letter, or digit, except the last
  // character, which cannot be a dash.
  optional string name = 7;

  // The URL of the peer network. It can be either full URL or partial URL. The
  // peer network may belong to a different project. If the partial URL does not
  // contain project, it is assumed that the peer network is in the same project
  // as the current network.
  optional string network = 8;

  // Maximum Transmission Unit in bytes.
  optional int32 peer_mtu = 9;

  // Which IP version(s) of traffic and routes are allowed to be imported or
  // exported between peer networks. The default value is IPV4_ONLY.
  // IPV4_IPV6: This Peering will allow IPv4 traffic and routes to be exchanged.
  // Additionally if the matching peering is IPV4_IPV6, IPv6 traffic and routes
  // will be exchanged as well.
  // IPV4_ONLY: This Peering will only allow IPv4 traffic and routes to be
  // exchanged, even if the matching peering is IPV4_IPV6.
  optional string stack_type = 10;

  // [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The
  // peering is `ACTIVE` when there's a matching configuration in the peer
  // network.
  // ACTIVE: Matching configuration exists on the peer.
  // INACTIVE: There is no matching configuration on the peer, including the
  // case when peer does not exist.
  optional string state = 11;

  // [Output Only] Details about the current state of the peering.
  optional string state_details = 12;
}

// A routing configuration attached to a network resource. The message includes
// the list of routers associated with the network, and a flag indicating the
// type of routing behavior to enforce network-wide.
message NetworkRoutingConfig {
  // The network-wide routing mode to use. If set to REGIONAL, this network's
  // Cloud Routers will only advertise routes with subnets of this network in
  // the same region as the router. If set to GLOBAL, this network's Cloud
  // Routers will advertise routes with all subnets of this network, across
  // regions.
  // GLOBAL:
  // REGIONAL:
  optional string routing_mode = 1;
}

message NetworksAddPeeringRequest {
  // This field will be deprecated soon. Use exchange_subnet_routes in
  // network_peering instead. Indicates whether full mesh connectivity is
  // created and managed automatically between peered networks. Currently this
  // field should always be true since Google Compute Engine will automatically
  // create and manage subnetwork routes between two networks when peering state
  // is ACTIVE.
  optional bool auto_create_routes = 1;

  // Name of the peering, which should conform to RFC1035.
  optional string name = 2;

  // Network peering parameters. In order to specify route policies for peering
  // using import and export custom routes, you must specify all peering related
  // parameters (name, peer network, exchange_subnet_routes) in the
  // network_peering field. The corresponding fields in
  // NetworksAddPeeringRequest will be deprecated soon.
  optional NetworkPeering network_peering = 3;

  // URL of the peer network. It can be either full URL or partial URL. The peer
  // network may belong to a different project. If the partial URL does not
  // contain project, it is assumed that the peer network is in the same project
  // as the current network.
  optional string peer_network = 4;
}

message NetworksGetEffectiveFirewallsResponse {
  // Effective firewalls from firewall policy.
  repeated NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
      firewall_policys = 1;

  // Effective firewalls on the network.
  repeated Firewall firewalls = 2;
}

message NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
  // [Output Only] Deprecated, please use short name instead. The display name
  // of the firewall policy.
  optional string display_name = 1;

  // [Output Only] The name of the firewall policy.
  optional string name = 2;

  // The rules that apply to the network.
  repeated FirewallPolicyRule rules = 3;

  // [Output Only] The short name of the firewall policy.
  optional string short_name = 4;

  // [Output Only] The type of the firewall policy.
  // HIERARCHY:
  // NETWORK:
  // UNSPECIFIED:
  optional string type = 5;
}

message NetworksRemovePeeringRequest {
  // Name of the peering, which should conform to RFC1035.
  optional string name = 1;
}

message NetworksUpdatePeeringRequest {
  optional NetworkPeering network_peering = 1;
}
