// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20230920

syntax = "proto3";

package google.cloud.cpp.compute.v1;

import "google/cloud/compute/v1/internal/common_001.proto";
import "google/cloud/compute/v1/internal/common_020.proto";
import "google/cloud/compute/v1/internal/common_029.proto";
import "google/cloud/compute/v1/internal/common_033.proto";
import "google/cloud/compute/v1/internal/common_047.proto";
import "google/cloud/compute/v1/internal/common_073.proto";

// An access configuration attached to an instance's network interface. Only one
// access config per instance is supported.
message AccessConfig {
  // Applies to ipv6AccessConfigs only. The first IPv6 address of the external
  // IPv6 range associated with this instance, prefix length is stored in
  // externalIpv6PrefixLength in ipv6AccessConfig. To use a static external IP
  // address, it must be unused and in the same region as the instance's zone.
  // If not specified, Google Cloud will automatically assign an external IPv6
  // address from the instance's subnetwork.
  optional string external_ipv6 = 1;

  // Applies to ipv6AccessConfigs only. The prefix length of the external IPv6
  // range.
  optional int32 external_ipv6_prefix_length = 2;

  // [Output Only] Type of the resource. Always compute#accessConfig for access
  // configs.
  optional string kind = 3;

  // The name of this access configuration. In accessConfigs (IPv4), the default
  // and recommended name is External NAT, but you can use any arbitrary string,
  // such as My external IP or Network Access. In ipv6AccessConfigs, the
  // recommend name is External IPv6.
  optional string name = 4;

  // Applies to accessConfigs (IPv4) only. An external IP address associated
  // with this instance. Specify an unused static external IP address available
  // to the project or leave this field undefined to use an IP from a shared
  // ephemeral IP address pool. If you specify a static external IP address, it
  // must live in the same region as the zone of the instance.
  optional string nat_ip = 5;

  // This signifies the networking tier used for configuring this access
  // configuration and can only take the following values: PREMIUM, STANDARD. If
  // an AccessConfig is specified without a valid external IP address, an
  // ephemeral IP will be created with this networkTier. If an AccessConfig with
  // a valid external IP address is specified, it must match that of the
  // networkTier associated with the Address resource owning that IP.
  // FIXED_STANDARD: Public internet quality with fixed bandwidth.
  // PREMIUM: High quality, Google-grade network tier, support for all
  // networking products.
  // STANDARD: Public internet quality, only limited support for other
  // networking products.
  // STANDARD_OVERRIDES_FIXED_STANDARD: (Output only) Temporary tier for
  // FIXED_STANDARD when fixed standard tier is expired or not configured.
  optional string network_tier = 6;

  // The DNS domain name for the public PTR record. You can set this field only
  // if the `setPublicPtr` field is enabled in accessConfig. If this field is
  // unspecified in ipv6AccessConfig, a default PTR record will be createc for
  // first IP in associated external IPv6 range.
  optional string public_ptr_domain_name = 7;

  // [Output Only] The resource URL for the security policy associated with this
  // access config.
  optional string security_policy = 10;

  // Specifies whether a public DNS 'PTR' record should be created to map the
  // external IP address of the instance to a DNS domain name. This field is not
  // used in ipv6AccessConfig. A default PTR record will be created if the VM
  // has external IPv6 range associated.
  optional bool set_public_ptr = 8;

  // The type of configuration. In accessConfigs (IPv4), the default and only
  // option is ONE_TO_ONE_NAT. In ipv6AccessConfigs, the default and only option
  // is DIRECT_IPV6.
  // DIRECT_IPV6:
  // ONE_TO_ONE_NAT:
  optional string type = 9;
}

// Specifies options for controlling advanced machine features. Options that
// would traditionally be configured in a BIOS belong here. Features that
// require operating system support may have corresponding entries in the
// GuestOsFeatures of an Image (e.g., whether or not the OS in the Image
// supports nested virtualization being enabled or disabled).
message AdvancedMachineFeatures {
  // Whether to enable nested virtualization or not (default is false).
  optional bool enable_nested_virtualization = 1;

  // Whether to enable UEFI networking for instance creation.
  optional bool enable_uefi_networking = 2;

  // The number of threads per physical core. To disable simultaneous
  // multithreading (SMT) set this to 1. If unset, the maximum number of threads
  // supported per core by the underlying processor is assumed.
  optional int32 threads_per_core = 3;

  // The number of physical cores to expose to an instance. Multiply by the
  // number of threads per core to compute the total number of virtual CPUs to
  // expose to the instance. If unset, the number of cores is inferred from the
  // instance's nominal CPU count and the underlying platform's SMT width.
  optional int32 visible_core_count = 4;
}

// An alias IP range attached to an instance's network interface.
message AliasIpRange {
  // The IP alias ranges to allocate for this interface. This IP CIDR range must
  // belong to the specified subnetwork and cannot contain IP addresses reserved
  // by system or used by other network interfaces. This range may be a single
  // IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted
  // string (such as 10.1.2.0/24).
  optional string ip_cidr_range = 1;

  // The name of a subnetwork secondary IP range from which to allocate an IP
  // alias range. If not specified, the primary range of the subnetwork is used.
  optional string subnetwork_range_name = 2;
}

// An instance-attached disk resource.
message AttachedDisk {
  // [Output Only] The architecture of the attached disk. Valid values are ARM64
  // or X86_64.
  // ARCHITECTURE_UNSPECIFIED: Default value indicating Architecture is not set.
  // ARM64: Machines with architecture ARM64
  // X86_64: Machines with architecture X86_64
  optional string architecture = 1;

  // Specifies whether the disk will be auto-deleted when the instance is
  // deleted (but not when the disk is detached from the instance).
  optional bool auto_delete = 2;

  // Indicates that this is a boot disk. The virtual machine will use the first
  // partition of the disk for its root filesystem.
  optional bool boot = 3;

  // Specifies a unique device name of your choice that is reflected into the
  // /dev/disk/by-id/google-* tree of a Linux operating system running within
  // the instance. This name can be used to reference the device for mounting,
  // resizing, and so on, from within the instance. If not specified, the server
  // chooses a default device name to apply to this disk, in the form
  // persistent-disk-x, where x is a number assigned by Google Compute Engine.
  // This field is only applicable for persistent disks.
  optional string device_name = 4;

  // Encrypts or decrypts a disk using a customer-supplied encryption key. If
  // you are creating a new disk, this field encrypts the new disk using an
  // encryption key that you provide. If you are attaching an existing disk that
  // is already encrypted, this field decrypts the disk using the
  // customer-supplied encryption key. If you encrypt a disk using a
  // customer-supplied key, you must provide the same key again when you attempt
  // to use this resource at a later time. For example, you must provide the key
  // when you create a snapshot or an image from the disk or when you attach the
  // disk to a virtual machine instance. If you do not provide an encryption
  // key, then the disk will be encrypted using an automatically generated key
  // and you do not need to provide a key to use the disk later. Instance
  // templates do not store customer-supplied encryption keys, so you cannot use
  // your own keys to encrypt disks in a managed instance group.
  optional CustomerEncryptionKey disk_encryption_key = 5;

  // The size of the disk in GB.
  optional string disk_size_gb = 6;

  // [Input Only] Whether to force attach the regional disk even if it's
  // currently attached to another instance. If you try to force attach a zonal
  // disk to an instance, you will receive an error.
  optional bool force_attach = 7;

  // A list of features to enable on the guest operating system. Applicable only
  // for bootable images. Read Enabling guest operating system features to see a
  // list of available options.
  repeated GuestOsFeature guest_os_features = 8;

  // [Output Only] A zero-based index to this disk, where 0 is reserved for the
  // boot disk. If you have many disks attached to an instance, each disk would
  // have a unique index number.
  optional int32 index = 9;

  // [Input Only] Specifies the parameters for a new disk that will be created
  // alongside the new instance. Use initialization parameters to create boot
  // disks or local SSDs attached to the new instance. This property is mutually
  // exclusive with the source property; you can only define one or the other,
  // but not both.
  optional AttachedDiskInitializeParams initialize_params = 10;

  // Specifies the disk interface to use for attaching this disk, which is
  // either SCSI or NVME. For most machine types, the default is SCSI. Local
  // SSDs can use either NVME or SCSI. In certain configurations, persistent
  // disks can use NVMe. For more information, see About persistent disks.
  // NVME:
  // SCSI:
  optional string interface = 11;

  // [Output Only] Type of the resource. Always compute#attachedDisk for
  // attached disks.
  optional string kind = 12;

  // [Output Only] Any valid publicly visible licenses.
  repeated string licenses = 13;

  // The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If
  // not specified, the default is to attach the disk in READ_WRITE mode.
  // READ_ONLY: Attaches this disk in read-only mode. Multiple virtual machines
  // can use a disk in read-only mode at a time.
  // READ_WRITE: *[Default]* Attaches this disk in read-write mode. Only one
  // virtual machine at a time can be attached to a disk in read-write mode.
  optional string mode = 14;

  // For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this
  // field is set to PRESERVED if the LocalSSD data has been saved to a
  // persistent location by customer request. (see the discard_local_ssd option
  // on Stop/Suspend). Read-only in the api.
  // DISK_SAVED_STATE_UNSPECIFIED: *[Default]* Disk state has not been
  // preserved.
  // PRESERVED: Disk state has been preserved.
  optional string saved_state = 18;

  // [Output Only] shielded vm initial state stored on disk
  optional InitialStateConfig shielded_instance_initial_state = 15;

  // Specifies a valid partial or full URL to an existing Persistent Disk
  // resource. When creating a new instance, one of initializeParams.sourceImage
  // or initializeParams.sourceSnapshot or disks.source is required except for
  // local SSD. If desired, you can also attach existing non-root persistent
  // disks using this property. This field is only applicable for persistent
  // disks. Note that for InstanceTemplate, specify the disk name for zonal
  // disk, and the URL for regional disk.
  optional string source = 16;

  // Specifies the type of the disk, either SCRATCH or PERSISTENT. If not
  // specified, the default is PERSISTENT.
  // PERSISTENT:
  // SCRATCH:
  optional string type = 17;
}

// [Input Only] Specifies the parameters for a new disk that will be created
// alongside the new instance. Use initialization parameters to create boot
// disks or local SSDs attached to the new instance. This field is persisted and
// returned for instanceTemplate and not returned in the context of instance.
// This property is mutually exclusive with the source property; you can only
// define one or the other, but not both.
message AttachedDiskInitializeParams {
  // The architecture of the attached disk. Valid values are arm64 or x86_64.
  // ARCHITECTURE_UNSPECIFIED: Default value indicating Architecture is not set.
  // ARM64: Machines with architecture ARM64
  // X86_64: Machines with architecture X86_64
  optional string architecture = 1;

  // An optional description. Provide this property when creating the disk.
  optional string description = 2;

  // Specifies the disk name. If not specified, the default is to use the name
  // of the instance. If a disk with the same name already exists in the given
  // region, the existing disk is attached to the new instance and the new disk
  // is not created.
  optional string disk_name = 3;

  // Specifies the size of the disk in base-2 GB. The size must be at least 10
  // GB. If you specify a sourceImage, which is required for boot disks, the
  // default size is the size of the sourceImage. If you do not specify a
  // sourceImage, the default disk size is 500 GB.
  optional string disk_size_gb = 4;

  // Specifies the disk type to use to create the instance. If not specified,
  // the default is pd-standard, specified using the full URL. For example:
  // https://www.googleapis.com/compute/v1/projects/project/zones/zone
  // /diskTypes/pd-standard For a full list of acceptable values, see Persistent
  // disk types. If you specify this field when creating a VM, you can provide
  // either the full or partial URL. For example, the following values are
  // valid: - https://www.googleapis.com/compute/v1/projects/project/zones/zone
  // /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType -
  // zones/zone/diskTypes/diskType If you specify this field when creating or
  // updating an instance template or all-instances configuration, specify the
  // type of the disk, not the URL. For example: pd-standard.
  optional string disk_type = 5;

  // Labels to apply to this disk. These can be later modified by the
  // disks.setLabels method. This field is only applicable for persistent disks.
  map<string, string> labels = 6;

  // A list of publicly visible licenses. Reserved for Google's use.
  repeated string licenses = 7;

  // Specifies which action to take on instance update with this disk. Default
  // is to use the existing disk.
  // RECREATE_DISK: Always recreate the disk.
  // RECREATE_DISK_IF_SOURCE_CHANGED: Recreate the disk if source (image,
  // snapshot) of this disk is different from source of existing disk.
  // USE_EXISTING_DISK: Use the existing disk, this is the default behaviour.
  optional string on_update_action = 8;

  // Indicates how many IOPS to provision for the disk. This sets the number of
  // I/O operations per second that the disk can handle. Values must be between
  // 10,000 and 120,000. For more details, see the Extreme persistent disk
  // documentation.
  optional string provisioned_iops = 9;

  // Indicates how much throughput to provision for the disk. This sets the
  // number of throughput mb per second that the disk can handle. Values must be
  // between 1 and 7,124.
  optional string provisioned_throughput = 16;

  // Required for each regional disk associated with the instance. Specify the
  // URLs of the zones where the disk should be replicated to. You must provide
  // exactly two replica zones, and one zone must be the same as the instance
  // zone.
  repeated string replica_zones = 17;

  // Resource manager tags to be bound to the disk. Tag keys and values have the
  // same definition as resource manager tags. Keys must be in the format
  // `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The
  // field is ignored (both PUT & PATCH) when empty.
  map<string, string> resource_manager_tags = 10;

  // Resource policies applied to this disk for automatic snapshot creations.
  // Specified using the full or partial URL. For instance template, specify
  // only the resource policy name.
  repeated string resource_policies = 11;

  // The source image to create this disk. When creating a new instance, one of
  // initializeParams.sourceImage or initializeParams.sourceSnapshot or
  // disks.source is required except for local SSD. To create a disk with one of
  // the public operating system images, specify the image by its family name.
  // For example, specify family/debian-9 to use the latest Debian 9 image:
  // projects/debian-cloud/global/images/family/debian-9 Alternatively, use a
  // specific version of a public operating system image:
  // projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a
  // disk with a custom image that you created, specify the image name in the
  // following format: global/images/my-custom-image You can also specify a
  // custom image by its image family, which returns the latest version of the
  // image in that family. Replace the image name with family/family-name:
  // global/images/family/my-image-family If the source image is deleted later,
  // this field will not be set.
  optional string source_image = 12;

  // The customer-supplied encryption key of the source image. Required if the
  // source image is protected by a customer-supplied encryption key.
  // InstanceTemplate and InstancePropertiesPatch do not store customer-supplied
  // encryption keys, so you cannot create disks for instances in a managed
  // instance group if the source images are encrypted with your own keys.
  optional CustomerEncryptionKey source_image_encryption_key = 13;

  // The source snapshot to create this disk. When creating a new instance, one
  // of initializeParams.sourceSnapshot or initializeParams.sourceImage or
  // disks.source is required except for local SSD. To create a disk with a
  // snapshot that you created, specify the snapshot name in the following
  // format: global/snapshots/my-backup If the source snapshot is deleted later,
  // this field will not be set.
  optional string source_snapshot = 14;

  // The customer-supplied encryption key of the source snapshot.
  optional CustomerEncryptionKey source_snapshot_encryption_key = 15;
}

// A set of Confidential Instance options.
message ConfidentialInstanceConfig {
  // Defines whether the instance should have confidential compute enabled.
  optional bool enable_confidential_compute = 1;
}

message InstanceProperties {
  // Controls for advanced machine-related behavior features. Note that for
  // MachineImage, this is not supported yet.
  optional AdvancedMachineFeatures advanced_machine_features = 1;

  // Enables instances created based on these properties to send packets with
  // source IP addresses other than their own and receive packets with
  // destination IP addresses other than their own. If these instances will be
  // used as an IP gateway or it will be set as the next-hop in a Route
  // resource, specify true. If unsure, leave this set to false. See the Enable
  // IP forwarding documentation for more information.
  optional bool can_ip_forward = 2;

  // Specifies the Confidential Instance options. Note that for MachineImage,
  // this is not supported yet.
  optional ConfidentialInstanceConfig confidential_instance_config = 3;

  // An optional text description for the instances that are created from these
  // properties.
  optional string description = 4;

  // An array of disks that are associated with the instances that are created
  // from these properties.
  repeated AttachedDisk disks = 5;

  // A list of guest accelerator cards' type and count to use for instances
  // created from these properties.
  repeated AcceleratorConfig guest_accelerators = 6;

  // KeyRevocationActionType of the instance. Supported options are "STOP" and
  // "NONE". The default value is "NONE" if it is not specified.
  // KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED: Default value. This value is
  // unused.
  // NONE: Indicates user chose no operation.
  // STOP: Indicates user chose to opt for VM shutdown on key revocation.
  optional string key_revocation_action_type = 7;

  // Labels to apply to instances that are created from these properties.
  map<string, string> labels = 8;

  // The machine type to use for instances that are created from these
  // properties.
  optional string machine_type = 9;

  // The metadata key/value pairs to assign to instances that are created from
  // these properties. These pairs can consist of custom metadata or predefined
  // keys. See Project and instance metadata for more information.
  optional Metadata metadata = 10;

  // Minimum cpu/platform to be used by instances. The instance may be scheduled
  // on the specified or newer cpu/platform. Applicable values are the friendly
  // names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or
  // minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying
  // a Minimum CPU Platform.
  optional string min_cpu_platform = 11;

  // An array of network access configurations for this interface.
  repeated NetworkInterface network_interfaces = 12;

  // Note that for MachineImage, this is not supported yet.
  optional NetworkPerformanceConfig network_performance_config = 13;

  // The private IPv6 google access type for VMs. If not specified, use
  // INHERIT_FROM_SUBNETWORK as default. Note that for MachineImage, this is not
  // supported yet.
  // ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE: Bidirectional private IPv6 access
  // to/from Google services. If specified, the subnetwork who is attached to
  // the instance's default network interface will be assigned an internal IPv6
  // prefix if it doesn't have before.
  // ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE: Outbound private IPv6 access from VMs
  // in this subnet to Google services. If specified, the subnetwork who is
  // attached to the instance's default network interface will be assigned an
  // internal IPv6 prefix if it doesn't have before.
  // INHERIT_FROM_SUBNETWORK: Each network interface inherits
  // PrivateIpv6GoogleAccess from its subnetwork.
  optional string private_ipv6_google_access = 14;

  // Specifies the reservations that instances can consume from. Note that for
  // MachineImage, this is not supported yet.
  optional ReservationAffinity reservation_affinity = 15;

  // Resource manager tags to be bound to the instance. Tag keys and values have
  // the same definition as resource manager tags. Keys must be in the format
  // `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The
  // field is ignored (both PUT & PATCH) when empty.
  map<string, string> resource_manager_tags = 16;

  // Resource policies (names, not URLs) applied to instances created from these
  // properties. Note that for MachineImage, this is not supported yet.
  repeated string resource_policies = 17;

  // Specifies the scheduling options for the instances that are created from
  // these properties.
  optional Scheduling scheduling = 18;

  // A list of service accounts with specified scopes. Access tokens for these
  // service accounts are available to the instances that are created from these
  // properties. Use metadata queries to obtain the access tokens for these
  // instances.
  repeated ServiceAccount service_accounts = 19;

  // Note that for MachineImage, this is not supported yet.
  optional ShieldedInstanceConfig shielded_instance_config = 20;

  // A list of tags to apply to the instances that are created from these
  // properties. The tags identify valid sources or targets for network
  // firewalls. The setTags method can modify this list of tags. Each tag within
  // the list must comply with RFC1035.
  optional Tags tags = 21;
}

// A network interface resource attached to an instance.
message NetworkInterface {
  // An array of configurations for this interface. Currently, only one access
  // config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs
  // specified, then this instance will have no external internet access.
  repeated AccessConfig access_configs = 1;

  // An array of alias IP ranges for this network interface. You can only
  // specify this field for network interfaces in VPC networks.
  repeated AliasIpRange alias_ip_ranges = 2;

  // Fingerprint hash of contents stored in this network interface. This field
  // will be ignored when inserting an Instance or adding a NetworkInterface. An
  // up-to-date fingerprint must be provided in order to update the
  // NetworkInterface. The request will fail with error 400 Bad Request if the
  // fingerprint is not provided, or 412 Precondition Failed if the fingerprint
  // is out of date.
  optional string fingerprint = 3;

  // The prefix length of the primary internal IPv6 range.
  optional int32 internal_ipv6_prefix_length = 4;

  // An array of IPv6 access configurations for this interface. Currently, only
  // one IPv6 access config, DIRECT_IPV6, is supported. If there is no
  // ipv6AccessConfig specified, then this instance will have no external IPv6
  // Internet access.
  repeated AccessConfig ipv6_access_configs = 5;

  // [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be
  // accessed from the Internet. This field is always inherited from its
  // subnetwork. Valid only if stackType is IPV4_IPV6.
  // EXTERNAL: This network interface can have external IPv6.
  // INTERNAL: This network interface can have internal IPv6.
  optional string ipv6_access_type = 6;

  // An IPv6 internal network address for this network interface. To use a
  // static internal IP address, it must be unused and in the same region as the
  // instance's zone. If not specified, Google Cloud will automatically assign
  // an internal IPv6 address from the instance's subnetwork.
  optional string ipv6_address = 7;

  // [Output Only] Type of the resource. Always compute#networkInterface for
  // network interfaces.
  optional string kind = 8;

  // [Output Only] The name of the network interface, which is generated by the
  // server. For a VM, the network interface uses the nicN naming format. Where
  // N is a value between 0 and 7. The default interface value is nic0.
  optional string name = 9;

  // URL of the VPC network resource for this instance. When creating an
  // instance, if neither the network nor the subnetwork is specified, the
  // default network global/networks/default is used. If the selected project
  // doesn't have the default network, you must specify a network or subnet. If
  // the network is not specified but the subnetwork is specified, the network
  // is inferred. If you specify this property, you can specify the network as a
  // full or partial URL. For example, the following are all valid URLs: -
  // https://www.googleapis.com/compute/v1/projects/project/global/networks/
  // network - projects/project/global/networks/network -
  // global/networks/default
  optional string network = 10;

  // The URL of the network attachment that this interface should connect to in
  // the following format:
  // projects/{project_number}/regions/{region_name}/networkAttachments/{network_attachment_name}.
  optional string network_attachment = 11;

  // An IPv4 internal IP address to assign to the instance for this network
  // interface. If not specified by the user, an unused internal IP is assigned
  // by the system.
  optional string network_ip = 12;

  // The type of vNIC to be used on this interface. This may be gVNIC or
  // VirtioNet.
  // GVNIC: GVNIC
  // UNSPECIFIED_NIC_TYPE: No type specified.
  // VIRTIO_NET: VIRTIO
  optional string nic_type = 13;

  // The networking queue count that's specified by users for the network
  // interface. Both Rx and Tx queues will be set to this number. It'll be empty
  // if not specified by the users.
  optional int32 queue_count = 14;

  // The stack type for this network interface. To assign only IPv4 addresses,
  // use IPV4_ONLY. To assign both IPv4 and IPv6 addresses, use IPV4_IPV6. If
  // not specified, IPV4_ONLY is used. This field can be both set at instance
  // creation and update network interface operations.
  // IPV4_IPV6: The network interface can have both IPv4 and IPv6 addresses.
  // IPV4_ONLY: The network interface will be assigned IPv4 address.
  optional string stack_type = 15;

  // The URL of the Subnetwork resource for this instance. If the network
  // resource is in legacy mode, do not specify this field. If the network is in
  // auto subnet mode, specifying the subnetwork is optional. If the network is
  // in custom subnet mode, specifying the subnetwork is required. If you
  // specify this field, you can specify the subnetwork as a full or partial
  // URL. For example, the following are all valid URLs: -
  // https://www.googleapis.com/compute/v1/projects/project/regions/region
  // /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
  optional string subnetwork = 16;
}

message NetworkPerformanceConfig {
  // DEFAULT:
  // TIER_1:
  optional string total_egress_bandwidth_tier = 1;
}

// Specifies the reservations that this instance can consume from.
message ReservationAffinity {
  // Specifies the type of reservation from which this instance can consume
  // resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or
  // NO_RESERVATION. See Consuming reserved instances for examples.
  // ANY_RESERVATION: Consume any allocation available.
  // NO_RESERVATION: Do not consume from any allocated capacity.
  // SPECIFIC_RESERVATION: Must consume from a specific reservation. Must
  // specify key value fields for specifying the reservations.
  // UNSPECIFIED:
  optional string consume_reservation_type = 1;

  // Corresponds to the label key of a reservation resource. To target a
  // SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as
  // the key and specify the name of your reservation as its value.
  optional string key = 2;

  // Corresponds to the label values of a reservation resource. This can be
  // either a name to a reservation in the same project or
  // "projects/different-project/reservations/some-reservation-name" to target a
  // shared reservation in the same zone but in a different project.
  repeated string values = 3;
}

// Sets the scheduling options for an Instance.
message Scheduling {
  // Specifies whether the instance should be automatically restarted if it is
  // terminated by Compute Engine (not terminated by a user). You can only set
  // the automatic restart option for standard instances. Preemptible instances
  // cannot be automatically restarted. By default, this is set to true so an
  // instance is automatically restarted if it is terminated by Compute Engine.
  optional bool automatic_restart = 1;

  // Specifies the termination action for the instance.
  // DELETE: Delete the VM.
  // INSTANCE_TERMINATION_ACTION_UNSPECIFIED: Default value. This value is
  // unused.
  // STOP: Stop the VM without storing in-memory content. default action.
  optional string instance_termination_action = 2;

  // Specifies the maximum amount of time a Local Ssd Vm should wait while
  // recovery of the Local Ssd state is attempted. Its value should be in
  // between 0 and 168 hours with hour granularity and the default value being 1
  // hour.
  optional Duration local_ssd_recovery_timeout = 9;

  // An opaque location hint used to place the instance close to other
  // resources. This field is for use by internal tools that use the public API.
  optional string location_hint = 3;

  // The minimum number of virtual CPUs this instance will consume when running
  // on a sole-tenant node.
  optional int32 min_node_cpus = 4;

  // A set of node affinity and anti-affinity configurations. Refer to
  // Configuring node affinity for more information. Overrides
  // reservationAffinity.
  repeated SchedulingNodeAffinity node_affinities = 5;

  // Defines the maintenance behavior for this instance. For standard instances,
  // the default behavior is MIGRATE. For preemptible instances, the default and
  // only possible behavior is TERMINATE. For more information, see Set VM host
  // maintenance policy.
  // MIGRATE: *[Default]* Allows Compute Engine to automatically migrate
  // instances out of the way of maintenance events.
  // TERMINATE: Tells Compute Engine to terminate and (optionally) restart the
  // instance away from the maintenance activity. If you would like your
  // instance to be restarted, set the automaticRestart flag to true. Your
  // instance may be restarted more than once, and it may be restarted outside
  // the window of maintenance events.
  optional string on_host_maintenance = 6;

  // Defines whether the instance is preemptible. This can only be set during
  // instance creation or while the instance is stopped and therefore, in a
  // `TERMINATED` state. See Instance Life Cycle for more information on the
  // possible instance states.
  optional bool preemptible = 7;

  // Specifies the provisioning model of the instance.
  // SPOT: Heavily discounted, no guaranteed runtime.
  // STANDARD: Standard provisioning with user controlled runtime, no discounts.
  optional string provisioning_model = 8;
}

// Node Affinity: the configuration of desired nodes onto which this Instance
// could be scheduled.
message SchedulingNodeAffinity {
  // Corresponds to the label key of Node resource.
  optional string key = 1;

  // Defines the operation of node selection. Valid operators are IN for
  // affinity and NOT_IN for anti-affinity.
  // IN: Requires Compute Engine to seek for matched nodes.
  // NOT_IN: Requires Compute Engine to avoid certain nodes.
  // OPERATOR_UNSPECIFIED:
  optional string operator = 2;

  // Corresponds to the label values of Node resource.
  repeated string values = 3;
}

// A service account.
message ServiceAccount {
  // Email address of the service account.
  optional string email = 1;

  // The list of scopes to be made available for this service account.
  repeated string scopes = 2;
}

// A set of Shielded Instance options.
message ShieldedInstanceConfig {
  // Defines whether the instance has integrity monitoring enabled. Enabled by
  // default.
  optional bool enable_integrity_monitoring = 1;

  // Defines whether the instance has Secure Boot enabled. Disabled by default.
  optional bool enable_secure_boot = 2;

  // Defines whether the instance has the vTPM enabled. Enabled by default.
  optional bool enable_vtpm = 3;
}

// A set of instance tags.
message Tags {
  // Specifies a fingerprint for this request, which is essentially a hash of
  // the tags' contents and used for optimistic locking. The fingerprint is
  // initially generated by Compute Engine and changes after every request to
  // modify or update tags. You must always provide an up-to-date fingerprint
  // hash in order to update or change tags. To see the latest fingerprint, make
  // get() request to the instance.
  optional string fingerprint = 1;

  // An array of tags. Each tag must be 1-63 characters long, and comply with
  // RFC1035.
  repeated string items = 2;
}
