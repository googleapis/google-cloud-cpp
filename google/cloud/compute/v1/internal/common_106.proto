// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20230920

syntax = "proto3";

package google.cloud.cpp.compute.v1;

import "google/cloud/compute/v1/internal/common_031.proto";

// Represents a Google Cloud Armor security policy resource. Only external
// backend services that use load balancers can reference a security policy. For
// more information, see Google Cloud Armor security policy overview.
message SecurityPolicy {
  optional SecurityPolicyAdaptiveProtectionConfig adaptive_protection_config =
      1;

  optional SecurityPolicyAdvancedOptionsConfig advanced_options_config = 2;

  // [Output Only] Creation timestamp in RFC3339 text format.
  optional string creation_timestamp = 3;

  optional SecurityPolicyDdosProtectionConfig ddos_protection_config = 4;

  // An optional description of this resource. Provide this property when you
  // create the resource.
  optional string description = 5;

  // Specifies a fingerprint for this resource, which is essentially a hash of
  // the metadata's contents and used for optimistic locking. The fingerprint is
  // initially generated by Compute Engine and changes after every request to
  // modify or update metadata. You must always provide an up-to-date
  // fingerprint hash in order to update or change metadata, otherwise the
  // request will fail with error 412 conditionNotMet. To see the latest
  // fingerprint, make get() request to the security policy.
  optional string fingerprint = 6;

  // [Output Only] The unique identifier for the resource. This identifier is
  // defined by the server.
  optional string id = 7;

  // [Output only] Type of the resource. Always compute#securityPolicyfor
  // security policies
  optional string kind = 8;

  // A fingerprint for the labels being applied to this security policy, which
  // is essentially a hash of the labels set used for optimistic locking. The
  // fingerprint is initially generated by Compute Engine and changes after
  // every request to modify or update labels. You must always provide an
  // up-to-date fingerprint hash in order to update or change labels. To see the
  // latest fingerprint, make get() request to the security policy.
  optional string label_fingerprint = 15;

  // Labels for this resource. These can only be added or modified by the
  // setLabels method. Each label key/value pair must comply with RFC1035. Label
  // values may be empty.
  map<string, string> labels = 16;

  // Name of the resource. Provided by the client when the resource is created.
  // The name must be 1-63 characters long, and comply with RFC1035.
  // Specifically, the name must be 1-63 characters long and match the regular
  // expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
  // must be a lowercase letter, and all following characters must be a dash,
  // lowercase letter, or digit, except the last character, which cannot be a
  // dash.
  optional string name = 9;

  optional SecurityPolicyRecaptchaOptionsConfig recaptcha_options_config = 10;

  // [Output Only] URL of the region where the regional security policy resides.
  // This field is not applicable to global security policies.
  optional string region = 11;

  // A list of rules that belong to this policy. There must always be a default
  // rule which is a rule with priority 2147483647 and match all condition (for
  // the match condition this means match "*" for srcIpRanges and for the
  // networkMatch condition every field must be either match "*" or not set). If
  // no rules are provided when creating a security policy, a default rule with
  // action "allow" will be added.
  repeated SecurityPolicyRule rules = 12;

  // [Output Only] Server-defined URL for the resource.
  optional string self_link = 13;

  // The type indicates the intended use of the security policy. - CLOUD_ARMOR:
  // Cloud Armor backend security policies can be configured to filter incoming
  // HTTP requests targeting backend services. They filter requests before they
  // hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security
  // policies can be configured to filter incoming HTTP requests targeting
  // backend services (including Cloud CDN-enabled) as well as backend buckets
  // (Cloud Storage). They filter requests before the request is served from
  // Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal
  // service policies can be configured to filter HTTP requests targeting
  // services managed by Traffic Director in a service mesh. They filter
  // requests before the request is served from the application. -
  // CLOUD_ARMOR_NETWORK: Cloud Armor network policies can be configured to
  // filter packets targeting network load balancing resources such as backend
  // services, target pools, target instances, and instances with external IPs.
  // They filter requests before the request is served from the application.
  // This field can be set only at resource creation time.
  // CLOUD_ARMOR:
  // CLOUD_ARMOR_EDGE:
  // CLOUD_ARMOR_NETWORK:
  optional string type = 14;

  // Definitions of user-defined fields for CLOUD_ARMOR_NETWORK policies. A
  // user-defined field consists of up to 4 bytes extracted from a fixed offset
  // in the packet, relative to the IPv4, IPv6, TCP, or UDP header, with an
  // optional mask to select certain bits. Rules may then specify matching
  // values for these fields. Example: userDefinedFields: - name:
  // "ipv4_fragment_offset" base: IPV4 offset: 6 size: 2 mask: "0x1fff"
  repeated SecurityPolicyUserDefinedField user_defined_fields = 17;
}

// Configuration options for Cloud Armor Adaptive Protection (CAAP).
message SecurityPolicyAdaptiveProtectionConfig {
  // If set to true, enables Cloud Armor Machine Learning.
  optional SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
      layer7_ddos_defense_config = 1;
}

// Configuration options for L7 DDoS detection. This field is only supported in
// Global Security Policies of type CLOUD_ARMOR.
message SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {
  // If set to true, enables CAAP for L7 DDoS detection. This field is only
  // supported in Global Security Policies of type CLOUD_ARMOR.
  optional bool enable = 1;

  // Rule visibility can be one of the following: STANDARD - opaque rules.
  // (default) PREMIUM - transparent rules. This field is only supported in
  // Global Security Policies of type CLOUD_ARMOR.
  // PREMIUM:
  // STANDARD:
  optional string rule_visibility = 2;

  // Configuration options for layer7 adaptive protection for various
  // customizable thresholds.
  repeated
      SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig
          threshold_configs = 3;
}

message
SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig {
  optional float auto_deploy_confidence_threshold = 1;

  optional int32 auto_deploy_expiration_sec = 2;

  optional float auto_deploy_impacted_baseline_threshold = 3;

  optional float auto_deploy_load_threshold = 4;

  // The name must be 1-63 characters long, and comply with RFC1035. The name
  // must be unique within the security policy.
  optional string name = 5;
}

message SecurityPolicyAdvancedOptionsConfig {
  // Custom configuration to apply the JSON parsing. Only applicable when
  // json_parsing is set to STANDARD.
  optional SecurityPolicyAdvancedOptionsConfigJsonCustomConfig
      json_custom_config = 1;

  // DISABLED:
  // STANDARD:
  optional string json_parsing = 2;

  // NORMAL:
  // VERBOSE:
  optional string log_level = 3;
}

message SecurityPolicyAdvancedOptionsConfigJsonCustomConfig {
  // A list of custom Content-Type header values to apply the JSON parsing. As
  // per RFC 1341, a Content-Type header value has the following format:
  // Content-Type := type "/" subtype *[";" parameter] When configuring a custom
  // Content-Type header value, only the type/subtype needs to be specified, and
  // the parameters should be excluded.
  repeated string content_types = 1;
}

message SecurityPolicyDdosProtectionConfig {
  // ADVANCED:
  // STANDARD:
  optional string ddos_protection = 1;
}

message SecurityPolicyList {
  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 1;

  // A list of SecurityPolicy resources.
  repeated SecurityPolicy items = 2;

  // [Output Only] Type of resource. Always compute#securityPolicyList for
  // listsof securityPolicies
  optional string kind = 3;

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 4;

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1;

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1;

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2;
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2;

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3;
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 5;
}

message SecurityPolicyRecaptchaOptionsConfig {
  // An optional field to supply a reCAPTCHA site key to be used for all the
  // rules using the redirect action with the type of GOOGLE_RECAPTCHA under the
  // security policy. The specified site key needs to be created from the
  // reCAPTCHA API. The user is responsible for the validity of the specified
  // site key. If not specified, a Google-managed site key is used. This field
  // is only supported in Global Security Policies of type CLOUD_ARMOR.
  optional string redirect_site_key = 1;
}

// Represents a rule that describes one or more match conditions along with the
// action to be taken when traffic matches this condition (allow or deny).
message SecurityPolicyRule {
  // The Action to perform when the rule is matched. The following are the valid
  // actions: - allow: allow access to target. - deny(STATUS): deny access to
  // target, returns the HTTP response code specified. Valid values for `STATUS`
  // are 403, 404, and 502. - rate_based_ban: limit client traffic to the
  // configured threshold and ban the client if the traffic exceeds the
  // threshold. Configure parameters for this action in RateLimitOptions.
  // Requires rate_limit_options to be set. - redirect: redirect to a different
  // target. This can either be an internal reCAPTCHA redirect, or an external
  // URL-based redirect via a 302 response. Parameters for this action can be
  // configured via redirectOptions. This action is only supported in Global
  // Security Policies of type CLOUD_ARMOR. - throttle: limit client traffic to
  // the configured threshold. Configure parameters for this action in
  // rateLimitOptions. Requires rate_limit_options to be set for this.
  optional string action = 1;

  // An optional description of this resource. Provide this property when you
  // create the resource.
  optional string description = 2;

  // Optional, additional actions that are performed on headers. This field is
  // only supported in Global Security Policies of type CLOUD_ARMOR.
  optional SecurityPolicyRuleHttpHeaderAction header_action = 3;

  // [Output only] Type of the resource. Always compute#securityPolicyRule for
  // security policy rules
  optional string kind = 4;

  // A match condition that incoming traffic is evaluated against. If it
  // evaluates to true, the corresponding 'action' is enforced.
  optional SecurityPolicyRuleMatcher match = 5;

  // A match condition that incoming packets are evaluated against for
  // CLOUD_ARMOR_NETWORK security policies. If it matches, the corresponding
  // 'action' is enforced. The match criteria for a rule consists of built-in
  // match fields (like 'srcIpRanges') and potentially multiple user-defined
  // match fields ('userDefinedFields'). Field values may be extracted directly
  // from the packet or derived from it (e.g. 'srcRegionCodes'). Some fields may
  // not be present in every packet (e.g. 'srcPorts'). A user-defined field is
  // only present if the base header is found in the packet and the entire field
  // is in bounds. Each match field may specify which values can match it,
  // listing one or more ranges, prefixes, or exact values that are considered a
  // match for the field. A field value must be present in order to match a
  // specified match field. If no match values are specified for a match field,
  // then any field value is considered to match it, and it's not required to be
  // present. For strings specifying '*' is also equivalent to match all. For a
  // packet to match a rule, all specified match fields must match the
  // corresponding field values derived from the packet. Example: networkMatch:
  // srcIpRanges: - "192.0.2.0/24" - "198.51.100.0/24" userDefinedFields: -
  // name: "ipv4_fragment_offset" values: - "1-0x1fff" The above match condition
  // matches packets with a source IP in 192.0.2.0/24 or 198.51.100.0/24 and a
  // user-defined field named "ipv4_fragment_offset" with a value between 1 and
  // 0x1fff inclusive.
  optional SecurityPolicyRuleNetworkMatcher network_match = 11;

  // Preconfigured WAF configuration to be applied for the rule. If the rule
  // does not evaluate preconfigured WAF rules, i.e., if
  // evaluatePreconfiguredWaf() is not used, this field will have no effect.
  optional SecurityPolicyRulePreconfiguredWafConfig preconfigured_waf_config =
      6;

  // If set to true, the specified action is not enforced.
  optional bool preview = 7;

  // An integer indicating the priority of a rule in the list. The priority must
  // be a positive value between 0 and 2147483647. Rules are evaluated from
  // highest to lowest priority where 0 is the highest priority and 2147483647
  // is the lowest priority.
  optional int32 priority = 8;

  // Must be specified if the action is "rate_based_ban" or "throttle". Cannot
  // be specified for any other actions.
  optional SecurityPolicyRuleRateLimitOptions rate_limit_options = 9;

  // Parameters defining the redirect action. Cannot be specified for any other
  // actions. This field is only supported in Global Security Policies of type
  // CLOUD_ARMOR.
  optional SecurityPolicyRuleRedirectOptions redirect_options = 10;
}

message SecurityPolicyRuleHttpHeaderAction {
  // The list of request headers to add or overwrite if they're already present.
  repeated SecurityPolicyRuleHttpHeaderActionHttpHeaderOption
      request_headers_to_adds = 1;
}

message SecurityPolicyRuleHttpHeaderActionHttpHeaderOption {
  // The name of the header to set.
  optional string header_name = 1;

  // The value to set the named header to.
  optional string header_value = 2;
}

// Represents a match condition that incoming traffic is evaluated against.
// Exactly one field must be specified.
message SecurityPolicyRuleMatcher {
  // The configuration options available when specifying versioned_expr. This
  // field must be specified if versioned_expr is specified and cannot be
  // specified if versioned_expr is not specified.
  optional SecurityPolicyRuleMatcherConfig config = 1;

  // User defined CEVAL expression. A CEVAL expression is used to specify match
  // criteria such as origin.ip, source.region_code and contents in the request
  // header. Expressions containing `evaluateThreatIntelligence` require Cloud
  // Armor Managed Protection Plus tier and are not supported in Edge Policies
  // nor in Regional Policies. Expressions containing
  // `evaluatePreconfiguredExpr('sourceiplist-*')` require Cloud Armor Managed
  // Protection Plus tier and are only supported in Global Security Policies.
  optional Expr expr = 2;

  // Preconfigured versioned expression. If this field is specified, config must
  // also be specified. Available preconfigured expressions along with their
  // requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range
  // field in config.
  // SRC_IPS_V1: Matches the source IP address of a request to the IP ranges
  // supplied in config.
  optional string versioned_expr = 3;
}

message SecurityPolicyRuleMatcherConfig {
  // CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
  repeated string src_ip_ranges = 1;
}

// Represents a match condition that incoming network traffic is evaluated
// against.
message SecurityPolicyRuleNetworkMatcher {
  // Destination IPv4/IPv6 addresses or CIDR prefixes, in standard text format.
  repeated string dest_ip_ranges = 1;

  // Destination port numbers for TCP/UDP/SCTP. Each element can be a 16-bit
  // unsigned decimal number (e.g. "80") or range (e.g. "0-1023").
  repeated string dest_ports = 2;

  // IPv4 protocol / IPv6 next header (after extension headers). Each element
  // can be an 8-bit unsigned decimal number (e.g. "6"), range (e.g. "253-254"),
  // or one of the following protocol names: "tcp", "udp", "icmp", "esp", "ah",
  // "ipip", or "sctp".
  repeated string ip_protocols = 3;

  // BGP Autonomous System Number associated with the source IP address.
  repeated uint32 src_asns = 4;

  // Source IPv4/IPv6 addresses or CIDR prefixes, in standard text format.
  repeated string src_ip_ranges = 5;

  // Source port numbers for TCP/UDP/SCTP. Each element can be a 16-bit unsigned
  // decimal number (e.g. "80") or range (e.g. "0-1023").
  repeated string src_ports = 6;

  // Two-letter ISO 3166-1 alpha-2 country code associated with the source IP
  // address.
  repeated string src_region_codes = 7;

  // User-defined fields. Each element names a defined field and lists the
  // matching values for that field.
  repeated SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch
      user_defined_fields = 8;
}

message SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch {
  // Name of the user-defined field, as given in the definition.
  optional string name = 1;

  // Matching values of the field. Each element can be a 32-bit unsigned decimal
  // or hexadecimal (starting with "0x") number (e.g. "64") or range (e.g.
  // "0x400-0x7ff").
  repeated string values = 2;
}

message SecurityPolicyRulePreconfiguredWafConfig {
  // A list of exclusions to apply during preconfigured WAF evaluation.
  repeated SecurityPolicyRulePreconfiguredWafConfigExclusion exclusions = 1;
}

message SecurityPolicyRulePreconfiguredWafConfigExclusion {
  // A list of request cookie names whose value will be excluded from inspection
  // during preconfigured WAF evaluation.
  repeated SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
      request_cookies_to_exclude = 1;

  // A list of request header names whose value will be excluded from inspection
  // during preconfigured WAF evaluation.
  repeated SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
      request_headers_to_exclude = 2;

  // A list of request query parameter names whose value will be excluded from
  // inspection during preconfigured WAF evaluation. Note that the parameter can
  // be in the query string or in the POST body.
  repeated SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
      request_query_params_to_exclude = 3;

  // A list of request URIs from the request line to be excluded from inspection
  // during preconfigured WAF evaluation. When specifying this field, the query
  // or fragment part should be excluded.
  repeated SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
      request_uris_to_exclude = 4;

  // A list of target rule IDs under the WAF rule set to apply the preconfigured
  // WAF exclusion. If omitted, it refers to all the rule IDs under the WAF rule
  // set.
  repeated string target_rule_ids = 5;

  // Target WAF rule set to apply the preconfigured WAF exclusion.
  optional string target_rule_set = 6;
}

message SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams {
  // The match operator for the field.
  // CONTAINS: The operator matches if the field value contains the specified
  // value.
  // ENDS_WITH: The operator matches if the field value ends with the specified
  // value.
  // EQUALS: The operator matches if the field value equals the specified value.
  // EQUALS_ANY: The operator matches if the field value is any value.
  // STARTS_WITH: The operator matches if the field value starts with the
  // specified value.
  optional string op = 1;

  // The value of the field.
  optional string val = 2;
}

message SecurityPolicyRuleRateLimitOptions {
  // Can only be specified if the action for the rule is "rate_based_ban". If
  // specified, determines the time (in seconds) the traffic will continue to be
  // banned by the rate limit after the rate falls below the threshold.
  optional int32 ban_duration_sec = 1;

  // Can only be specified if the action for the rule is "rate_based_ban". If
  // specified, the key will be banned for the configured 'ban_duration_sec'
  // when the number of requests that exceed the 'rate_limit_threshold' also
  // exceed this 'ban_threshold'.
  optional SecurityPolicyRuleRateLimitOptionsThreshold ban_threshold = 2;

  // Action to take for requests that are under the configured rate limit
  // threshold. Valid option is "allow" only.
  optional string conform_action = 3;

  // Determines the key to enforce the rate_limit_threshold on. Possible values
  // are: - ALL: A single rate limit threshold is applied to all the requests
  // matching this rule. This is the default value if "enforceOnKey" is not
  // configured. - IP: The source IP address of the request is the key. Each IP
  // has this limit enforced separately. - HTTP_HEADER: The value of the HTTP
  // header whose name is configured under "enforceOnKeyName". The key value is
  // truncated to the first 128 bytes of the header value. If no such header is
  // present in the request, the key type defaults to ALL. - XFF_IP: The first
  // IP address (i.e. the originating client IP address) specified in the list
  // of IPs under X-Forwarded-For HTTP header. If no such header is present or
  // the value is not a valid IP, the key defaults to the source IP address of
  // the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie
  // whose name is configured under "enforceOnKeyName". The key value is
  // truncated to the first 128 bytes of the cookie value. If no such cookie is
  // present in the request, the key type defaults to ALL. - HTTP_PATH: The URL
  // path of the HTTP request. The key value is truncated to the first 128
  // bytes. - SNI: Server name indication in the TLS session of the HTTPS
  // request. The key value is truncated to the first 128 bytes. The key type
  // defaults to ALL on a HTTP session. - REGION_CODE: The country/region from
  // which the request originates.
  // ALL:
  // HTTP_COOKIE:
  // HTTP_HEADER:
  // HTTP_PATH:
  // IP:
  // REGION_CODE:
  // SNI:
  // XFF_IP:
  optional string enforce_on_key = 4;

  // If specified, any combination of values of
  // enforce_on_key_type/enforce_on_key_name is treated as the key on which
  // ratelimit threshold/action is enforced. You can specify up to 3
  // enforce_on_key_configs. If enforce_on_key_configs is specified,
  // enforce_on_key must not be specified.
  repeated SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig
      enforce_on_key_configs = 9;

  // Rate limit key name applicable only for the following key types:
  // HTTP_HEADER -- Name of the HTTP header whose value is taken as the key
  // value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the
  // key value.
  optional string enforce_on_key_name = 5;

  // Action to take for requests that are above the configured rate limit
  // threshold, to either deny with a specified HTTP response code, or redirect
  // to a different endpoint. Valid options are `deny(STATUS)`, where valid
  // values for `STATUS` are 403, 404, 429, and 502, and `redirect`, where the
  // redirect parameters come from `exceedRedirectOptions` below. The `redirect`
  // action is only supported in Global Security Policies of type CLOUD_ARMOR.
  optional string exceed_action = 6;

  // Parameters defining the redirect action that is used as the exceed action.
  // Cannot be specified if the exceed action is not redirect. This field is
  // only supported in Global Security Policies of type CLOUD_ARMOR.
  optional SecurityPolicyRuleRedirectOptions exceed_redirect_options = 7;

  // Threshold at which to begin ratelimiting.
  optional SecurityPolicyRuleRateLimitOptionsThreshold rate_limit_threshold = 8;
}

message SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig {
  // Rate limit key name applicable only for the following key types:
  // HTTP_HEADER -- Name of the HTTP header whose value is taken as the key
  // value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the
  // key value.
  optional string enforce_on_key_name = 1;

  // Determines the key to enforce the rate_limit_threshold on. Possible values
  // are: - ALL: A single rate limit threshold is applied to all the requests
  // matching this rule. This is the default value if "enforceOnKeyConfigs" is
  // not configured. - IP: The source IP address of the request is the key. Each
  // IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP
  // header whose name is configured under "enforceOnKeyName". The key value is
  // truncated to the first 128 bytes of the header value. If no such header is
  // present in the request, the key type defaults to ALL. - XFF_IP: The first
  // IP address (i.e. the originating client IP address) specified in the list
  // of IPs under X-Forwarded-For HTTP header. If no such header is present or
  // the value is not a valid IP, the key defaults to the source IP address of
  // the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie
  // whose name is configured under "enforceOnKeyName". The key value is
  // truncated to the first 128 bytes of the cookie value. If no such cookie is
  // present in the request, the key type defaults to ALL. - HTTP_PATH: The URL
  // path of the HTTP request. The key value is truncated to the first 128
  // bytes. - SNI: Server name indication in the TLS session of the HTTPS
  // request. The key value is truncated to the first 128 bytes. The key type
  // defaults to ALL on a HTTP session. - REGION_CODE: The country/region from
  // which the request originates.
  // ALL:
  // HTTP_COOKIE:
  // HTTP_HEADER:
  // HTTP_PATH:
  // IP:
  // REGION_CODE:
  // SNI:
  // XFF_IP:
  optional string enforce_on_key_type = 2;
}

message SecurityPolicyRuleRateLimitOptionsThreshold {
  // Number of HTTP(S) requests for calculating the threshold.
  optional int32 count = 1;

  // Interval over which the threshold is computed.
  optional int32 interval_sec = 2;
}

message SecurityPolicyRuleRedirectOptions {
  // Target for the redirect action. This is required if the type is
  // EXTERNAL_302 and cannot be specified for GOOGLE_RECAPTCHA.
  optional string target = 1;

  // Type of the redirect action.
  // EXTERNAL_302:
  // GOOGLE_RECAPTCHA:
  optional string type = 2;
}

message SecurityPolicyUserDefinedField {
  // The base relative to which 'offset' is measured. Possible values are: -
  // IPV4: Points to the beginning of the IPv4 header. - IPV6: Points to the
  // beginning of the IPv6 header. - TCP: Points to the beginning of the TCP
  // header, skipping over any IPv4 options or IPv6 extension headers. Not
  // present for non-first fragments. - UDP: Points to the beginning of the UDP
  // header, skipping over any IPv4 options or IPv6 extension headers. Not
  // present for non-first fragments. required
  // IPV4:
  // IPV6:
  // TCP:
  // UDP:
  optional string base = 1;

  // If specified, apply this mask (bitwise AND) to the field to ignore bits
  // before matching. Encoded as a hexadecimal number (starting with "0x"). The
  // last byte of the field (in network byte order) corresponds to the least
  // significant byte of the mask.
  optional string mask = 2;

  // The name of this field. Must be unique within the policy.
  optional string name = 3;

  // Offset of the first byte of the field (in network byte order) relative to
  // 'base'.
  optional int32 offset = 4;

  // Size of the field in bytes. Valid values: 1-4.
  optional int32 size = 5;
}
