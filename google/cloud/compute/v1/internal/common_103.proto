// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20230920

syntax = "proto3";

package google.cloud.cpp.compute.v1;

message ResourcePoliciesScopedList {
  // A list of resourcePolicies contained in this scope.
  repeated ResourcePolicy resource_policies = 1;

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1;

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1;

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2;
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2;

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3;
  }

  // Informational warning which replaces the list of resourcePolicies when the
  // list is empty.
  optional Warning warning = 2;
}

// Represents a Resource Policy resource. You can use resource policies to
// schedule actions for some Compute Engine resources. For example, you can use
// them to schedule persistent disk snapshots.
message ResourcePolicy {
  // [Output Only] Creation timestamp in RFC3339 text format.
  optional string creation_timestamp = 1;

  optional string description = 2;

  // Resource policy for disk consistency groups.
  optional ResourcePolicyDiskConsistencyGroupPolicy
      disk_consistency_group_policy = 13;

  // Resource policy for instances for placement configuration.
  optional ResourcePolicyGroupPlacementPolicy group_placement_policy = 3;

  // [Output Only] The unique identifier for the resource. This identifier is
  // defined by the server.
  optional string id = 4;

  // Resource policy for scheduling instance operations.
  optional ResourcePolicyInstanceSchedulePolicy instance_schedule_policy = 5;

  // [Output Only] Type of the resource. Always compute#resource_policies for
  // resource policies.
  optional string kind = 6;

  // The name of the resource, provided by the client when initially creating
  // the resource. The resource name must be 1-63 characters long, and comply
  // with RFC1035. Specifically, the name must be 1-63 characters long and match
  // the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first
  // character must be a lowercase letter, and all following characters must be
  // a dash, lowercase letter, or digit, except the last character, which cannot
  // be a dash.
  optional string name = 7;

  optional string region = 8;

  // [Output Only] The system status of the resource policy.
  optional ResourcePolicyResourceStatus resource_status = 9;

  // [Output Only] Server-defined fully-qualified URL for this resource.
  optional string self_link = 10;

  // Resource policy for persistent disks for creating snapshots.
  optional ResourcePolicySnapshotSchedulePolicy snapshot_schedule_policy = 11;

  // [Output Only] The status of resource policy creation.
  // CREATING: Resource policy is being created.
  // DELETING: Resource policy is being deleted.
  // EXPIRED: Resource policy is expired and will not run again.
  // INVALID:
  // READY: Resource policy is ready to be used.
  optional string status = 12;
}

// Contains a list of resourcePolicies.
message ResourcePolicyAggregatedList {
  optional string etag = 1;

  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 2;

  // A list of ResourcePolicy resources.
  map<string, ResourcePoliciesScopedList> items = 3;

  // Type of resource.
  optional string kind = 4;

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 5;

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 6;

  // [Output Only] Unreachable resources.
  repeated string unreachables = 7;

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1;

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1;

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2;
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2;

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3;
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 8;
}

// Time window specified for daily operations.
message ResourcePolicyDailyCycle {
  // Defines a schedule with units measured in days. The value determines how
  // many days pass between the start of each cycle.
  optional int32 days_in_cycle = 1;

  // [Output only] A predetermined duration for the window, automatically chosen
  // to be the smallest possible in the given scenario.
  optional string duration = 2;

  // Start time of the window. This must be in UTC format that resolves to one
  // of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5
  // and 08:00 are valid.
  optional string start_time = 3;
}

// Resource policy for disk consistency groups.
message ResourcePolicyDiskConsistencyGroupPolicy {}

// A GroupPlacementPolicy specifies resource placement configuration. It
// specifies the failure bucket separation as well as network locality
message ResourcePolicyGroupPlacementPolicy {
  // The number of availability domains to spread instances across. If two
  // instances are in different availability domain, they are not in the same
  // low latency network.
  optional int32 availability_domain_count = 1;

  // Specifies network collocation
  // COLLOCATED:
  // UNSPECIFIED_COLLOCATION:
  optional string collocation = 2;

  // Number of VMs in this placement group. Google does not recommend that you
  // use this field unless you use a compact policy and you want your policy to
  // work only if it contains this exact number of VMs.
  optional int32 vm_count = 3;
}

// Time window specified for hourly operations.
message ResourcePolicyHourlyCycle {
  // [Output only] Duration of the time window, automatically chosen to be
  // smallest possible in the given scenario.
  optional string duration = 1;

  // Defines a schedule with units measured in hours. The value determines how
  // many hours pass between the start of each cycle.
  optional int32 hours_in_cycle = 2;

  // Time within the window to start the operations. It must be in format
  // "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
  optional string start_time = 3;
}

// An InstanceSchedulePolicy specifies when and how frequent certain operations
// are performed on the instance.
message ResourcePolicyInstanceSchedulePolicy {
  // The expiration time of the schedule. The timestamp is an RFC3339 string.
  optional string expiration_time = 1;

  // The start time of the schedule. The timestamp is an RFC3339 string.
  optional string start_time = 2;

  // Specifies the time zone to be used in interpreting Schedule.schedule. The
  // value of this field must be a time zone name from the tz database:
  // https://wikipedia.org/wiki/Tz_database.
  optional string time_zone = 3;

  // Specifies the schedule for starting instances.
  optional ResourcePolicyInstanceSchedulePolicySchedule vm_start_schedule = 4;

  // Specifies the schedule for stopping instances.
  optional ResourcePolicyInstanceSchedulePolicySchedule vm_stop_schedule = 5;
}

// Schedule for an instance operation.
message ResourcePolicyInstanceSchedulePolicySchedule {
  // Specifies the frequency for the operation, using the unix-cron format.
  optional string schedule = 1;
}

message ResourcePolicyList {
  optional string etag = 1;

  // [Output Only] The unique identifier for the resource. This identifier is
  // defined by the server.
  optional string id = 2;

  // [Output Only] A list of ResourcePolicy resources.
  repeated ResourcePolicy items = 3;

  // [Output Only] Type of resource.Always compute#resourcePoliciesList for
  // listsof resourcePolicies
  optional string kind = 4;

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 5;

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 6;

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1;

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1;

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2;
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2;

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3;
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 7;
}

// Contains output only fields. Use this sub-message for all output fields set
// on ResourcePolicy. The internal structure of this "status" field should mimic
// the structure of ResourcePolicy proto specification.
message ResourcePolicyResourceStatus {
  // [Output Only] Specifies a set of output values reffering to the
  // instance_schedule_policy system status. This field should have the same
  // name as corresponding policy field.
  optional ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
      instance_schedule_policy = 1;
}

message ResourcePolicyResourceStatusInstanceSchedulePolicyStatus {
  // [Output Only] The last time the schedule successfully ran. The timestamp is
  // an RFC3339 string.
  optional string last_run_start_time = 1;

  // [Output Only] The next time the schedule is planned to run. The actual time
  // might be slightly different. The timestamp is an RFC3339 string.
  optional string next_run_start_time = 2;
}

// A snapshot schedule policy specifies when and how frequently snapshots are to
// be created for the target disk. Also specifies how many and how long these
// scheduled snapshots should be retained.
message ResourcePolicySnapshotSchedulePolicy {
  // Retention policy applied to snapshots created by this resource policy.
  optional ResourcePolicySnapshotSchedulePolicyRetentionPolicy
      retention_policy = 1;

  // A Vm Maintenance Policy specifies what kind of infrastructure maintenance
  // we are allowed to perform on this VM and when. Schedule that is applied to
  // disks covered by this policy.
  optional ResourcePolicySnapshotSchedulePolicySchedule schedule = 2;

  // Properties with which snapshots are created such as labels, encryption
  // keys.
  optional ResourcePolicySnapshotSchedulePolicySnapshotProperties
      snapshot_properties = 3;
}

// Policy for retention of scheduled snapshots.
message ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
  // Maximum age of the snapshot that is allowed to be kept.
  optional int32 max_retention_days = 1;

  // Specifies the behavior to apply to scheduled snapshots when the source disk
  // is deleted.
  // APPLY_RETENTION_POLICY:
  // KEEP_AUTO_SNAPSHOTS:
  // UNSPECIFIED_ON_SOURCE_DISK_DELETE:
  optional string on_source_disk_delete = 2;
}

// A schedule for disks where the schedueled operations are performed.
message ResourcePolicySnapshotSchedulePolicySchedule {
  optional ResourcePolicyDailyCycle daily_schedule = 1;

  optional ResourcePolicyHourlyCycle hourly_schedule = 2;

  optional ResourcePolicyWeeklyCycle weekly_schedule = 3;
}

// Specified snapshot properties for scheduled snapshots created by this policy.
message ResourcePolicySnapshotSchedulePolicySnapshotProperties {
  // Chain name that the snapshot is created in.
  optional string chain_name = 1;

  // Indication to perform a 'guest aware' snapshot.
  optional bool guest_flush = 2;

  // Labels to apply to scheduled snapshots. These can be later modified by the
  // setLabels method. Label values may be empty.
  map<string, string> labels = 3;

  // Cloud Storage bucket storage location of the auto snapshot (regional or
  // multi-regional).
  repeated string storage_locations = 4;
}

// Time window specified for weekly operations.
message ResourcePolicyWeeklyCycle {
  // Up to 7 intervals/windows, one for each day of the week.
  repeated ResourcePolicyWeeklyCycleDayOfWeek day_of_weeks = 1;
}

message ResourcePolicyWeeklyCycleDayOfWeek {
  // Defines a schedule that runs on specific days of the week. Specify one or
  // more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY,
  // THURSDAY, FRIDAY, SATURDAY, SUNDAY.
  // FRIDAY:
  // INVALID:
  // MONDAY:
  // SATURDAY:
  // SUNDAY:
  // THURSDAY:
  // TUESDAY:
  // WEDNESDAY:
  optional string day = 1;

  // [Output only] Duration of the time window, automatically chosen to be
  // smallest possible in the given scenario.
  optional string duration = 2;

  // Time within the window to start the operations. It must be in format
  // "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
  optional string start_time = 3;
}
