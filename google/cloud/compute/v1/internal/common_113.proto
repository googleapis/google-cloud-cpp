// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20230920

syntax = "proto3";

package google.cloud.cpp.compute.v1;

// Represents an SSL certificate resource. Google Compute Engine has two SSL
// certificate resources: *
// [Global](/compute/docs/reference/rest/v1/sslCertificates) *
// [Regional](/compute/docs/reference/rest/v1/regionSslCertificates) The global
// SSL certificates (sslCertificates) are used by: - Global external Application
// Load Balancers - Classic Application Load Balancers - Proxy Network Load
// Balancers (with target SSL proxies) The regional SSL certificates
// (regionSslCertificates) are used by: - Regional external Application Load
// Balancers - Regional internal Application Load Balancers Optionally,
// certificate file contents that you upload can contain a set of up to five
// PEM-encoded certificates. The API call creates an object (sslCertificate)
// that holds this data. You can use SSL keys and certificates to secure
// connections to a load balancer. For more information, read Creating and using
// SSL certificates, SSL certificates quotas and limits, and Troubleshooting SSL
// certificates.
message SslCertificate {
  // A value read into memory from a certificate file. The certificate file must
  // be in PEM format. The certificate chain must be no greater than 5 certs
  // long. The chain must include at least one intermediate cert.
  optional string certificate = 1;

  // [Output Only] Creation timestamp in RFC3339 text format.
  optional string creation_timestamp = 2;

  // An optional description of this resource. Provide this property when you
  // create the resource.
  optional string description = 3;

  // [Output Only] Expire time of the certificate. RFC3339
  optional string expire_time = 4;

  // [Output Only] The unique identifier for the resource. This identifier is
  // defined by the server.
  optional string id = 5;

  // [Output Only] Type of the resource. Always compute#sslCertificate for SSL
  // certificates.
  optional string kind = 6;

  // Configuration and status of a managed SSL certificate.
  optional SslCertificateManagedSslCertificate managed = 7;

  // Name of the resource. Provided by the client when the resource is created.
  // The name must be 1-63 characters long, and comply with RFC1035.
  // Specifically, the name must be 1-63 characters long and match the regular
  // expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
  // must be a lowercase letter, and all following characters must be a dash,
  // lowercase letter, or digit, except the last character, which cannot be a
  // dash.
  optional string name = 8;

  // A value read into memory from a write-only private key file. The private
  // key file must be in PEM format. For security, only insert requests include
  // this field.
  optional string private_key = 9;

  // [Output Only] URL of the region where the regional SSL Certificate resides.
  // This field is not applicable to global SSL Certificate.
  optional string region = 10;

  // [Output only] Server-defined URL for the resource.
  optional string self_link = 11;

  // Configuration and status of a self-managed SSL certificate.
  optional SslCertificateSelfManagedSslCertificate self_managed = 12;

  // [Output Only] Domains associated with the certificate via Subject
  // Alternative Name.
  repeated string subject_alternative_names = 13;

  // (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or
  // "MANAGED". If not specified, the certificate is self-managed and the fields
  // certificate and private_key are used.
  // MANAGED: Google-managed SSLCertificate.
  // SELF_MANAGED: Certificate uploaded by user.
  // TYPE_UNSPECIFIED:
  optional string type = 14;
}

// Contains a list of SslCertificate resources.
message SslCertificateList {
  // [Output Only] Unique identifier for the resource; defined by the server.
  optional string id = 1;

  // A list of SslCertificate resources.
  repeated SslCertificate items = 2;

  // Type of resource.
  optional string kind = 3;

  // [Output Only] This token allows you to get the next page of results for
  // list requests. If the number of results is larger than maxResults, use the
  // nextPageToken as a value for the query parameter pageToken in the next list
  // request. Subsequent list requests will have their own nextPageToken to
  // continue paging through the results.
  optional string next_page_token = 4;

  // [Output Only] Server-defined URL for this resource.
  optional string self_link = 5;

  message Warning {
    // [Output Only] A warning code, if applicable. For example, Compute Engine
    // returns NO_RESULTS_ON_PAGE if there are no results in the response.
    // CLEANUP_FAILED: Warning about failed cleanup of transient changes made by
    // a failed operation.
    // DEPRECATED_RESOURCE_USED: A link to a deprecated resource was created.
    // DEPRECATED_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as deprecated
    // DISK_SIZE_LARGER_THAN_IMAGE_SIZE: The user created a boot disk that is
    // larger than image size.
    // EXPERIMENTAL_TYPE_USED: When deploying and at least one of the resources
    // has a type marked as experimental
    // EXTERNAL_API_WARNING: Warning that is present in an external api call
    // FIELD_VALUE_OVERRIDEN: Warning that value of a field has been overridden.
    // Deprecated unused field.
    // INJECTED_KERNELS_DEPRECATED: The operation involved use of an injected
    // kernel, which is deprecated.
    // INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB: A WEIGHTED_MAGLEV backend
    // service is associated with a health check that is not of type
    // HTTP/HTTPS/HTTP2.
    // LARGE_DEPLOYMENT_WARNING: When deploying a deployment with a exceedingly
    // large number of resources
    // LIST_OVERHEAD_QUOTA_EXCEED: Resource can't be retrieved due to list
    // overhead quota exceed which captures the amount of resources filtered out
    // by user-defined list filter.
    // MISSING_TYPE_DEPENDENCY: A resource depends on a missing type
    // NEXT_HOP_ADDRESS_NOT_ASSIGNED: The route's nextHopIp address is not
    // assigned to an instance on the network.
    // NEXT_HOP_CANNOT_IP_FORWARD: The route's next hop instance cannot ip
    // forward.
    // NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE: The route's nextHopInstance URL
    // refers to an instance that does not have an ipv6 interface on the same
    // network as the route.
    // NEXT_HOP_INSTANCE_NOT_FOUND: The route's nextHopInstance URL refers to an
    // instance that does not exist.
    // NEXT_HOP_INSTANCE_NOT_ON_NETWORK: The route's nextHopInstance URL refers
    // to an instance that is not on the same network as the route.
    // NEXT_HOP_NOT_RUNNING: The route's next hop instance does not have a
    // status of RUNNING.
    // NOT_CRITICAL_ERROR: Error which is not critical. We decided to continue
    // the process despite the mentioned error.
    // NO_RESULTS_ON_PAGE: No results are present on a particular list page.
    // PARTIAL_SUCCESS: Success is reported, but some results may be missing due
    // to errors
    // REQUIRED_TOS_AGREEMENT: The user attempted to use a resource that
    // requires a TOS they have not accepted.
    // RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING: Warning that a resource is in
    // use.
    // RESOURCE_NOT_DELETED: One or more of the resources set to auto-delete
    // could not be deleted because they were in use.
    // SCHEMA_VALIDATION_IGNORED: When a resource schema validation is ignored.
    // SINGLE_INSTANCE_PROPERTY_TEMPLATE: Instance template used in instance
    // group manager is valid as such, but its application does not make a lot
    // of sense, because it allows only single instance in instance group.
    // UNDECLARED_PROPERTIES: When undeclared properties in the schema are
    // present
    // UNREACHABLE: A given scope cannot be reached.
    optional string code = 1;

    message DataItem {
      // [Output Only] A key that provides more detail on the warning being
      // returned. For example, for warnings where there are no results in a
      // list request for a particular zone, this key might be scope and the key
      // value might be the zone name. Other examples might be a key indicating
      // a deprecated resource and a suggested replacement, or a warning about
      // invalid network settings (for example, if an instance attempts to
      // perform IP forwarding but is not enabled for IP forwarding).
      optional string key = 1;

      // [Output Only] A warning data value corresponding to the key.
      optional string value = 2;
    }

    // [Output Only] Metadata about this warning in key: value format. For
    // example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
    repeated DataItem data = 2;

    // [Output Only] A human-readable description of the warning code.
    optional string message = 3;
  }

  // [Output Only] Informational warning message.
  optional Warning warning = 6;
}

// Configuration and status of a managed SSL certificate.
message SslCertificateManagedSslCertificate {
  // [Output only] Detailed statuses of the domains specified for managed
  // certificate resource.
  map<string, string> domain_status = 1;

  // The domains for which a managed SSL certificate will be generated. Each
  // Google-managed SSL certificate supports up to the [maximum number of
  // domains per Google-managed SSL
  // certificate](/load-balancing/docs/quotas#ssl_certificates).
  repeated string domains = 2;

  // [Output only] Status of the managed certificate resource.
  // ACTIVE: The certificate management is working, and a certificate has been
  // provisioned.
  // MANAGED_CERTIFICATE_STATUS_UNSPECIFIED:
  // PROVISIONING: The certificate management is working. GCP will attempt to
  // provision the first certificate.
  // PROVISIONING_FAILED: Certificate provisioning failed due to an issue with
  // the DNS or load balancing configuration. For details of which domain
  // failed, consult domain_status field.
  // PROVISIONING_FAILED_PERMANENTLY: Certificate provisioning failed due to an
  // issue with the DNS or load balancing configuration. It won't be retried. To
  // try again delete and create a new managed SslCertificate resource. For
  // details of which domain failed, consult domain_status field.
  // RENEWAL_FAILED: Renewal of the certificate has failed due to an issue with
  // the DNS or load balancing configuration. The existing cert is still
  // serving; however, it will expire shortly. To provision a renewed
  // certificate, delete and create a new managed SslCertificate resource. For
  // details on which domain failed, consult domain_status field.
  optional string status = 3;
}

// Configuration and status of a self-managed SSL certificate.
message SslCertificateSelfManagedSslCertificate {
  // A local certificate file. The certificate must be in PEM format. The
  // certificate chain must be no greater than 5 certs long. The chain must
  // include at least one intermediate cert.
  optional string certificate = 1;

  // A write-only private key in PEM format. Only insert requests will include
  // this field.
  optional string private_key = 2;
}
