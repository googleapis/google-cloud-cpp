// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/network_endpoint_groups/v1/network_endpoint_groups.proto

#include "google/cloud/compute/network_endpoint_groups/v1/internal/network_endpoint_groups_rest_connection_impl.h"
#include "google/cloud/compute/network_endpoint_groups/v1/internal/network_endpoint_groups_rest_stub_factory.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_network_endpoint_groups_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

NetworkEndpointGroupsRestConnectionImpl::
    NetworkEndpointGroupsRestConnectionImpl(
        std::unique_ptr<google::cloud::BackgroundThreads> background,
        std::shared_ptr<compute_network_endpoint_groups_v1_internal::
                            NetworkEndpointGroupsRestStub>
            stub,
        Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(
          std::move(options), NetworkEndpointGroupsConnection::options())) {}

StatusOr<google::cloud::cpp::compute::v1::NetworkEndpointGroupAggregatedList>
NetworkEndpointGroupsRestConnectionImpl::AggregatedListNetworkEndpointGroups(
    google::cloud::cpp::compute::networkEndpointGroups::v1::
        AggregatedListNetworkEndpointGroupsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AggregatedListNetworkEndpointGroups(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networkEndpointGroups::v1::
                 AggregatedListNetworkEndpointGroupsRequest const& request) {
        return stub_->AggregatedListNetworkEndpointGroups(rest_context,
                                                          request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworkEndpointGroupsRestConnectionImpl::AttachNetworkEndpoints(
    google::cloud::cpp::compute::networkEndpointGroups::v1::
        AttachNetworkEndpointsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AttachNetworkEndpoints(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networkEndpointGroups::v1::
                 AttachNetworkEndpointsRequest const& request) {
        return stub_->AttachNetworkEndpoints(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworkEndpointGroupsRestConnectionImpl::DeleteNetworkEndpointGroups(
    google::cloud::cpp::compute::networkEndpointGroups::v1::
        DeleteNetworkEndpointGroupsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteNetworkEndpointGroups(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networkEndpointGroups::v1::
                 DeleteNetworkEndpointGroupsRequest const& request) {
        return stub_->DeleteNetworkEndpointGroups(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworkEndpointGroupsRestConnectionImpl::DetachNetworkEndpoints(
    google::cloud::cpp::compute::networkEndpointGroups::v1::
        DetachNetworkEndpointsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DetachNetworkEndpoints(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networkEndpointGroups::v1::
                 DetachNetworkEndpointsRequest const& request) {
        return stub_->DetachNetworkEndpoints(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::NetworkEndpointGroup>
NetworkEndpointGroupsRestConnectionImpl::GetNetworkEndpointGroups(
    google::cloud::cpp::compute::networkEndpointGroups::v1::
        GetNetworkEndpointGroupsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetNetworkEndpointGroups(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networkEndpointGroups::v1::
                 GetNetworkEndpointGroupsRequest const& request) {
        return stub_->GetNetworkEndpointGroups(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
NetworkEndpointGroupsRestConnectionImpl::InsertNetworkEndpointGroups(
    google::cloud::cpp::compute::networkEndpointGroups::v1::
        InsertNetworkEndpointGroupsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->InsertNetworkEndpointGroups(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networkEndpointGroups::v1::
                 InsertNetworkEndpointGroupsRequest const& request) {
        return stub_->InsertNetworkEndpointGroups(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::cpp::compute::v1::NetworkEndpointGroup>
NetworkEndpointGroupsRestConnectionImpl::ListNetworkEndpointGroups(
    google::cloud::cpp::compute::networkEndpointGroups::v1::
        ListNetworkEndpointGroupsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<compute_network_endpoint_groups_v1::
                                   NetworkEndpointGroupsRetryPolicy const>(
      retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListNetworkEndpointGroups(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::NetworkEndpointGroup>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::networkEndpointGroups::v1::
                          ListNetworkEndpointGroupsRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::networkEndpointGroups::v1::
                       ListNetworkEndpointGroupsRequest const& request) {
              return stub->ListNetworkEndpointGroups(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::NetworkEndpointGroupList r) {
        std::vector<google::cloud::cpp::compute::v1::NetworkEndpointGroup>
            result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StreamRange<google::cloud::cpp::compute::v1::NetworkEndpointWithHealthStatus>
NetworkEndpointGroupsRestConnectionImpl::ListNetworkEndpoints(
    google::cloud::cpp::compute::networkEndpointGroups::v1::
        ListNetworkEndpointsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<compute_network_endpoint_groups_v1::
                                   NetworkEndpointGroupsRetryPolicy const>(
      retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListNetworkEndpoints(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<StreamRange<
      google::cloud::cpp::compute::v1::NetworkEndpointWithHealthStatus>>(
      std::move(request),
      [stub, retry, backoff, idempotency,
       function_name](google::cloud::cpp::compute::networkEndpointGroups::v1::
                          ListNetworkEndpointsRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::networkEndpointGroups::v1::
                       ListNetworkEndpointsRequest const& request) {
              return stub->ListNetworkEndpoints(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::
             NetworkEndpointGroupsListNetworkEndpoints r) {
        std::vector<
            google::cloud::cpp::compute::v1::NetworkEndpointWithHealthStatus>
            result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
NetworkEndpointGroupsRestConnectionImpl::TestIamPermissions(
    google::cloud::cpp::compute::networkEndpointGroups::v1::
        TestIamPermissionsRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->TestIamPermissions(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::networkEndpointGroups::v1::
                 TestIamPermissionsRequest const& request) {
        return stub_->TestIamPermissions(rest_context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_network_endpoint_groups_v1_internal
}  // namespace cloud
}  // namespace google
