// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/licenses/v1/licenses.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_LICENSES_V1_LICENSES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_LICENSES_V1_LICENSES_CLIENT_H

#include "google/cloud/compute/licenses/v1/licenses_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_licenses_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the licenses resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/licenses
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class LicensesClient {
 public:
  explicit LicensesClient(ExperimentalTag,
                          std::shared_ptr<LicensesConnection> connection,
                          Options opts = {});
  ~LicensesClient();

  ///@{
  /// @name Copy and move support
  LicensesClient(LicensesClient const&) = default;
  LicensesClient& operator=(LicensesClient const&) = default;
  LicensesClient(LicensesClient&&) = default;
  LicensesClient& operator=(LicensesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(LicensesClient const& a, LicensesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(LicensesClient const& a, LicensesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified license. *Caution* This resource is intended for use
  /// only by third-party partners who are creating Cloud Marketplace images.
  ///
  /// @param project  Project ID for this request.
  /// @param license  Name of the license resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.DeleteLicensesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L126}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteLicenses(
      std::string const& project, std::string const& license,
      Options opts = {});

  ///
  /// Deletes the specified license. *Caution* This resource is intended for use
  /// only by third-party partners who are creating Cloud Marketplace images.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::licenses::v1::DeleteLicensesRequest,google/cloud/compute/licenses/v1/licenses.proto#L126}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.DeleteLicensesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L126}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteLicenses(
      google::cloud::cpp::compute::licenses::v1::DeleteLicensesRequest const&
          request,
      Options opts = {});

  ///
  /// Returns the specified License resource. *Caution* This resource is
  /// intended for use only by third-party partners who are creating Cloud
  /// Marketplace images.
  ///
  /// @param project  Project ID for this request.
  /// @param license  Name of the License resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::License,google/cloud/compute/v1/internal/common.proto#L13062}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.GetLicensesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L162}
  /// [google.cloud.cpp.compute.v1.License]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L13062}
  ///
  StatusOr<google::cloud::cpp::compute::v1::License> GetLicenses(
      std::string const& project, std::string const& license,
      Options opts = {});

  ///
  /// Returns the specified License resource. *Caution* This resource is
  /// intended for use only by third-party partners who are creating Cloud
  /// Marketplace images.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::licenses::v1::GetLicensesRequest,google/cloud/compute/licenses/v1/licenses.proto#L162}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::License,google/cloud/compute/v1/internal/common.proto#L13062}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.GetLicensesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L162}
  /// [google.cloud.cpp.compute.v1.License]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L13062}
  ///
  StatusOr<google::cloud::cpp::compute::v1::License> GetLicenses(
      google::cloud::cpp::compute::licenses::v1::GetLicensesRequest const&
          request,
      Options opts = {});

  ///
  /// Gets the access control policy for a resource. May be empty if no such
  /// policy or resource exists. *Caution* This resource is intended for use
  /// only by third-party partners who are creating Cloud Marketplace images.
  ///
  /// @param project  Project ID for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.GetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L150}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> GetIamPolicy(
      std::string const& project, std::string const& resource,
      Options opts = {});

  ///
  /// Gets the access control policy for a resource. May be empty if no such
  /// policy or resource exists. *Caution* This resource is intended for use
  /// only by third-party partners who are creating Cloud Marketplace images.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::licenses::v1::GetIamPolicyRequest,google/cloud/compute/licenses/v1/licenses.proto#L150}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.GetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L150}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> GetIamPolicy(
      google::cloud::cpp::compute::licenses::v1::GetIamPolicyRequest const&
          request,
      Options opts = {});

  ///
  /// Create a License resource in the specified project. *Caution* This
  /// resource is intended for use only by third-party partners who are creating
  /// Cloud Marketplace images.
  ///
  /// @param project  Project ID for this request.
  /// @param license_resource  The License for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.InsertLicensesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L171}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertLicenses(
      std::string const& project,
      google::cloud::cpp::compute::v1::License const& license_resource,
      Options opts = {});

  ///
  /// Create a License resource in the specified project. *Caution* This
  /// resource is intended for use only by third-party partners who are creating
  /// Cloud Marketplace images.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::licenses::v1::InsertLicensesRequest,google/cloud/compute/licenses/v1/licenses.proto#L171}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.InsertLicensesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L171}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertLicenses(
      google::cloud::cpp::compute::licenses::v1::InsertLicensesRequest const&
          request,
      Options opts = {});

  ///
  /// Retrieves the list of licenses available in the specified project. This
  /// method does not get any licenses that belong to other projects, including
  /// licenses attached to publicly-available images, like Debian 9. If you want
  /// to get a list of publicly-available licenses, use this method to make a
  /// request to the respective image project, such as debian-cloud or
  /// windows-cloud. *Caution* This resource is intended for use only by
  /// third-party partners who are creating Cloud Marketplace images.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::License,google/cloud/compute/v1/internal/common.proto#L13062}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.ListLicensesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L195}
  /// [google.cloud.cpp.compute.v1.License]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L13062}
  ///
  StreamRange<google::cloud::cpp::compute::v1::License> ListLicenses(
      std::string const& project, Options opts = {});

  ///
  /// Retrieves the list of licenses available in the specified project. This
  /// method does not get any licenses that belong to other projects, including
  /// licenses attached to publicly-available images, like Debian 9. If you want
  /// to get a list of publicly-available licenses, use this method to make a
  /// request to the respective image project, such as debian-cloud or
  /// windows-cloud. *Caution* This resource is intended for use only by
  /// third-party partners who are creating Cloud Marketplace images.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::licenses::v1::ListLicensesRequest,google/cloud/compute/licenses/v1/licenses.proto#L195}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::License,google/cloud/compute/v1/internal/common.proto#L13062}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.ListLicensesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L195}
  /// [google.cloud.cpp.compute.v1.License]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L13062}
  ///
  StreamRange<google::cloud::cpp::compute::v1::License> ListLicenses(
      google::cloud::cpp::compute::licenses::v1::ListLicensesRequest request,
      Options opts = {});

  ///
  /// Sets the access control policy on the specified resource. Replaces any
  /// existing policy. *Caution* This resource is intended for use only by
  /// third-party partners who are creating Cloud Marketplace images.
  ///
  /// @param project  Project ID for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param global_set_policy_request_resource  The GlobalSetPolicyRequest for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.SetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L260}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> SetIamPolicy(
      std::string const& project, std::string const& resource,
      google::cloud::cpp::compute::v1::GlobalSetPolicyRequest const&
          global_set_policy_request_resource,
      Options opts = {});

  ///
  /// Sets the access control policy on the specified resource. Replaces any
  /// existing policy. *Caution* This resource is intended for use only by
  /// third-party partners who are creating Cloud Marketplace images.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::licenses::v1::SetIamPolicyRequest,google/cloud/compute/licenses/v1/licenses.proto#L260}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.SetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L260}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> SetIamPolicy(
      google::cloud::cpp::compute::licenses::v1::SetIamPolicyRequest const&
          request,
      Options opts = {});

  ///
  /// Returns permissions that a caller has on the specified resource. *Caution*
  /// This resource is intended for use only by third-party partners who are
  /// creating Cloud Marketplace images.
  ///
  /// @param project  Project ID for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param test_permissions_request_resource  The TestPermissionsRequest for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TestPermissionsResponse,google/cloud/compute/v1/internal/common.proto#L28939}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.TestIamPermissionsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L273}
  /// [google.cloud.cpp.compute.v1.TestPermissionsResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28939}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
  TestIamPermissions(
      std::string const& project, std::string const& resource,
      google::cloud::cpp::compute::v1::TestPermissionsRequest const&
          test_permissions_request_resource,
      Options opts = {});

  ///
  /// Returns permissions that a caller has on the specified resource. *Caution*
  /// This resource is intended for use only by third-party partners who are
  /// creating Cloud Marketplace images.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::licenses::v1::TestIamPermissionsRequest,google/cloud/compute/licenses/v1/licenses.proto#L273}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TestPermissionsResponse,google/cloud/compute/v1/internal/common.proto#L28939}
  ///
  /// [google.cloud.cpp.compute.licenses.v1.TestIamPermissionsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/licenses/v1/licenses.proto#L273}
  /// [google.cloud.cpp.compute.v1.TestPermissionsResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28939}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
  TestIamPermissions(google::cloud::cpp::compute::licenses::v1::
                         TestIamPermissionsRequest const& request,
                     Options opts = {});

 private:
  std::shared_ptr<LicensesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_licenses_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_LICENSES_V1_LICENSES_CLIENT_H
