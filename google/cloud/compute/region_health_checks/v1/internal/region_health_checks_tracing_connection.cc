// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_health_checks/v1/region_health_checks.proto

#include "google/cloud/compute/region_health_checks/v1/internal/region_health_checks_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_health_checks_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

RegionHealthChecksTracingConnection::RegionHealthChecksTracingConnection(
    std::shared_ptr<
        compute_region_health_checks_v1::RegionHealthChecksConnection>
        child)
    : child_(std::move(child)) {}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionHealthChecksTracingConnection::DeleteRegionHealthCheck(
    google::cloud::cpp::compute::region_health_checks::v1::
        DeleteRegionHealthCheckRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_region_health_checks_v1::RegionHealthChecksConnection::"
      "DeleteRegionHealthCheck");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeleteRegionHealthCheck(request));
}

StatusOr<google::cloud::cpp::compute::v1::HealthCheck>
RegionHealthChecksTracingConnection::GetRegionHealthCheck(
    google::cloud::cpp::compute::region_health_checks::v1::
        GetRegionHealthCheckRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_region_health_checks_v1::RegionHealthChecksConnection::"
      "GetRegionHealthCheck");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRegionHealthCheck(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionHealthChecksTracingConnection::InsertRegionHealthCheck(
    google::cloud::cpp::compute::region_health_checks::v1::
        InsertRegionHealthCheckRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_region_health_checks_v1::RegionHealthChecksConnection::"
      "InsertRegionHealthCheck");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span),
                           child_->InsertRegionHealthCheck(request));
}

StreamRange<google::cloud::cpp::compute::v1::HealthCheck>
RegionHealthChecksTracingConnection::ListRegionHealthChecks(
    google::cloud::cpp::compute::region_health_checks::v1::
        ListRegionHealthChecksRequest request) {
  auto span = internal::MakeSpan(
      "compute_region_health_checks_v1::RegionHealthChecksConnection::"
      "ListRegionHealthChecks");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListRegionHealthChecks(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::cpp::compute::v1::HealthCheck>(std::move(span),
                                                    std::move(sr));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionHealthChecksTracingConnection::PatchRegionHealthCheck(
    google::cloud::cpp::compute::region_health_checks::v1::
        PatchRegionHealthCheckRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_region_health_checks_v1::RegionHealthChecksConnection::"
      "PatchRegionHealthCheck");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span),
                           child_->PatchRegionHealthCheck(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionHealthChecksTracingConnection::UpdateRegionHealthCheck(
    google::cloud::cpp::compute::region_health_checks::v1::
        UpdateRegionHealthCheckRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_region_health_checks_v1::RegionHealthChecksConnection::"
      "UpdateRegionHealthCheck");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span),
                           child_->UpdateRegionHealthCheck(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<compute_region_health_checks_v1::RegionHealthChecksConnection>
MakeRegionHealthChecksTracingConnection(
    std::shared_ptr<
        compute_region_health_checks_v1::RegionHealthChecksConnection>
        conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn =
        std::make_shared<RegionHealthChecksTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_health_checks_v1_internal
}  // namespace cloud
}  // namespace google
