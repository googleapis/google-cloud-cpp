// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/disks/v1/disks.proto

#include "google/cloud/compute/disks/v1/internal/disks_rest_metadata_decorator.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/absl_str_join_quiet.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/status_or.h"
#include "absl/strings/str_format.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace compute_disks_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DisksRestMetadata::DisksRestMetadata(std::shared_ptr<DisksRestStub> child,
                                     std::string api_client_header)
    : child_(std::move(child)),
      api_client_header_(
          api_client_header.empty()
              ? google::cloud::internal::GeneratedLibClientHeader()
              : std::move(api_client_header)) {}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncAddResourcePolicies(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::AddResourcePoliciesRequest const&
        request) {
  SetMetadata(*rest_context);
  return child_->AsyncAddResourcePolicies(cq, std::move(rest_context), request);
}

StatusOr<google::cloud::cpp::compute::v1::DiskAggregatedList>
DisksRestMetadata::AggregatedListDisks(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::disks::v1::AggregatedListDisksRequest const&
        request) {
  SetMetadata(rest_context);
  return child_->AggregatedListDisks(rest_context, request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncBulkInsert(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::BulkInsertRequest const& request) {
  SetMetadata(*rest_context);
  return child_->AsyncBulkInsert(cq, std::move(rest_context), request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncCreateSnapshot(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::CreateSnapshotRequest const&
        request) {
  SetMetadata(*rest_context);
  return child_->AsyncCreateSnapshot(cq, std::move(rest_context), request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncDeleteDisk(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::DeleteDiskRequest const& request) {
  SetMetadata(*rest_context);
  return child_->AsyncDeleteDisk(cq, std::move(rest_context), request);
}

StatusOr<google::cloud::cpp::compute::v1::Disk> DisksRestMetadata::GetDisk(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::disks::v1::GetDiskRequest const& request) {
  SetMetadata(rest_context);
  return child_->GetDisk(rest_context, request);
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DisksRestMetadata::GetIamPolicy(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::disks::v1::GetIamPolicyRequest const&
        request) {
  SetMetadata(rest_context);
  return child_->GetIamPolicy(rest_context, request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncInsertDisk(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::InsertDiskRequest const& request) {
  SetMetadata(*rest_context);
  return child_->AsyncInsertDisk(cq, std::move(rest_context), request);
}

StatusOr<google::cloud::cpp::compute::v1::DiskList>
DisksRestMetadata::ListDisks(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::disks::v1::ListDisksRequest const& request) {
  SetMetadata(rest_context);
  return child_->ListDisks(rest_context, request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncRemoveResourcePolicies(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::RemoveResourcePoliciesRequest const&
        request) {
  SetMetadata(*rest_context);
  return child_->AsyncRemoveResourcePolicies(cq, std::move(rest_context),
                                             request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncResize(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::ResizeRequest const& request) {
  SetMetadata(*rest_context);
  return child_->AsyncResize(cq, std::move(rest_context), request);
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DisksRestMetadata::SetIamPolicy(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::disks::v1::SetIamPolicyRequest const&
        request) {
  SetMetadata(rest_context);
  return child_->SetIamPolicy(rest_context, request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncSetLabels(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::SetLabelsRequest const& request) {
  SetMetadata(*rest_context);
  return child_->AsyncSetLabels(cq, std::move(rest_context), request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncStartAsyncReplication(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::StartAsyncReplicationRequest const&
        request) {
  SetMetadata(*rest_context);
  return child_->AsyncStartAsyncReplication(cq, std::move(rest_context),
                                            request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncStopAsyncReplication(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::StopAsyncReplicationRequest const&
        request) {
  SetMetadata(*rest_context);
  return child_->AsyncStopAsyncReplication(cq, std::move(rest_context),
                                           request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncStopGroupAsyncReplication(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::
        StopGroupAsyncReplicationRequest const& request) {
  SetMetadata(*rest_context);
  return child_->AsyncStopGroupAsyncReplication(cq, std::move(rest_context),
                                                request);
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
DisksRestMetadata::TestIamPermissions(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::disks::v1::TestIamPermissionsRequest const&
        request) {
  SetMetadata(rest_context);
  return child_->TestIamPermissions(rest_context, request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncUpdateDisk(
    CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::disks::v1::UpdateDiskRequest const& request) {
  SetMetadata(*rest_context);
  return child_->AsyncUpdateDisk(cq, std::move(rest_context), request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
DisksRestMetadata::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::zone_operations::v1::GetOperationRequest const&
        request) {
  SetMetadata(*rest_context);
  return child_->AsyncGetOperation(cq, std::move(rest_context), request);
}

future<Status> DisksRestMetadata::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<rest_internal::RestContext> rest_context,
    google::cloud::cpp::compute::zone_operations::v1::
        DeleteOperationRequest const& request) {
  SetMetadata(*rest_context);
  return child_->AsyncCancelOperation(cq, std::move(rest_context), request);
}

void DisksRestMetadata::SetMetadata(rest_internal::RestContext& rest_context,
                                    std::vector<std::string> const& params) {
  rest_context.AddHeader("x-goog-api-client", api_client_header_);
  if (!params.empty()) {
    rest_context.AddHeader("x-goog-request-params", absl::StrJoin(params, "&"));
  }
  auto const& options = internal::CurrentOptions();
  if (options.has<UserProjectOption>()) {
    rest_context.AddHeader("x-goog-user-project",
                           options.get<UserProjectOption>());
  }
  if (options.has<google::cloud::QuotaUserOption>()) {
    rest_context.AddHeader("x-goog-quota-user",
                           options.get<google::cloud::QuotaUserOption>());
  }
  if (options.has<google::cloud::ServerTimeoutOption>()) {
    auto ms_rep = absl::StrCat(
        absl::Dec(options.get<google::cloud::ServerTimeoutOption>().count(),
                  absl::kZeroPad4));
    rest_context.AddHeader("x-server-timeout",
                           ms_rep.insert(ms_rep.size() - 3, "."));
  }
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_disks_v1_internal
}  // namespace cloud
}  // namespace google
