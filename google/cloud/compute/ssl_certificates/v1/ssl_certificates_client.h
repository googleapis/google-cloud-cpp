// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_SSL_CERTIFICATES_V1_SSL_CERTIFICATES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_SSL_CERTIFICATES_V1_SSL_CERTIFICATES_CLIENT_H

#include "google/cloud/compute/ssl_certificates/v1/ssl_certificates_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_ssl_certificates_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the sslCertificates resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/sslCertificates
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class SslCertificatesClient {
 public:
  explicit SslCertificatesClient(
      ExperimentalTag, std::shared_ptr<SslCertificatesConnection> connection,
      Options opts = {});
  ~SslCertificatesClient();

  ///@{
  /// @name Copy and move support
  SslCertificatesClient(SslCertificatesClient const&) = default;
  SslCertificatesClient& operator=(SslCertificatesClient const&) = default;
  SslCertificatesClient(SslCertificatesClient&&) = default;
  SslCertificatesClient& operator=(SslCertificatesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(SslCertificatesClient const& a,
                         SslCertificatesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(SslCertificatesClient const& a,
                         SslCertificatesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves the list of all SslCertificate resources, regional and global,
  /// available to the specified project.
  ///
  /// @param project  Name of the project scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslCertificateAggregatedList,google/cloud/compute/v1/internal/common.proto#L24836}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.AggregatedListSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L82}
  /// [google.cloud.cpp.compute.v1.SslCertificateAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L24836}
  ///
  StatusOr<google::cloud::cpp::compute::v1::SslCertificateAggregatedList>
  AggregatedListSslCertificates(std::string const& project, Options opts = {});

  ///
  /// Retrieves the list of all SslCertificate resources, regional and global,
  /// available to the specified project.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::sslCertificates::v1::AggregatedListSslCertificatesRequest,google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L82}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslCertificateAggregatedList,google/cloud/compute/v1/internal/common.proto#L24836}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.AggregatedListSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L82}
  /// [google.cloud.cpp.compute.v1.SslCertificateAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L24836}
  ///
  StatusOr<google::cloud::cpp::compute::v1::SslCertificateAggregatedList>
  AggregatedListSslCertificates(
      google::cloud::cpp::compute::sslCertificates::v1::
          AggregatedListSslCertificatesRequest const& request,
      Options opts = {});

  ///
  /// Deletes the specified SslCertificate resource.
  ///
  /// @param project  Project ID for this request.
  /// @param ssl_certificate  Name of the SslCertificate resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.DeleteSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L156}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteSslCertificates(
      std::string const& project, std::string const& ssl_certificate,
      Options opts = {});

  ///
  /// Deletes the specified SslCertificate resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::sslCertificates::v1::DeleteSslCertificatesRequest,google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L156}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.DeleteSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L156}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteSslCertificates(
      google::cloud::cpp::compute::sslCertificates::v1::
          DeleteSslCertificatesRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified SslCertificate resource.
  ///
  /// @param project  Project ID for this request.
  /// @param ssl_certificate  Name of the SslCertificate resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslCertificate,google/cloud/compute/v1/internal/common.proto#L24772}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.GetSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L177}
  /// [google.cloud.cpp.compute.v1.SslCertificate]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L24772}
  ///
  StatusOr<google::cloud::cpp::compute::v1::SslCertificate> GetSslCertificates(
      std::string const& project, std::string const& ssl_certificate,
      Options opts = {});

  ///
  /// Returns the specified SslCertificate resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::sslCertificates::v1::GetSslCertificatesRequest,google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L177}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslCertificate,google/cloud/compute/v1/internal/common.proto#L24772}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.GetSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L177}
  /// [google.cloud.cpp.compute.v1.SslCertificate]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L24772}
  ///
  StatusOr<google::cloud::cpp::compute::v1::SslCertificate> GetSslCertificates(
      google::cloud::cpp::compute::sslCertificates::v1::
          GetSslCertificatesRequest const& request,
      Options opts = {});

  ///
  /// Creates a SslCertificate resource in the specified project using the data
  /// included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param ssl_certificate_resource  The SslCertificate for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.InsertSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L186}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertSslCertificates(
      std::string const& project,
      google::cloud::cpp::compute::v1::SslCertificate const&
          ssl_certificate_resource,
      Options opts = {});

  ///
  /// Creates a SslCertificate resource in the specified project using the data
  /// included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::sslCertificates::v1::InsertSslCertificatesRequest,google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L186}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.InsertSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L186}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertSslCertificates(
      google::cloud::cpp::compute::sslCertificates::v1::
          InsertSslCertificatesRequest const& request,
      Options opts = {});

  ///
  /// Retrieves the list of SslCertificate resources available to the specified
  /// project.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslCertificate,google/cloud/compute/v1/internal/common.proto#L24772}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.ListSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L207}
  /// [google.cloud.cpp.compute.v1.SslCertificate]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L24772}
  ///
  StreamRange<google::cloud::cpp::compute::v1::SslCertificate>
  ListSslCertificates(std::string const& project, Options opts = {});

  ///
  /// Retrieves the list of SslCertificate resources available to the specified
  /// project.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::sslCertificates::v1::ListSslCertificatesRequest,google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L207}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::SslCertificate,google/cloud/compute/v1/internal/common.proto#L24772}
  ///
  /// [google.cloud.cpp.compute.sslCertificates.v1.ListSslCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/ssl_certificates/v1/ssl_certificates.proto#L207}
  /// [google.cloud.cpp.compute.v1.SslCertificate]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L24772}
  ///
  StreamRange<google::cloud::cpp::compute::v1::SslCertificate>
  ListSslCertificates(google::cloud::cpp::compute::sslCertificates::v1::
                          ListSslCertificatesRequest request,
                      Options opts = {});

 private:
  std::shared_ptr<SslCertificatesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_ssl_certificates_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_SSL_CERTIFICATES_V1_SSL_CERTIFICATES_CLIENT_H
