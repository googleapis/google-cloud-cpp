// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/network_attachments/v1/network_attachments.proto

#include "google/cloud/compute/network_attachments/v1/network_attachments_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_network_attachments_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

NetworkAttachmentsConnectionIdempotencyPolicy::
    ~NetworkAttachmentsConnectionIdempotencyPolicy() = default;

std::unique_ptr<NetworkAttachmentsConnectionIdempotencyPolicy>
NetworkAttachmentsConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<NetworkAttachmentsConnectionIdempotencyPolicy>(*this);
}

Idempotency
NetworkAttachmentsConnectionIdempotencyPolicy::AggregatedListNetworkAttachments(
    google::cloud::cpp::compute::network_attachments::v1::
        AggregatedListNetworkAttachmentsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency
NetworkAttachmentsConnectionIdempotencyPolicy::DeleteNetworkAttachment(
    google::cloud::cpp::compute::network_attachments::v1::
        DeleteNetworkAttachmentRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency NetworkAttachmentsConnectionIdempotencyPolicy::GetNetworkAttachment(
    google::cloud::cpp::compute::network_attachments::v1::
        GetNetworkAttachmentRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency NetworkAttachmentsConnectionIdempotencyPolicy::GetIamPolicy(
    google::cloud::cpp::compute::network_attachments::v1::
        GetIamPolicyRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
NetworkAttachmentsConnectionIdempotencyPolicy::InsertNetworkAttachment(
    google::cloud::cpp::compute::network_attachments::v1::
        InsertNetworkAttachmentRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
NetworkAttachmentsConnectionIdempotencyPolicy::ListNetworkAttachments(
    google::cloud::cpp::compute::network_attachments::v1::
        ListNetworkAttachmentsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency
NetworkAttachmentsConnectionIdempotencyPolicy::PatchNetworkAttachment(
    google::cloud::cpp::compute::network_attachments::v1::
        PatchNetworkAttachmentRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency NetworkAttachmentsConnectionIdempotencyPolicy::SetIamPolicy(
    google::cloud::cpp::compute::network_attachments::v1::
        SetIamPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency NetworkAttachmentsConnectionIdempotencyPolicy::TestIamPermissions(
    google::cloud::cpp::compute::network_attachments::v1::
        TestIamPermissionsRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<NetworkAttachmentsConnectionIdempotencyPolicy>
MakeDefaultNetworkAttachmentsConnectionIdempotencyPolicy() {
  return std::make_unique<NetworkAttachmentsConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_network_attachments_v1
}  // namespace cloud
}  // namespace google
