// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_commitments/v1/region_commitments.proto

#include "google/cloud/compute/region_commitments/v1/region_commitments_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_commitments_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegionCommitmentsClient::RegionCommitmentsClient(ExperimentalTag,
    std::shared_ptr<RegionCommitmentsConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(internal::MergeOptions(std::move(opts),
      connection_->options())) {}
RegionCommitmentsClient::~RegionCommitmentsClient() = default;

StatusOr<google::cloud::cpp::compute::v1::CommitmentAggregatedList>
RegionCommitmentsClient::AggregatedListRegionCommitments(std::string const& project, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_commitments::v1::AggregatedListRegionCommitmentsRequest request;
  request.set_project(project);
  return connection_->AggregatedListRegionCommitments(request);
}

StatusOr<google::cloud::cpp::compute::v1::CommitmentAggregatedList>
RegionCommitmentsClient::AggregatedListRegionCommitments(google::cloud::cpp::compute::region_commitments::v1::AggregatedListRegionCommitmentsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->AggregatedListRegionCommitments(request);
}

StatusOr<google::cloud::cpp::compute::v1::Commitment>
RegionCommitmentsClient::GetRegionCommitments(std::string const& project, std::string const& region, std::string const& commitment, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_commitments::v1::GetRegionCommitmentsRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_commitment(commitment);
  return connection_->GetRegionCommitments(request);
}

StatusOr<google::cloud::cpp::compute::v1::Commitment>
RegionCommitmentsClient::GetRegionCommitments(google::cloud::cpp::compute::region_commitments::v1::GetRegionCommitmentsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRegionCommitments(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionCommitmentsClient::InsertRegionCommitments(std::string const& project, std::string const& region, google::cloud::cpp::compute::v1::Commitment const& commitment_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_commitments::v1::InsertRegionCommitmentsRequest request;
  request.set_project(project);
  request.set_region(region);
  *request.mutable_commitment_resource() = commitment_resource;
  return connection_->InsertRegionCommitments(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionCommitmentsClient::InsertRegionCommitments(google::cloud::cpp::compute::region_commitments::v1::InsertRegionCommitmentsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertRegionCommitments(request);
}

StreamRange<google::cloud::cpp::compute::v1::Commitment>
RegionCommitmentsClient::ListRegionCommitments(std::string const& project, std::string const& region, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_commitments::v1::ListRegionCommitmentsRequest request;
  request.set_project(project);
  request.set_region(region);
  return connection_->ListRegionCommitments(request);
}

StreamRange<google::cloud::cpp::compute::v1::Commitment>
RegionCommitmentsClient::ListRegionCommitments(google::cloud::cpp::compute::region_commitments::v1::ListRegionCommitmentsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRegionCommitments(std::move(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionCommitmentsClient::UpdateRegionCommitments(std::string const& project, std::string const& region, std::string const& commitment, google::cloud::cpp::compute::v1::Commitment const& commitment_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::region_commitments::v1::UpdateRegionCommitmentsRequest request;
  request.set_project(project);
  request.set_region(region);
  request.set_commitment(commitment);
  *request.mutable_commitment_resource() = commitment_resource;
  return connection_->UpdateRegionCommitments(request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
RegionCommitmentsClient::UpdateRegionCommitments(google::cloud::cpp::compute::region_commitments::v1::UpdateRegionCommitmentsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRegionCommitments(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_commitments_v1
}  // namespace cloud
}  // namespace google
