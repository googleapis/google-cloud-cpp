// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto

#include "google/cloud/compute/region_target_http_proxies/v1/internal/region_target_http_proxies_rest_connection_impl.h"
#include "google/cloud/common_options.h"
#include "google/cloud/compute/region_target_http_proxies/v1/internal/region_target_http_proxies_rest_stub_factory.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_target_http_proxies_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegionTargetHttpProxiesRestConnectionImpl::RegionTargetHttpProxiesRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<compute_region_target_http_proxies_v1_internal::RegionTargetHttpProxiesRestStub> stub,
    Options options)
  : background_(std::move(background)), stub_(std::move(stub)),
    options_(internal::MergeOptions(
        std::move(options),
        RegionTargetHttpProxiesConnection::options())) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionTargetHttpProxiesRestConnectionImpl::DeleteRegionTargetHttpProxies(google::cloud::cpp::compute::regionTargetHttpProxies::v1::DeleteRegionTargetHttpProxiesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteRegionTargetHttpProxies(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::regionTargetHttpProxies::v1::DeleteRegionTargetHttpProxiesRequest const& request) {
        return stub_->DeleteRegionTargetHttpProxies(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxy>
RegionTargetHttpProxiesRestConnectionImpl::GetRegionTargetHttpProxies(google::cloud::cpp::compute::regionTargetHttpProxies::v1::GetRegionTargetHttpProxiesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetRegionTargetHttpProxies(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::regionTargetHttpProxies::v1::GetRegionTargetHttpProxiesRequest const& request) {
        return stub_->GetRegionTargetHttpProxies(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionTargetHttpProxiesRestConnectionImpl::InsertRegionTargetHttpProxies(google::cloud::cpp::compute::regionTargetHttpProxies::v1::InsertRegionTargetHttpProxiesRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->InsertRegionTargetHttpProxies(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::regionTargetHttpProxies::v1::InsertRegionTargetHttpProxiesRequest const& request) {
        return stub_->InsertRegionTargetHttpProxies(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::cpp::compute::v1::TargetHttpProxy>
RegionTargetHttpProxiesRestConnectionImpl::ListRegionTargetHttpProxies(google::cloud::cpp::compute::regionTargetHttpProxies::v1::ListRegionTargetHttpProxiesRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<compute_region_target_http_proxies_v1::RegionTargetHttpProxiesRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListRegionTargetHttpProxies(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<StreamRange<google::cloud::cpp::compute::v1::TargetHttpProxy>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name]
        (google::cloud::cpp::compute::regionTargetHttpProxies::v1::ListRegionTargetHttpProxiesRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context, google::cloud::cpp::compute::regionTargetHttpProxies::v1::ListRegionTargetHttpProxiesRequest const& request) {
              return stub->ListRegionTargetHttpProxies(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::TargetHttpProxyList r) {
        std::vector<google::cloud::cpp::compute::v1::TargetHttpProxy> result(r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
RegionTargetHttpProxiesRestConnectionImpl::SetUrlMap(google::cloud::cpp::compute::regionTargetHttpProxies::v1::SetUrlMapRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetUrlMap(request),
      [this](rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::regionTargetHttpProxies::v1::SetUrlMapRequest const& request) {
        return stub_->SetUrlMap(rest_context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_target_http_proxies_v1_internal
}  // namespace cloud
}  // namespace google
