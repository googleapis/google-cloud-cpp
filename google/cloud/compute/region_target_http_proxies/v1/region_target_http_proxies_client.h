// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_TARGET_HTTP_PROXIES_V1_REGION_TARGET_HTTP_PROXIES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_TARGET_HTTP_PROXIES_V1_REGION_TARGET_HTTP_PROXIES_CLIENT_H

#include "google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_target_http_proxies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the regionTargetHttpProxies resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/regionTargetHttpProxies
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class RegionTargetHttpProxiesClient {
 public:
  explicit RegionTargetHttpProxiesClient(
      ExperimentalTag,
      std::shared_ptr<RegionTargetHttpProxiesConnection> connection,
      Options opts = {});
  ~RegionTargetHttpProxiesClient();

  ///@{
  /// @name Copy and move support
  RegionTargetHttpProxiesClient(RegionTargetHttpProxiesClient const&) = default;
  RegionTargetHttpProxiesClient& operator=(
      RegionTargetHttpProxiesClient const&) = default;
  RegionTargetHttpProxiesClient(RegionTargetHttpProxiesClient&&) = default;
  RegionTargetHttpProxiesClient& operator=(RegionTargetHttpProxiesClient&&) =
      default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(RegionTargetHttpProxiesClient const& a,
                         RegionTargetHttpProxiesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(RegionTargetHttpProxiesClient const& a,
                         RegionTargetHttpProxiesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified TargetHttpProxy resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param target_http_proxy  Name of the TargetHttpProxy resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.DeleteRegionTargetHttpProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L83}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionTargetHttpProxies(std::string const& project,
                                std::string const& region,
                                std::string const& target_http_proxy,
                                Options opts = {});

  ///
  /// Deletes the specified TargetHttpProxy resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionTargetHttpProxies::v1::DeleteRegionTargetHttpProxiesRequest,google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L83}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.DeleteRegionTargetHttpProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L83}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionTargetHttpProxies(
      google::cloud::cpp::compute::regionTargetHttpProxies::v1::
          DeleteRegionTargetHttpProxiesRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified TargetHttpProxy resource in the specified region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param target_http_proxy  Name of the TargetHttpProxy resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetHttpProxy,google/cloud/compute/v1/internal/common.proto#L26541}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.GetRegionTargetHttpProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L107}
  /// [google.cloud.cpp.compute.v1.TargetHttpProxy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L26541}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxy>
  GetRegionTargetHttpProxies(std::string const& project,
                             std::string const& region,
                             std::string const& target_http_proxy,
                             Options opts = {});

  ///
  /// Returns the specified TargetHttpProxy resource in the specified region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionTargetHttpProxies::v1::GetRegionTargetHttpProxiesRequest,google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L107}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetHttpProxy,google/cloud/compute/v1/internal/common.proto#L26541}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.GetRegionTargetHttpProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L107}
  /// [google.cloud.cpp.compute.v1.TargetHttpProxy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L26541}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetHttpProxy>
  GetRegionTargetHttpProxies(
      google::cloud::cpp::compute::regionTargetHttpProxies::v1::
          GetRegionTargetHttpProxiesRequest const& request,
      Options opts = {});

  ///
  /// Creates a TargetHttpProxy resource in the specified project and region
  /// using the data included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param target_http_proxy_resource  The TargetHttpProxy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.InsertRegionTargetHttpProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L119}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionTargetHttpProxies(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::TargetHttpProxy const&
          target_http_proxy_resource,
      Options opts = {});

  ///
  /// Creates a TargetHttpProxy resource in the specified project and region
  /// using the data included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionTargetHttpProxies::v1::InsertRegionTargetHttpProxiesRequest,google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L119}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.InsertRegionTargetHttpProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L119}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionTargetHttpProxies(
      google::cloud::cpp::compute::regionTargetHttpProxies::v1::
          InsertRegionTargetHttpProxiesRequest const& request,
      Options opts = {});

  ///
  /// Retrieves the list of TargetHttpProxy resources available to the specified
  /// project in the specified region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetHttpProxy,google/cloud/compute/v1/internal/common.proto#L26541}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.ListRegionTargetHttpProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L143}
  /// [google.cloud.cpp.compute.v1.TargetHttpProxy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L26541}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetHttpProxy>
  ListRegionTargetHttpProxies(std::string const& project,
                              std::string const& region, Options opts = {});

  ///
  /// Retrieves the list of TargetHttpProxy resources available to the specified
  /// project in the specified region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionTargetHttpProxies::v1::ListRegionTargetHttpProxiesRequest,google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L143}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetHttpProxy,google/cloud/compute/v1/internal/common.proto#L26541}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.ListRegionTargetHttpProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L143}
  /// [google.cloud.cpp.compute.v1.TargetHttpProxy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L26541}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetHttpProxy>
  ListRegionTargetHttpProxies(
      google::cloud::cpp::compute::regionTargetHttpProxies::v1::
          ListRegionTargetHttpProxiesRequest request,
      Options opts = {});

  ///
  /// Changes the URL map for TargetHttpProxy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param target_http_proxy  Name of the TargetHttpProxy to set a URL map
  /// for.
  /// @param url_map_reference_resource  The UrlMapReference for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.SetUrlMapRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L211}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetUrlMap(
      std::string const& project, std::string const& region,
      std::string const& target_http_proxy,
      google::cloud::cpp::compute::v1::UrlMapReference const&
          url_map_reference_resource,
      Options opts = {});

  ///
  /// Changes the URL map for TargetHttpProxy.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::regionTargetHttpProxies::v1::SetUrlMapRequest,google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L211}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionTargetHttpProxies.v1.SetUrlMapRequest]:
  /// @googleapis_reference_link{google/cloud/compute/region_target_http_proxies/v1/region_target_http_proxies.proto#L211}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> SetUrlMap(
      google::cloud::cpp::compute::regionTargetHttpProxies::v1::
          SetUrlMapRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<RegionTargetHttpProxiesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_target_http_proxies_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_TARGET_HTTP_PROXIES_V1_REGION_TARGET_HTTP_PROXIES_CLIENT_H
