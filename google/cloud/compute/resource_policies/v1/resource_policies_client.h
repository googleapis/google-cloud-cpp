// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/resource_policies/v1/resource_policies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_RESOURCE_POLICIES_V1_RESOURCE_POLICIES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_RESOURCE_POLICIES_V1_RESOURCE_POLICIES_CLIENT_H

#include "google/cloud/compute/resource_policies/v1/resource_policies_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_resource_policies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the resourcePolicies resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/resourcePolicies
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class ResourcePoliciesClient {
 public:
  explicit ResourcePoliciesClient(
      ExperimentalTag, std::shared_ptr<ResourcePoliciesConnection> connection,
      Options opts = {});
  ~ResourcePoliciesClient();

  ///@{
  /// @name Copy and move support
  ResourcePoliciesClient(ResourcePoliciesClient const&) = default;
  ResourcePoliciesClient& operator=(ResourcePoliciesClient const&) = default;
  ResourcePoliciesClient(ResourcePoliciesClient&&) = default;
  ResourcePoliciesClient& operator=(ResourcePoliciesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(ResourcePoliciesClient const& a,
                         ResourcePoliciesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(ResourcePoliciesClient const& a,
                         ResourcePoliciesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves an aggregated list of resource policies.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ResourcePolicyAggregatedList,google/cloud/compute/v1/internal/common.proto#L21250}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.AggregatedListResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L119}
  /// [google.cloud.cpp.compute.v1.ResourcePolicyAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21250}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ResourcePolicyAggregatedList>
  AggregatedListResourcePolicies(std::string const& project, Options opts = {});

  ///
  /// Retrieves an aggregated list of resource policies.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::resourcePolicies::v1::AggregatedListResourcePoliciesRequest,google/cloud/compute/resource_policies/v1/resource_policies.proto#L119}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ResourcePolicyAggregatedList,google/cloud/compute/v1/internal/common.proto#L21250}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.AggregatedListResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L119}
  /// [google.cloud.cpp.compute.v1.ResourcePolicyAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21250}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ResourcePolicyAggregatedList>
  AggregatedListResourcePolicies(
      google::cloud::cpp::compute::resourcePolicies::v1::
          AggregatedListResourcePoliciesRequest const& request,
      Options opts = {});

  ///
  /// Deletes the specified resource policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param resource_policy  Name of the resource policy to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.DeleteResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L193}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteResourcePolicies(
      std::string const& project, std::string const& region,
      std::string const& resource_policy, Options opts = {});

  ///
  /// Deletes the specified resource policy.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::resourcePolicies::v1::DeleteResourcePoliciesRequest,google/cloud/compute/resource_policies/v1/resource_policies.proto#L193}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.DeleteResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L193}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteResourcePolicies(
      google::cloud::cpp::compute::resourcePolicies::v1::
          DeleteResourcePoliciesRequest const& request,
      Options opts = {});

  ///
  /// Retrieves all information of the specified resource policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param resource_policy  Name of the resource policy to retrieve.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ResourcePolicy,google/cloud/compute/v1/internal/common.proto#L21200}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.GetResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L238}
  /// [google.cloud.cpp.compute.v1.ResourcePolicy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21200}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ResourcePolicy> GetResourcePolicies(
      std::string const& project, std::string const& region,
      std::string const& resource_policy, Options opts = {});

  ///
  /// Retrieves all information of the specified resource policy.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::resourcePolicies::v1::GetResourcePoliciesRequest,google/cloud/compute/resource_policies/v1/resource_policies.proto#L238}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ResourcePolicy,google/cloud/compute/v1/internal/common.proto#L21200}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.GetResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L238}
  /// [google.cloud.cpp.compute.v1.ResourcePolicy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21200}
  ///
  StatusOr<google::cloud::cpp::compute::v1::ResourcePolicy> GetResourcePolicies(
      google::cloud::cpp::compute::resourcePolicies::v1::
          GetResourcePoliciesRequest const& request,
      Options opts = {});

  ///
  /// Gets the access control policy for a resource. May be empty if no such
  /// policy or resource exists.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.GetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L223}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> GetIamPolicy(
      std::string const& project, std::string const& region,
      std::string const& resource, Options opts = {});

  ///
  /// Gets the access control policy for a resource. May be empty if no such
  /// policy or resource exists.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::resourcePolicies::v1::GetIamPolicyRequest,google/cloud/compute/resource_policies/v1/resource_policies.proto#L223}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.GetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L223}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> GetIamPolicy(
      google::cloud::cpp::compute::resourcePolicies::v1::
          GetIamPolicyRequest const& request,
      Options opts = {});

  ///
  /// Creates a new resource policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param resource_policy_resource  The ResourcePolicy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.InsertResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L250}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertResourcePolicies(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::ResourcePolicy const&
          resource_policy_resource,
      Options opts = {});

  ///
  /// Creates a new resource policy.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::resourcePolicies::v1::InsertResourcePoliciesRequest,google/cloud/compute/resource_policies/v1/resource_policies.proto#L250}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.InsertResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L250}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertResourcePolicies(
      google::cloud::cpp::compute::resourcePolicies::v1::
          InsertResourcePoliciesRequest const& request,
      Options opts = {});

  ///
  /// A list all the resource policies that have been configured for the
  /// specified project in specified region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ResourcePolicy,google/cloud/compute/v1/internal/common.proto#L21200}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.ListResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L281}
  /// [google.cloud.cpp.compute.v1.ResourcePolicy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21200}
  ///
  StreamRange<google::cloud::cpp::compute::v1::ResourcePolicy>
  ListResourcePolicies(std::string const& project, std::string const& region,
                       Options opts = {});

  ///
  /// A list all the resource policies that have been configured for the
  /// specified project in specified region.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::resourcePolicies::v1::ListResourcePoliciesRequest,google/cloud/compute/resource_policies/v1/resource_policies.proto#L281}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::ResourcePolicy,google/cloud/compute/v1/internal/common.proto#L21200}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.ListResourcePoliciesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L281}
  /// [google.cloud.cpp.compute.v1.ResourcePolicy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21200}
  ///
  StreamRange<google::cloud::cpp::compute::v1::ResourcePolicy>
  ListResourcePolicies(google::cloud::cpp::compute::resourcePolicies::v1::
                           ListResourcePoliciesRequest request,
                       Options opts = {});

  ///
  /// Sets the access control policy on the specified resource. Replaces any
  /// existing policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param region_set_policy_request_resource  The RegionSetPolicyRequest for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.SetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L349}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> SetIamPolicy(
      std::string const& project, std::string const& region,
      std::string const& resource,
      google::cloud::cpp::compute::v1::RegionSetPolicyRequest const&
          region_set_policy_request_resource,
      Options opts = {});

  ///
  /// Sets the access control policy on the specified resource. Replaces any
  /// existing policy.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::resourcePolicies::v1::SetIamPolicyRequest,google/cloud/compute/resource_policies/v1/resource_policies.proto#L349}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Policy,google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.SetIamPolicyRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L349}
  /// [google.cloud.cpp.compute.v1.Policy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L18675}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Policy> SetIamPolicy(
      google::cloud::cpp::compute::resourcePolicies::v1::
          SetIamPolicyRequest const& request,
      Options opts = {});

  ///
  /// Returns permissions that a caller has on the specified resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  The name of the region for this request.
  /// @param resource  Name or id of the resource for this request.
  /// @param test_permissions_request_resource  The TestPermissionsRequest for
  /// this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TestPermissionsResponse,google/cloud/compute/v1/internal/common.proto#L28939}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.TestIamPermissionsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L365}
  /// [google.cloud.cpp.compute.v1.TestPermissionsResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28939}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
  TestIamPermissions(
      std::string const& project, std::string const& region,
      std::string const& resource,
      google::cloud::cpp::compute::v1::TestPermissionsRequest const&
          test_permissions_request_resource,
      Options opts = {});

  ///
  /// Returns permissions that a caller has on the specified resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::resourcePolicies::v1::TestIamPermissionsRequest,google/cloud/compute/resource_policies/v1/resource_policies.proto#L365}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TestPermissionsResponse,google/cloud/compute/v1/internal/common.proto#L28939}
  ///
  /// [google.cloud.cpp.compute.resourcePolicies.v1.TestIamPermissionsRequest]:
  /// @googleapis_reference_link{google/cloud/compute/resource_policies/v1/resource_policies.proto#L365}
  /// [google.cloud.cpp.compute.v1.TestPermissionsResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L28939}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
  TestIamPermissions(google::cloud::cpp::compute::resourcePolicies::v1::
                         TestIamPermissionsRequest const& request,
                     Options opts = {});

 private:
  std::shared_ptr<ResourcePoliciesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_resource_policies_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_RESOURCE_POLICIES_V1_RESOURCE_POLICIES_CLIENT_H
