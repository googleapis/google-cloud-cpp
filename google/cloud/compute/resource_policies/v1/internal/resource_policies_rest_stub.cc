// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/resource_policies/v1/resource_policies.proto

#include "google/cloud/compute/resource_policies/v1/internal/resource_policies_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/resource_policies/v1/resource_policies.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_resource_policies_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultResourcePoliciesRestStub::DefaultResourcePoliciesRestStub(
    Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultResourcePoliciesRestStub::DefaultResourcePoliciesRestStub(
    std::shared_ptr<rest_internal::RestClient> service, Options options)
    : service_(std::move(service)), options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::ResourcePolicyAggregatedList>
DefaultResourcePoliciesRestStub::AggregatedListResourcePolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::resourcePolicies::v1::
        AggregatedListResourcePoliciesRequest const& request) {
  return rest_internal::Get<
      google::cloud::cpp::compute::v1::ResourcePolicyAggregatedList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/aggregated/resourcePolicies",
      {std::make_pair("filter", request.filter()),
       std::make_pair("include_all_scopes",
                      std::to_string(request.include_all_scopes())),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultResourcePoliciesRestStub::DeleteResourcePolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::resourcePolicies::v1::
        DeleteResourcePoliciesRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/"
      "{resource_policy}");
}

StatusOr<google::cloud::cpp::compute::v1::ResourcePolicy>
DefaultResourcePoliciesRestStub::GetResourcePolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::resourcePolicies::v1::
        GetResourcePoliciesRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::ResourcePolicy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/"
      "{resource_policy}",
      {std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("resource_policy", request.resource_policy())});
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DefaultResourcePoliciesRestStub::GetIamPolicy(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::resourcePolicies::v1::
        GetIamPolicyRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Policy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/"
      "{resource}/getIamPolicy",
      {std::make_pair(
           "options_requested_policy_version",
           std::to_string(request.options_requested_policy_version())),
       std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("resource", request.resource())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultResourcePoliciesRestStub::InsertResourcePolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::resourcePolicies::v1::
        InsertResourcePoliciesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/resourcePolicies");
}

StatusOr<google::cloud::cpp::compute::v1::ResourcePolicyList>
DefaultResourcePoliciesRestStub::ListResourcePolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::resourcePolicies::v1::
        ListResourcePoliciesRequest const& request) {
  return rest_internal::Get<
      google::cloud::cpp::compute::v1::ResourcePolicyList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/resourcePolicies",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
DefaultResourcePoliciesRestStub::SetIamPolicy(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::resourcePolicies::v1::
        SetIamPolicyRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Policy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/"
      "{resource}/setIamPolicy");
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
DefaultResourcePoliciesRestStub::TestIamPermissions(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::resourcePolicies::v1::
        TestIamPermissionsRequest const& request) {
  return rest_internal::Post<
      google::cloud::cpp::compute::v1::TestPermissionsResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/"
      "{resource}/testIamPermissions");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_resource_policies_v1_internal
}  // namespace cloud
}  // namespace google
