// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/resource_policies/v1/resource_policies.proto

#include "google/cloud/compute/resource_policies/v1/internal/resource_policies_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_resource_policies_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ResourcePoliciesTracingConnection::ResourcePoliciesTracingConnection(
    std::shared_ptr<compute_resource_policies_v1::ResourcePoliciesConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::cpp::compute::v1::ResourcePolicyAggregatedList>
ResourcePoliciesTracingConnection::AggregatedListResourcePolicies(google::cloud::cpp::compute::resource_policies::v1::AggregatedListResourcePoliciesRequest const& request) {
  auto span = internal::MakeSpan("compute_resource_policies_v1::ResourcePoliciesConnection::AggregatedListResourcePolicies");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->AggregatedListResourcePolicies(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
ResourcePoliciesTracingConnection::DeleteResourcePolicies(google::cloud::cpp::compute::resource_policies::v1::DeleteResourcePoliciesRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_resource_policies_v1::ResourcePoliciesConnection::DeleteResourcePolicies");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteResourcePolicies(request));
}

StatusOr<google::cloud::cpp::compute::v1::ResourcePolicy>
ResourcePoliciesTracingConnection::GetResourcePolicies(google::cloud::cpp::compute::resource_policies::v1::GetResourcePoliciesRequest const& request) {
  auto span = internal::MakeSpan("compute_resource_policies_v1::ResourcePoliciesConnection::GetResourcePolicies");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetResourcePolicies(request));
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
ResourcePoliciesTracingConnection::GetIamPolicy(google::cloud::cpp::compute::resource_policies::v1::GetIamPolicyRequest const& request) {
  auto span = internal::MakeSpan("compute_resource_policies_v1::ResourcePoliciesConnection::GetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetIamPolicy(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
ResourcePoliciesTracingConnection::InsertResourcePolicies(google::cloud::cpp::compute::resource_policies::v1::InsertResourcePoliciesRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_resource_policies_v1::ResourcePoliciesConnection::InsertResourcePolicies");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->InsertResourcePolicies(request));
}

StreamRange<google::cloud::cpp::compute::v1::ResourcePolicy>
ResourcePoliciesTracingConnection::ListResourcePolicies(google::cloud::cpp::compute::resource_policies::v1::ListResourcePoliciesRequest request) {
  auto span = internal::MakeSpan("compute_resource_policies_v1::ResourcePoliciesConnection::ListResourcePolicies");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListResourcePolicies(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::cpp::compute::v1::ResourcePolicy>(
        std::move(span), std::move(sr));
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
ResourcePoliciesTracingConnection::SetIamPolicy(google::cloud::cpp::compute::resource_policies::v1::SetIamPolicyRequest const& request) {
  auto span = internal::MakeSpan("compute_resource_policies_v1::ResourcePoliciesConnection::SetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->SetIamPolicy(request));
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
ResourcePoliciesTracingConnection::TestIamPermissions(google::cloud::cpp::compute::resource_policies::v1::TestIamPermissionsRequest const& request) {
  auto span = internal::MakeSpan("compute_resource_policies_v1::ResourcePoliciesConnection::TestIamPermissions");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->TestIamPermissions(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<compute_resource_policies_v1::ResourcePoliciesConnection>
MakeResourcePoliciesTracingConnection(
    std::shared_ptr<compute_resource_policies_v1::ResourcePoliciesConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<ResourcePoliciesTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_resource_policies_v1_internal
}  // namespace cloud
}  // namespace google
