// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/reservation_blocks/v1/reservation_blocks.proto

#include "google/cloud/compute/reservation_blocks/v1/reservation_blocks_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace compute_reservation_blocks_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ReservationBlocksClient::ReservationBlocksClient(
    std::shared_ptr<ReservationBlocksConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
ReservationBlocksClient::~ReservationBlocksClient() = default;

StatusOr<google::cloud::cpp::compute::v1::ReservationBlocksGetResponse>
ReservationBlocksClient::GetReservationBlocksGetResponse(
    std::string const& project, std::string const& zone,
    std::string const& reservation, std::string const& reservation_block,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::reservation_blocks::v1::
      GetReservationBlocksGetResponseRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_reservation(reservation);
  request.set_reservation_block(reservation_block);
  return connection_->GetReservationBlocksGetResponse(request);
}

StatusOr<google::cloud::cpp::compute::v1::ReservationBlocksGetResponse>
ReservationBlocksClient::GetReservationBlocksGetResponse(
    google::cloud::cpp::compute::reservation_blocks::v1::
        GetReservationBlocksGetResponseRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetReservationBlocksGetResponse(request);
}

StreamRange<google::cloud::cpp::compute::v1::ReservationBlock>
ReservationBlocksClient::ListReservationBlocks(std::string const& project,
                                               std::string const& zone,
                                               std::string const& reservation,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::reservation_blocks::v1::
      ListReservationBlocksRequest request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_reservation(reservation);
  return connection_->ListReservationBlocks(request);
}

StreamRange<google::cloud::cpp::compute::v1::ReservationBlock>
ReservationBlocksClient::ListReservationBlocks(
    google::cloud::cpp::compute::reservation_blocks::v1::
        ListReservationBlocksRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListReservationBlocks(std::move(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
ReservationBlocksClient::PerformMaintenance(
    std::string const& project, std::string const& zone,
    std::string const& reservation, std::string const& reservation_block,
    google::cloud::cpp::compute::v1::
        ReservationsBlocksPerformMaintenanceRequest const&
            reservations_blocks_perform_maintenance_request_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::reservation_blocks::v1::PerformMaintenanceRequest
      request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_reservation(reservation);
  request.set_reservation_block(reservation_block);
  *request.mutable_reservations_blocks_perform_maintenance_request_resource() =
      reservations_blocks_perform_maintenance_request_resource;
  return connection_->PerformMaintenance(request);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ReservationBlocksClient::PerformMaintenance(
    NoAwaitTag, std::string const& project, std::string const& zone,
    std::string const& reservation, std::string const& reservation_block,
    google::cloud::cpp::compute::v1::
        ReservationsBlocksPerformMaintenanceRequest const&
            reservations_blocks_perform_maintenance_request_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::compute::reservation_blocks::v1::PerformMaintenanceRequest
      request;
  request.set_project(project);
  request.set_zone(zone);
  request.set_reservation(reservation);
  request.set_reservation_block(reservation_block);
  *request.mutable_reservations_blocks_perform_maintenance_request_resource() =
      reservations_blocks_perform_maintenance_request_resource;
  return connection_->PerformMaintenance(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
ReservationBlocksClient::PerformMaintenance(
    google::cloud::cpp::compute::reservation_blocks::v1::
        PerformMaintenanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PerformMaintenance(request);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ReservationBlocksClient::PerformMaintenance(
    NoAwaitTag,
    google::cloud::cpp::compute::reservation_blocks::v1::
        PerformMaintenanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PerformMaintenance(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
ReservationBlocksClient::PerformMaintenance(
    google::cloud::cpp::compute::v1::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PerformMaintenance(operation);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_reservation_blocks_v1
}  // namespace cloud
}  // namespace google
