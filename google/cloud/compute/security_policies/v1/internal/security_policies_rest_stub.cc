// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/security_policies/v1/security_policies.proto

#include "google/cloud/compute/security_policies/v1/internal/security_policies_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/security_policies/v1/security_policies.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_security_policies_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultSecurityPoliciesRestStub::DefaultSecurityPoliciesRestStub(
    Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultSecurityPoliciesRestStub::DefaultSecurityPoliciesRestStub(
    std::shared_ptr<rest_internal::RestClient> service, Options options)
    : service_(std::move(service)), options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultSecurityPoliciesRestStub::AddRule(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::AddRuleRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies/"
      "{security_policy}/addRule");
}

StatusOr<google::cloud::cpp::compute::v1::SecurityPoliciesAggregatedList>
DefaultSecurityPoliciesRestStub::AggregatedListSecurityPolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::
        AggregatedListSecurityPoliciesRequest const& request) {
  return rest_internal::Get<
      google::cloud::cpp::compute::v1::SecurityPoliciesAggregatedList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/aggregated/securityPolicies",
      {std::make_pair("filter", request.filter()),
       std::make_pair("include_all_scopes",
                      std::to_string(request.include_all_scopes())),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultSecurityPoliciesRestStub::DeleteSecurityPolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::
        DeleteSecurityPoliciesRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies/"
      "{security_policy}");
}

StatusOr<google::cloud::cpp::compute::v1::SecurityPolicy>
DefaultSecurityPoliciesRestStub::GetSecurityPolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::
        GetSecurityPoliciesRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::SecurityPolicy>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies/"
      "{security_policy}",
      {std::make_pair("project", request.project()),
       std::make_pair("security_policy", request.security_policy())});
}

StatusOr<google::cloud::cpp::compute::v1::SecurityPolicyRule>
DefaultSecurityPoliciesRestStub::GetRule(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::GetRuleRequest const&
        request) {
  return rest_internal::Get<
      google::cloud::cpp::compute::v1::SecurityPolicyRule>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies/"
      "{security_policy}/getRule",
      {std::make_pair("priority", std::to_string(request.priority())),
       std::make_pair("project", request.project()),
       std::make_pair("security_policy", request.security_policy())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultSecurityPoliciesRestStub::InsertSecurityPolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::
        InsertSecurityPoliciesRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies");
}

StatusOr<google::cloud::cpp::compute::v1::SecurityPolicyList>
DefaultSecurityPoliciesRestStub::ListSecurityPolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::
        ListSecurityPoliciesRequest const& request) {
  return rest_internal::Get<
      google::cloud::cpp::compute::v1::SecurityPolicyList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::
             SecurityPoliciesListPreconfiguredExpressionSetsResponse>
DefaultSecurityPoliciesRestStub::ListPreconfiguredExpressionSets(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::
        ListPreconfiguredExpressionSetsRequest const& request) {
  return rest_internal::Get<
      google::cloud::cpp::compute::v1::
          SecurityPoliciesListPreconfiguredExpressionSetsResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies/"
      "listPreconfiguredExpressionSets",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success",
                      std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultSecurityPoliciesRestStub::PatchSecurityPolicies(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::
        PatchSecurityPoliciesRequest const& request) {
  return rest_internal::Patch<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies/"
      "{security_policy}");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultSecurityPoliciesRestStub::PatchRule(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::PatchRuleRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies/"
      "{security_policy}/patchRule");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultSecurityPoliciesRestStub::RemoveRule(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::RemoveRuleRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies/"
      "{security_policy}/removeRule");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultSecurityPoliciesRestStub::SetLabels(
    google::cloud::rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::securityPolicies::v1::SetLabelsRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/global/securityPolicies/{resource}/"
      "setLabels");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_security_policies_v1_internal
}  // namespace cloud
}  // namespace google
