// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/routers/v1/routers.proto

#include "google/cloud/compute/routers/v1/internal/routers_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/routers/v1/routers.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_routers_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultRoutersRestStub::DefaultRoutersRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultRoutersRestStub::DefaultRoutersRestStub(
    std::shared_ptr<rest_internal::RestClient> service,
    Options options)
    : service_(std::move(service)),
      options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::RouterAggregatedList>
DefaultRoutersRestStub::AggregatedListRouters(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::AggregatedListRoutersRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::RouterAggregatedList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/aggregated/routers",
      {std::make_pair("filter", request.filter()),
       std::make_pair("include_all_scopes", std::to_string(request.include_all_scopes())),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultRoutersRestStub::DeleteRouters(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::DeleteRoutersRequest const& request) {
  return rest_internal::Delete<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/routers/{router}");
}

StatusOr<google::cloud::cpp::compute::v1::Router>
DefaultRoutersRestStub::GetRouters(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::GetRoutersRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Router>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/routers/{router}",
      {std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("router", request.router())});
}

StatusOr<google::cloud::cpp::compute::v1::VmEndpointNatMappingsList>
DefaultRoutersRestStub::GetNatMappingInfo(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::GetNatMappingInfoRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::VmEndpointNatMappingsList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success())),
       std::make_pair("router", request.router())});
}

StatusOr<google::cloud::cpp::compute::v1::RouterStatusResponse>
DefaultRoutersRestStub::GetRouterStatus(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::GetRouterStatusRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::RouterStatusResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/routers/{router}/getRouterStatus",
      {std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("router", request.router())});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultRoutersRestStub::InsertRouters(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::InsertRoutersRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/routers");
}

StatusOr<google::cloud::cpp::compute::v1::RouterList>
DefaultRoutersRestStub::ListRouters(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::ListRoutersRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::RouterList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/routers",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("region", request.region()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultRoutersRestStub::PatchRouters(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::PatchRoutersRequest const& request) {
  return rest_internal::Patch<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/routers/{router}");
}

StatusOr<google::cloud::cpp::compute::v1::RoutersPreviewResponse>
DefaultRoutersRestStub::Preview(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::PreviewRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::RoutersPreviewResponse>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/routers/{router}/preview");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultRoutersRestStub::UpdateRouters(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::routers::v1::UpdateRoutersRequest const& request) {
  return rest_internal::Put<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/regions/{region}/routers/{router}");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_routers_v1_internal
}  // namespace cloud
}  // namespace google
