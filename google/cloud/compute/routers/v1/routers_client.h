// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/routers/v1/routers.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_ROUTERS_V1_ROUTERS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_ROUTERS_V1_ROUTERS_CLIENT_H

#include "google/cloud/compute/routers/v1/routers_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_routers_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the routers resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/routers
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class RoutersClient {
 public:
  explicit RoutersClient(ExperimentalTag,
                         std::shared_ptr<RoutersConnection> connection,
                         Options opts = {});
  ~RoutersClient();

  ///@{
  /// @name Copy and move support
  RoutersClient(RoutersClient const&) = default;
  RoutersClient& operator=(RoutersClient const&) = default;
  RoutersClient(RoutersClient&&) = default;
  RoutersClient& operator=(RoutersClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(RoutersClient const& a, RoutersClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(RoutersClient const& a, RoutersClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves an aggregated list of routers.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::RouterAggregatedList,google/cloud/compute/v1/internal/common.proto#L22035}
  ///
  /// [google.cloud.cpp.compute.routers.v1.AggregatedListRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L144}
  /// [google.cloud.cpp.compute.v1.RouterAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L22035}
  ///
  StatusOr<google::cloud::cpp::compute::v1::RouterAggregatedList>
  AggregatedListRouters(std::string const& project, Options opts = {});

  ///
  /// Retrieves an aggregated list of routers.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::AggregatedListRoutersRequest,google/cloud/compute/routers/v1/routers.proto#L144}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::RouterAggregatedList,google/cloud/compute/v1/internal/common.proto#L22035}
  ///
  /// [google.cloud.cpp.compute.routers.v1.AggregatedListRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L144}
  /// [google.cloud.cpp.compute.v1.RouterAggregatedList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L22035}
  ///
  StatusOr<google::cloud::cpp::compute::v1::RouterAggregatedList>
  AggregatedListRouters(google::cloud::cpp::compute::routers::v1::
                            AggregatedListRoutersRequest const& request,
                        Options opts = {});

  ///
  /// Deletes the specified Router resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param router  Name of the Router resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.routers.v1.DeleteRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L218}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteRouters(
      std::string const& project, std::string const& region,
      std::string const& router, Options opts = {});

  ///
  /// Deletes the specified Router resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::DeleteRoutersRequest,google/cloud/compute/routers/v1/routers.proto#L218}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.routers.v1.DeleteRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L218}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteRouters(
      google::cloud::cpp::compute::routers::v1::DeleteRoutersRequest const&
          request,
      Options opts = {});

  ///
  /// Returns the specified Router resource.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param router  Name of the Router resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Router,google/cloud/compute/v1/internal/common.proto#L21966}
  ///
  /// [google.cloud.cpp.compute.routers.v1.GetRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L332}
  /// [google.cloud.cpp.compute.v1.Router]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21966}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Router> GetRouters(
      std::string const& project, std::string const& region,
      std::string const& router, Options opts = {});

  ///
  /// Returns the specified Router resource.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::GetRoutersRequest,google/cloud/compute/routers/v1/routers.proto#L332}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Router,google/cloud/compute/v1/internal/common.proto#L21966}
  ///
  /// [google.cloud.cpp.compute.routers.v1.GetRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L332}
  /// [google.cloud.cpp.compute.v1.Router]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21966}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Router> GetRouters(
      google::cloud::cpp::compute::routers::v1::GetRoutersRequest const&
          request,
      Options opts = {});

  ///
  /// Retrieves runtime Nat mapping information of VM endpoints.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param router  Name of the Router resource to query for Nat Mapping
  /// information of VM
  ///  endpoints.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::VmEndpointNatMappingsList,google/cloud/compute/v1/internal/common.proto#L29736}
  ///
  /// [google.cloud.cpp.compute.routers.v1.GetNatMappingInfoRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L248}
  /// [google.cloud.cpp.compute.v1.VmEndpointNatMappingsList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29736}
  ///
  StatusOr<google::cloud::cpp::compute::v1::VmEndpointNatMappingsList>
  GetNatMappingInfo(std::string const& project, std::string const& region,
                    std::string const& router, Options opts = {});

  ///
  /// Retrieves runtime Nat mapping information of VM endpoints.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::GetNatMappingInfoRequest,google/cloud/compute/routers/v1/routers.proto#L248}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::VmEndpointNatMappingsList,google/cloud/compute/v1/internal/common.proto#L29736}
  ///
  /// [google.cloud.cpp.compute.routers.v1.GetNatMappingInfoRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L248}
  /// [google.cloud.cpp.compute.v1.VmEndpointNatMappingsList]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L29736}
  ///
  StatusOr<google::cloud::cpp::compute::v1::VmEndpointNatMappingsList>
  GetNatMappingInfo(
      google::cloud::cpp::compute::routers::v1::GetNatMappingInfoRequest const&
          request,
      Options opts = {});

  ///
  /// Retrieves runtime information of the specified router.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param router  Name of the Router resource to query.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::RouterStatusResponse,google/cloud/compute/v1/internal/common.proto#L22803}
  ///
  /// [google.cloud.cpp.compute.routers.v1.GetRouterStatusRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L320}
  /// [google.cloud.cpp.compute.v1.RouterStatusResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L22803}
  ///
  StatusOr<google::cloud::cpp::compute::v1::RouterStatusResponse>
  GetRouterStatus(std::string const& project, std::string const& region,
                  std::string const& router, Options opts = {});

  ///
  /// Retrieves runtime information of the specified router.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::GetRouterStatusRequest,google/cloud/compute/routers/v1/routers.proto#L320}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::RouterStatusResponse,google/cloud/compute/v1/internal/common.proto#L22803}
  ///
  /// [google.cloud.cpp.compute.routers.v1.GetRouterStatusRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L320}
  /// [google.cloud.cpp.compute.v1.RouterStatusResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L22803}
  ///
  StatusOr<google::cloud::cpp::compute::v1::RouterStatusResponse>
  GetRouterStatus(
      google::cloud::cpp::compute::routers::v1::GetRouterStatusRequest const&
          request,
      Options opts = {});

  ///
  /// Creates a Router resource in the specified project and region using the
  /// data included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param router_resource  The Router for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.routers.v1.InsertRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L344}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertRouters(
      std::string const& project, std::string const& region,
      google::cloud::cpp::compute::v1::Router const& router_resource,
      Options opts = {});

  ///
  /// Creates a Router resource in the specified project and region using the
  /// data included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::InsertRoutersRequest,google/cloud/compute/routers/v1/routers.proto#L344}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.routers.v1.InsertRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L344}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertRouters(
      google::cloud::cpp::compute::routers::v1::InsertRoutersRequest const&
          request,
      Options opts = {});

  ///
  /// Retrieves a list of Router resources available to the specified project.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Router,google/cloud/compute/v1/internal/common.proto#L21966}
  ///
  /// [google.cloud.cpp.compute.routers.v1.ListRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L374}
  /// [google.cloud.cpp.compute.v1.Router]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21966}
  ///
  StreamRange<google::cloud::cpp::compute::v1::Router> ListRouters(
      std::string const& project, std::string const& region, Options opts = {});

  ///
  /// Retrieves a list of Router resources available to the specified project.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::ListRoutersRequest,google/cloud/compute/routers/v1/routers.proto#L374}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Router,google/cloud/compute/v1/internal/common.proto#L21966}
  ///
  /// [google.cloud.cpp.compute.routers.v1.ListRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L374}
  /// [google.cloud.cpp.compute.v1.Router]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L21966}
  ///
  StreamRange<google::cloud::cpp::compute::v1::Router> ListRouters(
      google::cloud::cpp::compute::routers::v1::ListRoutersRequest request,
      Options opts = {});

  ///
  /// Patches the specified Router resource with the data included in the
  /// request. This method supports PATCH semantics and uses JSON merge patch
  /// format and processing rules.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param router  Name of the Router resource to patch.
  /// @param router_resource  The Router for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.routers.v1.PatchRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L442}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchRouters(
      std::string const& project, std::string const& region,
      std::string const& router,
      google::cloud::cpp::compute::v1::Router const& router_resource,
      Options opts = {});

  ///
  /// Patches the specified Router resource with the data included in the
  /// request. This method supports PATCH semantics and uses JSON merge patch
  /// format and processing rules.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::PatchRoutersRequest,google/cloud/compute/routers/v1/routers.proto#L442}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.routers.v1.PatchRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L442}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchRouters(
      google::cloud::cpp::compute::routers::v1::PatchRoutersRequest const&
          request,
      Options opts = {});

  ///
  /// Preview fields auto-generated during router create and update operations.
  /// Calling this method does NOT create or update the router.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param router  Name of the Router resource to query.
  /// @param router_resource  The Router for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::RoutersPreviewResponse,google/cloud/compute/v1/internal/common.proto#L22810}
  ///
  /// [google.cloud.cpp.compute.routers.v1.PreviewRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L475}
  /// [google.cloud.cpp.compute.v1.RoutersPreviewResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L22810}
  ///
  StatusOr<google::cloud::cpp::compute::v1::RoutersPreviewResponse> Preview(
      std::string const& project, std::string const& region,
      std::string const& router,
      google::cloud::cpp::compute::v1::Router const& router_resource,
      Options opts = {});

  ///
  /// Preview fields auto-generated during router create and update operations.
  /// Calling this method does NOT create or update the router.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::PreviewRequest,google/cloud/compute/routers/v1/routers.proto#L475}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::RoutersPreviewResponse,google/cloud/compute/v1/internal/common.proto#L22810}
  ///
  /// [google.cloud.cpp.compute.routers.v1.PreviewRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L475}
  /// [google.cloud.cpp.compute.v1.RoutersPreviewResponse]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L22810}
  ///
  StatusOr<google::cloud::cpp::compute::v1::RoutersPreviewResponse> Preview(
      google::cloud::cpp::compute::routers::v1::PreviewRequest const& request,
      Options opts = {});

  ///
  /// Updates the specified Router resource with the data included in the
  /// request. This method conforms to PUT semantics, which requests that the
  /// state of the target resource be created or replaced with the state defined
  /// by the representation enclosed in the request message payload.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region for this request.
  /// @param router  Name of the Router resource to update.
  /// @param router_resource  The Router for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.routers.v1.UpdateRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L490}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> UpdateRouters(
      std::string const& project, std::string const& region,
      std::string const& router,
      google::cloud::cpp::compute::v1::Router const& router_resource,
      Options opts = {});

  ///
  /// Updates the specified Router resource with the data included in the
  /// request. This method conforms to PUT semantics, which requests that the
  /// state of the target resource be created or replaced with the state defined
  /// by the representation enclosed in the request message payload.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::routers::v1::UpdateRoutersRequest,google/cloud/compute/routers/v1/routers.proto#L490}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.routers.v1.UpdateRoutersRequest]:
  /// @googleapis_reference_link{google/cloud/compute/routers/v1/routers.proto#L490}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> UpdateRouters(
      google::cloud::cpp::compute::routers::v1::UpdateRoutersRequest const&
          request,
      Options opts = {});

 private:
  std::shared_ptr<RoutersConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_routers_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_ROUTERS_V1_ROUTERS_CLIENT_H
