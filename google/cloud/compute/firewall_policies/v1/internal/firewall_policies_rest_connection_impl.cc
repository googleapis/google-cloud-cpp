// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/firewall_policies/v1/firewall_policies.proto

#include "google/cloud/compute/firewall_policies/v1/internal/firewall_policies_rest_connection_impl.h"
#include "google/cloud/compute/firewall_policies/v1/internal/firewall_policies_rest_stub_factory.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/async_rest_long_running_operation.h"
#include "google/cloud/internal/extract_long_running_result.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_firewall_policies_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

FirewallPoliciesRestConnectionImpl::FirewallPoliciesRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<
        compute_firewall_policies_v1_internal::FirewallPoliciesRestStub>
        stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      FirewallPoliciesConnection::options())) {}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::AddAssociation(
    google::cloud::cpp::compute::firewall_policies::v1::
        AddAssociationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](CompletionQueue& cq,
                     std::unique_ptr<rest_internal::RestContext> context,
                     google::cloud::cpp::compute::firewall_policies::v1::
                         AddAssociationRequest const& request) {
        return stub->AsyncAddAssociation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->AddAssociation(request),
      polling_policy(*current), __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::AddRule(
    google::cloud::cpp::compute::firewall_policies::v1::AddRuleRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](CompletionQueue& cq,
                     std::unique_ptr<rest_internal::RestContext> context,
                     google::cloud::cpp::compute::firewall_policies::v1::
                         AddRuleRequest const& request) {
        return stub->AsyncAddRule(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->AddRule(request), polling_policy(*current),
      __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::CloneRules(
    google::cloud::cpp::compute::firewall_policies::v1::CloneRulesRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](CompletionQueue& cq,
                     std::unique_ptr<rest_internal::RestContext> context,
                     google::cloud::cpp::compute::firewall_policies::v1::
                         CloneRulesRequest const& request) {
        return stub->AsyncCloneRules(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CloneRules(request),
      polling_policy(*current), __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::DeleteFirewallPolicy(
    google::cloud::cpp::compute::firewall_policies::v1::
        DeleteFirewallPolicyRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](CompletionQueue& cq,
                     std::unique_ptr<rest_internal::RestContext> context,
                     google::cloud::cpp::compute::firewall_policies::v1::
                         DeleteFirewallPolicyRequest const& request) {
        return stub->AsyncDeleteFirewallPolicy(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteFirewallPolicy(request),
      polling_policy(*current), __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

StatusOr<google::cloud::cpp::compute::v1::FirewallPolicy>
FirewallPoliciesRestConnectionImpl::GetFirewallPolicy(
    google::cloud::cpp::compute::firewall_policies::v1::
        GetFirewallPolicyRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetFirewallPolicy(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::firewall_policies::v1::
                 GetFirewallPolicyRequest const& request) {
        return stub_->GetFirewallPolicy(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::FirewallPolicyAssociation>
FirewallPoliciesRestConnectionImpl::GetAssociation(
    google::cloud::cpp::compute::firewall_policies::v1::
        GetAssociationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetAssociation(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::firewall_policies::v1::
                 GetAssociationRequest const& request) {
        return stub_->GetAssociation(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
FirewallPoliciesRestConnectionImpl::GetIamPolicy(
    google::cloud::cpp::compute::firewall_policies::v1::
        GetIamPolicyRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetIamPolicy(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::firewall_policies::v1::
                 GetIamPolicyRequest const& request) {
        return stub_->GetIamPolicy(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::FirewallPolicyRule>
FirewallPoliciesRestConnectionImpl::GetRule(
    google::cloud::cpp::compute::firewall_policies::v1::GetRuleRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetRule(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::firewall_policies::v1::
                 GetRuleRequest const& request) {
        return stub_->GetRule(rest_context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::InsertFirewallPolicy(
    google::cloud::cpp::compute::firewall_policies::v1::
        InsertFirewallPolicyRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](CompletionQueue& cq,
                     std::unique_ptr<rest_internal::RestContext> context,
                     google::cloud::cpp::compute::firewall_policies::v1::
                         InsertFirewallPolicyRequest const& request) {
        return stub->AsyncInsertFirewallPolicy(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->InsertFirewallPolicy(request),
      polling_policy(*current), __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

StreamRange<google::cloud::cpp::compute::v1::FirewallPolicy>
FirewallPoliciesRestConnectionImpl::ListFirewallPolicies(
    google::cloud::cpp::compute::firewall_policies::v1::
        ListFirewallPoliciesRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency =
      idempotency_policy(*current)->ListFirewallPolicies(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cpp::compute::v1::FirewallPolicy>>(
      std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<
           compute_firewall_policies_v1::FirewallPoliciesRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          google::cloud::cpp::compute::firewall_policies::v1::
              ListFirewallPoliciesRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::cpp::compute::firewall_policies::v1::
                       ListFirewallPoliciesRequest const& request) {
              return stub->ListFirewallPolicies(rest_context, request);
            },
            r, function_name);
      },
      [](google::cloud::cpp::compute::v1::FirewallPolicyList r) {
        std::vector<google::cloud::cpp::compute::v1::FirewallPolicy> result(
            r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<
    google::cloud::cpp::compute::v1::FirewallPoliciesListAssociationsResponse>
FirewallPoliciesRestConnectionImpl::ListAssociations(
    google::cloud::cpp::compute::firewall_policies::v1::
        ListAssociationsRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListAssociations(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::firewall_policies::v1::
                 ListAssociationsRequest const& request) {
        return stub_->ListAssociations(rest_context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::Move(
    google::cloud::cpp::compute::firewall_policies::v1::MoveRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::firewall_policies::v1::MoveRequest const&
              request) {
        return stub->AsyncMove(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->Move(request), polling_policy(*current),
      __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::PatchFirewallPolicy(
    google::cloud::cpp::compute::firewall_policies::v1::
        PatchFirewallPolicyRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](CompletionQueue& cq,
                     std::unique_ptr<rest_internal::RestContext> context,
                     google::cloud::cpp::compute::firewall_policies::v1::
                         PatchFirewallPolicyRequest const& request) {
        return stub->AsyncPatchFirewallPolicy(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->PatchFirewallPolicy(request),
      polling_policy(*current), __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::PatchRule(
    google::cloud::cpp::compute::firewall_policies::v1::PatchRuleRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](CompletionQueue& cq,
                     std::unique_ptr<rest_internal::RestContext> context,
                     google::cloud::cpp::compute::firewall_policies::v1::
                         PatchRuleRequest const& request) {
        return stub->AsyncPatchRule(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->PatchRule(request),
      polling_policy(*current), __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::RemoveAssociation(
    google::cloud::cpp::compute::firewall_policies::v1::
        RemoveAssociationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](CompletionQueue& cq,
                     std::unique_ptr<rest_internal::RestContext> context,
                     google::cloud::cpp::compute::firewall_policies::v1::
                         RemoveAssociationRequest const& request) {
        return stub->AsyncRemoveAssociation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->RemoveAssociation(request),
      polling_policy(*current), __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
FirewallPoliciesRestConnectionImpl::RemoveRule(
    google::cloud::cpp::compute::firewall_policies::v1::RemoveRuleRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return rest_internal::AsyncRestLongRunningOperation<
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::v1::Operation,
      google::cloud::cpp::compute::global_organization_operations::v1::
          GetGlobalOrganizationOperationRequest,
      google::cloud::cpp::compute::global_organization_operations::v1::
          DeleteGlobalOrganizationOperationRequest>(
      background_->cq(), request,
      [stub = stub_](CompletionQueue& cq,
                     std::unique_ptr<rest_internal::RestContext> context,
                     google::cloud::cpp::compute::firewall_policies::v1::
                         RemoveRuleRequest const& request) {
        return stub->AsyncRemoveRule(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              GetGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub = stub_](
          CompletionQueue& cq,
          std::unique_ptr<rest_internal::RestContext> context,
          google::cloud::cpp::compute::global_organization_operations::v1::
              DeleteGlobalOrganizationOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      [](StatusOr<google::cloud::cpp::compute::v1::Operation> op,
         std::string const&) { return op; },
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->RemoveRule(request),
      polling_policy(*current), __func__,
      [](google::cloud::cpp::compute::v1::Operation const& op) {
        return op.status() == "DONE";
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::GetGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      },
      [request](std::string const& op,
                google::cloud::cpp::compute::global_organization_operations::
                    v1::DeleteGlobalOrganizationOperationRequest& r) {
        r.set_operation(op);
      });
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
FirewallPoliciesRestConnectionImpl::SetIamPolicy(
    google::cloud::cpp::compute::firewall_policies::v1::
        SetIamPolicyRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->SetIamPolicy(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::firewall_policies::v1::
                 SetIamPolicyRequest const& request) {
        return stub_->SetIamPolicy(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
FirewallPoliciesRestConnectionImpl::TestIamPermissions(
    google::cloud::cpp::compute::firewall_policies::v1::
        TestIamPermissionsRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->TestIamPermissions(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::firewall_policies::v1::
                 TestIamPermissionsRequest const& request) {
        return stub_->TestIamPermissions(rest_context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_firewall_policies_v1_internal
}  // namespace cloud
}  // namespace google
