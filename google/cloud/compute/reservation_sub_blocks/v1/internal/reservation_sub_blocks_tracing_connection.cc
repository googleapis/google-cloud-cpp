// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/compute/reservation_sub_blocks/v1/reservation_sub_blocks.proto

#include "google/cloud/compute/reservation_sub_blocks/v1/internal/reservation_sub_blocks_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace compute_reservation_sub_blocks_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ReservationSubBlocksTracingConnection::ReservationSubBlocksTracingConnection(
    std::shared_ptr<
        compute_reservation_sub_blocks_v1::ReservationSubBlocksConnection>
        child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::cpp::compute::v1::ReservationSubBlocksGetResponse>
ReservationSubBlocksTracingConnection::GetReservationSubBlocksGetResponse(
    google::cloud::cpp::compute::reservation_sub_blocks::v1::
        GetReservationSubBlocksGetResponseRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_reservation_sub_blocks_v1::ReservationSubBlocksConnection::"
      "GetReservationSubBlocksGetResponse");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span,
                           child_->GetReservationSubBlocksGetResponse(request));
}

StreamRange<google::cloud::cpp::compute::v1::ReservationSubBlock>
ReservationSubBlocksTracingConnection::ListReservationSubBlocks(
    google::cloud::cpp::compute::reservation_sub_blocks::v1::
        ListReservationSubBlocksRequest request) {
  auto span = internal::MakeSpan(
      "compute_reservation_sub_blocks_v1::ReservationSubBlocksConnection::"
      "ListReservationSubBlocks");
  internal::OTelScope scope(span);
  auto sr = child_->ListReservationSubBlocks(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::cpp::compute::v1::ReservationSubBlock>(std::move(span),
                                                            std::move(sr));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<
    compute_reservation_sub_blocks_v1::ReservationSubBlocksConnection>
MakeReservationSubBlocksTracingConnection(
    std::shared_ptr<
        compute_reservation_sub_blocks_v1::ReservationSubBlocksConnection>
        conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<ReservationSubBlocksTracingConnection>(
        std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_reservation_sub_blocks_v1_internal
}  // namespace cloud
}  // namespace google
