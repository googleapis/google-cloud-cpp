// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/region_security_policies/v1/region_security_policies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_SECURITY_POLICIES_V1_REGION_SECURITY_POLICIES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_SECURITY_POLICIES_V1_REGION_SECURITY_POLICIES_CLIENT_H

#include "google/cloud/compute/region_security_policies/v1/region_security_policies_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_region_security_policies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the regionSecurityPolicies resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/regionSecurityPolicies
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class RegionSecurityPoliciesClient {
 public:
  explicit RegionSecurityPoliciesClient(ExperimentalTag, std::shared_ptr<RegionSecurityPoliciesConnection> connection, Options opts = {});
  ~RegionSecurityPoliciesClient();

  ///@{
  /// @name Copy and move support
  RegionSecurityPoliciesClient(RegionSecurityPoliciesClient const&) = default;
  RegionSecurityPoliciesClient& operator=(RegionSecurityPoliciesClient const&) = default;
  RegionSecurityPoliciesClient(RegionSecurityPoliciesClient&&) = default;
  RegionSecurityPoliciesClient& operator=(RegionSecurityPoliciesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(RegionSecurityPoliciesClient const& a, RegionSecurityPoliciesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(RegionSecurityPoliciesClient const& a, RegionSecurityPoliciesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param security_policy  Name of the security policy to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.DeleteRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L87}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionSecurityPolicies(std::string const& project, std::string const& region, std::string const& security_policy, Options opts = {});

  ///
  /// Deletes the specified policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionSecurityPolicies::v1::DeleteRegionSecurityPoliciesRequest,google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L87}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.DeleteRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L87}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  DeleteRegionSecurityPolicies(google::cloud::cpp::compute::regionSecurityPolicies::v1::DeleteRegionSecurityPoliciesRequest const& request, Options opts = {});

  ///
  /// List all of the ordered rules present in a single specified policy.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param security_policy  Name of the security policy to get.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::SecurityPolicy,google/cloud/compute/v1/internal/common.proto#L23371}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.GetRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L111}
  /// [google.cloud.cpp.compute.v1.SecurityPolicy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L23371}
  ///
  StatusOr<google::cloud::cpp::compute::v1::SecurityPolicy>
  GetRegionSecurityPolicies(std::string const& project, std::string const& region, std::string const& security_policy, Options opts = {});

  ///
  /// List all of the ordered rules present in a single specified policy.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionSecurityPolicies::v1::GetRegionSecurityPoliciesRequest,google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L111}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::SecurityPolicy,google/cloud/compute/v1/internal/common.proto#L23371}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.GetRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L111}
  /// [google.cloud.cpp.compute.v1.SecurityPolicy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L23371}
  ///
  StatusOr<google::cloud::cpp::compute::v1::SecurityPolicy>
  GetRegionSecurityPolicies(google::cloud::cpp::compute::regionSecurityPolicies::v1::GetRegionSecurityPoliciesRequest const& request, Options opts = {});

  ///
  /// Creates a new policy in the specified project using the data included in
  /// the request.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param security_policy_resource  The SecurityPolicy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.InsertRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L123}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionSecurityPolicies(std::string const& project, std::string const& region, google::cloud::cpp::compute::v1::SecurityPolicy const& security_policy_resource, Options opts = {});

  ///
  /// Creates a new policy in the specified project using the data included in
  /// the request.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionSecurityPolicies::v1::InsertRegionSecurityPoliciesRequest,google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L123}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.InsertRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L123}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  InsertRegionSecurityPolicies(google::cloud::cpp::compute::regionSecurityPolicies::v1::InsertRegionSecurityPoliciesRequest const& request, Options opts = {});

  ///
  /// List all the policies that have been configured for the specified project
  /// and region.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::SecurityPolicy,google/cloud/compute/v1/internal/common.proto#L23371}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.ListRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L150}
  /// [google.cloud.cpp.compute.v1.SecurityPolicy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L23371}
  ///
  StreamRange<google::cloud::cpp::compute::v1::SecurityPolicy>
  ListRegionSecurityPolicies(std::string const& project, std::string const& region, Options opts = {});

  ///
  /// List all the policies that have been configured for the specified project
  /// and region.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionSecurityPolicies::v1::ListRegionSecurityPoliciesRequest,google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L150}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::SecurityPolicy,google/cloud/compute/v1/internal/common.proto#L23371}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.ListRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L150}
  /// [google.cloud.cpp.compute.v1.SecurityPolicy]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L23371}
  ///
  StreamRange<google::cloud::cpp::compute::v1::SecurityPolicy>
  ListRegionSecurityPolicies(google::cloud::cpp::compute::regionSecurityPolicies::v1::ListRegionSecurityPoliciesRequest request, Options opts = {});

  ///
  /// Patches the specified policy with the data included in the request. To
  /// clear fields in the rule, leave the fields empty and specify them in the
  /// updateMask. This cannot be used to be update the rules in the policy.
  /// Please use the per rule methods like addRule, patchRule, and removeRule
  /// instead.
  ///
  /// @param project  Project ID for this request.
  /// @param region  Name of the region scoping this request.
  /// @param security_policy  Name of the security policy to update.
  /// @param security_policy_resource  The SecurityPolicy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.PatchRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L218}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchRegionSecurityPolicies(std::string const& project, std::string const& region, std::string const& security_policy, google::cloud::cpp::compute::v1::SecurityPolicy const& security_policy_resource, Options opts = {});

  ///
  /// Patches the specified policy with the data included in the request. To
  /// clear fields in the rule, leave the fields empty and specify them in the
  /// updateMask. This cannot be used to be update the rules in the policy.
  /// Please use the per rule methods like addRule, patchRule, and removeRule
  /// instead.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::regionSecurityPolicies::v1::PatchRegionSecurityPoliciesRequest,google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L218}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.regionSecurityPolicies.v1.PatchRegionSecurityPoliciesRequest]: @googleapis_reference_link{google/cloud/compute/region_security_policies/v1/region_security_policies.proto#L218}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  PatchRegionSecurityPolicies(google::cloud::cpp::compute::regionSecurityPolicies::v1::PatchRegionSecurityPoliciesRequest const& request, Options opts = {});

 private:
  std::shared_ptr<RegionSecurityPoliciesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_region_security_policies_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_REGION_SECURITY_POLICIES_V1_REGION_SECURITY_POLICIES_CLIENT_H
