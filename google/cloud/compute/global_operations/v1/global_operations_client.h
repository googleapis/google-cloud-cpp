// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/global_operations/v1/global_operations.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_GLOBAL_OPERATIONS_V1_GLOBAL_OPERATIONS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_GLOBAL_OPERATIONS_V1_GLOBAL_OPERATIONS_CLIENT_H

#include "google/cloud/compute/global_operations/v1/global_operations_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace compute_global_operations_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the globalOperations resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/globalOperations
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class GlobalOperationsClient {
 public:
  explicit GlobalOperationsClient(ExperimentalTag, std::shared_ptr<GlobalOperationsConnection> connection, Options opts = {});
  ~GlobalOperationsClient();

  ///@{
  /// @name Copy and move support
  GlobalOperationsClient(GlobalOperationsClient const&) = default;
  GlobalOperationsClient& operator=(GlobalOperationsClient const&) = default;
  GlobalOperationsClient(GlobalOperationsClient&&) = default;
  GlobalOperationsClient& operator=(GlobalOperationsClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(GlobalOperationsClient const& a, GlobalOperationsClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(GlobalOperationsClient const& a, GlobalOperationsClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Retrieves an aggregated list of all operations.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::OperationAggregatedList,google/cloud/compute/v1/internal/common.proto#L17638}
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.AggregatedListGlobalOperationsRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L91}
  /// [google.cloud.cpp.compute.v1.OperationAggregatedList]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17638}
  ///
  StatusOr<google::cloud::cpp::compute::v1::OperationAggregatedList>
  AggregatedListGlobalOperations(std::string const& project, Options opts = {});

  ///
  /// Retrieves an aggregated list of all operations.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::globalOperations::v1::AggregatedListGlobalOperationsRequest,google/cloud/compute/global_operations/v1/global_operations.proto#L91}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::OperationAggregatedList,google/cloud/compute/v1/internal/common.proto#L17638}
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.AggregatedListGlobalOperationsRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L91}
  /// [google.cloud.cpp.compute.v1.OperationAggregatedList]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17638}
  ///
  StatusOr<google::cloud::cpp::compute::v1::OperationAggregatedList>
  AggregatedListGlobalOperations(google::cloud::cpp::compute::globalOperations::v1::AggregatedListGlobalOperationsRequest const& request, Options opts = {});

  ///
  /// Deletes the specified Operations resource.
  ///
  /// @param project  Project ID for this request.
  /// @param operation  Name of the Operations resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.DeleteGlobalOperationsRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L165}
  ///
  Status
  DeleteGlobalOperations(std::string const& project, std::string const& operation, Options opts = {});

  ///
  /// Deletes the specified Operations resource.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::globalOperations::v1::DeleteGlobalOperationsRequest,google/cloud/compute/global_operations/v1/global_operations.proto#L165}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.DeleteGlobalOperationsRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L165}
  ///
  Status
  DeleteGlobalOperations(google::cloud::cpp::compute::globalOperations::v1::DeleteGlobalOperationsRequest const& request, Options opts = {});

  ///
  /// Retrieves the specified Operations resource.
  ///
  /// @param project  Project ID for this request.
  /// @param operation  Name of the Operations resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.GetGlobalOperationsRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L174}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  GetGlobalOperations(std::string const& project, std::string const& operation, Options opts = {});

  ///
  /// Retrieves the specified Operations resource.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::globalOperations::v1::GetGlobalOperationsRequest,google/cloud/compute/global_operations/v1/global_operations.proto#L174}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.GetGlobalOperationsRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L174}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  GetGlobalOperations(google::cloud::cpp::compute::globalOperations::v1::GetGlobalOperationsRequest const& request, Options opts = {});

  ///
  /// Retrieves a list of Operation resources contained within the specified
  /// project.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.ListGlobalOperationsRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L183}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StreamRange<google::cloud::cpp::compute::v1::Operation>
  ListGlobalOperations(std::string const& project, Options opts = {});

  ///
  /// Retrieves a list of Operation resources contained within the specified
  /// project.
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::globalOperations::v1::ListGlobalOperationsRequest,google/cloud/compute/global_operations/v1/global_operations.proto#L183}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.ListGlobalOperationsRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L183}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StreamRange<google::cloud::cpp::compute::v1::Operation>
  ListGlobalOperations(google::cloud::cpp::compute::globalOperations::v1::ListGlobalOperationsRequest request, Options opts = {});

  ///
  /// Waits for the specified Operation resource to return as `DONE` or for the
  /// request to approach the 2 minute deadline, and retrieves the specified
  /// Operation resource. This method differs from the `GET` method in that it
  /// waits for no more than the default deadline (2 minutes) and then returns
  /// the current state of the operation, which might be `DONE` or still in
  /// progress. This method is called on a best-effort basis. Specifically: - In
  /// uncommon cases, when the server is overloaded, the request might return
  /// before the default deadline is reached, or might return after zero seconds.
  /// - If the default deadline is reached, there is no guarantee that the
  /// operation is actually done when the method returns. Be prepared to retry if
  /// the operation is not `DONE`. 
  ///
  /// @param project  Project ID for this request.
  /// @param operation  Name of the Operations resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.WaitRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L248}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  Wait(std::string const& project, std::string const& operation, Options opts = {});

  ///
  /// Waits for the specified Operation resource to return as `DONE` or for the
  /// request to approach the 2 minute deadline, and retrieves the specified
  /// Operation resource. This method differs from the `GET` method in that it
  /// waits for no more than the default deadline (2 minutes) and then returns
  /// the current state of the operation, which might be `DONE` or still in
  /// progress. This method is called on a best-effort basis. Specifically: - In
  /// uncommon cases, when the server is overloaded, the request might return
  /// before the default deadline is reached, or might return after zero seconds.
  /// - If the default deadline is reached, there is no guarantee that the
  /// operation is actually done when the method returns. Be prepared to retry if
  /// the operation is not `DONE`. 
  ///
  /// @param request @googleapis_link{google::cloud::cpp::compute::globalOperations::v1::WaitRequest,google/cloud/compute/global_operations/v1/global_operations.proto#L248}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  /// [google.cloud.cpp.compute.globalOperations.v1.WaitRequest]: @googleapis_reference_link{google/cloud/compute/global_operations/v1/global_operations.proto#L248}
  /// [google.cloud.cpp.compute.v1.Operation]: @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17422}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation>
  Wait(google::cloud::cpp::compute::globalOperations::v1::WaitRequest const& request, Options opts = {});

 private:
  std::shared_ptr<GlobalOperationsConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_global_operations_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_GLOBAL_OPERATIONS_V1_GLOBAL_OPERATIONS_CLIENT_H
