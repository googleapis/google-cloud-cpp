// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/subnetworks/v1/subnetworks.proto

#include "google/cloud/compute/subnetworks/v1/internal/subnetworks_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_subnetworks_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

SubnetworksTracingConnection::SubnetworksTracingConnection(
    std::shared_ptr<compute_subnetworks_v1::SubnetworksConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::cpp::compute::v1::SubnetworkAggregatedList>
SubnetworksTracingConnection::AggregatedListSubnetworks(google::cloud::cpp::compute::subnetworks::v1::AggregatedListSubnetworksRequest const& request) {
  auto span = internal::MakeSpan("compute_subnetworks_v1::SubnetworksConnection::AggregatedListSubnetworks");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->AggregatedListSubnetworks(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
SubnetworksTracingConnection::DeleteSubnetworks(google::cloud::cpp::compute::subnetworks::v1::DeleteSubnetworksRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_subnetworks_v1::SubnetworksConnection::DeleteSubnetworks");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteSubnetworks(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
SubnetworksTracingConnection::ExpandIpCidrRange(google::cloud::cpp::compute::subnetworks::v1::ExpandIpCidrRangeRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_subnetworks_v1::SubnetworksConnection::ExpandIpCidrRange");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->ExpandIpCidrRange(request));
}

StatusOr<google::cloud::cpp::compute::v1::Subnetwork>
SubnetworksTracingConnection::GetSubnetworks(google::cloud::cpp::compute::subnetworks::v1::GetSubnetworksRequest const& request) {
  auto span = internal::MakeSpan("compute_subnetworks_v1::SubnetworksConnection::GetSubnetworks");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetSubnetworks(request));
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
SubnetworksTracingConnection::GetIamPolicy(google::cloud::cpp::compute::subnetworks::v1::GetIamPolicyRequest const& request) {
  auto span = internal::MakeSpan("compute_subnetworks_v1::SubnetworksConnection::GetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetIamPolicy(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
SubnetworksTracingConnection::InsertSubnetworks(google::cloud::cpp::compute::subnetworks::v1::InsertSubnetworksRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_subnetworks_v1::SubnetworksConnection::InsertSubnetworks");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->InsertSubnetworks(request));
}

StreamRange<google::cloud::cpp::compute::v1::Subnetwork>
SubnetworksTracingConnection::ListSubnetworks(google::cloud::cpp::compute::subnetworks::v1::ListSubnetworksRequest request) {
  auto span = internal::MakeSpan("compute_subnetworks_v1::SubnetworksConnection::ListSubnetworks");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListSubnetworks(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::cpp::compute::v1::Subnetwork>(
        std::move(span), std::move(sr));
}

StreamRange<google::cloud::cpp::compute::v1::UsableSubnetwork>
SubnetworksTracingConnection::ListUsable(google::cloud::cpp::compute::subnetworks::v1::ListUsableRequest request) {
  auto span = internal::MakeSpan("compute_subnetworks_v1::SubnetworksConnection::ListUsable");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListUsable(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::cpp::compute::v1::UsableSubnetwork>(
        std::move(span), std::move(sr));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
SubnetworksTracingConnection::PatchSubnetworks(google::cloud::cpp::compute::subnetworks::v1::PatchSubnetworksRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_subnetworks_v1::SubnetworksConnection::PatchSubnetworks");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->PatchSubnetworks(request));
}

StatusOr<google::cloud::cpp::compute::v1::Policy>
SubnetworksTracingConnection::SetIamPolicy(google::cloud::cpp::compute::subnetworks::v1::SetIamPolicyRequest const& request) {
  auto span = internal::MakeSpan("compute_subnetworks_v1::SubnetworksConnection::SetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->SetIamPolicy(request));
}

future<StatusOr<google::cloud::cpp::compute::v1::Operation>>
SubnetworksTracingConnection::SetPrivateIpGoogleAccess(google::cloud::cpp::compute::subnetworks::v1::SetPrivateIpGoogleAccessRequest const& request) {
  auto span = internal::MakeSpan(
      "compute_subnetworks_v1::SubnetworksConnection::SetPrivateIpGoogleAccess");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->SetPrivateIpGoogleAccess(request));
}

StatusOr<google::cloud::cpp::compute::v1::TestPermissionsResponse>
SubnetworksTracingConnection::TestIamPermissions(google::cloud::cpp::compute::subnetworks::v1::TestIamPermissionsRequest const& request) {
  auto span = internal::MakeSpan("compute_subnetworks_v1::SubnetworksConnection::TestIamPermissions");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->TestIamPermissions(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<compute_subnetworks_v1::SubnetworksConnection>
MakeSubnetworksTracingConnection(
    std::shared_ptr<compute_subnetworks_v1::SubnetworksConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<SubnetworksTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_subnetworks_v1_internal
}  // namespace cloud
}  // namespace google
