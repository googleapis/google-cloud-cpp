// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_GRPC_PROXIES_V1_TARGET_GRPC_PROXIES_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_GRPC_PROXIES_V1_TARGET_GRPC_PROXIES_CLIENT_H

#include "google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies_rest_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_target_grpc_proxies_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the targetGrpcProxies resource.
/// https://cloud.google.com/compute/docs/reference/rest/v1/targetGrpcProxies
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class TargetGrpcProxiesClient {
 public:
  explicit TargetGrpcProxiesClient(
      ExperimentalTag, std::shared_ptr<TargetGrpcProxiesConnection> connection,
      Options opts = {});
  ~TargetGrpcProxiesClient();

  ///@{
  /// @name Copy and move support
  TargetGrpcProxiesClient(TargetGrpcProxiesClient const&) = default;
  TargetGrpcProxiesClient& operator=(TargetGrpcProxiesClient const&) = default;
  TargetGrpcProxiesClient(TargetGrpcProxiesClient&&) = default;
  TargetGrpcProxiesClient& operator=(TargetGrpcProxiesClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(TargetGrpcProxiesClient const& a,
                         TargetGrpcProxiesClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(TargetGrpcProxiesClient const& a,
                         TargetGrpcProxiesClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Deletes the specified TargetGrpcProxy in the given scope
  ///
  /// @param project  Project ID for this request.
  /// @param target_grpc_proxy  Name of the TargetGrpcProxy resource to delete.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.DeleteTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L90}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteTargetGrpcProxies(
      std::string const& project, std::string const& target_grpc_proxy,
      Options opts = {});

  ///
  /// Deletes the specified TargetGrpcProxy in the given scope
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetGrpcProxies::v1::DeleteTargetGrpcProxiesRequest,google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L90}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.DeleteTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L90}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> DeleteTargetGrpcProxies(
      google::cloud::cpp::compute::targetGrpcProxies::v1::
          DeleteTargetGrpcProxiesRequest const& request,
      Options opts = {});

  ///
  /// Returns the specified TargetGrpcProxy resource in the given scope.
  ///
  /// @param project  Project ID for this request.
  /// @param target_grpc_proxy  Name of the TargetGrpcProxy resource to return.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetGrpcProxy,google/cloud/compute/v1/internal/common.proto#L26323}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.GetTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L114}
  /// [google.cloud.cpp.compute.v1.TargetGrpcProxy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L26323}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetGrpcProxy>
  GetTargetGrpcProxies(std::string const& project,
                       std::string const& target_grpc_proxy, Options opts = {});

  ///
  /// Returns the specified TargetGrpcProxy resource in the given scope.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetGrpcProxies::v1::GetTargetGrpcProxiesRequest,google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L114}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetGrpcProxy,google/cloud/compute/v1/internal/common.proto#L26323}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.GetTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L114}
  /// [google.cloud.cpp.compute.v1.TargetGrpcProxy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L26323}
  ///
  StatusOr<google::cloud::cpp::compute::v1::TargetGrpcProxy>
  GetTargetGrpcProxies(google::cloud::cpp::compute::targetGrpcProxies::v1::
                           GetTargetGrpcProxiesRequest const& request,
                       Options opts = {});

  ///
  /// Creates a TargetGrpcProxy in the specified project in the given scope
  /// using the parameters that are included in the request.
  ///
  /// @param project  Project ID for this request.
  /// @param target_grpc_proxy_resource  The TargetGrpcProxy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.InsertTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L123}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertTargetGrpcProxies(
      std::string const& project,
      google::cloud::cpp::compute::v1::TargetGrpcProxy const&
          target_grpc_proxy_resource,
      Options opts = {});

  ///
  /// Creates a TargetGrpcProxy in the specified project in the given scope
  /// using the parameters that are included in the request.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetGrpcProxies::v1::InsertTargetGrpcProxiesRequest,google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L123}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.InsertTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L123}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> InsertTargetGrpcProxies(
      google::cloud::cpp::compute::targetGrpcProxies::v1::
          InsertTargetGrpcProxiesRequest const& request,
      Options opts = {});

  ///
  /// Lists the TargetGrpcProxies for a project in the given scope.
  ///
  /// @param project  Project ID for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetGrpcProxy,google/cloud/compute/v1/internal/common.proto#L26323}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.ListTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L148}
  /// [google.cloud.cpp.compute.v1.TargetGrpcProxy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L26323}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetGrpcProxy>
  ListTargetGrpcProxies(std::string const& project, Options opts = {});

  ///
  /// Lists the TargetGrpcProxies for a project in the given scope.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetGrpcProxies::v1::ListTargetGrpcProxiesRequest,google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L148}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::TargetGrpcProxy,google/cloud/compute/v1/internal/common.proto#L26323}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.ListTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L148}
  /// [google.cloud.cpp.compute.v1.TargetGrpcProxy]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L26323}
  ///
  StreamRange<google::cloud::cpp::compute::v1::TargetGrpcProxy>
  ListTargetGrpcProxies(google::cloud::cpp::compute::targetGrpcProxies::v1::
                            ListTargetGrpcProxiesRequest request,
                        Options opts = {});

  ///
  /// Patches the specified TargetGrpcProxy resource with the data included in
  /// the request. This method supports PATCH semantics and uses JSON merge
  /// patch format and processing rules.
  ///
  /// @param project  Project ID for this request.
  /// @param target_grpc_proxy  Name of the TargetGrpcProxy resource to patch.
  /// @param target_grpc_proxy_resource  The TargetGrpcProxy for this request.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.PatchTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L213}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchTargetGrpcProxies(
      std::string const& project, std::string const& target_grpc_proxy,
      google::cloud::cpp::compute::v1::TargetGrpcProxy const&
          target_grpc_proxy_resource,
      Options opts = {});

  ///
  /// Patches the specified TargetGrpcProxy resource with the data included in
  /// the request. This method supports PATCH semantics and uses JSON merge
  /// patch format and processing rules.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::cpp::compute::targetGrpcProxies::v1::PatchTargetGrpcProxiesRequest,google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L213}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::cpp::compute::v1::Operation,google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  /// [google.cloud.cpp.compute.targetGrpcProxies.v1.PatchTargetGrpcProxiesRequest]:
  /// @googleapis_reference_link{google/cloud/compute/target_grpc_proxies/v1/target_grpc_proxies.proto#L213}
  /// [google.cloud.cpp.compute.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/compute/v1/internal/common.proto#L17443}
  ///
  StatusOr<google::cloud::cpp::compute::v1::Operation> PatchTargetGrpcProxies(
      google::cloud::cpp::compute::targetGrpcProxies::v1::
          PatchTargetGrpcProxiesRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<TargetGrpcProxiesConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_target_grpc_proxies_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPUTE_TARGET_GRPC_PROXIES_V1_TARGET_GRPC_PROXIES_CLIENT_H
