// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/compute_public_google_rest_v1.json
// revision: 20230221

syntax = "proto3";

package google.cloud.cpp.compute.projects.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/cloud/compute/v1/internal/common.proto";
import "google/cloud/extended_operations.proto";

// Service for the projects resource.
// https://cloud.google.com/compute/docs/reference/rest/v1/projects
service Projects {
  option (google.api.default_host) = "compute.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/cloud-platform,"
      "https://www.googleapis.com/auth/compute,"
      "https://www.googleapis.com/auth/compute.readonly,"
      "https://www.googleapis.com/auth/devstorage.full_control,"
      "https://www.googleapis.com/auth/devstorage.read_only,"
      "https://www.googleapis.com/auth/devstorage.read_write";

  // Disable this project as a shared VPC host project.
  rpc DisableXpnHost(DisableXpnHostRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/disableXpnHost"
      body: "*"
    };
    option (google.api.method_signature) = "project";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Disable a service resource (also known as service project) associated with
  // this host project.
  rpc DisableXpnResource(DisableXpnResourceRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/disableXpnResource"
      body: "projects_disable_xpn_resource_request_resource"
    };
    option (google.api.method_signature) =
        "project,projects_disable_xpn_resource_request_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Enable this project as a shared VPC host project.
  rpc EnableXpnHost(EnableXpnHostRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/enableXpnHost"
      body: "*"
    };
    option (google.api.method_signature) = "project";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Enable service resource (a.k.a service project) for a host project, so that
  // subnets in the host project can be used by instances in the service
  // project.
  rpc EnableXpnResource(EnableXpnResourceRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/enableXpnResource"
      body: "projects_enable_xpn_resource_request_resource"
    };
    option (google.api.method_signature) =
        "project,projects_enable_xpn_resource_request_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Returns the specified Project resource. To decrease latency for this
  // method, you can optionally omit any unneeded information from the response
  // by using a field mask. This practice is especially recommended for unused
  // quota information (the `quotas` field). To exclude one or more fields, set
  // your request's `fields` query parameter to only include the fields you
  // need. For example, to only include the `id` and `selfLink` fields, add the
  // query parameter `?fields=id,selfLink` to your request.
  rpc GetProjects(GetProjectsRequest)
      returns (google.cloud.cpp.compute.v1.Project) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}"
    };
    option (google.api.method_signature) = "project";
  }

  // Gets the shared VPC host project that this project links to. May be empty
  // if no link exists.
  rpc GetXpnHost(GetXpnHostRequest)
      returns (google.cloud.cpp.compute.v1.Project) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/getXpnHost"
    };
    option (google.api.method_signature) = "project";
  }

  // Gets service resources (a.k.a service project) associated with this host
  // project.
  rpc GetXpnResources(GetXpnResourcesRequest)
      returns (google.cloud.cpp.compute.v1.ProjectsGetXpnResources) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project=project}/getXpnResources"
    };
    option (google.api.method_signature) = "project";
  }

  // Lists all shared VPC host projects visible to the user in an organization.
  rpc ListXpnHosts(ListXpnHostsRequest)
      returns (google.cloud.cpp.compute.v1.XpnHostList) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/listXpnHosts"
      body: "projects_list_xpn_hosts_request_resource"
    };
    option (google.api.method_signature) =
        "project,projects_list_xpn_hosts_request_resource";
  }

  // Moves a persistent disk from one zone to another.
  rpc MoveDisk(MoveDiskRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/moveDisk"
      body: "disk_move_request_resource"
    };
    option (google.api.method_signature) = "project,disk_move_request_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Moves an instance and its attached persistent disks from one zone to
  // another. *Note*: Moving VMs or disks by using this method might cause
  // unexpected behavior. For more information, see the [known
  // issue](/compute/docs/troubleshooting/known-issues#moving_vms_or_disks_using_the_moveinstance_api_or_the_causes_unexpected_behavior).
  rpc MoveInstance(MoveInstanceRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/moveInstance"
      body: "instance_move_request_resource"
    };
    option (google.api.method_signature) =
        "project,instance_move_request_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Sets metadata common to all instances within the specified project using
  // the data included in the request.
  rpc SetCommonInstanceMetadata(SetCommonInstanceMetadataRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/setCommonInstanceMetadata"
      body: "metadata_resource"
    };
    option (google.api.method_signature) = "project,metadata_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Sets the default network tier of the project. The default network tier is
  // used when an address/forwardingRule/instance is created without specifying
  // the network tier field.
  rpc SetDefaultNetworkTier(SetDefaultNetworkTierRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/setDefaultNetworkTier"
      body: "projects_set_default_network_tier_request_resource"
    };
    option (google.api.method_signature) =
        "project,projects_set_default_network_tier_request_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }

  // Enables the usage export feature and sets the usage export bucket where
  // reports are stored. If you provide an empty request body using this method,
  // the usage export feature will be disabled.
  rpc SetUsageExportBucket(SetUsageExportBucketRequest)
      returns (google.cloud.cpp.compute.v1.Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project=project}/setUsageExportBucket"
      body: "usage_export_location_resource"
    };
    option (google.api.method_signature) =
        "project,usage_export_location_resource";
    option (google.cloud.operation_service) = "GlobalOperations";
  }
}

// Request message for DisableXpnHost.
message DisableXpnHostRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 2;
}

// Request message for DisableXpnResource.
message DisableXpnResourceRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // The ProjectsDisableXpnResourceRequest for this request.
  optional google.cloud.cpp.compute.v1.ProjectsDisableXpnResourceRequest
      projects_disable_xpn_resource_request_resource = 2
      [json_name = "__json_request_body"];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;
}

// Request message for EnableXpnHost.
message EnableXpnHostRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 2;
}

// Request message for EnableXpnResource.
message EnableXpnResourceRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // The ProjectsEnableXpnResourceRequest for this request.
  optional google.cloud.cpp.compute.v1.ProjectsEnableXpnResourceRequest
      projects_enable_xpn_resource_request_resource = 2
      [json_name = "__json_request_body"];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;
}

// Request message for GetProjects.
message GetProjectsRequest {
  // Project ID for this request.
  string project = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetXpnHost.
message GetXpnHostRequest {
  // Project ID for this request.
  string project = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetXpnResources.
message GetXpnResourcesRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. If you want to use AIP-160, your expression must specify
  // the field name, an operator, and the value that you want to use for
  // filtering. The value must be a string, a number, or a boolean. The operator
  // must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you
  // are filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:`
  // operator can be used with string fields to match substrings. For non-string
  // fields it is equivalent to the `=` operator. The `:*` comparison can be
  // used to test whether a key has been defined. For example, to find all
  // objects with `owner` label use: ``` labels.owner:* ``` You can also filter
  // nested fields. For example, you could specify `scheduling.automaticRestart
  // = false` to include instances only if they are not scheduled for automatic
  // restarts. You can use filtering on nested fields to filter based on
  // resource labels. To filter on multiple expressions, provide each separate
  // expression within parentheses. For example: ```
  // (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By
  // default, each expression is an `AND` expression. However, you can include
  // `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform =
  // "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`.
  optional string filter = 1;

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 2;

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 3;

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 4;

  // Project ID for this request.
  string project = 5 [(google.api.field_behavior) = REQUIRED];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 6;
}

// Request message for ListXpnHosts.
message ListXpnHostsRequest {
  // A filter expression that filters resources listed in the response. Most
  // Compute resources support two types of filter expressions: expressions that
  // support regular expressions and expressions that follow API improvement
  // proposal AIP-160. If you want to use AIP-160, your expression must specify
  // the field name, an operator, and the value that you want to use for
  // filtering. The value must be a string, a number, or a boolean. The operator
  // must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you
  // are filtering Compute Engine instances, you can exclude instances named
  // `example-instance` by specifying `name != example-instance`. The `:`
  // operator can be used with string fields to match substrings. For non-string
  // fields it is equivalent to the `=` operator. The `:*` comparison can be
  // used to test whether a key has been defined. For example, to find all
  // objects with `owner` label use: ``` labels.owner:* ``` You can also filter
  // nested fields. For example, you could specify `scheduling.automaticRestart
  // = false` to include instances only if they are not scheduled for automatic
  // restarts. You can use filtering on nested fields to filter based on
  // resource labels. To filter on multiple expressions, provide each separate
  // expression within parentheses. For example: ```
  // (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By
  // default, each expression is an `AND` expression. However, you can include
  // `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform =
  // "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
  // (scheduling.automaticRestart = true) ``` If you want to use a regular
  // expression, use the `eq` (equal) or `ne` (not equal) operator against a
  // single un-parenthesized expression with or without quotes or against
  // multiple parenthesized expressions. Examples: `fieldname eq unquoted
  // literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
  // quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The
  // literal value is interpreted as a regular expression using Google RE2
  // library syntax. The literal value must match the entire field. For example,
  // to filter for instances that do not end with name "instance", you would use
  // `name ne .*instance`.
  optional string filter = 1;

  // The maximum number of results per page that should be returned. If the
  // number of available results is larger than `maxResults`, Compute Engine
  // returns a `nextPageToken` that can be used to get the next page of results
  // in subsequent list requests. Acceptable values are `0` to `500`, inclusive.
  // (Default: `500`)
  optional uint32 max_results = 2;

  // Sorts list results by a certain order. By default, results are returned in
  // alphanumerical order based on the resource name. You can also sort results
  // in descending order based on the creation timestamp using
  // `orderBy="creationTimestamp desc"`. This sorts results based on the
  // `creationTimestamp` field in reverse chronological order (newest result
  // first). Use this to sort resources like operations so that the newest
  // operation is returned first. Currently, only sorting by `name` or
  // `creationTimestamp desc` is supported.
  optional string order_by = 3;

  // Specifies a page token to use. Set `pageToken` to the `nextPageToken`
  // returned by a previous list request to get the next page of results.
  optional string page_token = 4;

  // Project ID for this request.
  string project = 5 [(google.api.field_behavior) = REQUIRED];

  // The ProjectsListXpnHostsRequest for this request.
  optional google.cloud.cpp.compute.v1.ProjectsListXpnHostsRequest
      projects_list_xpn_hosts_request_resource = 6
      [json_name = "__json_request_body"];

  // Opt-in for partial success behavior which provides partial results in case
  // of failure. The default value is false.
  optional bool return_partial_success = 7;
}

// Request message for MoveDisk.
message MoveDiskRequest {
  // The DiskMoveRequest for this request.
  optional google.cloud.cpp.compute.v1.DiskMoveRequest
      disk_move_request_resource = 1 [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;
}

// Request message for MoveInstance.
message MoveInstanceRequest {
  // The InstanceMoveRequest for this request.
  optional google.cloud.cpp.compute.v1.InstanceMoveRequest
      instance_move_request_resource = 1 [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;
}

// Request message for SetCommonInstanceMetadata.
message SetCommonInstanceMetadataRequest {
  // The Metadata for this request.
  optional google.cloud.cpp.compute.v1.Metadata metadata_resource = 1
      [json_name = "__json_request_body"];

  // Project ID for this request.
  string project = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;
}

// Request message for SetDefaultNetworkTier.
message SetDefaultNetworkTierRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // The ProjectsSetDefaultNetworkTierRequest for this request.
  optional google.cloud.cpp.compute.v1.ProjectsSetDefaultNetworkTierRequest
      projects_set_default_network_tier_request_resource = 2
      [json_name = "__json_request_body"];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 3;
}

// Request message for SetUsageExportBucket.
message SetUsageExportBucketRequest {
  // Project ID for this request.
  string project = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.cloud.operation_request_field) = "project"
  ];

  // An optional request ID to identify requests. Specify a unique request ID so
  // that if you must retry your request, the server will know to ignore the
  // request if it has already been completed. For example, consider a situation
  // where you make an initial request and the request times out. If you make
  // the request again with the same request ID, the server can check if
  // original operation with the same request ID was received, and if so, will
  // ignore the second request. This prevents clients from accidentally creating
  // duplicate commitments. The request ID must be a valid UUID with the
  // exception that zero UUID is not supported (
  // 00000000-0000-0000-0000-000000000000).
  optional string request_id = 2;

  // The UsageExportLocation for this request.
  optional google.cloud.cpp.compute.v1.UsageExportLocation
      usage_export_location_resource = 3 [json_name = "__json_request_body"];
}
