// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/projects/v1/projects.proto

#include "google/cloud/compute/projects/v1/internal/projects_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/compute/projects/v1/projects.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace compute_projects_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultProjectsRestStub::DefaultProjectsRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultProjectsRestStub::DefaultProjectsRestStub(
    std::shared_ptr<rest_internal::RestClient> service,
    Options options)
    : service_(std::move(service)),
      options_(std::move(options)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultProjectsRestStub::DisableXpnHost(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::DisableXpnHostRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/disableXpnHost");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultProjectsRestStub::DisableXpnResource(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::DisableXpnResourceRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/disableXpnResource");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultProjectsRestStub::EnableXpnHost(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::EnableXpnHostRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/enableXpnHost");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultProjectsRestStub::EnableXpnResource(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::EnableXpnResourceRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/enableXpnResource");
}

StatusOr<google::cloud::cpp::compute::v1::Project>
DefaultProjectsRestStub::GetProjects(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::GetProjectsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Project>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}",
      {std::make_pair("project", request.project())});
}

StatusOr<google::cloud::cpp::compute::v1::Project>
DefaultProjectsRestStub::GetXpnHost(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::GetXpnHostRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::Project>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/getXpnHost",
      {std::make_pair("project", request.project())});
}

StatusOr<google::cloud::cpp::compute::v1::ProjectsGetXpnResources>
DefaultProjectsRestStub::GetXpnResources(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::GetXpnResourcesRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::compute::v1::ProjectsGetXpnResources>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/getXpnResources",
      {std::make_pair("filter", request.filter()),
       std::make_pair("max_results", std::to_string(request.max_results())),
       std::make_pair("order_by", request.order_by()),
       std::make_pair("page_token", request.page_token()),
       std::make_pair("project", request.project()),
       std::make_pair("return_partial_success", std::to_string(request.return_partial_success()))});
}

StatusOr<google::cloud::cpp::compute::v1::XpnHostList>
DefaultProjectsRestStub::ListXpnHosts(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::ListXpnHostsRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::XpnHostList>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/listXpnHosts");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultProjectsRestStub::MoveDisk(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::MoveDiskRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/moveDisk");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultProjectsRestStub::MoveInstance(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::MoveInstanceRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/moveInstance");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultProjectsRestStub::SetCommonInstanceMetadata(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::SetCommonInstanceMetadataRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/setCommonInstanceMetadata");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultProjectsRestStub::SetDefaultNetworkTier(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::SetDefaultNetworkTierRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/setDefaultNetworkTier");
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
DefaultProjectsRestStub::SetUsageExportBucket(
      google::cloud::rest_internal::RestContext& rest_context,
      google::cloud::cpp::compute::projects::v1::SetUsageExportBucketRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::compute::v1::Operation>(
      *service_, rest_context, request,
      "/compute/v1/projects/{project}/setUsageExportBucket");
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_projects_v1_internal
}  // namespace cloud
}  // namespace google
