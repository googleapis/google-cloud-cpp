// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/compute/projects/v1/projects.proto

#include "google/cloud/compute/projects/v1/internal/projects_rest_logging_decorator.h"
#include "google/cloud/internal/log_wrapper.h"
#include "google/cloud/status_or.h"
#include <memory>

namespace google {
namespace cloud {
namespace compute_projects_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ProjectsRestLogging::ProjectsRestLogging(
    std::shared_ptr<ProjectsRestStub> child, TracingOptions tracing_options,
    std::set<std::string> components)
    : child_(std::move(child)),
      tracing_options_(std::move(tracing_options)),
      components_(std::move(components)) {}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ProjectsRestLogging::DisableXpnHost(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::DisableXpnHostRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::projects::v1::
                 DisableXpnHostRequest const& request) {
        return child_->DisableXpnHost(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ProjectsRestLogging::DisableXpnResource(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::DisableXpnResourceRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::projects::v1::
                 DisableXpnResourceRequest const& request) {
        return child_->DisableXpnResource(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ProjectsRestLogging::EnableXpnHost(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::EnableXpnHostRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::projects::v1::EnableXpnHostRequest const&
              request) { return child_->EnableXpnHost(rest_context, request); },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ProjectsRestLogging::EnableXpnResource(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::EnableXpnResourceRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::projects::v1::
                 EnableXpnResourceRequest const& request) {
        return child_->EnableXpnResource(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Project>
ProjectsRestLogging::GetProjects(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::GetProjectsRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::projects::v1::GetProjectsRequest const&
              request) { return child_->GetProjects(rest_context, request); },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Project>
ProjectsRestLogging::GetXpnHost(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::GetXpnHostRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::projects::v1::GetXpnHostRequest const&
                 request) { return child_->GetXpnHost(rest_context, request); },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::ProjectsGetXpnResources>
ProjectsRestLogging::GetXpnResources(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::GetXpnResourcesRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::projects::v1::
                 GetXpnResourcesRequest const& request) {
        return child_->GetXpnResources(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::XpnHostList>
ProjectsRestLogging::ListXpnHosts(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::ListXpnHostsRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::projects::v1::ListXpnHostsRequest const&
              request) { return child_->ListXpnHosts(rest_context, request); },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ProjectsRestLogging::MoveDisk(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::MoveDiskRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::projects::v1::MoveDiskRequest const&
                 request) { return child_->MoveDisk(rest_context, request); },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ProjectsRestLogging::MoveInstance(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::MoveInstanceRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::cpp::compute::projects::v1::MoveInstanceRequest const&
              request) { return child_->MoveInstance(rest_context, request); },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ProjectsRestLogging::SetCommonInstanceMetadata(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::
        SetCommonInstanceMetadataRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::projects::v1::
                 SetCommonInstanceMetadataRequest const& request) {
        return child_->SetCommonInstanceMetadata(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ProjectsRestLogging::SetDefaultNetworkTier(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::
        SetDefaultNetworkTierRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::projects::v1::
                 SetDefaultNetworkTierRequest const& request) {
        return child_->SetDefaultNetworkTier(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::cpp::compute::v1::Operation>
ProjectsRestLogging::SetUsageExportBucket(
    rest_internal::RestContext& rest_context,
    google::cloud::cpp::compute::projects::v1::
        SetUsageExportBucketRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](rest_internal::RestContext& rest_context,
             google::cloud::cpp::compute::projects::v1::
                 SetUsageExportBucketRequest const& request) {
        return child_->SetUsageExportBucket(rest_context, request);
      },
      rest_context, request, __func__, tracing_options_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace compute_projects_v1_internal
}  // namespace cloud
}  // namespace google
