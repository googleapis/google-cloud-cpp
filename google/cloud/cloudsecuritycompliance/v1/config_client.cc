// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/config.proto

#include "google/cloud/cloudsecuritycompliance/v1/config_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ConfigClient::ConfigClient(std::shared_ptr<ConfigConnection> connection,
                           Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
ConfigClient::~ConfigClient() = default;

StreamRange<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigClient::ListFrameworks(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::ListFrameworksRequest request;
  request.set_parent(parent);
  return connection_->ListFrameworks(request);
}

StreamRange<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigClient::ListFrameworks(
    google::cloud::cloudsecuritycompliance::v1::ListFrameworksRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListFrameworks(std::move(request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigClient::GetFramework(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest request;
  request.set_name(name);
  return connection_->GetFramework(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigClient::GetFramework(
    google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetFramework(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigClient::CreateFramework(
    std::string const& parent,
    google::cloud::cloudsecuritycompliance::v1::Framework const& framework,
    std::string const& framework_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::CreateFrameworkRequest request;
  request.set_parent(parent);
  *request.mutable_framework() = framework;
  request.set_framework_id(framework_id);
  return connection_->CreateFramework(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigClient::CreateFramework(
    google::cloud::cloudsecuritycompliance::v1::CreateFrameworkRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateFramework(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigClient::UpdateFramework(
    google::cloud::cloudsecuritycompliance::v1::Framework const& framework,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::UpdateFrameworkRequest request;
  *request.mutable_framework() = framework;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateFramework(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigClient::UpdateFramework(
    google::cloud::cloudsecuritycompliance::v1::UpdateFrameworkRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateFramework(request);
}

Status ConfigClient::DeleteFramework(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::DeleteFrameworkRequest request;
  request.set_name(name);
  return connection_->DeleteFramework(request);
}

Status ConfigClient::DeleteFramework(
    google::cloud::cloudsecuritycompliance::v1::DeleteFrameworkRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteFramework(request);
}

StreamRange<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigClient::ListCloudControls(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::ListCloudControlsRequest request;
  request.set_parent(parent);
  return connection_->ListCloudControls(request);
}

StreamRange<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigClient::ListCloudControls(
    google::cloud::cloudsecuritycompliance::v1::ListCloudControlsRequest
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListCloudControls(std::move(request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigClient::GetCloudControl(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::GetCloudControlRequest request;
  request.set_name(name);
  return connection_->GetCloudControl(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigClient::GetCloudControl(
    google::cloud::cloudsecuritycompliance::v1::GetCloudControlRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetCloudControl(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigClient::CreateCloudControl(
    std::string const& parent,
    google::cloud::cloudsecuritycompliance::v1::CloudControl const&
        cloud_control,
    std::string const& cloud_control_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::CreateCloudControlRequest request;
  request.set_parent(parent);
  *request.mutable_cloud_control() = cloud_control;
  request.set_cloud_control_id(cloud_control_id);
  return connection_->CreateCloudControl(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigClient::CreateCloudControl(
    google::cloud::cloudsecuritycompliance::v1::CreateCloudControlRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateCloudControl(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigClient::UpdateCloudControl(
    google::cloud::cloudsecuritycompliance::v1::CloudControl const&
        cloud_control,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::UpdateCloudControlRequest request;
  *request.mutable_cloud_control() = cloud_control;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateCloudControl(request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigClient::UpdateCloudControl(
    google::cloud::cloudsecuritycompliance::v1::UpdateCloudControlRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateCloudControl(request);
}

Status ConfigClient::DeleteCloudControl(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cloudsecuritycompliance::v1::DeleteCloudControlRequest request;
  request.set_name(name);
  return connection_->DeleteCloudControl(request);
}

Status ConfigClient::DeleteCloudControl(
    google::cloud::cloudsecuritycompliance::v1::DeleteCloudControlRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteCloudControl(request);
}

StreamRange<google::cloud::location::Location> ConfigClient::ListLocations(
    google::cloud::location::ListLocationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListLocations(std::move(request));
}

StatusOr<google::cloud::location::Location> ConfigClient::GetLocation(
    google::cloud::location::GetLocationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetLocation(request);
}

StreamRange<google::longrunning::Operation> ConfigClient::ListOperations(
    std::string const& name, std::string const& filter, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::ListOperationsRequest request;
  request.set_name(name);
  request.set_filter(filter);
  return connection_->ListOperations(request);
}

StreamRange<google::longrunning::Operation> ConfigClient::ListOperations(
    google::longrunning::ListOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListOperations(std::move(request));
}

StatusOr<google::longrunning::Operation> ConfigClient::GetOperation(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation> ConfigClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

Status ConfigClient::DeleteOperation(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::DeleteOperationRequest request;
  request.set_name(name);
  return connection_->DeleteOperation(request);
}

Status ConfigClient::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteOperation(request);
}

Status ConfigClient::CancelOperation(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::CancelOperationRequest request;
  request.set_name(name);
  return connection_->CancelOperation(request);
}

Status ConfigClient::CancelOperation(
    google::longrunning::CancelOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1
}  // namespace cloud
}  // namespace google
