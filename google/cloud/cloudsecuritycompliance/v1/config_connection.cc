// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/config.proto

#include "google/cloud/cloudsecuritycompliance/v1/config_connection.h"
#include "google/cloud/cloudsecuritycompliance/v1/config_options.h"
#include "google/cloud/cloudsecuritycompliance/v1/internal/config_connection_impl.h"
#include "google/cloud/cloudsecuritycompliance/v1/internal/config_option_defaults.h"
#include "google/cloud/cloudsecuritycompliance/v1/internal/config_stub_factory.h"
#include "google/cloud/cloudsecuritycompliance/v1/internal/config_tracing_connection.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ConfigConnection::~ConfigConnection() = default;

StreamRange<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigConnection::ListFrameworks(
    google::cloud::cloudsecuritycompliance::v1::
        ListFrameworksRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::cloudsecuritycompliance::v1::Framework>>();
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigConnection::GetFramework(
    google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigConnection::CreateFramework(
    google::cloud::cloudsecuritycompliance::v1::CreateFrameworkRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigConnection::UpdateFramework(
    google::cloud::cloudsecuritycompliance::v1::UpdateFrameworkRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ConfigConnection::DeleteFramework(
    google::cloud::cloudsecuritycompliance::v1::DeleteFrameworkRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigConnection::ListCloudControls(
    google::cloud::cloudsecuritycompliance::v1::
        ListCloudControlsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::cloudsecuritycompliance::v1::CloudControl>>();
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigConnection::GetCloudControl(
    google::cloud::cloudsecuritycompliance::v1::GetCloudControlRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigConnection::CreateCloudControl(google::cloud::cloudsecuritycompliance::
                                         v1::CreateCloudControlRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigConnection::UpdateCloudControl(google::cloud::cloudsecuritycompliance::
                                         v1::UpdateCloudControlRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ConfigConnection::DeleteCloudControl(
    google::cloud::cloudsecuritycompliance::v1::
        DeleteCloudControlRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::location::Location> ConfigConnection::ListLocations(
    google::cloud::location::
        ListLocationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::location::Location>>();
}

StatusOr<google::cloud::location::Location> ConfigConnection::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::longrunning::Operation> ConfigConnection::ListOperations(
    google::longrunning::
        ListOperationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::longrunning::Operation>>();
}

StatusOr<google::longrunning::Operation> ConfigConnection::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ConfigConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ConfigConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<ConfigConnection> MakeConfigConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 ConfigPolicyOptionList>(options, __func__);
  options = cloudsecuritycompliance_v1_internal::ConfigDefaultOptions(
      std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = cloudsecuritycompliance_v1_internal::CreateDefaultConfigStub(
      std::move(auth), options);
  return cloudsecuritycompliance_v1_internal::MakeConfigTracingConnection(
      std::make_shared<
          cloudsecuritycompliance_v1_internal::ConfigConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1
}  // namespace cloud
}  // namespace google
