// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/config.proto

#include "google/cloud/cloudsecuritycompliance/v1/internal/config_connection_impl.h"
#include "google/cloud/cloudsecuritycompliance/v1/internal/config_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace {

std::unique_ptr<cloudsecuritycompliance_v1::ConfigRetryPolicy> retry_policy(
    Options const& options) {
  return options.get<cloudsecuritycompliance_v1::ConfigRetryPolicyOption>()
      ->clone();
}

std::unique_ptr<BackoffPolicy> backoff_policy(Options const& options) {
  return options.get<cloudsecuritycompliance_v1::ConfigBackoffPolicyOption>()
      ->clone();
}

std::unique_ptr<cloudsecuritycompliance_v1::ConfigConnectionIdempotencyPolicy>
idempotency_policy(Options const& options) {
  return options
      .get<
          cloudsecuritycompliance_v1::ConfigConnectionIdempotencyPolicyOption>()
      ->clone();
}

}  // namespace

ConfigConnectionImpl::ConfigConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<cloudsecuritycompliance_v1_internal::ConfigStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      ConfigConnection::options())) {}

StreamRange<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigConnectionImpl::ListFrameworks(
    google::cloud::cloudsecuritycompliance::v1::ListFrameworksRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListFrameworks(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cloudsecuritycompliance::v1::Framework>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<cloudsecuritycompliance_v1::ConfigRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options, google::cloud::cloudsecuritycompliance::v1::
                                      ListFrameworksRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::cloudsecuritycompliance::v1::
                       ListFrameworksRequest const& request) {
              return stub->ListFrameworks(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::cloudsecuritycompliance::v1::ListFrameworksResponse r) {
        std::vector<google::cloud::cloudsecuritycompliance::v1::Framework>
            result(r.frameworks().size());
        auto& messages = *r.mutable_frameworks();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigConnectionImpl::GetFramework(
    google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetFramework(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest const&
              request) {
        return stub_->GetFramework(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigConnectionImpl::CreateFramework(
    google::cloud::cloudsecuritycompliance::v1::CreateFrameworkRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateFramework(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::cloudsecuritycompliance::v1::
                 CreateFrameworkRequest const& request) {
        return stub_->CreateFramework(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigConnectionImpl::UpdateFramework(
    google::cloud::cloudsecuritycompliance::v1::UpdateFrameworkRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateFramework(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::cloudsecuritycompliance::v1::
                 UpdateFrameworkRequest const& request) {
        return stub_->UpdateFramework(context, options, request);
      },
      *current, request, __func__);
}

Status ConfigConnectionImpl::DeleteFramework(
    google::cloud::cloudsecuritycompliance::v1::DeleteFrameworkRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteFramework(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::cloudsecuritycompliance::v1::
                 DeleteFrameworkRequest const& request) {
        return stub_->DeleteFramework(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigConnectionImpl::ListCloudControls(
    google::cloud::cloudsecuritycompliance::v1::ListCloudControlsRequest
        request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListCloudControls(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::cloudsecuritycompliance::v1::CloudControl>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<cloudsecuritycompliance_v1::ConfigRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options, google::cloud::cloudsecuritycompliance::v1::
                                      ListCloudControlsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::cloudsecuritycompliance::v1::
                       ListCloudControlsRequest const& request) {
              return stub->ListCloudControls(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::cloudsecuritycompliance::v1::ListCloudControlsResponse
             r) {
        std::vector<google::cloud::cloudsecuritycompliance::v1::CloudControl>
            result(r.cloud_controls().size());
        auto& messages = *r.mutable_cloud_controls();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigConnectionImpl::GetCloudControl(
    google::cloud::cloudsecuritycompliance::v1::GetCloudControlRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetCloudControl(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::cloudsecuritycompliance::v1::
                 GetCloudControlRequest const& request) {
        return stub_->GetCloudControl(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigConnectionImpl::CreateCloudControl(
    google::cloud::cloudsecuritycompliance::v1::CreateCloudControlRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateCloudControl(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::cloudsecuritycompliance::v1::
                 CreateCloudControlRequest const& request) {
        return stub_->CreateCloudControl(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigConnectionImpl::UpdateCloudControl(
    google::cloud::cloudsecuritycompliance::v1::UpdateCloudControlRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateCloudControl(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::cloudsecuritycompliance::v1::
                 UpdateCloudControlRequest const& request) {
        return stub_->UpdateCloudControl(context, options, request);
      },
      *current, request, __func__);
}

Status ConfigConnectionImpl::DeleteCloudControl(
    google::cloud::cloudsecuritycompliance::v1::DeleteCloudControlRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteCloudControl(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::cloudsecuritycompliance::v1::
                 DeleteCloudControlRequest const& request) {
        return stub_->DeleteCloudControl(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::location::Location>
ConfigConnectionImpl::ListLocations(
    google::cloud::location::ListLocationsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListLocations(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::location::Location>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<cloudsecuritycompliance_v1::ConfigRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::location::ListLocationsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context, Options const& options,
                google::cloud::location::ListLocationsRequest const& request) {
              return stub->ListLocations(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::location::ListLocationsResponse r) {
        std::vector<google::cloud::location::Location> result(
            r.locations().size());
        auto& messages = *r.mutable_locations();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::location::Location> ConfigConnectionImpl::GetLocation(
    google::cloud::location::GetLocationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetLocation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::location::GetLocationRequest const& request) {
        return stub_->GetLocation(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::longrunning::Operation>
ConfigConnectionImpl::ListOperations(
    google::longrunning::ListOperationsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListOperations(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::longrunning::Operation>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<cloudsecuritycompliance_v1::ConfigRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::longrunning::ListOperationsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::longrunning::ListOperationsRequest const& request) {
              return stub->ListOperations(context, options, request);
            },
            options, r, function_name);
      },
      [](google::longrunning::ListOperationsResponse r) {
        std::vector<google::longrunning::Operation> result(
            r.operations().size());
        auto& messages = *r.mutable_operations();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::longrunning::Operation> ConfigConnectionImpl::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::GetOperationRequest const& request) {
        return stub_->GetOperation(context, options, request);
      },
      *current, request, __func__);
}

Status ConfigConnectionImpl::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::DeleteOperationRequest const& request) {
        return stub_->DeleteOperation(context, options, request);
      },
      *current, request, __func__);
}

Status ConfigConnectionImpl::CancelOperation(
    google::longrunning::CancelOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CancelOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::CancelOperationRequest const& request) {
        return stub_->CancelOperation(context, options, request);
      },
      *current, request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1_internal
}  // namespace cloud
}  // namespace google
