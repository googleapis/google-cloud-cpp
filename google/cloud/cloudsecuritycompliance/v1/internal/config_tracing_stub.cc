// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/config.proto

#include "google/cloud/cloudsecuritycompliance/v1/internal/config_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ConfigTracingStub::ConfigTracingStub(std::shared_ptr<ConfigStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::cloudsecuritycompliance::v1::ListFrameworksResponse>
ConfigTracingStub::ListFrameworks(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::ListFrameworksRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "ListFrameworks");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListFrameworks(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigTracingStub::GetFramework(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "GetFramework");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetFramework(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigTracingStub::CreateFramework(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::CreateFrameworkRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "CreateFramework");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateFramework(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigTracingStub::UpdateFramework(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::UpdateFrameworkRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "UpdateFramework");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateFramework(context, options, request));
}

Status ConfigTracingStub::DeleteFramework(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::DeleteFrameworkRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "DeleteFramework");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteFramework(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::ListCloudControlsResponse>
ConfigTracingStub::ListCloudControls(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::ListCloudControlsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "ListCloudControls");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListCloudControls(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigTracingStub::GetCloudControl(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::GetCloudControlRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "GetCloudControl");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetCloudControl(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigTracingStub::CreateCloudControl(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::CreateCloudControlRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "CreateCloudControl");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateCloudControl(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigTracingStub::UpdateCloudControl(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::UpdateCloudControlRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "UpdateCloudControl");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateCloudControl(context, options, request));
}

Status ConfigTracingStub::DeleteCloudControl(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::DeleteCloudControlRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "DeleteCloudControl");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteCloudControl(context, options, request));
}

StatusOr<google::cloud::location::ListLocationsResponse>
ConfigTracingStub::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "ListLocations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListLocations(context, options, request));
}

StatusOr<google::cloud::location::Location> ConfigTracingStub::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetLocation(context, options, request));
}

StatusOr<google::longrunning::ListOperationsResponse>
ConfigTracingStub::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "ListOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListOperations(context, options, request));
}

StatusOr<google::longrunning::Operation> ConfigTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

Status ConfigTracingStub::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteOperation(context, options, request));
}

Status ConfigTracingStub::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Config", "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CancelOperation(context, options, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<ConfigStub> MakeConfigTracingStub(
    std::shared_ptr<ConfigStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<ConfigTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1_internal
}  // namespace cloud
}  // namespace google
