// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/config.proto

#include "google/cloud/cloudsecuritycompliance/v1/internal/config_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/cloudsecuritycompliance/v1/config.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ConfigStub::~ConfigStub() = default;

StatusOr<google::cloud::cloudsecuritycompliance::v1::ListFrameworksResponse>
DefaultConfigStub::ListFrameworks(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::ListFrameworksRequest const&
        request) {
  google::cloud::cloudsecuritycompliance::v1::ListFrameworksResponse response;
  auto status = grpc_stub_->ListFrameworks(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
DefaultConfigStub::GetFramework(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest const&
        request) {
  google::cloud::cloudsecuritycompliance::v1::Framework response;
  auto status = grpc_stub_->GetFramework(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
DefaultConfigStub::CreateFramework(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::CreateFrameworkRequest const&
        request) {
  google::cloud::cloudsecuritycompliance::v1::Framework response;
  auto status = grpc_stub_->CreateFramework(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
DefaultConfigStub::UpdateFramework(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::UpdateFrameworkRequest const&
        request) {
  google::cloud::cloudsecuritycompliance::v1::Framework response;
  auto status = grpc_stub_->UpdateFramework(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultConfigStub::DeleteFramework(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::DeleteFrameworkRequest const&
        request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteFramework(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::ListCloudControlsResponse>
DefaultConfigStub::ListCloudControls(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::ListCloudControlsRequest const&
        request) {
  google::cloud::cloudsecuritycompliance::v1::ListCloudControlsResponse
      response;
  auto status = grpc_stub_->ListCloudControls(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
DefaultConfigStub::GetCloudControl(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::GetCloudControlRequest const&
        request) {
  google::cloud::cloudsecuritycompliance::v1::CloudControl response;
  auto status = grpc_stub_->GetCloudControl(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
DefaultConfigStub::CreateCloudControl(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::CreateCloudControlRequest const&
        request) {
  google::cloud::cloudsecuritycompliance::v1::CloudControl response;
  auto status = grpc_stub_->CreateCloudControl(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
DefaultConfigStub::UpdateCloudControl(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::UpdateCloudControlRequest const&
        request) {
  google::cloud::cloudsecuritycompliance::v1::CloudControl response;
  auto status = grpc_stub_->UpdateCloudControl(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultConfigStub::DeleteCloudControl(
    grpc::ClientContext& context, Options const&,
    google::cloud::cloudsecuritycompliance::v1::DeleteCloudControlRequest const&
        request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteCloudControl(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::location::ListLocationsResponse>
DefaultConfigStub::ListLocations(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::ListLocationsRequest const& request) {
  google::cloud::location::ListLocationsResponse response;
  auto status = locations_stub_->ListLocations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::Location> DefaultConfigStub::GetLocation(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::GetLocationRequest const& request) {
  google::cloud::location::Location response;
  auto status = locations_stub_->GetLocation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::ListOperationsResponse>
DefaultConfigStub::ListOperations(
    grpc::ClientContext& context, Options const&,
    google::longrunning::ListOperationsRequest const& request) {
  google::longrunning::ListOperationsResponse response;
  auto status = operations_stub_->ListOperations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::Operation> DefaultConfigStub::GetOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::GetOperationRequest const& request) {
  google::longrunning::Operation response;
  auto status = operations_stub_->GetOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultConfigStub::DeleteOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::DeleteOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->DeleteOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

Status DefaultConfigStub::CancelOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::CancelOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->CancelOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1_internal
}  // namespace cloud
}  // namespace google
