// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/config.proto

#include "google/cloud/cloudsecuritycompliance/v1/internal/config_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ConfigTracingConnection::ConfigTracingConnection(
    std::shared_ptr<cloudsecuritycompliance_v1::ConfigConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigTracingConnection::ListFrameworks(
    google::cloud::cloudsecuritycompliance::v1::ListFrameworksRequest request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::ListFrameworks");
  internal::OTelScope scope(span);
  auto sr = child_->ListFrameworks(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::cloudsecuritycompliance::v1::Framework>(std::move(span),
                                                             std::move(sr));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigTracingConnection::GetFramework(
    google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest const&
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::GetFramework");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetFramework(request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigTracingConnection::CreateFramework(
    google::cloud::cloudsecuritycompliance::v1::CreateFrameworkRequest const&
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::CreateFramework");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateFramework(request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigTracingConnection::UpdateFramework(
    google::cloud::cloudsecuritycompliance::v1::UpdateFrameworkRequest const&
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::UpdateFramework");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateFramework(request));
}

Status ConfigTracingConnection::DeleteFramework(
    google::cloud::cloudsecuritycompliance::v1::DeleteFrameworkRequest const&
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::DeleteFramework");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteFramework(request));
}

StreamRange<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigTracingConnection::ListCloudControls(
    google::cloud::cloudsecuritycompliance::v1::ListCloudControlsRequest
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::ListCloudControls");
  internal::OTelScope scope(span);
  auto sr = child_->ListCloudControls(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::cloudsecuritycompliance::v1::CloudControl>(std::move(span),
                                                                std::move(sr));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigTracingConnection::GetCloudControl(
    google::cloud::cloudsecuritycompliance::v1::GetCloudControlRequest const&
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::GetCloudControl");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetCloudControl(request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigTracingConnection::CreateCloudControl(
    google::cloud::cloudsecuritycompliance::v1::CreateCloudControlRequest const&
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::CreateCloudControl");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateCloudControl(request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigTracingConnection::UpdateCloudControl(
    google::cloud::cloudsecuritycompliance::v1::UpdateCloudControlRequest const&
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::UpdateCloudControl");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateCloudControl(request));
}

Status ConfigTracingConnection::DeleteCloudControl(
    google::cloud::cloudsecuritycompliance::v1::DeleteCloudControlRequest const&
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::DeleteCloudControl");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteCloudControl(request));
}

StreamRange<google::cloud::location::Location>
ConfigTracingConnection::ListLocations(
    google::cloud::location::ListLocationsRequest request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::ListLocations");
  internal::OTelScope scope(span);
  auto sr = child_->ListLocations(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::location::Location>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::location::Location>
ConfigTracingConnection::GetLocation(
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetLocation(request));
}

StreamRange<google::longrunning::Operation>
ConfigTracingConnection::ListOperations(
    google::longrunning::ListOperationsRequest request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::ListOperations");
  internal::OTelScope scope(span);
  auto sr = child_->ListOperations(std::move(request));
  return internal::MakeTracedStreamRange<google::longrunning::Operation>(
      std::move(span), std::move(sr));
}

StatusOr<google::longrunning::Operation> ConfigTracingConnection::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetOperation(request));
}

Status ConfigTracingConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteOperation(request));
}

Status ConfigTracingConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::ConfigConnection::CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CancelOperation(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<cloudsecuritycompliance_v1::ConfigConnection>
MakeConfigTracingConnection(
    std::shared_ptr<cloudsecuritycompliance_v1::ConfigConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<ConfigTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1_internal
}  // namespace cloud
}  // namespace google
