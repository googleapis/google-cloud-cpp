// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/deployment.proto

#include "google/cloud/cloudsecuritycompliance/v1/internal/deployment_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DeploymentTracingStub::DeploymentTracingStub(
    std::shared_ptr<DeploymentStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

future<StatusOr<google::longrunning::Operation>>
DeploymentTracingStub::AsyncCreateFrameworkDeployment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::cloudsecuritycompliance::v1::
        CreateFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment",
      "CreateFrameworkDeployment");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateFrameworkDeployment(cq, context,
                                                  std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
DeploymentTracingStub::CreateFrameworkDeployment(
    grpc::ClientContext& context, Options options,
    google::cloud::cloudsecuritycompliance::v1::
        CreateFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment",
      "CreateFrameworkDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->CreateFrameworkDeployment(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
DeploymentTracingStub::AsyncDeleteFrameworkDeployment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::cloudsecuritycompliance::v1::
        DeleteFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment",
      "DeleteFrameworkDeployment");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteFrameworkDeployment(cq, context,
                                                  std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
DeploymentTracingStub::DeleteFrameworkDeployment(
    grpc::ClientContext& context, Options options,
    google::cloud::cloudsecuritycompliance::v1::
        DeleteFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment",
      "DeleteFrameworkDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->DeleteFrameworkDeployment(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::FrameworkDeployment>
DeploymentTracingStub::GetFrameworkDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::
        GetFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment",
      "GetFrameworkDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->GetFrameworkDeployment(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::
             ListFrameworkDeploymentsResponse>
DeploymentTracingStub::ListFrameworkDeployments(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::
        ListFrameworkDeploymentsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment",
      "ListFrameworkDeployments");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ListFrameworkDeployments(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControlDeployment>
DeploymentTracingStub::GetCloudControlDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::
        GetCloudControlDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment",
      "GetCloudControlDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->GetCloudControlDeployment(context, options, request));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::
             ListCloudControlDeploymentsResponse>
DeploymentTracingStub::ListCloudControlDeployments(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::
        ListCloudControlDeploymentsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment",
      "ListCloudControlDeployments");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ListCloudControlDeployments(context, options, request));
}

StatusOr<google::cloud::location::ListLocationsResponse>
DeploymentTracingStub::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment", "ListLocations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListLocations(context, options, request));
}

StatusOr<google::cloud::location::Location> DeploymentTracingStub::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment", "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetLocation(context, options, request));
}

StatusOr<google::longrunning::ListOperationsResponse>
DeploymentTracingStub::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment", "ListOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListOperations(context, options, request));
}

StatusOr<google::longrunning::Operation> DeploymentTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment", "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

Status DeploymentTracingStub::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment", "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteOperation(context, options, request));
}

Status DeploymentTracingStub::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.cloudsecuritycompliance.v1.Deployment", "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CancelOperation(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
DeploymentTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.longrunning.Operations", "GetOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGetOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<Status> DeploymentTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.longrunning.Operations",
                                     "CancelOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCancelOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<DeploymentStub> MakeDeploymentTracingStub(
    std::shared_ptr<DeploymentStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<DeploymentTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1_internal
}  // namespace cloud
}  // namespace google
