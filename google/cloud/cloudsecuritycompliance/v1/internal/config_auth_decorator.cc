// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/config.proto

#include "google/cloud/cloudsecuritycompliance/v1/internal/config_auth_decorator.h"
#include <google/cloud/cloudsecuritycompliance/v1/config.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ConfigAuth::ConfigAuth(
    std::shared_ptr<google::cloud::internal::GrpcAuthenticationStrategy> auth,
    std::shared_ptr<ConfigStub> child)
    : auth_(std::move(auth)), child_(std::move(child)) {}

StatusOr<google::cloud::cloudsecuritycompliance::v1::ListFrameworksResponse>
ConfigAuth::ListFrameworks(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::ListFrameworksRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListFrameworks(context, options, request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigAuth::GetFramework(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetFramework(context, options, request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigAuth::CreateFramework(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::CreateFrameworkRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CreateFramework(context, options, request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::Framework>
ConfigAuth::UpdateFramework(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::UpdateFrameworkRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->UpdateFramework(context, options, request);
}

Status ConfigAuth::DeleteFramework(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::DeleteFrameworkRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteFramework(context, options, request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::ListCloudControlsResponse>
ConfigAuth::ListCloudControls(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::ListCloudControlsRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListCloudControls(context, options, request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigAuth::GetCloudControl(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::GetCloudControlRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetCloudControl(context, options, request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigAuth::CreateCloudControl(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::CreateCloudControlRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CreateCloudControl(context, options, request);
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControl>
ConfigAuth::UpdateCloudControl(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::UpdateCloudControlRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->UpdateCloudControl(context, options, request);
}

Status ConfigAuth::DeleteCloudControl(
    grpc::ClientContext& context, Options const& options,
    google::cloud::cloudsecuritycompliance::v1::DeleteCloudControlRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteCloudControl(context, options, request);
}

StatusOr<google::cloud::location::ListLocationsResponse>
ConfigAuth::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListLocations(context, options, request);
}

StatusOr<google::cloud::location::Location> ConfigAuth::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetLocation(context, options, request);
}

StatusOr<google::longrunning::ListOperationsResponse>
ConfigAuth::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListOperations(context, options, request);
}

StatusOr<google::longrunning::Operation> ConfigAuth::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetOperation(context, options, request);
}

Status ConfigAuth::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteOperation(context, options, request);
}

Status ConfigAuth::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CancelOperation(context, options, request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1_internal
}  // namespace cloud
}  // namespace google
