// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/deployment.proto

#include "google/cloud/cloudsecuritycompliance/v1/internal/deployment_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DeploymentTracingConnection::DeploymentTracingConnection(
    std::shared_ptr<cloudsecuritycompliance_v1::DeploymentConnection> child)
    : child_(std::move(child)) {}

future<
    StatusOr<google::cloud::cloudsecuritycompliance::v1::FrameworkDeployment>>
DeploymentTracingConnection::CreateFrameworkDeployment(
    google::cloud::cloudsecuritycompliance::v1::
        CreateFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "CreateFrameworkDeployment");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreateFrameworkDeployment(request));
}

StatusOr<google::longrunning::Operation>
DeploymentTracingConnection::CreateFrameworkDeployment(
    NoAwaitTag, google::cloud::cloudsecuritycompliance::v1::
                    CreateFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "CreateFrameworkDeployment");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->CreateFrameworkDeployment(NoAwaitTag{}, request));
}

future<
    StatusOr<google::cloud::cloudsecuritycompliance::v1::FrameworkDeployment>>
DeploymentTracingConnection::CreateFrameworkDeployment(
    google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "CreateFrameworkDeployment");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreateFrameworkDeployment(operation));
}

future<StatusOr<google::cloud::cloudsecuritycompliance::v1::OperationMetadata>>
DeploymentTracingConnection::DeleteFrameworkDeployment(
    google::cloud::cloudsecuritycompliance::v1::
        DeleteFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "DeleteFrameworkDeployment");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeleteFrameworkDeployment(request));
}

StatusOr<google::longrunning::Operation>
DeploymentTracingConnection::DeleteFrameworkDeployment(
    NoAwaitTag, google::cloud::cloudsecuritycompliance::v1::
                    DeleteFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "DeleteFrameworkDeployment");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->DeleteFrameworkDeployment(NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::cloudsecuritycompliance::v1::OperationMetadata>>
DeploymentTracingConnection::DeleteFrameworkDeployment(
    google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "DeleteFrameworkDeployment");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeleteFrameworkDeployment(operation));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::FrameworkDeployment>
DeploymentTracingConnection::GetFrameworkDeployment(
    google::cloud::cloudsecuritycompliance::v1::
        GetFrameworkDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "GetFrameworkDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetFrameworkDeployment(request));
}

StreamRange<google::cloud::cloudsecuritycompliance::v1::FrameworkDeployment>
DeploymentTracingConnection::ListFrameworkDeployments(
    google::cloud::cloudsecuritycompliance::v1::ListFrameworkDeploymentsRequest
        request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "ListFrameworkDeployments");
  internal::OTelScope scope(span);
  auto sr = child_->ListFrameworkDeployments(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::cloudsecuritycompliance::v1::FrameworkDeployment>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::cloudsecuritycompliance::v1::CloudControlDeployment>
DeploymentTracingConnection::GetCloudControlDeployment(
    google::cloud::cloudsecuritycompliance::v1::
        GetCloudControlDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "GetCloudControlDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetCloudControlDeployment(request));
}

StreamRange<google::cloud::cloudsecuritycompliance::v1::CloudControlDeployment>
DeploymentTracingConnection::ListCloudControlDeployments(
    google::cloud::cloudsecuritycompliance::v1::
        ListCloudControlDeploymentsRequest request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::"
      "ListCloudControlDeployments");
  internal::OTelScope scope(span);
  auto sr = child_->ListCloudControlDeployments(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::cloudsecuritycompliance::v1::CloudControlDeployment>(
      std::move(span), std::move(sr));
}

StreamRange<google::cloud::location::Location>
DeploymentTracingConnection::ListLocations(
    google::cloud::location::ListLocationsRequest request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::ListLocations");
  internal::OTelScope scope(span);
  auto sr = child_->ListLocations(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::location::Location>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::location::Location>
DeploymentTracingConnection::GetLocation(
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetLocation(request));
}

StreamRange<google::longrunning::Operation>
DeploymentTracingConnection::ListOperations(
    google::longrunning::ListOperationsRequest request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::ListOperations");
  internal::OTelScope scope(span);
  auto sr = child_->ListOperations(std::move(request));
  return internal::MakeTracedStreamRange<google::longrunning::Operation>(
      std::move(span), std::move(sr));
}

StatusOr<google::longrunning::Operation>
DeploymentTracingConnection::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetOperation(request));
}

Status DeploymentTracingConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteOperation(request));
}

Status DeploymentTracingConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "cloudsecuritycompliance_v1::DeploymentConnection::CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CancelOperation(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<cloudsecuritycompliance_v1::DeploymentConnection>
MakeDeploymentTracingConnection(
    std::shared_ptr<cloudsecuritycompliance_v1::DeploymentConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<DeploymentTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1_internal
}  // namespace cloud
}  // namespace google
