// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudsecuritycompliance/v1/config.proto

#include "google/cloud/cloudsecuritycompliance/v1/config_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace cloudsecuritycompliance_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

ConfigConnectionIdempotencyPolicy::~ConfigConnectionIdempotencyPolicy() =
    default;

std::unique_ptr<ConfigConnectionIdempotencyPolicy>
ConfigConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<ConfigConnectionIdempotencyPolicy>(*this);
}

Idempotency ConfigConnectionIdempotencyPolicy::ListFrameworks(
    google::cloud::cloudsecuritycompliance::v1::
        ListFrameworksRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::GetFramework(
    google::cloud::cloudsecuritycompliance::v1::GetFrameworkRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::CreateFramework(
    google::cloud::cloudsecuritycompliance::v1::CreateFrameworkRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::UpdateFramework(
    google::cloud::cloudsecuritycompliance::v1::UpdateFrameworkRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::DeleteFramework(
    google::cloud::cloudsecuritycompliance::v1::DeleteFrameworkRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::ListCloudControls(
    google::cloud::cloudsecuritycompliance::v1::
        ListCloudControlsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::GetCloudControl(
    google::cloud::cloudsecuritycompliance::v1::GetCloudControlRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::CreateCloudControl(
    google::cloud::cloudsecuritycompliance::v1::
        CreateCloudControlRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::UpdateCloudControl(
    google::cloud::cloudsecuritycompliance::v1::
        UpdateCloudControlRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::DeleteCloudControl(
    google::cloud::cloudsecuritycompliance::v1::
        DeleteCloudControlRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::ListLocations(
    google::cloud::location::ListLocationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::ListOperations(
    google::longrunning::ListOperationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ConfigConnectionIdempotencyPolicy::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<ConfigConnectionIdempotencyPolicy>
MakeDefaultConfigConnectionIdempotencyPolicy() {
  return std::make_unique<ConfigConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudsecuritycompliance_v1
}  // namespace cloud
}  // namespace google
