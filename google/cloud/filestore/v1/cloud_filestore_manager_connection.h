// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/filestore/v1/cloud_filestore_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_FILESTORE_V1_CLOUD_FILESTORE_MANAGER_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_FILESTORE_V1_CLOUD_FILESTORE_MANAGER_CONNECTION_H

#include "google/cloud/filestore/v1/cloud_filestore_manager_connection_idempotency_policy.h"
#include "google/cloud/filestore/v1/internal/cloud_filestore_manager_retry_traits.h"
#include "google/cloud/filestore/v1/internal/cloud_filestore_manager_stub.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace filestore_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using CloudFilestoreManagerRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        filestore_v1_internal::CloudFilestoreManagerRetryTraits>;

using CloudFilestoreManagerLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        filestore_v1_internal::CloudFilestoreManagerRetryTraits>;

using CloudFilestoreManagerLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        filestore_v1_internal::CloudFilestoreManagerRetryTraits>;

/**
 * The `CloudFilestoreManagerConnection` object for
 * `CloudFilestoreManagerClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `CloudFilestoreManagerClient`. This allows users to inject custom
 * behavior (e.g., with a Google Mock object) when writing tests that use
 * objects of type `CloudFilestoreManagerClient`.
 *
 * To create a concrete instance, see `MakeCloudFilestoreManagerConnection()`.
 *
 * For mocking, see `filestore_v1_mocks::MockCloudFilestoreManagerConnection`.
 */
class CloudFilestoreManagerConnection {
 public:
  virtual ~CloudFilestoreManagerConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StreamRange<google::cloud::filestore::v1::Instance> ListInstances(
      google::cloud::filestore::v1::ListInstancesRequest request);

  virtual StatusOr<google::cloud::filestore::v1::Instance> GetInstance(
      google::cloud::filestore::v1::GetInstanceRequest const& request);

  virtual future<StatusOr<google::cloud::filestore::v1::Instance>>
  CreateInstance(
      google::cloud::filestore::v1::CreateInstanceRequest const& request);

  virtual future<StatusOr<google::cloud::filestore::v1::Instance>>
  UpdateInstance(
      google::cloud::filestore::v1::UpdateInstanceRequest const& request);

  virtual future<StatusOr<google::cloud::filestore::v1::Instance>>
  RestoreInstance(
      google::cloud::filestore::v1::RestoreInstanceRequest const& request);

  virtual future<StatusOr<google::cloud::common::OperationMetadata>>
  DeleteInstance(
      google::cloud::filestore::v1::DeleteInstanceRequest const& request);

  virtual StreamRange<google::cloud::filestore::v1::Snapshot> ListSnapshots(
      google::cloud::filestore::v1::ListSnapshotsRequest request);

  virtual StatusOr<google::cloud::filestore::v1::Snapshot> GetSnapshot(
      google::cloud::filestore::v1::GetSnapshotRequest const& request);

  virtual future<StatusOr<google::cloud::filestore::v1::Snapshot>>
  CreateSnapshot(
      google::cloud::filestore::v1::CreateSnapshotRequest const& request);

  virtual future<StatusOr<google::cloud::common::OperationMetadata>>
  DeleteSnapshot(
      google::cloud::filestore::v1::DeleteSnapshotRequest const& request);

  virtual future<StatusOr<google::cloud::filestore::v1::Snapshot>>
  UpdateSnapshot(
      google::cloud::filestore::v1::UpdateSnapshotRequest const& request);

  virtual StreamRange<google::cloud::filestore::v1::Backup> ListBackups(
      google::cloud::filestore::v1::ListBackupsRequest request);

  virtual StatusOr<google::cloud::filestore::v1::Backup> GetBackup(
      google::cloud::filestore::v1::GetBackupRequest const& request);

  virtual future<StatusOr<google::cloud::filestore::v1::Backup>> CreateBackup(
      google::cloud::filestore::v1::CreateBackupRequest const& request);

  virtual future<StatusOr<google::cloud::common::OperationMetadata>>
  DeleteBackup(
      google::cloud::filestore::v1::DeleteBackupRequest const& request);

  virtual future<StatusOr<google::cloud::filestore::v1::Backup>> UpdateBackup(
      google::cloud::filestore::v1::UpdateBackupRequest const& request);
};

/**
 * A factory function to construct an object of type
 * `CloudFilestoreManagerConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of
 * CloudFilestoreManagerClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `CloudFilestoreManagerConnection`. Expected options are any of the
 * types in the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * - `google::cloud::filestore_v1::CloudFilestoreManagerPolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `CloudFilestoreManagerConnection`
 * created by this function.
 */
std::shared_ptr<CloudFilestoreManagerConnection>
MakeCloudFilestoreManagerConnection(Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace filestore_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_FILESTORE_V1_CLOUD_FILESTORE_MANAGER_CONNECTION_H
