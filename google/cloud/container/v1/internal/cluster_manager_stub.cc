// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/container/v1/cluster_service.proto

#include "google/cloud/container/v1/internal/cluster_manager_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/container/v1/cluster_service.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace container_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ClusterManagerStub::~ClusterManagerStub() = default;

StatusOr<google::container::v1::ListClustersResponse>
DefaultClusterManagerStub::ListClusters(
    grpc::ClientContext& client_context,
    google::container::v1::ListClustersRequest const& request) {
  google::container::v1::ListClustersResponse response;
  auto status = grpc_stub_->ListClusters(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Cluster> DefaultClusterManagerStub::GetCluster(
    grpc::ClientContext& client_context,
    google::container::v1::GetClusterRequest const& request) {
  google::container::v1::Cluster response;
  auto status = grpc_stub_->GetCluster(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::CreateCluster(
    grpc::ClientContext& client_context,
    google::container::v1::CreateClusterRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->CreateCluster(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::UpdateCluster(
    grpc::ClientContext& client_context,
    google::container::v1::UpdateClusterRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->UpdateCluster(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::UpdateNodePool(
    grpc::ClientContext& client_context,
    google::container::v1::UpdateNodePoolRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->UpdateNodePool(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetNodePoolAutoscaling(
    grpc::ClientContext& client_context,
    google::container::v1::SetNodePoolAutoscalingRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->SetNodePoolAutoscaling(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetLoggingService(
    grpc::ClientContext& client_context,
    google::container::v1::SetLoggingServiceRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->SetLoggingService(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetMonitoringService(
    grpc::ClientContext& client_context,
    google::container::v1::SetMonitoringServiceRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->SetMonitoringService(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetAddonsConfig(
    grpc::ClientContext& client_context,
    google::container::v1::SetAddonsConfigRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->SetAddonsConfig(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetLocations(
    grpc::ClientContext& client_context,
    google::container::v1::SetLocationsRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->SetLocations(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::UpdateMaster(
    grpc::ClientContext& client_context,
    google::container::v1::UpdateMasterRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->UpdateMaster(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetMasterAuth(
    grpc::ClientContext& client_context,
    google::container::v1::SetMasterAuthRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->SetMasterAuth(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::DeleteCluster(
    grpc::ClientContext& client_context,
    google::container::v1::DeleteClusterRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->DeleteCluster(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::ListOperationsResponse>
DefaultClusterManagerStub::ListOperations(
    grpc::ClientContext& client_context,
    google::container::v1::ListOperationsRequest const& request) {
  google::container::v1::ListOperationsResponse response;
  auto status = grpc_stub_->ListOperations(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::GetOperation(
    grpc::ClientContext& client_context,
    google::container::v1::GetOperationRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->GetOperation(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultClusterManagerStub::CancelOperation(
    grpc::ClientContext& client_context,
    google::container::v1::CancelOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status =
      grpc_stub_->CancelOperation(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::container::v1::ServerConfig>
DefaultClusterManagerStub::GetServerConfig(
    grpc::ClientContext& client_context,
    google::container::v1::GetServerConfigRequest const& request) {
  google::container::v1::ServerConfig response;
  auto status =
      grpc_stub_->GetServerConfig(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::GetJSONWebKeysResponse>
DefaultClusterManagerStub::GetJSONWebKeys(
    grpc::ClientContext& client_context,
    google::container::v1::GetJSONWebKeysRequest const& request) {
  google::container::v1::GetJSONWebKeysResponse response;
  auto status = grpc_stub_->GetJSONWebKeys(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::ListNodePoolsResponse>
DefaultClusterManagerStub::ListNodePools(
    grpc::ClientContext& client_context,
    google::container::v1::ListNodePoolsRequest const& request) {
  google::container::v1::ListNodePoolsResponse response;
  auto status = grpc_stub_->ListNodePools(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::NodePool>
DefaultClusterManagerStub::GetNodePool(
    grpc::ClientContext& client_context,
    google::container::v1::GetNodePoolRequest const& request) {
  google::container::v1::NodePool response;
  auto status = grpc_stub_->GetNodePool(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::CreateNodePool(
    grpc::ClientContext& client_context,
    google::container::v1::CreateNodePoolRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->CreateNodePool(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::DeleteNodePool(
    grpc::ClientContext& client_context,
    google::container::v1::DeleteNodePoolRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->DeleteNodePool(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultClusterManagerStub::CompleteNodePoolUpgrade(
    grpc::ClientContext& client_context,
    google::container::v1::CompleteNodePoolUpgradeRequest const& request) {
  google::protobuf::Empty response;
  auto status =
      grpc_stub_->CompleteNodePoolUpgrade(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::RollbackNodePoolUpgrade(
    grpc::ClientContext& client_context,
    google::container::v1::RollbackNodePoolUpgradeRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->RollbackNodePoolUpgrade(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetNodePoolManagement(
    grpc::ClientContext& client_context,
    google::container::v1::SetNodePoolManagementRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->SetNodePoolManagement(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation> DefaultClusterManagerStub::SetLabels(
    grpc::ClientContext& client_context,
    google::container::v1::SetLabelsRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->SetLabels(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetLegacyAbac(
    grpc::ClientContext& client_context,
    google::container::v1::SetLegacyAbacRequest const& request) {
  google::container::v1::Operation response;
  auto status = grpc_stub_->SetLegacyAbac(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::StartIPRotation(
    grpc::ClientContext& client_context,
    google::container::v1::StartIPRotationRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->StartIPRotation(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::CompleteIPRotation(
    grpc::ClientContext& client_context,
    google::container::v1::CompleteIPRotationRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->CompleteIPRotation(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetNodePoolSize(
    grpc::ClientContext& client_context,
    google::container::v1::SetNodePoolSizeRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->SetNodePoolSize(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetNetworkPolicy(
    grpc::ClientContext& client_context,
    google::container::v1::SetNetworkPolicyRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->SetNetworkPolicy(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::Operation>
DefaultClusterManagerStub::SetMaintenancePolicy(
    grpc::ClientContext& client_context,
    google::container::v1::SetMaintenancePolicyRequest const& request) {
  google::container::v1::Operation response;
  auto status =
      grpc_stub_->SetMaintenancePolicy(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::ListUsableSubnetworksResponse>
DefaultClusterManagerStub::ListUsableSubnetworks(
    grpc::ClientContext& client_context,
    google::container::v1::ListUsableSubnetworksRequest const& request) {
  google::container::v1::ListUsableSubnetworksResponse response;
  auto status =
      grpc_stub_->ListUsableSubnetworks(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::container::v1::CheckAutopilotCompatibilityResponse>
DefaultClusterManagerStub::CheckAutopilotCompatibility(
    grpc::ClientContext& client_context,
    google::container::v1::CheckAutopilotCompatibilityRequest const& request) {
  google::container::v1::CheckAutopilotCompatibilityResponse response;
  auto status = grpc_stub_->CheckAutopilotCompatibility(&client_context,
                                                        request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace container_v1_internal
}  // namespace cloud
}  // namespace google
