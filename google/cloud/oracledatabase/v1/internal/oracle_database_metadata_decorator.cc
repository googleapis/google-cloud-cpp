// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/oracledatabase/v1/oracledatabase.proto

#include "google/cloud/oracledatabase/v1/internal/oracle_database_metadata_decorator.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/internal/url_encode.h"
#include "google/cloud/status_or.h"
#include <google/cloud/oracledatabase/v1/oracledatabase.grpc.pb.h>
#include <memory>
#include <string>
#include <utility>
#include <vector>

namespace google {
namespace cloud {
namespace oracledatabase_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

OracleDatabaseMetadata::OracleDatabaseMetadata(
    std::shared_ptr<OracleDatabaseStub> child,
    std::multimap<std::string, std::string> fixed_metadata,
    std::string api_client_header)
    : child_(std::move(child)),
      fixed_metadata_(std::move(fixed_metadata)),
      api_client_header_(
          api_client_header.empty()
              ? google::cloud::internal::GeneratedLibClientHeader()
              : std::move(api_client_header)) {}

StatusOr<
    google::cloud::oracledatabase::v1::ListCloudExadataInfrastructuresResponse>
OracleDatabaseMetadata::ListCloudExadataInfrastructures(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::
        ListCloudExadataInfrastructuresRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListCloudExadataInfrastructures(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::CloudExadataInfrastructure>
OracleDatabaseMetadata::GetCloudExadataInfrastructure(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::
        GetCloudExadataInfrastructureRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetCloudExadataInfrastructure(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncCreateCloudExadataInfrastructure(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::
        CreateCloudExadataInfrastructureRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->AsyncCreateCloudExadataInfrastructure(
      cq, std::move(context), std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::CreateCloudExadataInfrastructure(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::
        CreateCloudExadataInfrastructureRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateCloudExadataInfrastructure(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncDeleteCloudExadataInfrastructure(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::
        DeleteCloudExadataInfrastructureRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncDeleteCloudExadataInfrastructure(
      cq, std::move(context), std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::DeleteCloudExadataInfrastructure(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::
        DeleteCloudExadataInfrastructureRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteCloudExadataInfrastructure(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::ListCloudVmClustersResponse>
OracleDatabaseMetadata::ListCloudVmClusters(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::ListCloudVmClustersRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListCloudVmClusters(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::CloudVmCluster>
OracleDatabaseMetadata::GetCloudVmCluster(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::GetCloudVmClusterRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetCloudVmCluster(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncCreateCloudVmCluster(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::CreateCloudVmClusterRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->AsyncCreateCloudVmCluster(cq, std::move(context),
                                           std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::CreateCloudVmCluster(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::CreateCloudVmClusterRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateCloudVmCluster(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncDeleteCloudVmCluster(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::DeleteCloudVmClusterRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncDeleteCloudVmCluster(cq, std::move(context),
                                           std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::DeleteCloudVmCluster(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::DeleteCloudVmClusterRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteCloudVmCluster(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::ListEntitlementsResponse>
OracleDatabaseMetadata::ListEntitlements(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::ListEntitlementsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListEntitlements(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::ListDbServersResponse>
OracleDatabaseMetadata::ListDbServers(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::ListDbServersRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListDbServers(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::ListDbNodesResponse>
OracleDatabaseMetadata::ListDbNodes(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::ListDbNodesRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListDbNodes(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::ListGiVersionsResponse>
OracleDatabaseMetadata::ListGiVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::ListGiVersionsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListGiVersions(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::ListDbSystemShapesResponse>
OracleDatabaseMetadata::ListDbSystemShapes(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::ListDbSystemShapesRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListDbSystemShapes(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::ListAutonomousDatabasesResponse>
OracleDatabaseMetadata::ListAutonomousDatabases(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::ListAutonomousDatabasesRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListAutonomousDatabases(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>
OracleDatabaseMetadata::GetAutonomousDatabase(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::GetAutonomousDatabaseRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetAutonomousDatabase(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncCreateAutonomousDatabase(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::CreateAutonomousDatabaseRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->AsyncCreateAutonomousDatabase(cq, std::move(context),
                                               std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::CreateAutonomousDatabase(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::CreateAutonomousDatabaseRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateAutonomousDatabase(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncDeleteAutonomousDatabase(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::DeleteAutonomousDatabaseRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncDeleteAutonomousDatabase(cq, std::move(context),
                                               std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::DeleteAutonomousDatabase(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::DeleteAutonomousDatabaseRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteAutonomousDatabase(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncRestoreAutonomousDatabase(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::RestoreAutonomousDatabaseRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncRestoreAutonomousDatabase(cq, std::move(context),
                                                std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::RestoreAutonomousDatabase(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::RestoreAutonomousDatabaseRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->RestoreAutonomousDatabase(context, options, request);
}

StatusOr<
    google::cloud::oracledatabase::v1::GenerateAutonomousDatabaseWalletResponse>
OracleDatabaseMetadata::GenerateAutonomousDatabaseWallet(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::
        GenerateAutonomousDatabaseWalletRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GenerateAutonomousDatabaseWallet(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::ListAutonomousDbVersionsResponse>
OracleDatabaseMetadata::ListAutonomousDbVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::ListAutonomousDbVersionsRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListAutonomousDbVersions(context, options, request);
}

StatusOr<google::cloud::oracledatabase::v1::
             ListAutonomousDatabaseCharacterSetsResponse>
OracleDatabaseMetadata::ListAutonomousDatabaseCharacterSets(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::
        ListAutonomousDatabaseCharacterSetsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListAutonomousDatabaseCharacterSets(context, options, request);
}

StatusOr<
    google::cloud::oracledatabase::v1::ListAutonomousDatabaseBackupsResponse>
OracleDatabaseMetadata::ListAutonomousDatabaseBackups(
    grpc::ClientContext& context, Options const& options,
    google::cloud::oracledatabase::v1::
        ListAutonomousDatabaseBackupsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListAutonomousDatabaseBackups(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncStopAutonomousDatabase(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::StopAutonomousDatabaseRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncStopAutonomousDatabase(cq, std::move(context),
                                             std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::StopAutonomousDatabase(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::StopAutonomousDatabaseRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->StopAutonomousDatabase(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncStartAutonomousDatabase(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::StartAutonomousDatabaseRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncStartAutonomousDatabase(cq, std::move(context),
                                              std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::StartAutonomousDatabase(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::StartAutonomousDatabaseRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->StartAutonomousDatabase(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncRestartAutonomousDatabase(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::oracledatabase::v1::RestartAutonomousDatabaseRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncRestartAutonomousDatabase(cq, std::move(context),
                                                std::move(options), request);
}

StatusOr<google::longrunning::Operation>
OracleDatabaseMetadata::RestartAutonomousDatabase(
    grpc::ClientContext& context, Options options,
    google::cloud::oracledatabase::v1::RestartAutonomousDatabaseRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->RestartAutonomousDatabase(context, options, request);
}

StatusOr<google::cloud::location::ListLocationsResponse>
OracleDatabaseMetadata::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ListLocations(context, options, request);
}

StatusOr<google::cloud::location::Location> OracleDatabaseMetadata::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetLocation(context, options, request);
}

StatusOr<google::longrunning::ListOperationsResponse>
OracleDatabaseMetadata::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ListOperations(context, options, request);
}

StatusOr<google::longrunning::Operation> OracleDatabaseMetadata::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetOperation(context, options, request);
}

Status OracleDatabaseMetadata::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteOperation(context, options, request);
}

Status OracleDatabaseMetadata::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->CancelOperation(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
OracleDatabaseMetadata::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncGetOperation(cq, std::move(context), std::move(options),
                                   request);
}

future<Status> OracleDatabaseMetadata::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncCancelOperation(cq, std::move(context),
                                      std::move(options), request);
}

void OracleDatabaseMetadata::SetMetadata(grpc::ClientContext& context,
                                         Options const& options,
                                         std::string const& request_params) {
  context.AddMetadata("x-goog-request-params", request_params);
  SetMetadata(context, options);
}

void OracleDatabaseMetadata::SetMetadata(grpc::ClientContext& context,
                                         Options const& options) {
  google::cloud::internal::SetMetadata(context, options, fixed_metadata_,
                                       api_client_header_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace oracledatabase_v1_internal
}  // namespace cloud
}  // namespace google
