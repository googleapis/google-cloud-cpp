// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/oracledatabase/v1/oracledatabase.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_ORACLEDATABASE_V1_MOCKS_MOCK_ORACLE_DATABASE_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_ORACLEDATABASE_V1_MOCKS_MOCK_ORACLE_DATABASE_CONNECTION_H

#include "google/cloud/oracledatabase/v1/oracle_database_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace oracledatabase_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `OracleDatabaseConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `OracleDatabaseClient`. To do so,
 * construct an object of type `OracleDatabaseClient` with an instance of this
 * class. Then use the Google Test framework functions to program the behavior
 * of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockOracleDatabaseConnection
    : public oracledatabase_v1::OracleDatabaseConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(
      (StreamRange<
          google::cloud::oracledatabase::v1::CloudExadataInfrastructure>),
      ListCloudExadataInfrastructures,
      (google::cloud::oracledatabase::v1::ListCloudExadataInfrastructuresRequest
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::oracledatabase::v1::CloudExadataInfrastructure>,
      GetCloudExadataInfrastructure,
      (google::cloud::oracledatabase::v1::
           GetCloudExadataInfrastructureRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateCloudExadataInfrastructure(Matcher<google::cloud::oracledatabase::v1::CreateCloudExadataInfrastructureRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::cloud::oracledatabase::v1::CloudExadataInfrastructure>>,
      CreateCloudExadataInfrastructure,
      (google::cloud::oracledatabase::v1::
           CreateCloudExadataInfrastructureRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateCloudExadataInfrastructure(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              CreateCloudExadataInfrastructure,
              (NoAwaitTag,
               google::cloud::oracledatabase::v1::
                   CreateCloudExadataInfrastructureRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateCloudExadataInfrastructure(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::cloud::oracledatabase::v1::CloudExadataInfrastructure>>,
      CreateCloudExadataInfrastructure,
      (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteCloudExadataInfrastructure(Matcher<google::cloud::oracledatabase::v1::DeleteCloudExadataInfrastructureRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::OperationMetadata>>,
      DeleteCloudExadataInfrastructure,
      (google::cloud::oracledatabase::v1::
           DeleteCloudExadataInfrastructureRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteCloudExadataInfrastructure(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              DeleteCloudExadataInfrastructure,
              (NoAwaitTag,
               google::cloud::oracledatabase::v1::
                   DeleteCloudExadataInfrastructureRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteCloudExadataInfrastructure(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::OperationMetadata>>,
      DeleteCloudExadataInfrastructure,
      (google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::oracledatabase::v1::CloudVmCluster>),
      ListCloudVmClusters,
      (google::cloud::oracledatabase::v1::ListCloudVmClustersRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::oracledatabase::v1::CloudVmCluster>,
      GetCloudVmCluster,
      (google::cloud::oracledatabase::v1::GetCloudVmClusterRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateCloudVmCluster(Matcher<google::cloud::oracledatabase::v1::CreateCloudVmClusterRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::CloudVmCluster>>,
      CreateCloudVmCluster,
      (google::cloud::oracledatabase::v1::CreateCloudVmClusterRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateCloudVmCluster(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateCloudVmCluster,
      (NoAwaitTag,
       google::cloud::oracledatabase::v1::CreateCloudVmClusterRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateCloudVmCluster(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::CloudVmCluster>>,
      CreateCloudVmCluster, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteCloudVmCluster(Matcher<google::cloud::oracledatabase::v1::DeleteCloudVmClusterRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::OperationMetadata>>,
      DeleteCloudVmCluster,
      (google::cloud::oracledatabase::v1::DeleteCloudVmClusterRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteCloudVmCluster(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteCloudVmCluster,
      (NoAwaitTag,
       google::cloud::oracledatabase::v1::DeleteCloudVmClusterRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteCloudVmCluster(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::OperationMetadata>>,
      DeleteCloudVmCluster, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::oracledatabase::v1::Entitlement>),
      ListEntitlements,
      (google::cloud::oracledatabase::v1::ListEntitlementsRequest request),
      (override));

  MOCK_METHOD((StreamRange<google::cloud::oracledatabase::v1::DbServer>),
              ListDbServers,
              (google::cloud::oracledatabase::v1::ListDbServersRequest request),
              (override));

  MOCK_METHOD((StreamRange<google::cloud::oracledatabase::v1::DbNode>),
              ListDbNodes,
              (google::cloud::oracledatabase::v1::ListDbNodesRequest request),
              (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::oracledatabase::v1::GiVersion>),
      ListGiVersions,
      (google::cloud::oracledatabase::v1::ListGiVersionsRequest request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::oracledatabase::v1::DbSystemShape>),
      ListDbSystemShapes,
      (google::cloud::oracledatabase::v1::ListDbSystemShapesRequest request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::oracledatabase::v1::AutonomousDatabase>),
      ListAutonomousDatabases,
      (google::cloud::oracledatabase::v1::ListAutonomousDatabasesRequest
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>,
      GetAutonomousDatabase,
      (google::cloud::oracledatabase::v1::GetAutonomousDatabaseRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateAutonomousDatabase(Matcher<google::cloud::oracledatabase::v1::CreateAutonomousDatabaseRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      CreateAutonomousDatabase,
      (google::cloud::oracledatabase::v1::CreateAutonomousDatabaseRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateAutonomousDatabase(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateAutonomousDatabase,
      (NoAwaitTag,
       google::cloud::oracledatabase::v1::CreateAutonomousDatabaseRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateAutonomousDatabase(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      CreateAutonomousDatabase,
      (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteAutonomousDatabase(Matcher<google::cloud::oracledatabase::v1::DeleteAutonomousDatabaseRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::OperationMetadata>>,
      DeleteAutonomousDatabase,
      (google::cloud::oracledatabase::v1::DeleteAutonomousDatabaseRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteAutonomousDatabase(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteAutonomousDatabase,
      (NoAwaitTag,
       google::cloud::oracledatabase::v1::DeleteAutonomousDatabaseRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteAutonomousDatabase(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::OperationMetadata>>,
      DeleteAutonomousDatabase,
      (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// RestoreAutonomousDatabase(Matcher<google::cloud::oracledatabase::v1::RestoreAutonomousDatabaseRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      RestoreAutonomousDatabase,
      (google::cloud::oracledatabase::v1::
           RestoreAutonomousDatabaseRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, RestoreAutonomousDatabase(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              RestoreAutonomousDatabase,
              (NoAwaitTag, google::cloud::oracledatabase::v1::
                               RestoreAutonomousDatabaseRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// RestoreAutonomousDatabase(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      RestoreAutonomousDatabase,
      (google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(StatusOr<google::cloud::oracledatabase::v1::
                           GenerateAutonomousDatabaseWalletResponse>,
              GenerateAutonomousDatabaseWallet,
              (google::cloud::oracledatabase::v1::
                   GenerateAutonomousDatabaseWalletRequest const& request),
              (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::oracledatabase::v1::AutonomousDbVersion>),
      ListAutonomousDbVersions,
      (google::cloud::oracledatabase::v1::ListAutonomousDbVersionsRequest
           request),
      (override));

  MOCK_METHOD(
      (StreamRange<
          google::cloud::oracledatabase::v1::AutonomousDatabaseCharacterSet>),
      ListAutonomousDatabaseCharacterSets,
      (google::cloud::oracledatabase::v1::
           ListAutonomousDatabaseCharacterSetsRequest request),
      (override));

  MOCK_METHOD(
      (StreamRange<
          google::cloud::oracledatabase::v1::AutonomousDatabaseBackup>),
      ListAutonomousDatabaseBackups,
      (google::cloud::oracledatabase::v1::ListAutonomousDatabaseBackupsRequest
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// StopAutonomousDatabase(Matcher<google::cloud::oracledatabase::v1::StopAutonomousDatabaseRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      StopAutonomousDatabase,
      (google::cloud::oracledatabase::v1::StopAutonomousDatabaseRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, StopAutonomousDatabase(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, StopAutonomousDatabase,
      (NoAwaitTag,
       google::cloud::oracledatabase::v1::StopAutonomousDatabaseRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// StopAutonomousDatabase(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      StopAutonomousDatabase, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// StartAutonomousDatabase(Matcher<google::cloud::oracledatabase::v1::StartAutonomousDatabaseRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      StartAutonomousDatabase,
      (google::cloud::oracledatabase::v1::StartAutonomousDatabaseRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, StartAutonomousDatabase(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, StartAutonomousDatabase,
      (NoAwaitTag,
       google::cloud::oracledatabase::v1::StartAutonomousDatabaseRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// StartAutonomousDatabase(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      StartAutonomousDatabase,
      (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// RestartAutonomousDatabase(Matcher<google::cloud::oracledatabase::v1::RestartAutonomousDatabaseRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      RestartAutonomousDatabase,
      (google::cloud::oracledatabase::v1::
           RestartAutonomousDatabaseRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, RestartAutonomousDatabase(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              RestartAutonomousDatabase,
              (NoAwaitTag, google::cloud::oracledatabase::v1::
                               RestartAutonomousDatabaseRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// RestartAutonomousDatabase(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::oracledatabase::v1::AutonomousDatabase>>,
      RestartAutonomousDatabase,
      (google::longrunning::Operation const& operation), (override));

  MOCK_METHOD((StreamRange<google::cloud::location::Location>), ListLocations,
              (google::cloud::location::ListLocationsRequest request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::location::Location>, GetLocation,
              (google::cloud::location::GetLocationRequest const& request),
              (override));

  MOCK_METHOD((StreamRange<google::longrunning::Operation>), ListOperations,
              (google::longrunning::ListOperationsRequest request), (override));

  MOCK_METHOD(StatusOr<google::longrunning::Operation>, GetOperation,
              (google::longrunning::GetOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, DeleteOperation,
              (google::longrunning::DeleteOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, CancelOperation,
              (google::longrunning::CancelOperationRequest const& request),
              (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace oracledatabase_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_ORACLEDATABASE_V1_MOCKS_MOCK_ORACLE_DATABASE_CONNECTION_H
