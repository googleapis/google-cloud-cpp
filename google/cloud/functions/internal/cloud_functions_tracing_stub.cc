// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/functions/v1/functions.proto

#include "google/cloud/functions/internal/cloud_functions_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace functions_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

CloudFunctionsServiceTracingStub::CloudFunctionsServiceTracingStub(
    std::shared_ptr<CloudFunctionsServiceStub> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::functions::v1::ListFunctionsResponse>
CloudFunctionsServiceTracingStub::ListFunctions(
    grpc::ClientContext& context,
    google::cloud::functions::v1::ListFunctionsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.functions.v1.CloudFunctionsService", "ListFunctions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListFunctions(context, request));
}

StatusOr<google::cloud::functions::v1::CloudFunction>
CloudFunctionsServiceTracingStub::GetFunction(
    grpc::ClientContext& context,
    google::cloud::functions::v1::GetFunctionRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.functions.v1.CloudFunctionsService", "GetFunction");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetFunction(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudFunctionsServiceTracingStub::AsyncCreateFunction(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::functions::v1::CreateFunctionRequest const& request) {
  return child_->AsyncCreateFunction(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CloudFunctionsServiceTracingStub::AsyncUpdateFunction(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::functions::v1::UpdateFunctionRequest const& request) {
  return child_->AsyncUpdateFunction(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CloudFunctionsServiceTracingStub::AsyncDeleteFunction(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::functions::v1::DeleteFunctionRequest const& request) {
  return child_->AsyncDeleteFunction(cq, std::move(context), request);
}

StatusOr<google::cloud::functions::v1::CallFunctionResponse>
CloudFunctionsServiceTracingStub::CallFunction(
    grpc::ClientContext& context,
    google::cloud::functions::v1::CallFunctionRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.functions.v1.CloudFunctionsService", "CallFunction");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->CallFunction(context, request));
}

StatusOr<google::cloud::functions::v1::GenerateUploadUrlResponse>
CloudFunctionsServiceTracingStub::GenerateUploadUrl(
    grpc::ClientContext& context,
    google::cloud::functions::v1::GenerateUploadUrlRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.functions.v1.CloudFunctionsService", "GenerateUploadUrl");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GenerateUploadUrl(context, request));
}

StatusOr<google::cloud::functions::v1::GenerateDownloadUrlResponse>
CloudFunctionsServiceTracingStub::GenerateDownloadUrl(
    grpc::ClientContext& context,
    google::cloud::functions::v1::GenerateDownloadUrlRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.functions.v1.CloudFunctionsService", "GenerateDownloadUrl");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GenerateDownloadUrl(context, request));
}

StatusOr<google::iam::v1::Policy>
CloudFunctionsServiceTracingStub::SetIamPolicy(
    grpc::ClientContext& context,
    google::iam::v1::SetIamPolicyRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.functions.v1.CloudFunctionsService", "SetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->SetIamPolicy(context, request));
}

StatusOr<google::iam::v1::Policy>
CloudFunctionsServiceTracingStub::GetIamPolicy(
    grpc::ClientContext& context,
    google::iam::v1::GetIamPolicyRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.functions.v1.CloudFunctionsService", "GetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetIamPolicy(context, request));
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
CloudFunctionsServiceTracingStub::TestIamPermissions(
    grpc::ClientContext& context,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.functions.v1.CloudFunctionsService", "TestIamPermissions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->TestIamPermissions(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudFunctionsServiceTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> CloudFunctionsServiceTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<CloudFunctionsServiceStub> MakeCloudFunctionsServiceTracingStub(
    std::shared_ptr<CloudFunctionsServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<CloudFunctionsServiceTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace functions_internal
}  // namespace cloud
}  // namespace google
