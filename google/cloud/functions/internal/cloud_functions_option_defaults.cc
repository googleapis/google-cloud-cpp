// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/functions/v1/functions.proto

#include "google/cloud/functions/internal/cloud_functions_option_defaults.h"
#include "google/cloud/functions/cloud_functions_connection.h"
#include "google/cloud/functions/cloud_functions_options.h"
#include "google/cloud/internal/populate_common_options.h"
#include "google/cloud/internal/populate_grpc_options.h"
#include <memory>

namespace google {
namespace cloud {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace functions_internal {

namespace {
auto constexpr kBackoffScaling = 2.0;
}  // namespace

Options CloudFunctionsServiceDefaultOptions(Options options) {
  options = google::cloud::internal::PopulateCommonOptions(
      std::move(options), "GOOGLE_CLOUD_CPP_CLOUD_FUNCTIONS_SERVICE_ENDPOINT",
      "", "GOOGLE_CLOUD_CPP_CLOUD_FUNCTIONS_SERVICE_AUTHORITY",
      "cloudfunctions.googleapis.com");
  options =
      google::cloud::internal::PopulateGrpcOptions(std::move(options), "");
  if (!options.has<
          GOOGLE_CLOUD_CPP_NS::CloudFunctionsServiceRetryPolicyOption>()) {
    options.set<GOOGLE_CLOUD_CPP_NS::CloudFunctionsServiceRetryPolicyOption>(
        GOOGLE_CLOUD_CPP_NS::CloudFunctionsServiceLimitedTimeRetryPolicy(
            std::chrono::minutes(30))
            .clone());
  }
  if (!options.has<
          GOOGLE_CLOUD_CPP_NS::CloudFunctionsServiceBackoffPolicyOption>()) {
    options.set<GOOGLE_CLOUD_CPP_NS::CloudFunctionsServiceBackoffPolicyOption>(
        ExponentialBackoffPolicy(std::chrono::seconds(1),
                                 std::chrono::minutes(5), kBackoffScaling)
            .clone());
  }
  if (!options.has<
          GOOGLE_CLOUD_CPP_NS::CloudFunctionsServicePollingPolicyOption>()) {
    options.set<GOOGLE_CLOUD_CPP_NS::CloudFunctionsServicePollingPolicyOption>(
        GenericPollingPolicy<
            GOOGLE_CLOUD_CPP_NS::CloudFunctionsServiceRetryPolicyOption::Type,
            GOOGLE_CLOUD_CPP_NS::CloudFunctionsServiceBackoffPolicyOption::
                Type>(options
                          .get<GOOGLE_CLOUD_CPP_NS::
                                   CloudFunctionsServiceRetryPolicyOption>()
                          ->clone(),
                      options
                          .get<GOOGLE_CLOUD_CPP_NS::
                                   CloudFunctionsServiceBackoffPolicyOption>()
                          ->clone())
            .clone());
  }
  if (!options
           .has<GOOGLE_CLOUD_CPP_NS::
                    CloudFunctionsServiceConnectionIdempotencyPolicyOption>()) {
    options.set<GOOGLE_CLOUD_CPP_NS::
                    CloudFunctionsServiceConnectionIdempotencyPolicyOption>(
        GOOGLE_CLOUD_CPP_NS::
            MakeDefaultCloudFunctionsServiceConnectionIdempotencyPolicy());
  }

  return options;
}

}  // namespace functions_internal
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloud
}  // namespace google
