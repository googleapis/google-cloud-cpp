// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/contactcenterinsights/v1/contact_center_insights.proto

#include "google/cloud/contactcenterinsights/v1/contact_center_insights_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace contactcenterinsights_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ContactCenterInsightsClient::ContactCenterInsightsClient(
    std::shared_ptr<ContactCenterInsightsConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
ContactCenterInsightsClient::~ContactCenterInsightsClient() = default;

StatusOr<google::cloud::contactcenterinsights::v1::Conversation>
ContactCenterInsightsClient::CreateConversation(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::Conversation const& conversation,
    std::string const& conversation_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateConversationRequest request;
  request.set_parent(parent);
  *request.mutable_conversation() = conversation;
  request.set_conversation_id(conversation_id);
  return connection_->CreateConversation(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Conversation>
ContactCenterInsightsClient::CreateConversation(
    google::cloud::contactcenterinsights::v1::CreateConversationRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateConversation(request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::Conversation>>
ContactCenterInsightsClient::UploadConversation(
    google::cloud::contactcenterinsights::v1::UploadConversationRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UploadConversation(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::UploadConversation(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::UploadConversationRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UploadConversation(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::Conversation>>
ContactCenterInsightsClient::UploadConversation(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UploadConversation(operation);
}

StatusOr<google::cloud::contactcenterinsights::v1::Conversation>
ContactCenterInsightsClient::UpdateConversation(
    google::cloud::contactcenterinsights::v1::Conversation const& conversation,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdateConversationRequest request;
  *request.mutable_conversation() = conversation;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateConversation(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Conversation>
ContactCenterInsightsClient::UpdateConversation(
    google::cloud::contactcenterinsights::v1::UpdateConversationRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateConversation(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Conversation>
ContactCenterInsightsClient::GetConversation(std::string const& name,
                                             Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetConversationRequest request;
  request.set_name(name);
  return connection_->GetConversation(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Conversation>
ContactCenterInsightsClient::GetConversation(
    google::cloud::contactcenterinsights::v1::GetConversationRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetConversation(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::Conversation>
ContactCenterInsightsClient::ListConversations(std::string const& parent,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListConversationsRequest request;
  request.set_parent(parent);
  return connection_->ListConversations(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::Conversation>
ContactCenterInsightsClient::ListConversations(
    google::cloud::contactcenterinsights::v1::ListConversationsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListConversations(std::move(request));
}

Status ContactCenterInsightsClient::DeleteConversation(std::string const& name,
                                                       Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteConversationRequest request;
  request.set_name(name);
  return connection_->DeleteConversation(request);
}

Status ContactCenterInsightsClient::DeleteConversation(
    google::cloud::contactcenterinsights::v1::DeleteConversationRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteConversation(request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::Analysis>>
ContactCenterInsightsClient::CreateAnalysis(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::Analysis const& analysis,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateAnalysisRequest request;
  request.set_parent(parent);
  *request.mutable_analysis() = analysis;
  return connection_->CreateAnalysis(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::CreateAnalysis(
    NoAwaitTag, std::string const& parent,
    google::cloud::contactcenterinsights::v1::Analysis const& analysis,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateAnalysisRequest request;
  request.set_parent(parent);
  *request.mutable_analysis() = analysis;
  return connection_->CreateAnalysis(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::Analysis>>
ContactCenterInsightsClient::CreateAnalysis(
    google::cloud::contactcenterinsights::v1::CreateAnalysisRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateAnalysis(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::CreateAnalysis(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::CreateAnalysisRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateAnalysis(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::Analysis>>
ContactCenterInsightsClient::CreateAnalysis(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateAnalysis(operation);
}

StatusOr<google::cloud::contactcenterinsights::v1::Analysis>
ContactCenterInsightsClient::GetAnalysis(std::string const& name,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetAnalysisRequest request;
  request.set_name(name);
  return connection_->GetAnalysis(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Analysis>
ContactCenterInsightsClient::GetAnalysis(
    google::cloud::contactcenterinsights::v1::GetAnalysisRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetAnalysis(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::Analysis>
ContactCenterInsightsClient::ListAnalyses(std::string const& parent,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListAnalysesRequest request;
  request.set_parent(parent);
  return connection_->ListAnalyses(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::Analysis>
ContactCenterInsightsClient::ListAnalyses(
    google::cloud::contactcenterinsights::v1::ListAnalysesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListAnalyses(std::move(request));
}

Status ContactCenterInsightsClient::DeleteAnalysis(std::string const& name,
                                                   Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteAnalysisRequest request;
  request.set_name(name);
  return connection_->DeleteAnalysis(request);
}

Status ContactCenterInsightsClient::DeleteAnalysis(
    google::cloud::contactcenterinsights::v1::DeleteAnalysisRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteAnalysis(request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::BulkAnalyzeConversationsResponse>>
ContactCenterInsightsClient::BulkAnalyzeConversations(std::string const& parent,
                                                      std::string const& filter,
                                                      float analysis_percentage,
                                                      Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::BulkAnalyzeConversationsRequest
      request;
  request.set_parent(parent);
  request.set_filter(filter);
  request.set_analysis_percentage(analysis_percentage);
  return connection_->BulkAnalyzeConversations(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::BulkAnalyzeConversations(NoAwaitTag,
                                                      std::string const& parent,
                                                      std::string const& filter,
                                                      float analysis_percentage,
                                                      Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::BulkAnalyzeConversationsRequest
      request;
  request.set_parent(parent);
  request.set_filter(filter);
  request.set_analysis_percentage(analysis_percentage);
  return connection_->BulkAnalyzeConversations(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::BulkAnalyzeConversationsResponse>>
ContactCenterInsightsClient::BulkAnalyzeConversations(
    google::cloud::contactcenterinsights::v1::
        BulkAnalyzeConversationsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkAnalyzeConversations(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::BulkAnalyzeConversations(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::
        BulkAnalyzeConversationsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkAnalyzeConversations(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::BulkAnalyzeConversationsResponse>>
ContactCenterInsightsClient::BulkAnalyzeConversations(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkAnalyzeConversations(operation);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::BulkDeleteConversationsResponse>>
ContactCenterInsightsClient::BulkDeleteConversations(std::string const& parent,
                                                     std::string const& filter,
                                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::BulkDeleteConversationsRequest
      request;
  request.set_parent(parent);
  request.set_filter(filter);
  return connection_->BulkDeleteConversations(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::BulkDeleteConversations(NoAwaitTag,
                                                     std::string const& parent,
                                                     std::string const& filter,
                                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::BulkDeleteConversationsRequest
      request;
  request.set_parent(parent);
  request.set_filter(filter);
  return connection_->BulkDeleteConversations(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::BulkDeleteConversationsResponse>>
ContactCenterInsightsClient::BulkDeleteConversations(
    google::cloud::contactcenterinsights::v1::
        BulkDeleteConversationsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkDeleteConversations(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::BulkDeleteConversations(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::
        BulkDeleteConversationsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkDeleteConversations(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::BulkDeleteConversationsResponse>>
ContactCenterInsightsClient::BulkDeleteConversations(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkDeleteConversations(operation);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::IngestConversationsResponse>>
ContactCenterInsightsClient::IngestConversations(std::string const& parent,
                                                 Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::IngestConversationsRequest request;
  request.set_parent(parent);
  return connection_->IngestConversations(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::IngestConversations(NoAwaitTag,
                                                 std::string const& parent,
                                                 Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::IngestConversationsRequest request;
  request.set_parent(parent);
  return connection_->IngestConversations(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::IngestConversationsResponse>>
ContactCenterInsightsClient::IngestConversations(
    google::cloud::contactcenterinsights::v1::IngestConversationsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->IngestConversations(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::IngestConversations(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::IngestConversationsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->IngestConversations(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::IngestConversationsResponse>>
ContactCenterInsightsClient::IngestConversations(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->IngestConversations(operation);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::ExportInsightsDataResponse>>
ContactCenterInsightsClient::ExportInsightsData(std::string const& parent,
                                                Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ExportInsightsDataRequest request;
  request.set_parent(parent);
  return connection_->ExportInsightsData(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::ExportInsightsData(NoAwaitTag,
                                                std::string const& parent,
                                                Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ExportInsightsDataRequest request;
  request.set_parent(parent);
  return connection_->ExportInsightsData(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::ExportInsightsDataResponse>>
ContactCenterInsightsClient::ExportInsightsData(
    google::cloud::contactcenterinsights::v1::ExportInsightsDataRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ExportInsightsData(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::ExportInsightsData(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::ExportInsightsDataRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ExportInsightsData(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::ExportInsightsDataResponse>>
ContactCenterInsightsClient::ExportInsightsData(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ExportInsightsData(operation);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::IssueModel>>
ContactCenterInsightsClient::CreateIssueModel(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::IssueModel const& issue_model,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateIssueModelRequest request;
  request.set_parent(parent);
  *request.mutable_issue_model() = issue_model;
  return connection_->CreateIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::CreateIssueModel(
    NoAwaitTag, std::string const& parent,
    google::cloud::contactcenterinsights::v1::IssueModel const& issue_model,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateIssueModelRequest request;
  request.set_parent(parent);
  *request.mutable_issue_model() = issue_model;
  return connection_->CreateIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::IssueModel>>
ContactCenterInsightsClient::CreateIssueModel(
    google::cloud::contactcenterinsights::v1::CreateIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::CreateIssueModel(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::CreateIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::IssueModel>>
ContactCenterInsightsClient::CreateIssueModel(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateIssueModel(operation);
}

StatusOr<google::cloud::contactcenterinsights::v1::IssueModel>
ContactCenterInsightsClient::UpdateIssueModel(
    google::cloud::contactcenterinsights::v1::IssueModel const& issue_model,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdateIssueModelRequest request;
  *request.mutable_issue_model() = issue_model;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateIssueModel(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::IssueModel>
ContactCenterInsightsClient::UpdateIssueModel(
    google::cloud::contactcenterinsights::v1::UpdateIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateIssueModel(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::IssueModel>
ContactCenterInsightsClient::GetIssueModel(std::string const& name,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetIssueModelRequest request;
  request.set_name(name);
  return connection_->GetIssueModel(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::IssueModel>
ContactCenterInsightsClient::GetIssueModel(
    google::cloud::contactcenterinsights::v1::GetIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetIssueModel(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::ListIssueModelsResponse>
ContactCenterInsightsClient::ListIssueModels(std::string const& parent,
                                             Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListIssueModelsRequest request;
  request.set_parent(parent);
  return connection_->ListIssueModels(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::ListIssueModelsResponse>
ContactCenterInsightsClient::ListIssueModels(
    google::cloud::contactcenterinsights::v1::ListIssueModelsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListIssueModels(request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::DeleteIssueModelMetadata>>
ContactCenterInsightsClient::DeleteIssueModel(std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteIssueModelRequest request;
  request.set_name(name);
  return connection_->DeleteIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::DeleteIssueModel(NoAwaitTag,
                                              std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteIssueModelRequest request;
  request.set_name(name);
  return connection_->DeleteIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::DeleteIssueModelMetadata>>
ContactCenterInsightsClient::DeleteIssueModel(
    google::cloud::contactcenterinsights::v1::DeleteIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::DeleteIssueModel(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::DeleteIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::DeleteIssueModelMetadata>>
ContactCenterInsightsClient::DeleteIssueModel(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssueModel(operation);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::DeployIssueModelResponse>>
ContactCenterInsightsClient::DeployIssueModel(std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeployIssueModelRequest request;
  request.set_name(name);
  return connection_->DeployIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::DeployIssueModel(NoAwaitTag,
                                              std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeployIssueModelRequest request;
  request.set_name(name);
  return connection_->DeployIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::DeployIssueModelResponse>>
ContactCenterInsightsClient::DeployIssueModel(
    google::cloud::contactcenterinsights::v1::DeployIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeployIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::DeployIssueModel(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::DeployIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeployIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::DeployIssueModelResponse>>
ContactCenterInsightsClient::DeployIssueModel(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeployIssueModel(operation);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::UndeployIssueModelResponse>>
ContactCenterInsightsClient::UndeployIssueModel(std::string const& name,
                                                Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UndeployIssueModelRequest request;
  request.set_name(name);
  return connection_->UndeployIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::UndeployIssueModel(NoAwaitTag,
                                                std::string const& name,
                                                Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UndeployIssueModelRequest request;
  request.set_name(name);
  return connection_->UndeployIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::UndeployIssueModelResponse>>
ContactCenterInsightsClient::UndeployIssueModel(
    google::cloud::contactcenterinsights::v1::UndeployIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UndeployIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::UndeployIssueModel(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::UndeployIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UndeployIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::UndeployIssueModelResponse>>
ContactCenterInsightsClient::UndeployIssueModel(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UndeployIssueModel(operation);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::ExportIssueModelResponse>>
ContactCenterInsightsClient::ExportIssueModel(std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ExportIssueModelRequest request;
  request.set_name(name);
  return connection_->ExportIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::ExportIssueModel(NoAwaitTag,
                                              std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ExportIssueModelRequest request;
  request.set_name(name);
  return connection_->ExportIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::ExportIssueModelResponse>>
ContactCenterInsightsClient::ExportIssueModel(
    google::cloud::contactcenterinsights::v1::ExportIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ExportIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::ExportIssueModel(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::ExportIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ExportIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::ExportIssueModelResponse>>
ContactCenterInsightsClient::ExportIssueModel(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ExportIssueModel(operation);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::ImportIssueModelResponse>>
ContactCenterInsightsClient::ImportIssueModel(std::string const& parent,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ImportIssueModelRequest request;
  request.set_parent(parent);
  return connection_->ImportIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::ImportIssueModel(NoAwaitTag,
                                              std::string const& parent,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ImportIssueModelRequest request;
  request.set_parent(parent);
  return connection_->ImportIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::ImportIssueModelResponse>>
ContactCenterInsightsClient::ImportIssueModel(
    google::cloud::contactcenterinsights::v1::ImportIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ImportIssueModel(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::ImportIssueModel(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::ImportIssueModelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ImportIssueModel(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::ImportIssueModelResponse>>
ContactCenterInsightsClient::ImportIssueModel(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ImportIssueModel(operation);
}

StatusOr<google::cloud::contactcenterinsights::v1::Issue>
ContactCenterInsightsClient::GetIssue(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetIssueRequest request;
  request.set_name(name);
  return connection_->GetIssue(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Issue>
ContactCenterInsightsClient::GetIssue(
    google::cloud::contactcenterinsights::v1::GetIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetIssue(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::ListIssuesResponse>
ContactCenterInsightsClient::ListIssues(std::string const& parent,
                                        Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListIssuesRequest request;
  request.set_parent(parent);
  return connection_->ListIssues(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::ListIssuesResponse>
ContactCenterInsightsClient::ListIssues(
    google::cloud::contactcenterinsights::v1::ListIssuesRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListIssues(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Issue>
ContactCenterInsightsClient::UpdateIssue(
    google::cloud::contactcenterinsights::v1::Issue const& issue,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdateIssueRequest request;
  *request.mutable_issue() = issue;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateIssue(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Issue>
ContactCenterInsightsClient::UpdateIssue(
    google::cloud::contactcenterinsights::v1::UpdateIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateIssue(request);
}

Status ContactCenterInsightsClient::DeleteIssue(std::string const& name,
                                                Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteIssueRequest request;
  request.set_name(name);
  return connection_->DeleteIssue(request);
}

Status ContactCenterInsightsClient::DeleteIssue(
    google::cloud::contactcenterinsights::v1::DeleteIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssue(request);
}

StatusOr<
    google::cloud::contactcenterinsights::v1::CalculateIssueModelStatsResponse>
ContactCenterInsightsClient::CalculateIssueModelStats(
    std::string const& issue_model, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CalculateIssueModelStatsRequest
      request;
  request.set_issue_model(issue_model);
  return connection_->CalculateIssueModelStats(request);
}

StatusOr<
    google::cloud::contactcenterinsights::v1::CalculateIssueModelStatsResponse>
ContactCenterInsightsClient::CalculateIssueModelStats(
    google::cloud::contactcenterinsights::v1::
        CalculateIssueModelStatsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CalculateIssueModelStats(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::PhraseMatcher>
ContactCenterInsightsClient::CreatePhraseMatcher(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::PhraseMatcher const&
        phrase_matcher,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreatePhraseMatcherRequest request;
  request.set_parent(parent);
  *request.mutable_phrase_matcher() = phrase_matcher;
  return connection_->CreatePhraseMatcher(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::PhraseMatcher>
ContactCenterInsightsClient::CreatePhraseMatcher(
    google::cloud::contactcenterinsights::v1::CreatePhraseMatcherRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePhraseMatcher(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::PhraseMatcher>
ContactCenterInsightsClient::GetPhraseMatcher(std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetPhraseMatcherRequest request;
  request.set_name(name);
  return connection_->GetPhraseMatcher(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::PhraseMatcher>
ContactCenterInsightsClient::GetPhraseMatcher(
    google::cloud::contactcenterinsights::v1::GetPhraseMatcherRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetPhraseMatcher(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::PhraseMatcher>
ContactCenterInsightsClient::ListPhraseMatchers(std::string const& parent,
                                                Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListPhraseMatchersRequest request;
  request.set_parent(parent);
  return connection_->ListPhraseMatchers(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::PhraseMatcher>
ContactCenterInsightsClient::ListPhraseMatchers(
    google::cloud::contactcenterinsights::v1::ListPhraseMatchersRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListPhraseMatchers(std::move(request));
}

Status ContactCenterInsightsClient::DeletePhraseMatcher(std::string const& name,
                                                        Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeletePhraseMatcherRequest request;
  request.set_name(name);
  return connection_->DeletePhraseMatcher(request);
}

Status ContactCenterInsightsClient::DeletePhraseMatcher(
    google::cloud::contactcenterinsights::v1::DeletePhraseMatcherRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePhraseMatcher(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::PhraseMatcher>
ContactCenterInsightsClient::UpdatePhraseMatcher(
    google::cloud::contactcenterinsights::v1::PhraseMatcher const&
        phrase_matcher,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdatePhraseMatcherRequest request;
  *request.mutable_phrase_matcher() = phrase_matcher;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdatePhraseMatcher(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::PhraseMatcher>
ContactCenterInsightsClient::UpdatePhraseMatcher(
    google::cloud::contactcenterinsights::v1::UpdatePhraseMatcherRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePhraseMatcher(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::CalculateStatsResponse>
ContactCenterInsightsClient::CalculateStats(std::string const& location,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CalculateStatsRequest request;
  request.set_location(location);
  return connection_->CalculateStats(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::CalculateStatsResponse>
ContactCenterInsightsClient::CalculateStats(
    google::cloud::contactcenterinsights::v1::CalculateStatsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CalculateStats(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Settings>
ContactCenterInsightsClient::GetSettings(std::string const& name,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetSettingsRequest request;
  request.set_name(name);
  return connection_->GetSettings(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Settings>
ContactCenterInsightsClient::GetSettings(
    google::cloud::contactcenterinsights::v1::GetSettingsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetSettings(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Settings>
ContactCenterInsightsClient::UpdateSettings(
    google::cloud::contactcenterinsights::v1::Settings const& settings,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdateSettingsRequest request;
  *request.mutable_settings() = settings;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateSettings(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::Settings>
ContactCenterInsightsClient::UpdateSettings(
    google::cloud::contactcenterinsights::v1::UpdateSettingsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateSettings(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::AnalysisRule>
ContactCenterInsightsClient::CreateAnalysisRule(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::AnalysisRule const& analysis_rule,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateAnalysisRuleRequest request;
  request.set_parent(parent);
  *request.mutable_analysis_rule() = analysis_rule;
  return connection_->CreateAnalysisRule(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::AnalysisRule>
ContactCenterInsightsClient::CreateAnalysisRule(
    google::cloud::contactcenterinsights::v1::CreateAnalysisRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateAnalysisRule(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::AnalysisRule>
ContactCenterInsightsClient::GetAnalysisRule(std::string const& name,
                                             Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetAnalysisRuleRequest request;
  request.set_name(name);
  return connection_->GetAnalysisRule(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::AnalysisRule>
ContactCenterInsightsClient::GetAnalysisRule(
    google::cloud::contactcenterinsights::v1::GetAnalysisRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetAnalysisRule(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::AnalysisRule>
ContactCenterInsightsClient::ListAnalysisRules(std::string const& parent,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListAnalysisRulesRequest request;
  request.set_parent(parent);
  return connection_->ListAnalysisRules(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::AnalysisRule>
ContactCenterInsightsClient::ListAnalysisRules(
    google::cloud::contactcenterinsights::v1::ListAnalysisRulesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListAnalysisRules(std::move(request));
}

StatusOr<google::cloud::contactcenterinsights::v1::AnalysisRule>
ContactCenterInsightsClient::UpdateAnalysisRule(
    google::cloud::contactcenterinsights::v1::AnalysisRule const& analysis_rule,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdateAnalysisRuleRequest request;
  *request.mutable_analysis_rule() = analysis_rule;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateAnalysisRule(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::AnalysisRule>
ContactCenterInsightsClient::UpdateAnalysisRule(
    google::cloud::contactcenterinsights::v1::UpdateAnalysisRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateAnalysisRule(request);
}

Status ContactCenterInsightsClient::DeleteAnalysisRule(std::string const& name,
                                                       Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteAnalysisRuleRequest request;
  request.set_name(name);
  return connection_->DeleteAnalysisRule(request);
}

Status ContactCenterInsightsClient::DeleteAnalysisRule(
    google::cloud::contactcenterinsights::v1::DeleteAnalysisRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteAnalysisRule(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::EncryptionSpec>
ContactCenterInsightsClient::GetEncryptionSpec(std::string const& name,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetEncryptionSpecRequest request;
  request.set_name(name);
  return connection_->GetEncryptionSpec(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::EncryptionSpec>
ContactCenterInsightsClient::GetEncryptionSpec(
    google::cloud::contactcenterinsights::v1::GetEncryptionSpecRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetEncryptionSpec(request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::InitializeEncryptionSpecResponse>>
ContactCenterInsightsClient::InitializeEncryptionSpec(
    google::cloud::contactcenterinsights::v1::EncryptionSpec const&
        encryption_spec,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::InitializeEncryptionSpecRequest
      request;
  *request.mutable_encryption_spec() = encryption_spec;
  return connection_->InitializeEncryptionSpec(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::InitializeEncryptionSpec(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::EncryptionSpec const&
        encryption_spec,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::InitializeEncryptionSpecRequest
      request;
  *request.mutable_encryption_spec() = encryption_spec;
  return connection_->InitializeEncryptionSpec(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::InitializeEncryptionSpecResponse>>
ContactCenterInsightsClient::InitializeEncryptionSpec(
    google::cloud::contactcenterinsights::v1::
        InitializeEncryptionSpecRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InitializeEncryptionSpec(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::InitializeEncryptionSpec(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::
        InitializeEncryptionSpecRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InitializeEncryptionSpec(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::InitializeEncryptionSpecResponse>>
ContactCenterInsightsClient::InitializeEncryptionSpec(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InitializeEncryptionSpec(operation);
}

StatusOr<google::cloud::contactcenterinsights::v1::View>
ContactCenterInsightsClient::CreateView(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::View const& view, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateViewRequest request;
  request.set_parent(parent);
  *request.mutable_view() = view;
  return connection_->CreateView(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::View>
ContactCenterInsightsClient::CreateView(
    google::cloud::contactcenterinsights::v1::CreateViewRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateView(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::View>
ContactCenterInsightsClient::GetView(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetViewRequest request;
  request.set_name(name);
  return connection_->GetView(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::View>
ContactCenterInsightsClient::GetView(
    google::cloud::contactcenterinsights::v1::GetViewRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetView(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::View>
ContactCenterInsightsClient::ListViews(std::string const& parent,
                                       Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListViewsRequest request;
  request.set_parent(parent);
  return connection_->ListViews(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::View>
ContactCenterInsightsClient::ListViews(
    google::cloud::contactcenterinsights::v1::ListViewsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListViews(std::move(request));
}

StatusOr<google::cloud::contactcenterinsights::v1::View>
ContactCenterInsightsClient::UpdateView(
    google::cloud::contactcenterinsights::v1::View const& view,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdateViewRequest request;
  *request.mutable_view() = view;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateView(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::View>
ContactCenterInsightsClient::UpdateView(
    google::cloud::contactcenterinsights::v1::UpdateViewRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateView(request);
}

Status ContactCenterInsightsClient::DeleteView(std::string const& name,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteViewRequest request;
  request.set_name(name);
  return connection_->DeleteView(request);
}

Status ContactCenterInsightsClient::DeleteView(
    google::cloud::contactcenterinsights::v1::DeleteViewRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteView(request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::QueryMetricsResponse>>
ContactCenterInsightsClient::QueryMetrics(
    google::cloud::contactcenterinsights::v1::QueryMetricsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->QueryMetrics(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::QueryMetrics(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::QueryMetricsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->QueryMetrics(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::QueryMetricsResponse>>
ContactCenterInsightsClient::QueryMetrics(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->QueryMetrics(operation);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaQuestion>
ContactCenterInsightsClient::CreateQaQuestion(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::QaQuestion const& qa_question,
    std::string const& qa_question_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateQaQuestionRequest request;
  request.set_parent(parent);
  *request.mutable_qa_question() = qa_question;
  request.set_qa_question_id(qa_question_id);
  return connection_->CreateQaQuestion(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaQuestion>
ContactCenterInsightsClient::CreateQaQuestion(
    google::cloud::contactcenterinsights::v1::CreateQaQuestionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateQaQuestion(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaQuestion>
ContactCenterInsightsClient::GetQaQuestion(std::string const& name,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetQaQuestionRequest request;
  request.set_name(name);
  return connection_->GetQaQuestion(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaQuestion>
ContactCenterInsightsClient::GetQaQuestion(
    google::cloud::contactcenterinsights::v1::GetQaQuestionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetQaQuestion(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaQuestion>
ContactCenterInsightsClient::UpdateQaQuestion(
    google::cloud::contactcenterinsights::v1::QaQuestion const& qa_question,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdateQaQuestionRequest request;
  *request.mutable_qa_question() = qa_question;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateQaQuestion(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaQuestion>
ContactCenterInsightsClient::UpdateQaQuestion(
    google::cloud::contactcenterinsights::v1::UpdateQaQuestionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateQaQuestion(request);
}

Status ContactCenterInsightsClient::DeleteQaQuestion(std::string const& name,
                                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteQaQuestionRequest request;
  request.set_name(name);
  return connection_->DeleteQaQuestion(request);
}

Status ContactCenterInsightsClient::DeleteQaQuestion(
    google::cloud::contactcenterinsights::v1::DeleteQaQuestionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteQaQuestion(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::QaQuestion>
ContactCenterInsightsClient::ListQaQuestions(std::string const& parent,
                                             Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListQaQuestionsRequest request;
  request.set_parent(parent);
  return connection_->ListQaQuestions(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::QaQuestion>
ContactCenterInsightsClient::ListQaQuestions(
    google::cloud::contactcenterinsights::v1::ListQaQuestionsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListQaQuestions(std::move(request));
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecard>
ContactCenterInsightsClient::CreateQaScorecard(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::QaScorecard const& qa_scorecard,
    std::string const& qa_scorecard_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateQaScorecardRequest request;
  request.set_parent(parent);
  *request.mutable_qa_scorecard() = qa_scorecard;
  request.set_qa_scorecard_id(qa_scorecard_id);
  return connection_->CreateQaScorecard(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecard>
ContactCenterInsightsClient::CreateQaScorecard(
    google::cloud::contactcenterinsights::v1::CreateQaScorecardRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateQaScorecard(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecard>
ContactCenterInsightsClient::GetQaScorecard(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetQaScorecardRequest request;
  request.set_name(name);
  return connection_->GetQaScorecard(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecard>
ContactCenterInsightsClient::GetQaScorecard(
    google::cloud::contactcenterinsights::v1::GetQaScorecardRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetQaScorecard(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecard>
ContactCenterInsightsClient::UpdateQaScorecard(
    google::cloud::contactcenterinsights::v1::QaScorecard const& qa_scorecard,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdateQaScorecardRequest request;
  *request.mutable_qa_scorecard() = qa_scorecard;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateQaScorecard(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecard>
ContactCenterInsightsClient::UpdateQaScorecard(
    google::cloud::contactcenterinsights::v1::UpdateQaScorecardRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateQaScorecard(request);
}

Status ContactCenterInsightsClient::DeleteQaScorecard(std::string const& name,
                                                      Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteQaScorecardRequest request;
  request.set_name(name);
  return connection_->DeleteQaScorecard(request);
}

Status ContactCenterInsightsClient::DeleteQaScorecard(
    google::cloud::contactcenterinsights::v1::DeleteQaScorecardRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteQaScorecard(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::QaScorecard>
ContactCenterInsightsClient::ListQaScorecards(std::string const& parent,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListQaScorecardsRequest request;
  request.set_parent(parent);
  return connection_->ListQaScorecards(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::QaScorecard>
ContactCenterInsightsClient::ListQaScorecards(
    google::cloud::contactcenterinsights::v1::ListQaScorecardsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListQaScorecards(std::move(request));
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecardRevision>
ContactCenterInsightsClient::CreateQaScorecardRevision(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::QaScorecardRevision const&
        qa_scorecard_revision,
    std::string const& qa_scorecard_revision_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateQaScorecardRevisionRequest
      request;
  request.set_parent(parent);
  *request.mutable_qa_scorecard_revision() = qa_scorecard_revision;
  request.set_qa_scorecard_revision_id(qa_scorecard_revision_id);
  return connection_->CreateQaScorecardRevision(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecardRevision>
ContactCenterInsightsClient::CreateQaScorecardRevision(
    google::cloud::contactcenterinsights::v1::
        CreateQaScorecardRevisionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateQaScorecardRevision(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecardRevision>
ContactCenterInsightsClient::GetQaScorecardRevision(std::string const& name,
                                                    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetQaScorecardRevisionRequest
      request;
  request.set_name(name);
  return connection_->GetQaScorecardRevision(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecardRevision>
ContactCenterInsightsClient::GetQaScorecardRevision(
    google::cloud::contactcenterinsights::v1::
        GetQaScorecardRevisionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetQaScorecardRevision(request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::TuneQaScorecardRevisionResponse>>
ContactCenterInsightsClient::TuneQaScorecardRevision(std::string const& parent,
                                                     std::string const& filter,
                                                     bool validate_only,
                                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::TuneQaScorecardRevisionRequest
      request;
  request.set_parent(parent);
  request.set_filter(filter);
  request.set_validate_only(validate_only);
  return connection_->TuneQaScorecardRevision(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::TuneQaScorecardRevision(NoAwaitTag,
                                                     std::string const& parent,
                                                     std::string const& filter,
                                                     bool validate_only,
                                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::TuneQaScorecardRevisionRequest
      request;
  request.set_parent(parent);
  request.set_filter(filter);
  request.set_validate_only(validate_only);
  return connection_->TuneQaScorecardRevision(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::TuneQaScorecardRevisionResponse>>
ContactCenterInsightsClient::TuneQaScorecardRevision(
    google::cloud::contactcenterinsights::v1::
        TuneQaScorecardRevisionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->TuneQaScorecardRevision(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::TuneQaScorecardRevision(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::
        TuneQaScorecardRevisionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->TuneQaScorecardRevision(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::TuneQaScorecardRevisionResponse>>
ContactCenterInsightsClient::TuneQaScorecardRevision(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->TuneQaScorecardRevision(operation);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecardRevision>
ContactCenterInsightsClient::DeployQaScorecardRevision(
    google::cloud::contactcenterinsights::v1::
        DeployQaScorecardRevisionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeployQaScorecardRevision(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::QaScorecardRevision>
ContactCenterInsightsClient::UndeployQaScorecardRevision(
    google::cloud::contactcenterinsights::v1::
        UndeployQaScorecardRevisionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UndeployQaScorecardRevision(request);
}

Status ContactCenterInsightsClient::DeleteQaScorecardRevision(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteQaScorecardRevisionRequest
      request;
  request.set_name(name);
  return connection_->DeleteQaScorecardRevision(request);
}

Status ContactCenterInsightsClient::DeleteQaScorecardRevision(
    google::cloud::contactcenterinsights::v1::
        DeleteQaScorecardRevisionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteQaScorecardRevision(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::QaScorecardRevision>
ContactCenterInsightsClient::ListQaScorecardRevisions(std::string const& parent,
                                                      Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListQaScorecardRevisionsRequest
      request;
  request.set_parent(parent);
  return connection_->ListQaScorecardRevisions(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::QaScorecardRevision>
ContactCenterInsightsClient::ListQaScorecardRevisions(
    google::cloud::contactcenterinsights::v1::ListQaScorecardRevisionsRequest
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListQaScorecardRevisions(std::move(request));
}

StatusOr<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::CreateFeedbackLabel(
    std::string const& parent,
    google::cloud::contactcenterinsights::v1::FeedbackLabel const&
        feedback_label,
    std::string const& feedback_label_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::CreateFeedbackLabelRequest request;
  request.set_parent(parent);
  *request.mutable_feedback_label() = feedback_label;
  request.set_feedback_label_id(feedback_label_id);
  return connection_->CreateFeedbackLabel(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::CreateFeedbackLabel(
    google::cloud::contactcenterinsights::v1::CreateFeedbackLabelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateFeedbackLabel(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::ListFeedbackLabels(std::string const& parent,
                                                Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListFeedbackLabelsRequest request;
  request.set_parent(parent);
  return connection_->ListFeedbackLabels(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::ListFeedbackLabels(
    google::cloud::contactcenterinsights::v1::ListFeedbackLabelsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListFeedbackLabels(std::move(request));
}

StatusOr<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::GetFeedbackLabel(std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::GetFeedbackLabelRequest request;
  request.set_name(name);
  return connection_->GetFeedbackLabel(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::GetFeedbackLabel(
    google::cloud::contactcenterinsights::v1::GetFeedbackLabelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetFeedbackLabel(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::UpdateFeedbackLabel(
    google::cloud::contactcenterinsights::v1::FeedbackLabel const&
        feedback_label,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::UpdateFeedbackLabelRequest request;
  *request.mutable_feedback_label() = feedback_label;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateFeedbackLabel(request);
}

StatusOr<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::UpdateFeedbackLabel(
    google::cloud::contactcenterinsights::v1::UpdateFeedbackLabelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateFeedbackLabel(request);
}

Status ContactCenterInsightsClient::DeleteFeedbackLabel(std::string const& name,
                                                        Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::DeleteFeedbackLabelRequest request;
  request.set_name(name);
  return connection_->DeleteFeedbackLabel(request);
}

Status ContactCenterInsightsClient::DeleteFeedbackLabel(
    google::cloud::contactcenterinsights::v1::DeleteFeedbackLabelRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteFeedbackLabel(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::ListAllFeedbackLabels(std::string const& parent,
                                                   Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::ListAllFeedbackLabelsRequest
      request;
  request.set_parent(parent);
  return connection_->ListAllFeedbackLabels(request);
}

StreamRange<google::cloud::contactcenterinsights::v1::FeedbackLabel>
ContactCenterInsightsClient::ListAllFeedbackLabels(
    google::cloud::contactcenterinsights::v1::ListAllFeedbackLabelsRequest
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListAllFeedbackLabels(std::move(request));
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::BulkUploadFeedbackLabelsResponse>>
ContactCenterInsightsClient::BulkUploadFeedbackLabels(std::string const& parent,
                                                      Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::BulkUploadFeedbackLabelsRequest
      request;
  request.set_parent(parent);
  return connection_->BulkUploadFeedbackLabels(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::BulkUploadFeedbackLabels(NoAwaitTag,
                                                      std::string const& parent,
                                                      Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::BulkUploadFeedbackLabelsRequest
      request;
  request.set_parent(parent);
  return connection_->BulkUploadFeedbackLabels(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::BulkUploadFeedbackLabelsResponse>>
ContactCenterInsightsClient::BulkUploadFeedbackLabels(
    google::cloud::contactcenterinsights::v1::
        BulkUploadFeedbackLabelsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkUploadFeedbackLabels(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::BulkUploadFeedbackLabels(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::
        BulkUploadFeedbackLabelsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkUploadFeedbackLabels(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::contactcenterinsights::v1::BulkUploadFeedbackLabelsResponse>>
ContactCenterInsightsClient::BulkUploadFeedbackLabels(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkUploadFeedbackLabels(operation);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::
                    BulkDownloadFeedbackLabelsResponse>>
ContactCenterInsightsClient::BulkDownloadFeedbackLabels(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::BulkDownloadFeedbackLabelsRequest
      request;
  request.set_parent(parent);
  return connection_->BulkDownloadFeedbackLabels(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::BulkDownloadFeedbackLabels(
    NoAwaitTag, std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::contactcenterinsights::v1::BulkDownloadFeedbackLabelsRequest
      request;
  request.set_parent(parent);
  return connection_->BulkDownloadFeedbackLabels(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::
                    BulkDownloadFeedbackLabelsResponse>>
ContactCenterInsightsClient::BulkDownloadFeedbackLabels(
    google::cloud::contactcenterinsights::v1::
        BulkDownloadFeedbackLabelsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkDownloadFeedbackLabels(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::BulkDownloadFeedbackLabels(
    NoAwaitTag,
    google::cloud::contactcenterinsights::v1::
        BulkDownloadFeedbackLabelsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkDownloadFeedbackLabels(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::contactcenterinsights::v1::
                    BulkDownloadFeedbackLabelsResponse>>
ContactCenterInsightsClient::BulkDownloadFeedbackLabels(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BulkDownloadFeedbackLabels(operation);
}

StreamRange<google::longrunning::Operation>
ContactCenterInsightsClient::ListOperations(std::string const& name,
                                            std::string const& filter,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::ListOperationsRequest request;
  request.set_name(name);
  request.set_filter(filter);
  return connection_->ListOperations(request);
}

StreamRange<google::longrunning::Operation>
ContactCenterInsightsClient::ListOperations(
    google::longrunning::ListOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListOperations(std::move(request));
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::GetOperation(std::string const& name,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation>
ContactCenterInsightsClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

Status ContactCenterInsightsClient::CancelOperation(std::string const& name,
                                                    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::CancelOperationRequest request;
  request.set_name(name);
  return connection_->CancelOperation(request);
}

Status ContactCenterInsightsClient::CancelOperation(
    google::longrunning::CancelOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace contactcenterinsights_v1
}  // namespace cloud
}  // namespace google
