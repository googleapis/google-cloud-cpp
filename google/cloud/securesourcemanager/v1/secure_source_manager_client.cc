// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/securesourcemanager/v1/secure_source_manager.proto

#include "google/cloud/securesourcemanager/v1/secure_source_manager_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace securesourcemanager_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SecureSourceManagerClient::SecureSourceManagerClient(
    std::shared_ptr<SecureSourceManagerConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
SecureSourceManagerClient::~SecureSourceManagerClient() = default;

StreamRange<google::cloud::securesourcemanager::v1::Instance>
SecureSourceManagerClient::ListInstances(std::string const& parent,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ListInstancesRequest request;
  request.set_parent(parent);
  return connection_->ListInstances(request);
}

StreamRange<google::cloud::securesourcemanager::v1::Instance>
SecureSourceManagerClient::ListInstances(
    google::cloud::securesourcemanager::v1::ListInstancesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListInstances(std::move(request));
}

StatusOr<google::cloud::securesourcemanager::v1::Instance>
SecureSourceManagerClient::GetInstance(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::GetInstanceRequest request;
  request.set_name(name);
  return connection_->GetInstance(request);
}

StatusOr<google::cloud::securesourcemanager::v1::Instance>
SecureSourceManagerClient::GetInstance(
    google::cloud::securesourcemanager::v1::GetInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetInstance(request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Instance>>
SecureSourceManagerClient::CreateInstance(
    std::string const& parent,
    google::cloud::securesourcemanager::v1::Instance const& instance,
    std::string const& instance_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateInstanceRequest request;
  request.set_parent(parent);
  *request.mutable_instance() = instance;
  request.set_instance_id(instance_id);
  return connection_->CreateInstance(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreateInstance(
    NoAwaitTag, std::string const& parent,
    google::cloud::securesourcemanager::v1::Instance const& instance,
    std::string const& instance_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateInstanceRequest request;
  request.set_parent(parent);
  *request.mutable_instance() = instance;
  request.set_instance_id(instance_id);
  return connection_->CreateInstance(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Instance>>
SecureSourceManagerClient::CreateInstance(
    google::cloud::securesourcemanager::v1::CreateInstanceRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateInstance(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreateInstance(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::CreateInstanceRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateInstance(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Instance>>
SecureSourceManagerClient::CreateInstance(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateInstance(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteInstance(std::string const& name,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteInstanceRequest request;
  request.set_name(name);
  return connection_->DeleteInstance(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeleteInstance(NoAwaitTag, std::string const& name,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteInstanceRequest request;
  request.set_name(name);
  return connection_->DeleteInstance(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteInstance(
    google::cloud::securesourcemanager::v1::DeleteInstanceRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteInstance(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeleteInstance(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::DeleteInstanceRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteInstance(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteInstance(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteInstance(operation);
}

StreamRange<google::cloud::securesourcemanager::v1::Repository>
SecureSourceManagerClient::ListRepositories(std::string const& parent,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ListRepositoriesRequest request;
  request.set_parent(parent);
  return connection_->ListRepositories(request);
}

StreamRange<google::cloud::securesourcemanager::v1::Repository>
SecureSourceManagerClient::ListRepositories(
    google::cloud::securesourcemanager::v1::ListRepositoriesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRepositories(std::move(request));
}

StatusOr<google::cloud::securesourcemanager::v1::Repository>
SecureSourceManagerClient::GetRepository(std::string const& name,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::GetRepositoryRequest request;
  request.set_name(name);
  return connection_->GetRepository(request);
}

StatusOr<google::cloud::securesourcemanager::v1::Repository>
SecureSourceManagerClient::GetRepository(
    google::cloud::securesourcemanager::v1::GetRepositoryRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRepository(request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
SecureSourceManagerClient::CreateRepository(
    std::string const& parent,
    google::cloud::securesourcemanager::v1::Repository const& repository,
    std::string const& repository_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateRepositoryRequest request;
  request.set_parent(parent);
  *request.mutable_repository() = repository;
  request.set_repository_id(repository_id);
  return connection_->CreateRepository(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreateRepository(
    NoAwaitTag, std::string const& parent,
    google::cloud::securesourcemanager::v1::Repository const& repository,
    std::string const& repository_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateRepositoryRequest request;
  request.set_parent(parent);
  *request.mutable_repository() = repository;
  request.set_repository_id(repository_id);
  return connection_->CreateRepository(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
SecureSourceManagerClient::CreateRepository(
    google::cloud::securesourcemanager::v1::CreateRepositoryRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateRepository(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreateRepository(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::CreateRepositoryRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateRepository(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
SecureSourceManagerClient::CreateRepository(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateRepository(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
SecureSourceManagerClient::UpdateRepository(
    google::cloud::securesourcemanager::v1::Repository const& repository,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateRepositoryRequest request;
  *request.mutable_repository() = repository;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateRepository(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdateRepository(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::Repository const& repository,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateRepositoryRequest request;
  *request.mutable_repository() = repository;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateRepository(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
SecureSourceManagerClient::UpdateRepository(
    google::cloud::securesourcemanager::v1::UpdateRepositoryRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRepository(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdateRepository(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::UpdateRepositoryRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRepository(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
SecureSourceManagerClient::UpdateRepository(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRepository(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteRepository(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteRepositoryRequest request;
  request.set_name(name);
  return connection_->DeleteRepository(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeleteRepository(NoAwaitTag, std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteRepositoryRequest request;
  request.set_name(name);
  return connection_->DeleteRepository(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteRepository(
    google::cloud::securesourcemanager::v1::DeleteRepositoryRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteRepository(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeleteRepository(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::DeleteRepositoryRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteRepository(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteRepository(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteRepository(operation);
}

StreamRange<google::cloud::securesourcemanager::v1::Hook>
SecureSourceManagerClient::ListHooks(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ListHooksRequest request;
  request.set_parent(parent);
  return connection_->ListHooks(request);
}

StreamRange<google::cloud::securesourcemanager::v1::Hook>
SecureSourceManagerClient::ListHooks(
    google::cloud::securesourcemanager::v1::ListHooksRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListHooks(std::move(request));
}

StatusOr<google::cloud::securesourcemanager::v1::Hook>
SecureSourceManagerClient::GetHook(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::GetHookRequest request;
  request.set_name(name);
  return connection_->GetHook(request);
}

StatusOr<google::cloud::securesourcemanager::v1::Hook>
SecureSourceManagerClient::GetHook(
    google::cloud::securesourcemanager::v1::GetHookRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetHook(request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
SecureSourceManagerClient::CreateHook(
    std::string const& parent,
    google::cloud::securesourcemanager::v1::Hook const& hook,
    std::string const& hook_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateHookRequest request;
  request.set_parent(parent);
  *request.mutable_hook() = hook;
  request.set_hook_id(hook_id);
  return connection_->CreateHook(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::CreateHook(
    NoAwaitTag, std::string const& parent,
    google::cloud::securesourcemanager::v1::Hook const& hook,
    std::string const& hook_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateHookRequest request;
  request.set_parent(parent);
  *request.mutable_hook() = hook;
  request.set_hook_id(hook_id);
  return connection_->CreateHook(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
SecureSourceManagerClient::CreateHook(
    google::cloud::securesourcemanager::v1::CreateHookRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateHook(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::CreateHook(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::CreateHookRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateHook(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
SecureSourceManagerClient::CreateHook(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateHook(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
SecureSourceManagerClient::UpdateHook(
    google::cloud::securesourcemanager::v1::Hook const& hook,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateHookRequest request;
  *request.mutable_hook() = hook;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateHook(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::UpdateHook(
    NoAwaitTag, google::cloud::securesourcemanager::v1::Hook const& hook,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateHookRequest request;
  *request.mutable_hook() = hook;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateHook(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
SecureSourceManagerClient::UpdateHook(
    google::cloud::securesourcemanager::v1::UpdateHookRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateHook(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::UpdateHook(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::UpdateHookRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateHook(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
SecureSourceManagerClient::UpdateHook(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateHook(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteHook(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteHookRequest request;
  request.set_name(name);
  return connection_->DeleteHook(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::DeleteHook(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteHookRequest request;
  request.set_name(name);
  return connection_->DeleteHook(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteHook(
    google::cloud::securesourcemanager::v1::DeleteHookRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteHook(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::DeleteHook(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::DeleteHookRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteHook(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteHook(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteHook(operation);
}

StatusOr<google::iam::v1::Policy> SecureSourceManagerClient::GetIamPolicyRepo(
    std::string const& resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v1::GetIamPolicyRequest request;
  request.set_resource(resource);
  return connection_->GetIamPolicyRepo(request);
}

StatusOr<google::iam::v1::Policy> SecureSourceManagerClient::GetIamPolicyRepo(
    google::iam::v1::GetIamPolicyRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetIamPolicyRepo(request);
}

StatusOr<google::iam::v1::Policy> SecureSourceManagerClient::SetIamPolicyRepo(
    std::string const& resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v1::SetIamPolicyRequest request;
  request.set_resource(resource);
  return connection_->SetIamPolicyRepo(request);
}

StatusOr<google::iam::v1::Policy> SecureSourceManagerClient::SetIamPolicyRepo(
    google::iam::v1::SetIamPolicyRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SetIamPolicyRepo(request);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
SecureSourceManagerClient::TestIamPermissionsRepo(std::string const& resource,
                                                  Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v1::TestIamPermissionsRequest request;
  request.set_resource(resource);
  return connection_->TestIamPermissionsRepo(request);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
SecureSourceManagerClient::TestIamPermissionsRepo(
    google::iam::v1::TestIamPermissionsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->TestIamPermissionsRepo(request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
SecureSourceManagerClient::CreateBranchRule(
    std::string const& parent,
    google::cloud::securesourcemanager::v1::BranchRule const& branch_rule,
    std::string const& branch_rule_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateBranchRuleRequest request;
  request.set_parent(parent);
  *request.mutable_branch_rule() = branch_rule;
  request.set_branch_rule_id(branch_rule_id);
  return connection_->CreateBranchRule(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreateBranchRule(
    NoAwaitTag, std::string const& parent,
    google::cloud::securesourcemanager::v1::BranchRule const& branch_rule,
    std::string const& branch_rule_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateBranchRuleRequest request;
  request.set_parent(parent);
  *request.mutable_branch_rule() = branch_rule;
  request.set_branch_rule_id(branch_rule_id);
  return connection_->CreateBranchRule(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
SecureSourceManagerClient::CreateBranchRule(
    google::cloud::securesourcemanager::v1::CreateBranchRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateBranchRule(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreateBranchRule(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::CreateBranchRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateBranchRule(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
SecureSourceManagerClient::CreateBranchRule(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateBranchRule(operation);
}

StreamRange<google::cloud::securesourcemanager::v1::BranchRule>
SecureSourceManagerClient::ListBranchRules(std::string const& parent,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ListBranchRulesRequest request;
  request.set_parent(parent);
  return connection_->ListBranchRules(request);
}

StreamRange<google::cloud::securesourcemanager::v1::BranchRule>
SecureSourceManagerClient::ListBranchRules(
    google::cloud::securesourcemanager::v1::ListBranchRulesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListBranchRules(std::move(request));
}

StatusOr<google::cloud::securesourcemanager::v1::BranchRule>
SecureSourceManagerClient::GetBranchRule(std::string const& name,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::GetBranchRuleRequest request;
  request.set_name(name);
  return connection_->GetBranchRule(request);
}

StatusOr<google::cloud::securesourcemanager::v1::BranchRule>
SecureSourceManagerClient::GetBranchRule(
    google::cloud::securesourcemanager::v1::GetBranchRuleRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetBranchRule(request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
SecureSourceManagerClient::UpdateBranchRule(
    google::cloud::securesourcemanager::v1::BranchRule const& branch_rule,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest request;
  *request.mutable_branch_rule() = branch_rule;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateBranchRule(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdateBranchRule(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::BranchRule const& branch_rule,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest request;
  *request.mutable_branch_rule() = branch_rule;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateBranchRule(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
SecureSourceManagerClient::UpdateBranchRule(
    google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateBranchRule(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdateBranchRule(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateBranchRule(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
SecureSourceManagerClient::UpdateBranchRule(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateBranchRule(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteBranchRule(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest request;
  request.set_name(name);
  return connection_->DeleteBranchRule(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeleteBranchRule(NoAwaitTag, std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest request;
  request.set_name(name);
  return connection_->DeleteBranchRule(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteBranchRule(
    google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteBranchRule(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeleteBranchRule(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteBranchRule(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteBranchRule(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteBranchRule(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::CreatePullRequest(
    std::string const& parent,
    google::cloud::securesourcemanager::v1::PullRequest const& pull_request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreatePullRequestRequest request;
  request.set_parent(parent);
  *request.mutable_pull_request() = pull_request;
  return connection_->CreatePullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreatePullRequest(
    NoAwaitTag, std::string const& parent,
    google::cloud::securesourcemanager::v1::PullRequest const& pull_request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreatePullRequestRequest request;
  request.set_parent(parent);
  *request.mutable_pull_request() = pull_request;
  return connection_->CreatePullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::CreatePullRequest(
    google::cloud::securesourcemanager::v1::CreatePullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreatePullRequest(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::CreatePullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::CreatePullRequest(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePullRequest(operation);
}

StatusOr<google::cloud::securesourcemanager::v1::PullRequest>
SecureSourceManagerClient::GetPullRequest(std::string const& name,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::GetPullRequestRequest request;
  request.set_name(name);
  return connection_->GetPullRequest(request);
}

StatusOr<google::cloud::securesourcemanager::v1::PullRequest>
SecureSourceManagerClient::GetPullRequest(
    google::cloud::securesourcemanager::v1::GetPullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetPullRequest(request);
}

StreamRange<google::cloud::securesourcemanager::v1::PullRequest>
SecureSourceManagerClient::ListPullRequests(std::string const& parent,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ListPullRequestsRequest request;
  request.set_parent(parent);
  return connection_->ListPullRequests(request);
}

StreamRange<google::cloud::securesourcemanager::v1::PullRequest>
SecureSourceManagerClient::ListPullRequests(
    google::cloud::securesourcemanager::v1::ListPullRequestsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListPullRequests(std::move(request));
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::UpdatePullRequest(
    google::cloud::securesourcemanager::v1::PullRequest const& pull_request,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdatePullRequestRequest request;
  *request.mutable_pull_request() = pull_request;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdatePullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdatePullRequest(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::PullRequest const& pull_request,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdatePullRequestRequest request;
  *request.mutable_pull_request() = pull_request;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdatePullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::UpdatePullRequest(
    google::cloud::securesourcemanager::v1::UpdatePullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdatePullRequest(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::UpdatePullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::UpdatePullRequest(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePullRequest(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::MergePullRequest(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::MergePullRequestRequest request;
  request.set_name(name);
  return connection_->MergePullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::MergePullRequest(NoAwaitTag, std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::MergePullRequestRequest request;
  request.set_name(name);
  return connection_->MergePullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::MergePullRequest(
    google::cloud::securesourcemanager::v1::MergePullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->MergePullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::MergePullRequest(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::MergePullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->MergePullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::MergePullRequest(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->MergePullRequest(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::OpenPullRequest(std::string const& name,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::OpenPullRequestRequest request;
  request.set_name(name);
  return connection_->OpenPullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::OpenPullRequest(NoAwaitTag, std::string const& name,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::OpenPullRequestRequest request;
  request.set_name(name);
  return connection_->OpenPullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::OpenPullRequest(
    google::cloud::securesourcemanager::v1::OpenPullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->OpenPullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::OpenPullRequest(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::OpenPullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->OpenPullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::OpenPullRequest(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->OpenPullRequest(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::ClosePullRequest(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ClosePullRequestRequest request;
  request.set_name(name);
  return connection_->ClosePullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::ClosePullRequest(NoAwaitTag, std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ClosePullRequestRequest request;
  request.set_name(name);
  return connection_->ClosePullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::ClosePullRequest(
    google::cloud::securesourcemanager::v1::ClosePullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ClosePullRequest(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::ClosePullRequest(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::ClosePullRequestRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ClosePullRequest(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
SecureSourceManagerClient::ClosePullRequest(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ClosePullRequest(operation);
}

StreamRange<google::cloud::securesourcemanager::v1::FileDiff>
SecureSourceManagerClient::ListPullRequestFileDiffs(std::string const& name,
                                                    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ListPullRequestFileDiffsRequest
      request;
  request.set_name(name);
  return connection_->ListPullRequestFileDiffs(request);
}

StreamRange<google::cloud::securesourcemanager::v1::FileDiff>
SecureSourceManagerClient::ListPullRequestFileDiffs(
    google::cloud::securesourcemanager::v1::ListPullRequestFileDiffsRequest
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListPullRequestFileDiffs(std::move(request));
}

StreamRange<google::cloud::securesourcemanager::v1::TreeEntry>
SecureSourceManagerClient::FetchTree(
    google::cloud::securesourcemanager::v1::FetchTreeRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->FetchTree(std::move(request));
}

StatusOr<google::cloud::securesourcemanager::v1::FetchBlobResponse>
SecureSourceManagerClient::FetchBlob(
    google::cloud::securesourcemanager::v1::FetchBlobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->FetchBlob(request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::CreateIssue(
    std::string const& parent,
    google::cloud::securesourcemanager::v1::Issue const& issue, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateIssueRequest request;
  request.set_parent(parent);
  *request.mutable_issue() = issue;
  return connection_->CreateIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::CreateIssue(
    NoAwaitTag, std::string const& parent,
    google::cloud::securesourcemanager::v1::Issue const& issue, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateIssueRequest request;
  request.set_parent(parent);
  *request.mutable_issue() = issue;
  return connection_->CreateIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::CreateIssue(
    google::cloud::securesourcemanager::v1::CreateIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::CreateIssue(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::CreateIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::CreateIssue(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateIssue(operation);
}

StatusOr<google::cloud::securesourcemanager::v1::Issue>
SecureSourceManagerClient::GetIssue(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::GetIssueRequest request;
  request.set_name(name);
  return connection_->GetIssue(request);
}

StatusOr<google::cloud::securesourcemanager::v1::Issue>
SecureSourceManagerClient::GetIssue(
    google::cloud::securesourcemanager::v1::GetIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetIssue(request);
}

StreamRange<google::cloud::securesourcemanager::v1::Issue>
SecureSourceManagerClient::ListIssues(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ListIssuesRequest request;
  request.set_parent(parent);
  return connection_->ListIssues(request);
}

StreamRange<google::cloud::securesourcemanager::v1::Issue>
SecureSourceManagerClient::ListIssues(
    google::cloud::securesourcemanager::v1::ListIssuesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListIssues(std::move(request));
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::UpdateIssue(
    google::cloud::securesourcemanager::v1::Issue const& issue,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateIssueRequest request;
  *request.mutable_issue() = issue;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::UpdateIssue(
    NoAwaitTag, google::cloud::securesourcemanager::v1::Issue const& issue,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateIssueRequest request;
  *request.mutable_issue() = issue;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::UpdateIssue(
    google::cloud::securesourcemanager::v1::UpdateIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::UpdateIssue(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::UpdateIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::UpdateIssue(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateIssue(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteIssue(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteIssueRequest request;
  request.set_name(name);
  return connection_->DeleteIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::DeleteIssue(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteIssueRequest request;
  request.set_name(name);
  return connection_->DeleteIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteIssue(
    google::cloud::securesourcemanager::v1::DeleteIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::DeleteIssue(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::DeleteIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteIssue(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssue(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::OpenIssue(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::OpenIssueRequest request;
  request.set_name(name);
  return connection_->OpenIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::OpenIssue(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::OpenIssueRequest request;
  request.set_name(name);
  return connection_->OpenIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::OpenIssue(
    google::cloud::securesourcemanager::v1::OpenIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->OpenIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::OpenIssue(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::OpenIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->OpenIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::OpenIssue(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->OpenIssue(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::CloseIssue(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CloseIssueRequest request;
  request.set_name(name);
  return connection_->CloseIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::CloseIssue(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CloseIssueRequest request;
  request.set_name(name);
  return connection_->CloseIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::CloseIssue(
    google::cloud::securesourcemanager::v1::CloseIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CloseIssue(request);
}

StatusOr<google::longrunning::Operation> SecureSourceManagerClient::CloseIssue(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::CloseIssueRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CloseIssue(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
SecureSourceManagerClient::CloseIssue(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CloseIssue(operation);
}

StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>
SecureSourceManagerClient::GetPullRequestComment(std::string const& name,
                                                 Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::GetPullRequestCommentRequest request;
  request.set_name(name);
  return connection_->GetPullRequestComment(request);
}

StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>
SecureSourceManagerClient::GetPullRequestComment(
    google::cloud::securesourcemanager::v1::GetPullRequestCommentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetPullRequestComment(request);
}

StreamRange<google::cloud::securesourcemanager::v1::PullRequestComment>
SecureSourceManagerClient::ListPullRequestComments(std::string const& parent,
                                                   Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ListPullRequestCommentsRequest
      request;
  request.set_parent(parent);
  return connection_->ListPullRequestComments(request);
}

StreamRange<google::cloud::securesourcemanager::v1::PullRequestComment>
SecureSourceManagerClient::ListPullRequestComments(
    google::cloud::securesourcemanager::v1::ListPullRequestCommentsRequest
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListPullRequestComments(std::move(request));
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
SecureSourceManagerClient::CreatePullRequestComment(
    std::string const& parent,
    google::cloud::securesourcemanager::v1::PullRequestComment const&
        pull_request_comment,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreatePullRequestCommentRequest
      request;
  request.set_parent(parent);
  *request.mutable_pull_request_comment() = pull_request_comment;
  return connection_->CreatePullRequestComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreatePullRequestComment(
    NoAwaitTag, std::string const& parent,
    google::cloud::securesourcemanager::v1::PullRequestComment const&
        pull_request_comment,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreatePullRequestCommentRequest
      request;
  request.set_parent(parent);
  *request.mutable_pull_request_comment() = pull_request_comment;
  return connection_->CreatePullRequestComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
SecureSourceManagerClient::CreatePullRequestComment(
    google::cloud::securesourcemanager::v1::
        CreatePullRequestCommentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePullRequestComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreatePullRequestComment(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::
        CreatePullRequestCommentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePullRequestComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
SecureSourceManagerClient::CreatePullRequestComment(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePullRequestComment(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
SecureSourceManagerClient::UpdatePullRequestComment(
    google::cloud::securesourcemanager::v1::PullRequestComment const&
        pull_request_comment,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdatePullRequestCommentRequest
      request;
  *request.mutable_pull_request_comment() = pull_request_comment;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdatePullRequestComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdatePullRequestComment(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::PullRequestComment const&
        pull_request_comment,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdatePullRequestCommentRequest
      request;
  *request.mutable_pull_request_comment() = pull_request_comment;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdatePullRequestComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
SecureSourceManagerClient::UpdatePullRequestComment(
    google::cloud::securesourcemanager::v1::
        UpdatePullRequestCommentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePullRequestComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdatePullRequestComment(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::
        UpdatePullRequestCommentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePullRequestComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
SecureSourceManagerClient::UpdatePullRequestComment(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePullRequestComment(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeletePullRequestComment(std::string const& name,
                                                    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeletePullRequestCommentRequest
      request;
  request.set_name(name);
  return connection_->DeletePullRequestComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeletePullRequestComment(NoAwaitTag,
                                                    std::string const& name,
                                                    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeletePullRequestCommentRequest
      request;
  request.set_name(name);
  return connection_->DeletePullRequestComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeletePullRequestComment(
    google::cloud::securesourcemanager::v1::
        DeletePullRequestCommentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePullRequestComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeletePullRequestComment(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::
        DeletePullRequestCommentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePullRequestComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeletePullRequestComment(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePullRequestComment(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::
                    BatchCreatePullRequestCommentsResponse>>
SecureSourceManagerClient::BatchCreatePullRequestComments(
    std::string const& parent,
    std::vector<google::cloud::securesourcemanager::v1::
                    CreatePullRequestCommentRequest> const& requests,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::BatchCreatePullRequestCommentsRequest
      request;
  request.set_parent(parent);
  *request.mutable_requests() = {requests.begin(), requests.end()};
  return connection_->BatchCreatePullRequestComments(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::BatchCreatePullRequestComments(
    NoAwaitTag, std::string const& parent,
    std::vector<google::cloud::securesourcemanager::v1::
                    CreatePullRequestCommentRequest> const& requests,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::BatchCreatePullRequestCommentsRequest
      request;
  request.set_parent(parent);
  *request.mutable_requests() = {requests.begin(), requests.end()};
  return connection_->BatchCreatePullRequestComments(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::
                    BatchCreatePullRequestCommentsResponse>>
SecureSourceManagerClient::BatchCreatePullRequestComments(
    google::cloud::securesourcemanager::v1::
        BatchCreatePullRequestCommentsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BatchCreatePullRequestComments(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::BatchCreatePullRequestComments(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::
        BatchCreatePullRequestCommentsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BatchCreatePullRequestComments(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::
                    BatchCreatePullRequestCommentsResponse>>
SecureSourceManagerClient::BatchCreatePullRequestComments(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BatchCreatePullRequestComments(operation);
}

future<StatusOr<
    google::cloud::securesourcemanager::v1::ResolvePullRequestCommentsResponse>>
SecureSourceManagerClient::ResolvePullRequestComments(
    std::string const& parent, std::vector<std::string> const& names,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ResolvePullRequestCommentsRequest
      request;
  request.set_parent(parent);
  *request.mutable_names() = {names.begin(), names.end()};
  return connection_->ResolvePullRequestComments(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::ResolvePullRequestComments(
    NoAwaitTag, std::string const& parent,
    std::vector<std::string> const& names, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ResolvePullRequestCommentsRequest
      request;
  request.set_parent(parent);
  *request.mutable_names() = {names.begin(), names.end()};
  return connection_->ResolvePullRequestComments(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::securesourcemanager::v1::ResolvePullRequestCommentsResponse>>
SecureSourceManagerClient::ResolvePullRequestComments(
    google::cloud::securesourcemanager::v1::
        ResolvePullRequestCommentsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ResolvePullRequestComments(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::ResolvePullRequestComments(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::
        ResolvePullRequestCommentsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ResolvePullRequestComments(NoAwaitTag{}, request);
}

future<StatusOr<
    google::cloud::securesourcemanager::v1::ResolvePullRequestCommentsResponse>>
SecureSourceManagerClient::ResolvePullRequestComments(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ResolvePullRequestComments(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::
                    UnresolvePullRequestCommentsResponse>>
SecureSourceManagerClient::UnresolvePullRequestComments(
    std::string const& parent, std::vector<std::string> const& names,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UnresolvePullRequestCommentsRequest
      request;
  request.set_parent(parent);
  *request.mutable_names() = {names.begin(), names.end()};
  return connection_->UnresolvePullRequestComments(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UnresolvePullRequestComments(
    NoAwaitTag, std::string const& parent,
    std::vector<std::string> const& names, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UnresolvePullRequestCommentsRequest
      request;
  request.set_parent(parent);
  *request.mutable_names() = {names.begin(), names.end()};
  return connection_->UnresolvePullRequestComments(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::
                    UnresolvePullRequestCommentsResponse>>
SecureSourceManagerClient::UnresolvePullRequestComments(
    google::cloud::securesourcemanager::v1::
        UnresolvePullRequestCommentsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UnresolvePullRequestComments(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UnresolvePullRequestComments(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::
        UnresolvePullRequestCommentsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UnresolvePullRequestComments(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::
                    UnresolvePullRequestCommentsResponse>>
SecureSourceManagerClient::UnresolvePullRequestComments(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UnresolvePullRequestComments(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
SecureSourceManagerClient::CreateIssueComment(
    std::string const& parent,
    google::cloud::securesourcemanager::v1::IssueComment const& issue_comment,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateIssueCommentRequest request;
  request.set_parent(parent);
  *request.mutable_issue_comment() = issue_comment;
  return connection_->CreateIssueComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreateIssueComment(
    NoAwaitTag, std::string const& parent,
    google::cloud::securesourcemanager::v1::IssueComment const& issue_comment,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::CreateIssueCommentRequest request;
  request.set_parent(parent);
  *request.mutable_issue_comment() = issue_comment;
  return connection_->CreateIssueComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
SecureSourceManagerClient::CreateIssueComment(
    google::cloud::securesourcemanager::v1::CreateIssueCommentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateIssueComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::CreateIssueComment(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::CreateIssueCommentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateIssueComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
SecureSourceManagerClient::CreateIssueComment(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateIssueComment(operation);
}

StatusOr<google::cloud::securesourcemanager::v1::IssueComment>
SecureSourceManagerClient::GetIssueComment(std::string const& name,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::GetIssueCommentRequest request;
  request.set_name(name);
  return connection_->GetIssueComment(request);
}

StatusOr<google::cloud::securesourcemanager::v1::IssueComment>
SecureSourceManagerClient::GetIssueComment(
    google::cloud::securesourcemanager::v1::GetIssueCommentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetIssueComment(request);
}

StreamRange<google::cloud::securesourcemanager::v1::IssueComment>
SecureSourceManagerClient::ListIssueComments(std::string const& parent,
                                             Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::ListIssueCommentsRequest request;
  request.set_parent(parent);
  return connection_->ListIssueComments(request);
}

StreamRange<google::cloud::securesourcemanager::v1::IssueComment>
SecureSourceManagerClient::ListIssueComments(
    google::cloud::securesourcemanager::v1::ListIssueCommentsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListIssueComments(std::move(request));
}

future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
SecureSourceManagerClient::UpdateIssueComment(
    google::cloud::securesourcemanager::v1::IssueComment const& issue_comment,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest request;
  *request.mutable_issue_comment() = issue_comment;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateIssueComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdateIssueComment(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::IssueComment const& issue_comment,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest request;
  *request.mutable_issue_comment() = issue_comment;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateIssueComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
SecureSourceManagerClient::UpdateIssueComment(
    google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateIssueComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::UpdateIssueComment(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateIssueComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
SecureSourceManagerClient::UpdateIssueComment(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateIssueComment(operation);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteIssueComment(std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest request;
  request.set_name(name);
  return connection_->DeleteIssueComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeleteIssueComment(NoAwaitTag,
                                              std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest request;
  request.set_name(name);
  return connection_->DeleteIssueComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteIssueComment(
    google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssueComment(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::DeleteIssueComment(
    NoAwaitTag,
    google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssueComment(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
SecureSourceManagerClient::DeleteIssueComment(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteIssueComment(operation);
}

StreamRange<google::cloud::location::Location>
SecureSourceManagerClient::ListLocations(
    google::cloud::location::ListLocationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListLocations(std::move(request));
}

StatusOr<google::cloud::location::Location>
SecureSourceManagerClient::GetLocation(
    google::cloud::location::GetLocationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetLocation(request);
}

StatusOr<google::iam::v1::Policy> SecureSourceManagerClient::SetIamPolicy(
    google::iam::v1::SetIamPolicyRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SetIamPolicy(request);
}

StatusOr<google::iam::v1::Policy> SecureSourceManagerClient::GetIamPolicy(
    google::iam::v1::GetIamPolicyRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetIamPolicy(request);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
SecureSourceManagerClient::TestIamPermissions(
    google::iam::v1::TestIamPermissionsRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->TestIamPermissions(request);
}

StreamRange<google::longrunning::Operation>
SecureSourceManagerClient::ListOperations(std::string const& name,
                                          std::string const& filter,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::ListOperationsRequest request;
  request.set_name(name);
  request.set_filter(filter);
  return connection_->ListOperations(request);
}

StreamRange<google::longrunning::Operation>
SecureSourceManagerClient::ListOperations(
    google::longrunning::ListOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListOperations(std::move(request));
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::GetOperation(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation>
SecureSourceManagerClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

Status SecureSourceManagerClient::DeleteOperation(std::string const& name,
                                                  Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::DeleteOperationRequest request;
  request.set_name(name);
  return connection_->DeleteOperation(request);
}

Status SecureSourceManagerClient::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteOperation(request);
}

Status SecureSourceManagerClient::CancelOperation(std::string const& name,
                                                  Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::CancelOperationRequest request;
  request.set_name(name);
  return connection_->CancelOperation(request);
}

Status SecureSourceManagerClient::CancelOperation(
    google::longrunning::CancelOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace securesourcemanager_v1
}  // namespace cloud
}  // namespace google
