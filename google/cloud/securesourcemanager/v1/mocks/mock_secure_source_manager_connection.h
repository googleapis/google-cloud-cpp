// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/securesourcemanager/v1/secure_source_manager.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SECURESOURCEMANAGER_V1_MOCKS_MOCK_SECURE_SOURCE_MANAGER_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SECURESOURCEMANAGER_V1_MOCKS_MOCK_SECURE_SOURCE_MANAGER_CONNECTION_H

#include "google/cloud/securesourcemanager/v1/secure_source_manager_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace securesourcemanager_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `SecureSourceManagerConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `SecureSourceManagerClient`. To do
 * so, construct an object of type `SecureSourceManagerClient` with an instance
 * of this class. Then use the Google Test framework functions to program the
 * behavior of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockSecureSourceManagerConnection
    : public securesourcemanager_v1::SecureSourceManagerConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::Instance>),
      ListInstances,
      (google::cloud::securesourcemanager::v1::ListInstancesRequest request),
      (override));

  MOCK_METHOD(StatusOr<google::cloud::securesourcemanager::v1::Instance>,
              GetInstance,
              (google::cloud::securesourcemanager::v1::GetInstanceRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateInstance(Matcher<google::cloud::securesourcemanager::v1::CreateInstanceRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::Instance>>,
      CreateInstance,
      (google::cloud::securesourcemanager::v1::CreateInstanceRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateInstance(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateInstance,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::CreateInstanceRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateInstance(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::Instance>>,
      CreateInstance, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteInstance(Matcher<google::cloud::securesourcemanager::v1::DeleteInstanceRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteInstance,
      (google::cloud::securesourcemanager::v1::DeleteInstanceRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteInstance(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteInstance,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::DeleteInstanceRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteInstance(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteInstance, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::Repository>),
      ListRepositories,
      (google::cloud::securesourcemanager::v1::ListRepositoriesRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::securesourcemanager::v1::Repository>,
      GetRepository,
      (google::cloud::securesourcemanager::v1::GetRepositoryRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateRepository(Matcher<google::cloud::securesourcemanager::v1::CreateRepositoryRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>,
      CreateRepository,
      (google::cloud::securesourcemanager::v1::CreateRepositoryRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateRepository(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateRepository,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::CreateRepositoryRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateRepository(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>,
      CreateRepository, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateRepository(Matcher<google::cloud::securesourcemanager::v1::UpdateRepositoryRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>,
      UpdateRepository,
      (google::cloud::securesourcemanager::v1::UpdateRepositoryRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateRepository(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, UpdateRepository,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::UpdateRepositoryRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateRepository(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>,
      UpdateRepository, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteRepository(Matcher<google::cloud::securesourcemanager::v1::DeleteRepositoryRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteRepository,
      (google::cloud::securesourcemanager::v1::DeleteRepositoryRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteRepository(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteRepository,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::DeleteRepositoryRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteRepository(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteRepository, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::Hook>), ListHooks,
      (google::cloud::securesourcemanager::v1::ListHooksRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::securesourcemanager::v1::Hook>, GetHook,
      (google::cloud::securesourcemanager::v1::GetHookRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateHook(Matcher<google::cloud::securesourcemanager::v1::CreateHookRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>,
              CreateHook,
              (google::cloud::securesourcemanager::v1::CreateHookRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateHook(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, CreateHook,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::CreateHookRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateHook(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>,
              CreateHook, (google::longrunning::Operation const& operation),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateHook(Matcher<google::cloud::securesourcemanager::v1::UpdateHookRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>,
              UpdateHook,
              (google::cloud::securesourcemanager::v1::UpdateHookRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateHook(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, UpdateHook,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::UpdateHookRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateHook(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>,
              UpdateHook, (google::longrunning::Operation const& operation),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteHook(Matcher<google::cloud::securesourcemanager::v1::DeleteHookRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteHook,
      (google::cloud::securesourcemanager::v1::DeleteHookRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteHook(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, DeleteHook,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::DeleteHookRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteHook(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteHook, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>, GetIamPolicyRepo,
              (google::iam::v1::GetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>, SetIamPolicyRepo,
              (google::iam::v1::SetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::TestIamPermissionsResponse>,
              TestIamPermissionsRepo,
              (google::iam::v1::TestIamPermissionsRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateBranchRule(Matcher<google::cloud::securesourcemanager::v1::CreateBranchRuleRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>,
      CreateBranchRule,
      (google::cloud::securesourcemanager::v1::CreateBranchRuleRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateBranchRule(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateBranchRule,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::CreateBranchRuleRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateBranchRule(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>,
      CreateBranchRule, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::BranchRule>),
      ListBranchRules,
      (google::cloud::securesourcemanager::v1::ListBranchRulesRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::securesourcemanager::v1::BranchRule>,
      GetBranchRule,
      (google::cloud::securesourcemanager::v1::GetBranchRuleRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateBranchRule(Matcher<google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>,
      UpdateBranchRule,
      (google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateBranchRule(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, UpdateBranchRule,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateBranchRule(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>,
      UpdateBranchRule, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteBranchRule(Matcher<google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteBranchRule,
      (google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteBranchRule(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteBranchRule,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteBranchRule(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteBranchRule, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreatePullRequest(Matcher<google::cloud::securesourcemanager::v1::CreatePullRequestRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      CreatePullRequest,
      (google::cloud::securesourcemanager::v1::CreatePullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreatePullRequest(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreatePullRequest,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::CreatePullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreatePullRequest(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      CreatePullRequest, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::securesourcemanager::v1::PullRequest>,
      GetPullRequest,
      (google::cloud::securesourcemanager::v1::GetPullRequestRequest const&
           request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::PullRequest>),
      ListPullRequests,
      (google::cloud::securesourcemanager::v1::ListPullRequestsRequest request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdatePullRequest(Matcher<google::cloud::securesourcemanager::v1::UpdatePullRequestRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      UpdatePullRequest,
      (google::cloud::securesourcemanager::v1::UpdatePullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdatePullRequest(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, UpdatePullRequest,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::UpdatePullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdatePullRequest(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      UpdatePullRequest, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// MergePullRequest(Matcher<google::cloud::securesourcemanager::v1::MergePullRequestRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      MergePullRequest,
      (google::cloud::securesourcemanager::v1::MergePullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, MergePullRequest(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, MergePullRequest,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::MergePullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, MergePullRequest(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      MergePullRequest, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// OpenPullRequest(Matcher<google::cloud::securesourcemanager::v1::OpenPullRequestRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      OpenPullRequest,
      (google::cloud::securesourcemanager::v1::OpenPullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, OpenPullRequest(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, OpenPullRequest,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::OpenPullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, OpenPullRequest(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      OpenPullRequest, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// ClosePullRequest(Matcher<google::cloud::securesourcemanager::v1::ClosePullRequestRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      ClosePullRequest,
      (google::cloud::securesourcemanager::v1::ClosePullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, ClosePullRequest(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, ClosePullRequest,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::ClosePullRequestRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, ClosePullRequest(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>,
      ClosePullRequest, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::FileDiff>),
      ListPullRequestFileDiffs,
      (google::cloud::securesourcemanager::v1::ListPullRequestFileDiffsRequest
           request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::TreeEntry>),
      FetchTree,
      (google::cloud::securesourcemanager::v1::FetchTreeRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::securesourcemanager::v1::FetchBlobResponse>,
      FetchBlob,
      (google::cloud::securesourcemanager::v1::FetchBlobRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateIssue(Matcher<google::cloud::securesourcemanager::v1::CreateIssueRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>,
              CreateIssue,
              (google::cloud::securesourcemanager::v1::CreateIssueRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateIssue(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, CreateIssue,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::CreateIssueRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateIssue(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>,
              CreateIssue, (google::longrunning::Operation const& operation),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::securesourcemanager::v1::Issue>, GetIssue,
      (google::cloud::securesourcemanager::v1::GetIssueRequest const& request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::Issue>), ListIssues,
      (google::cloud::securesourcemanager::v1::ListIssuesRequest request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateIssue(Matcher<google::cloud::securesourcemanager::v1::UpdateIssueRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>,
              UpdateIssue,
              (google::cloud::securesourcemanager::v1::UpdateIssueRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateIssue(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, UpdateIssue,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::UpdateIssueRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateIssue(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>,
              UpdateIssue, (google::longrunning::Operation const& operation),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteIssue(Matcher<google::cloud::securesourcemanager::v1::DeleteIssueRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteIssue,
      (google::cloud::securesourcemanager::v1::DeleteIssueRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteIssue(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, DeleteIssue,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::DeleteIssueRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteIssue(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteIssue, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// OpenIssue(Matcher<google::cloud::securesourcemanager::v1::OpenIssueRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>,
      OpenIssue,
      (google::cloud::securesourcemanager::v1::OpenIssueRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, OpenIssue(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, OpenIssue,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::OpenIssueRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, OpenIssue(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>,
              OpenIssue, (google::longrunning::Operation const& operation),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CloseIssue(Matcher<google::cloud::securesourcemanager::v1::CloseIssueRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>,
              CloseIssue,
              (google::cloud::securesourcemanager::v1::CloseIssueRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CloseIssue(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, CloseIssue,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::CloseIssueRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CloseIssue(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>,
              CloseIssue, (google::longrunning::Operation const& operation),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>,
      GetPullRequestComment,
      (google::cloud::securesourcemanager::v1::
           GetPullRequestCommentRequest const& request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::PullRequestComment>),
      ListPullRequestComments,
      (google::cloud::securesourcemanager::v1::ListPullRequestCommentsRequest
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreatePullRequestComment(Matcher<google::cloud::securesourcemanager::v1::CreatePullRequestCommentRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>,
      CreatePullRequestComment,
      (google::cloud::securesourcemanager::v1::
           CreatePullRequestCommentRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreatePullRequestComment(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              CreatePullRequestComment,
              (NoAwaitTag, google::cloud::securesourcemanager::v1::
                               CreatePullRequestCommentRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreatePullRequestComment(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>,
      CreatePullRequestComment,
      (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdatePullRequestComment(Matcher<google::cloud::securesourcemanager::v1::UpdatePullRequestCommentRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>,
      UpdatePullRequestComment,
      (google::cloud::securesourcemanager::v1::
           UpdatePullRequestCommentRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdatePullRequestComment(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              UpdatePullRequestComment,
              (NoAwaitTag, google::cloud::securesourcemanager::v1::
                               UpdatePullRequestCommentRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdatePullRequestComment(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>,
      UpdatePullRequestComment,
      (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeletePullRequestComment(Matcher<google::cloud::securesourcemanager::v1::DeletePullRequestCommentRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeletePullRequestComment,
      (google::cloud::securesourcemanager::v1::
           DeletePullRequestCommentRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeletePullRequestComment(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              DeletePullRequestComment,
              (NoAwaitTag, google::cloud::securesourcemanager::v1::
                               DeletePullRequestCommentRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeletePullRequestComment(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeletePullRequestComment,
      (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// BatchCreatePullRequestComments(Matcher<google::cloud::securesourcemanager::v1::BatchCreatePullRequestCommentsRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::
                                  BatchCreatePullRequestCommentsResponse>>,
              BatchCreatePullRequestComments,
              (google::cloud::securesourcemanager::v1::
                   BatchCreatePullRequestCommentsRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, BatchCreatePullRequestComments(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              BatchCreatePullRequestComments,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::
                   BatchCreatePullRequestCommentsRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// BatchCreatePullRequestComments(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::
                                  BatchCreatePullRequestCommentsResponse>>,
              BatchCreatePullRequestComments,
              (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// ResolvePullRequestComments(Matcher<google::cloud::securesourcemanager::v1::ResolvePullRequestCommentsRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::
                                  ResolvePullRequestCommentsResponse>>,
              ResolvePullRequestComments,
              (google::cloud::securesourcemanager::v1::
                   ResolvePullRequestCommentsRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, ResolvePullRequestComments(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              ResolvePullRequestComments,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::
                   ResolvePullRequestCommentsRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// ResolvePullRequestComments(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::
                                  ResolvePullRequestCommentsResponse>>,
              ResolvePullRequestComments,
              (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UnresolvePullRequestComments(Matcher<google::cloud::securesourcemanager::v1::UnresolvePullRequestCommentsRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::
                                  UnresolvePullRequestCommentsResponse>>,
              UnresolvePullRequestComments,
              (google::cloud::securesourcemanager::v1::
                   UnresolvePullRequestCommentsRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UnresolvePullRequestComments(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>,
              UnresolvePullRequestComments,
              (NoAwaitTag,
               google::cloud::securesourcemanager::v1::
                   UnresolvePullRequestCommentsRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UnresolvePullRequestComments(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::securesourcemanager::v1::
                                  UnresolvePullRequestCommentsResponse>>,
              UnresolvePullRequestComments,
              (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateIssueComment(Matcher<google::cloud::securesourcemanager::v1::CreateIssueCommentRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>,
      CreateIssueComment,
      (google::cloud::securesourcemanager::v1::CreateIssueCommentRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateIssueComment(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateIssueComment,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::CreateIssueCommentRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateIssueComment(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>,
      CreateIssueComment, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::securesourcemanager::v1::IssueComment>,
      GetIssueComment,
      (google::cloud::securesourcemanager::v1::GetIssueCommentRequest const&
           request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::securesourcemanager::v1::IssueComment>),
      ListIssueComments,
      (google::cloud::securesourcemanager::v1::ListIssueCommentsRequest
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateIssueComment(Matcher<google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>,
      UpdateIssueComment,
      (google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateIssueComment(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, UpdateIssueComment,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateIssueComment(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>,
      UpdateIssueComment, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteIssueComment(Matcher<google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteIssueComment,
      (google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteIssueComment(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteIssueComment,
      (NoAwaitTag,
       google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteIssueComment(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>,
      DeleteIssueComment, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD((StreamRange<google::cloud::location::Location>), ListLocations,
              (google::cloud::location::ListLocationsRequest request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::location::Location>, GetLocation,
              (google::cloud::location::GetLocationRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>, SetIamPolicy,
              (google::iam::v1::SetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>, GetIamPolicy,
              (google::iam::v1::GetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::TestIamPermissionsResponse>,
              TestIamPermissions,
              (google::iam::v1::TestIamPermissionsRequest const& request),
              (override));

  MOCK_METHOD((StreamRange<google::longrunning::Operation>), ListOperations,
              (google::longrunning::ListOperationsRequest request), (override));

  MOCK_METHOD(StatusOr<google::longrunning::Operation>, GetOperation,
              (google::longrunning::GetOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, DeleteOperation,
              (google::longrunning::DeleteOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, CancelOperation,
              (google::longrunning::CancelOperationRequest const& request),
              (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace securesourcemanager_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SECURESOURCEMANAGER_V1_MOCKS_MOCK_SECURE_SOURCE_MANAGER_CONNECTION_H
