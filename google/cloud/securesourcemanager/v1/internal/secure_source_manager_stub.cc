// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/securesourcemanager/v1/secure_source_manager.proto

#include "google/cloud/securesourcemanager/v1/internal/secure_source_manager_stub.h"
#include "google/cloud/securesourcemanager/v1/secure_source_manager.grpc.pb.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include "google/longrunning/operations.grpc.pb.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace securesourcemanager_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SecureSourceManagerStub::~SecureSourceManagerStub() = default;

StatusOr<google::cloud::securesourcemanager::v1::ListInstancesResponse>
DefaultSecureSourceManagerStub::ListInstances(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::ListInstancesRequest const&
        request) {
  google::cloud::securesourcemanager::v1::ListInstancesResponse response;
  auto status = grpc_stub_->ListInstances(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::Instance>
DefaultSecureSourceManagerStub::GetInstance(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::GetInstanceRequest const& request) {
  google::cloud::securesourcemanager::v1::Instance response;
  auto status = grpc_stub_->GetInstance(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncCreateInstance(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::CreateInstanceRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::CreateInstanceRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::CreateInstanceRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateInstance(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::CreateInstance(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::CreateInstanceRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateInstance(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncDeleteInstance(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::DeleteInstanceRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::DeleteInstanceRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::DeleteInstanceRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteInstance(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::DeleteInstance(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::DeleteInstanceRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteInstance(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::ListRepositoriesResponse>
DefaultSecureSourceManagerStub::ListRepositories(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::ListRepositoriesRequest const&
        request) {
  google::cloud::securesourcemanager::v1::ListRepositoriesResponse response;
  auto status = grpc_stub_->ListRepositories(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::Repository>
DefaultSecureSourceManagerStub::GetRepository(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::GetRepositoryRequest const&
        request) {
  google::cloud::securesourcemanager::v1::Repository response;
  auto status = grpc_stub_->GetRepository(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncCreateRepository(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::CreateRepositoryRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::CreateRepositoryRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::CreateRepositoryRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateRepository(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::CreateRepository(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::CreateRepositoryRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateRepository(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncUpdateRepository(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::UpdateRepositoryRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::UpdateRepositoryRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::UpdateRepositoryRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateRepository(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::UpdateRepository(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::UpdateRepositoryRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateRepository(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncDeleteRepository(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::DeleteRepositoryRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::DeleteRepositoryRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::DeleteRepositoryRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteRepository(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::DeleteRepository(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::DeleteRepositoryRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteRepository(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::ListHooksResponse>
DefaultSecureSourceManagerStub::ListHooks(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::ListHooksRequest const& request) {
  google::cloud::securesourcemanager::v1::ListHooksResponse response;
  auto status = grpc_stub_->ListHooks(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::Hook>
DefaultSecureSourceManagerStub::GetHook(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::GetHookRequest const& request) {
  google::cloud::securesourcemanager::v1::Hook response;
  auto status = grpc_stub_->GetHook(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncCreateHook(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::CreateHookRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::CreateHookRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::CreateHookRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateHook(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::CreateHook(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::CreateHookRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateHook(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncUpdateHook(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::UpdateHookRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::UpdateHookRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::UpdateHookRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateHook(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::UpdateHook(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::UpdateHookRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateHook(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncDeleteHook(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::DeleteHookRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::DeleteHookRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::DeleteHookRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteHook(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::DeleteHook(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::DeleteHookRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteHook(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::Policy>
DefaultSecureSourceManagerStub::GetIamPolicyRepo(
    grpc::ClientContext& context, Options const&,
    google::iam::v1::GetIamPolicyRequest const& request) {
  google::iam::v1::Policy response;
  auto status = grpc_stub_->GetIamPolicyRepo(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::Policy>
DefaultSecureSourceManagerStub::SetIamPolicyRepo(
    grpc::ClientContext& context, Options const&,
    google::iam::v1::SetIamPolicyRequest const& request) {
  google::iam::v1::Policy response;
  auto status = grpc_stub_->SetIamPolicyRepo(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DefaultSecureSourceManagerStub::TestIamPermissionsRepo(
    grpc::ClientContext& context, Options const&,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  google::iam::v1::TestIamPermissionsResponse response;
  auto status =
      grpc_stub_->TestIamPermissionsRepo(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncCreateBranchRule(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::CreateBranchRuleRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::CreateBranchRuleRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::CreateBranchRuleRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateBranchRule(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::CreateBranchRule(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::CreateBranchRuleRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateBranchRule(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::ListBranchRulesResponse>
DefaultSecureSourceManagerStub::ListBranchRules(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::ListBranchRulesRequest const&
        request) {
  google::cloud::securesourcemanager::v1::ListBranchRulesResponse response;
  auto status = grpc_stub_->ListBranchRules(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::BranchRule>
DefaultSecureSourceManagerStub::GetBranchRule(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::GetBranchRuleRequest const&
        request) {
  google::cloud::securesourcemanager::v1::BranchRule response;
  auto status = grpc_stub_->GetBranchRule(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncUpdateBranchRule(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateBranchRule(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::UpdateBranchRule(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateBranchRule(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncDeleteBranchRule(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteBranchRule(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::DeleteBranchRule(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteBranchRule(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncCreatePullRequest(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::CreatePullRequestRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::CreatePullRequestRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 CreatePullRequestRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreatePullRequest(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::CreatePullRequest(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::CreatePullRequestRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreatePullRequest(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::PullRequest>
DefaultSecureSourceManagerStub::GetPullRequest(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::GetPullRequestRequest const&
        request) {
  google::cloud::securesourcemanager::v1::PullRequest response;
  auto status = grpc_stub_->GetPullRequest(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::ListPullRequestsResponse>
DefaultSecureSourceManagerStub::ListPullRequests(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::ListPullRequestsRequest const&
        request) {
  google::cloud::securesourcemanager::v1::ListPullRequestsResponse response;
  auto status = grpc_stub_->ListPullRequests(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncUpdatePullRequest(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::UpdatePullRequestRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::UpdatePullRequestRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 UpdatePullRequestRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdatePullRequest(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::UpdatePullRequest(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::UpdatePullRequestRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdatePullRequest(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncMergePullRequest(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::MergePullRequestRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::MergePullRequestRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::MergePullRequestRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncMergePullRequest(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::MergePullRequest(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::MergePullRequestRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->MergePullRequest(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncOpenPullRequest(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::OpenPullRequestRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::OpenPullRequestRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::OpenPullRequestRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncOpenPullRequest(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::OpenPullRequest(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::OpenPullRequestRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->OpenPullRequest(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncClosePullRequest(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::ClosePullRequestRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::ClosePullRequestRequest,
      google::longrunning::Operation>(
      cq,
      [this](
          grpc::ClientContext* context,
          google::cloud::securesourcemanager::v1::ClosePullRequestRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncClosePullRequest(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::ClosePullRequest(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::ClosePullRequestRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->ClosePullRequest(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<
    google::cloud::securesourcemanager::v1::ListPullRequestFileDiffsResponse>
DefaultSecureSourceManagerStub::ListPullRequestFileDiffs(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::
        ListPullRequestFileDiffsRequest const& request) {
  google::cloud::securesourcemanager::v1::ListPullRequestFileDiffsResponse
      response;
  auto status =
      grpc_stub_->ListPullRequestFileDiffs(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::FetchTreeResponse>
DefaultSecureSourceManagerStub::FetchTree(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::FetchTreeRequest const& request) {
  google::cloud::securesourcemanager::v1::FetchTreeResponse response;
  auto status = grpc_stub_->FetchTree(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::FetchBlobResponse>
DefaultSecureSourceManagerStub::FetchBlob(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::FetchBlobRequest const& request) {
  google::cloud::securesourcemanager::v1::FetchBlobResponse response;
  auto status = grpc_stub_->FetchBlob(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncCreateIssue(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::CreateIssueRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::CreateIssueRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::CreateIssueRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateIssue(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::CreateIssue(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::CreateIssueRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateIssue(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::Issue>
DefaultSecureSourceManagerStub::GetIssue(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::GetIssueRequest const& request) {
  google::cloud::securesourcemanager::v1::Issue response;
  auto status = grpc_stub_->GetIssue(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::ListIssuesResponse>
DefaultSecureSourceManagerStub::ListIssues(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::ListIssuesRequest const& request) {
  google::cloud::securesourcemanager::v1::ListIssuesResponse response;
  auto status = grpc_stub_->ListIssues(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncUpdateIssue(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::UpdateIssueRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::UpdateIssueRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::UpdateIssueRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateIssue(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::UpdateIssue(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::UpdateIssueRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateIssue(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncDeleteIssue(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::DeleteIssueRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::DeleteIssueRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::DeleteIssueRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteIssue(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::DeleteIssue(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::DeleteIssueRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteIssue(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncOpenIssue(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::OpenIssueRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::OpenIssueRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::OpenIssueRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncOpenIssue(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::OpenIssue(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::OpenIssueRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->OpenIssue(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncCloseIssue(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::CloseIssueRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::CloseIssueRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::CloseIssueRequest const&
                 request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCloseIssue(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::CloseIssue(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::CloseIssueRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CloseIssue(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>
DefaultSecureSourceManagerStub::GetPullRequestComment(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::GetPullRequestCommentRequest const&
        request) {
  google::cloud::securesourcemanager::v1::PullRequestComment response;
  auto status = grpc_stub_->GetPullRequestComment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<
    google::cloud::securesourcemanager::v1::ListPullRequestCommentsResponse>
DefaultSecureSourceManagerStub::ListPullRequestComments(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::
        ListPullRequestCommentsRequest const& request) {
  google::cloud::securesourcemanager::v1::ListPullRequestCommentsResponse
      response;
  auto status =
      grpc_stub_->ListPullRequestComments(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncCreatePullRequestComment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::
        CreatePullRequestCommentRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::CreatePullRequestCommentRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 CreatePullRequestCommentRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreatePullRequestComment(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::CreatePullRequestComment(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::
        CreatePullRequestCommentRequest const& request) {
  google::longrunning::Operation response;
  auto status =
      grpc_stub_->CreatePullRequestComment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncUpdatePullRequestComment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::
        UpdatePullRequestCommentRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::UpdatePullRequestCommentRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 UpdatePullRequestCommentRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdatePullRequestComment(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::UpdatePullRequestComment(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::
        UpdatePullRequestCommentRequest const& request) {
  google::longrunning::Operation response;
  auto status =
      grpc_stub_->UpdatePullRequestComment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncDeletePullRequestComment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::
        DeletePullRequestCommentRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::DeletePullRequestCommentRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 DeletePullRequestCommentRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeletePullRequestComment(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::DeletePullRequestComment(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::
        DeletePullRequestCommentRequest const& request) {
  google::longrunning::Operation response;
  auto status =
      grpc_stub_->DeletePullRequestComment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncBatchCreatePullRequestComments(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::
        BatchCreatePullRequestCommentsRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::cloud::securesourcemanager::v1::
                                        BatchCreatePullRequestCommentsRequest,
                                    google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 BatchCreatePullRequestCommentsRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncBatchCreatePullRequestComments(context, request,
                                                               cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::BatchCreatePullRequestComments(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::
        BatchCreatePullRequestCommentsRequest const& request) {
  google::longrunning::Operation response;
  auto status =
      grpc_stub_->BatchCreatePullRequestComments(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncResolvePullRequestComments(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::
        ResolvePullRequestCommentsRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::ResolvePullRequestCommentsRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 ResolvePullRequestCommentsRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncResolvePullRequestComments(context, request,
                                                           cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::ResolvePullRequestComments(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::
        ResolvePullRequestCommentsRequest const& request) {
  google::longrunning::Operation response;
  auto status =
      grpc_stub_->ResolvePullRequestComments(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncUnresolvePullRequestComments(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::
        UnresolvePullRequestCommentsRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::cloud::securesourcemanager::v1::
                                        UnresolvePullRequestCommentsRequest,
                                    google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 UnresolvePullRequestCommentsRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUnresolvePullRequestComments(context, request,
                                                             cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::UnresolvePullRequestComments(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::
        UnresolvePullRequestCommentsRequest const& request) {
  google::longrunning::Operation response;
  auto status =
      grpc_stub_->UnresolvePullRequestComments(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncCreateIssueComment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::CreateIssueCommentRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::CreateIssueCommentRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 CreateIssueCommentRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateIssueComment(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::CreateIssueComment(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::CreateIssueCommentRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateIssueComment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::IssueComment>
DefaultSecureSourceManagerStub::GetIssueComment(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::GetIssueCommentRequest const&
        request) {
  google::cloud::securesourcemanager::v1::IssueComment response;
  auto status = grpc_stub_->GetIssueComment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::securesourcemanager::v1::ListIssueCommentsResponse>
DefaultSecureSourceManagerStub::ListIssueComments(
    grpc::ClientContext& context, Options const&,
    google::cloud::securesourcemanager::v1::ListIssueCommentsRequest const&
        request) {
  google::cloud::securesourcemanager::v1::ListIssueCommentsResponse response;
  auto status = grpc_stub_->ListIssueComments(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncUpdateIssueComment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 UpdateIssueCommentRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateIssueComment(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::UpdateIssueComment(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateIssueComment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncDeleteIssueComment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::securesourcemanager::v1::
                 DeleteIssueCommentRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteIssueComment(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::DeleteIssueComment(
    grpc::ClientContext& context, Options,
    google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteIssueComment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::ListLocationsResponse>
DefaultSecureSourceManagerStub::ListLocations(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::ListLocationsRequest const& request) {
  google::cloud::location::ListLocationsResponse response;
  auto status = locations_stub_->ListLocations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::Location>
DefaultSecureSourceManagerStub::GetLocation(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::GetLocationRequest const& request) {
  google::cloud::location::Location response;
  auto status = locations_stub_->GetLocation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::Policy> DefaultSecureSourceManagerStub::SetIamPolicy(
    grpc::ClientContext& context, Options const&,
    google::iam::v1::SetIamPolicyRequest const& request) {
  google::iam::v1::Policy response;
  auto status = iampolicy_stub_->SetIamPolicy(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::Policy> DefaultSecureSourceManagerStub::GetIamPolicy(
    grpc::ClientContext& context, Options const&,
    google::iam::v1::GetIamPolicyRequest const& request) {
  google::iam::v1::Policy response;
  auto status = iampolicy_stub_->GetIamPolicy(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DefaultSecureSourceManagerStub::TestIamPermissions(
    grpc::ClientContext& context, Options const&,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  google::iam::v1::TestIamPermissionsResponse response;
  auto status =
      iampolicy_stub_->TestIamPermissions(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::ListOperationsResponse>
DefaultSecureSourceManagerStub::ListOperations(
    grpc::ClientContext& context, Options const&,
    google::longrunning::ListOperationsRequest const& request) {
  google::longrunning::ListOperationsResponse response;
  auto status = operations_stub_->ListOperations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::Operation>
DefaultSecureSourceManagerStub::GetOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::GetOperationRequest const& request) {
  google::longrunning::Operation response;
  auto status = operations_stub_->GetOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultSecureSourceManagerStub::DeleteOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::DeleteOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->DeleteOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

Status DefaultSecureSourceManagerStub::CancelOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::CancelOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->CancelOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

future<StatusOr<google::longrunning::Operation>>
DefaultSecureSourceManagerStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    // NOLINTNEXTLINE(performance-unnecessary-value-param)
    google::cloud::internal::ImmutableOptions,
    google::longrunning::GetOperationRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::longrunning::GetOperationRequest,
                                    google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::longrunning::GetOperationRequest const& request,
             grpc::CompletionQueue* cq) {
        return operations_stub_->AsyncGetOperation(context, request, cq);
      },
      request, std::move(context));
}

future<Status> DefaultSecureSourceManagerStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    // NOLINTNEXTLINE(performance-unnecessary-value-param)
    google::cloud::internal::ImmutableOptions,
    google::longrunning::CancelOperationRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::longrunning::CancelOperationRequest,
                                    google::protobuf::Empty>(
             cq,
             [this](grpc::ClientContext* context,
                    google::longrunning::CancelOperationRequest const& request,
                    grpc::CompletionQueue* cq) {
               return operations_stub_->AsyncCancelOperation(context, request,
                                                             cq);
             },
             request, std::move(context))
      .then([](future<StatusOr<google::protobuf::Empty>> f) {
        return f.get().status();
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace securesourcemanager_v1_internal
}  // namespace cloud
}  // namespace google
