// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/securesourcemanager/v1/secure_source_manager.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SECURESOURCEMANAGER_V1_SECURE_SOURCE_MANAGER_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SECURESOURCEMANAGER_V1_SECURE_SOURCE_MANAGER_CONNECTION_H

#include "google/cloud/securesourcemanager/v1/internal/secure_source_manager_retry_traits.h"
#include "google/cloud/securesourcemanager/v1/secure_source_manager.pb.h"
#include "google/cloud/securesourcemanager/v1/secure_source_manager_connection_idempotency_policy.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/internal/retry_policy_impl.h"
#include "google/cloud/no_await_tag.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include "google/longrunning/operations.grpc.pb.h"
#include <memory>

namespace google {
namespace cloud {
namespace securesourcemanager_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/// The retry policy for `SecureSourceManagerConnection`.
class SecureSourceManagerRetryPolicy : public ::google::cloud::RetryPolicy {
 public:
  /// Creates a new instance of the policy, reset to the initial state.
  virtual std::unique_ptr<SecureSourceManagerRetryPolicy> clone() const = 0;
};

/**
 * A retry policy for `SecureSourceManagerConnection` based on counting errors.
 *
 * This policy stops retrying if:
 * - An RPC returns a non-transient error.
 * - More than a prescribed number of transient failures is detected.
 *
 * In this class the following status codes are treated as transient errors:
 * - [`kUnavailable`](@ref google::cloud::StatusCode)
 */
class SecureSourceManagerLimitedErrorCountRetryPolicy
    : public SecureSourceManagerRetryPolicy {
 public:
  /**
   * Create an instance that tolerates up to @p maximum_failures transient
   * errors.
   *
   * @note Disable the retry loop by providing an instance of this policy with
   *     @p maximum_failures == 0.
   */
  explicit SecureSourceManagerLimitedErrorCountRetryPolicy(int maximum_failures)
      : impl_(maximum_failures) {}

  SecureSourceManagerLimitedErrorCountRetryPolicy(
      SecureSourceManagerLimitedErrorCountRetryPolicy&& rhs) noexcept
      : SecureSourceManagerLimitedErrorCountRetryPolicy(
            rhs.maximum_failures()) {}
  SecureSourceManagerLimitedErrorCountRetryPolicy(
      SecureSourceManagerLimitedErrorCountRetryPolicy const& rhs) noexcept
      : SecureSourceManagerLimitedErrorCountRetryPolicy(
            rhs.maximum_failures()) {}

  int maximum_failures() const { return impl_.maximum_failures(); }

  bool OnFailure(Status const& status) override {
    return impl_.OnFailure(status);
  }
  bool IsExhausted() const override { return impl_.IsExhausted(); }
  bool IsPermanentFailure(Status const& status) const override {
    return impl_.IsPermanentFailure(status);
  }
  std::unique_ptr<SecureSourceManagerRetryPolicy> clone() const override {
    return std::make_unique<SecureSourceManagerLimitedErrorCountRetryPolicy>(
        maximum_failures());
  }

  // This is provided only for backwards compatibility.
  using BaseType = SecureSourceManagerRetryPolicy;

 private:
  google::cloud::internal::LimitedErrorCountRetryPolicy<
      securesourcemanager_v1_internal::SecureSourceManagerRetryTraits>
      impl_;
};

/**
 * A retry policy for `SecureSourceManagerConnection` based on elapsed time.
 *
 * This policy stops retrying if:
 * - An RPC returns a non-transient error.
 * - The elapsed time in the retry loop exceeds a prescribed duration.
 *
 * In this class the following status codes are treated as transient errors:
 * - [`kUnavailable`](@ref google::cloud::StatusCode)
 */
class SecureSourceManagerLimitedTimeRetryPolicy
    : public SecureSourceManagerRetryPolicy {
 public:
  /**
   * Constructor given a `std::chrono::duration<>` object.
   *
   * @tparam DurationRep a placeholder to match the `Rep` tparam for @p
   *     duration's type. The semantics of this template parameter are
   *     documented in `std::chrono::duration<>`. In brief, the underlying
   *     arithmetic type used to store the number of ticks. For our purposes it
   *     is simply a formal parameter.
   * @tparam DurationPeriod a placeholder to match the `Period` tparam for @p
   *     duration's type. The semantics of this template parameter are
   *     documented in `std::chrono::duration<>`. In brief, the length of the
   *     tick in seconds, expressed as a `std::ratio<>`. For our purposes it is
   *     simply a formal parameter.
   * @param maximum_duration the maximum time allowed before the policy expires.
   *     While the application can express this time in any units they desire,
   *     the class truncates to milliseconds.
   *
   * @see https://en.cppreference.com/w/cpp/chrono/duration for more information
   *     about `std::chrono::duration`.
   */
  template <typename DurationRep, typename DurationPeriod>
  explicit SecureSourceManagerLimitedTimeRetryPolicy(
      std::chrono::duration<DurationRep, DurationPeriod> maximum_duration)
      : impl_(maximum_duration) {}

  SecureSourceManagerLimitedTimeRetryPolicy(
      SecureSourceManagerLimitedTimeRetryPolicy&& rhs) noexcept
      : SecureSourceManagerLimitedTimeRetryPolicy(rhs.maximum_duration()) {}
  SecureSourceManagerLimitedTimeRetryPolicy(
      SecureSourceManagerLimitedTimeRetryPolicy const& rhs) noexcept
      : SecureSourceManagerLimitedTimeRetryPolicy(rhs.maximum_duration()) {}

  std::chrono::milliseconds maximum_duration() const {
    return impl_.maximum_duration();
  }

  bool OnFailure(Status const& status) override {
    return impl_.OnFailure(status);
  }
  bool IsExhausted() const override { return impl_.IsExhausted(); }
  bool IsPermanentFailure(Status const& status) const override {
    return impl_.IsPermanentFailure(status);
  }
  std::unique_ptr<SecureSourceManagerRetryPolicy> clone() const override {
    return std::make_unique<SecureSourceManagerLimitedTimeRetryPolicy>(
        maximum_duration());
  }

  // This is provided only for backwards compatibility.
  using BaseType = SecureSourceManagerRetryPolicy;

 private:
  google::cloud::internal::LimitedTimeRetryPolicy<
      securesourcemanager_v1_internal::SecureSourceManagerRetryTraits>
      impl_;
};

/**
 * The `SecureSourceManagerConnection` object for `SecureSourceManagerClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `SecureSourceManagerClient`. This allows users to inject custom
 * behavior (e.g., with a Google Mock object) when writing tests that use
 * objects of type `SecureSourceManagerClient`.
 *
 * To create a concrete instance, see `MakeSecureSourceManagerConnection()`.
 *
 * For mocking, see
 * `securesourcemanager_v1_mocks::MockSecureSourceManagerConnection`.
 */
class SecureSourceManagerConnection {
 public:
  virtual ~SecureSourceManagerConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StreamRange<google::cloud::securesourcemanager::v1::Instance>
  ListInstances(
      google::cloud::securesourcemanager::v1::ListInstancesRequest request);

  virtual StatusOr<google::cloud::securesourcemanager::v1::Instance>
  GetInstance(google::cloud::securesourcemanager::v1::GetInstanceRequest const&
                  request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Instance>>
  CreateInstance(
      google::cloud::securesourcemanager::v1::CreateInstanceRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreateInstance(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::CreateInstanceRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Instance>>
  CreateInstance(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteInstance(
      google::cloud::securesourcemanager::v1::DeleteInstanceRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> DeleteInstance(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::DeleteInstanceRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteInstance(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::securesourcemanager::v1::Repository>
  ListRepositories(
      google::cloud::securesourcemanager::v1::ListRepositoriesRequest request);

  virtual StatusOr<google::cloud::securesourcemanager::v1::Repository>
  GetRepository(
      google::cloud::securesourcemanager::v1::GetRepositoryRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
  CreateRepository(
      google::cloud::securesourcemanager::v1::CreateRepositoryRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreateRepository(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::CreateRepositoryRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
  CreateRepository(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
  UpdateRepository(
      google::cloud::securesourcemanager::v1::UpdateRepositoryRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> UpdateRepository(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::UpdateRepositoryRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Repository>>
  UpdateRepository(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteRepository(
      google::cloud::securesourcemanager::v1::DeleteRepositoryRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> DeleteRepository(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::DeleteRepositoryRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteRepository(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::securesourcemanager::v1::Hook> ListHooks(
      google::cloud::securesourcemanager::v1::ListHooksRequest request);

  virtual StatusOr<google::cloud::securesourcemanager::v1::Hook> GetHook(
      google::cloud::securesourcemanager::v1::GetHookRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
  CreateHook(
      google::cloud::securesourcemanager::v1::CreateHookRequest const& request);

  virtual StatusOr<google::longrunning::Operation> CreateHook(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::CreateHookRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
  CreateHook(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
  UpdateHook(
      google::cloud::securesourcemanager::v1::UpdateHookRequest const& request);

  virtual StatusOr<google::longrunning::Operation> UpdateHook(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::UpdateHookRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Hook>>
  UpdateHook(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteHook(
      google::cloud::securesourcemanager::v1::DeleteHookRequest const& request);

  virtual StatusOr<google::longrunning::Operation> DeleteHook(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::DeleteHookRequest const& request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteHook(google::longrunning::Operation const& operation);

  virtual StatusOr<google::iam::v1::Policy> GetIamPolicyRepo(
      google::iam::v1::GetIamPolicyRequest const& request);

  virtual StatusOr<google::iam::v1::Policy> SetIamPolicyRepo(
      google::iam::v1::SetIamPolicyRequest const& request);

  virtual StatusOr<google::iam::v1::TestIamPermissionsResponse>
  TestIamPermissionsRepo(
      google::iam::v1::TestIamPermissionsRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
  CreateBranchRule(
      google::cloud::securesourcemanager::v1::CreateBranchRuleRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreateBranchRule(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::CreateBranchRuleRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
  CreateBranchRule(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::securesourcemanager::v1::BranchRule>
  ListBranchRules(
      google::cloud::securesourcemanager::v1::ListBranchRulesRequest request);

  virtual StatusOr<google::cloud::securesourcemanager::v1::BranchRule>
  GetBranchRule(
      google::cloud::securesourcemanager::v1::GetBranchRuleRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
  UpdateBranchRule(
      google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> UpdateBranchRule(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::UpdateBranchRuleRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::BranchRule>>
  UpdateBranchRule(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteBranchRule(
      google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> DeleteBranchRule(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::DeleteBranchRuleRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteBranchRule(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  CreatePullRequest(
      google::cloud::securesourcemanager::v1::CreatePullRequestRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreatePullRequest(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::CreatePullRequestRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  CreatePullRequest(google::longrunning::Operation const& operation);

  virtual StatusOr<google::cloud::securesourcemanager::v1::PullRequest>
  GetPullRequest(
      google::cloud::securesourcemanager::v1::GetPullRequestRequest const&
          request);

  virtual StreamRange<google::cloud::securesourcemanager::v1::PullRequest>
  ListPullRequests(
      google::cloud::securesourcemanager::v1::ListPullRequestsRequest request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  UpdatePullRequest(
      google::cloud::securesourcemanager::v1::UpdatePullRequestRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> UpdatePullRequest(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::UpdatePullRequestRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  UpdatePullRequest(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  MergePullRequest(
      google::cloud::securesourcemanager::v1::MergePullRequestRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> MergePullRequest(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::MergePullRequestRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  MergePullRequest(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  OpenPullRequest(
      google::cloud::securesourcemanager::v1::OpenPullRequestRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> OpenPullRequest(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::OpenPullRequestRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  OpenPullRequest(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  ClosePullRequest(
      google::cloud::securesourcemanager::v1::ClosePullRequestRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> ClosePullRequest(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::ClosePullRequestRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::PullRequest>>
  ClosePullRequest(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::securesourcemanager::v1::FileDiff>
  ListPullRequestFileDiffs(
      google::cloud::securesourcemanager::v1::ListPullRequestFileDiffsRequest
          request);

  virtual StreamRange<google::cloud::securesourcemanager::v1::TreeEntry>
  FetchTree(google::cloud::securesourcemanager::v1::FetchTreeRequest request);

  virtual StatusOr<google::cloud::securesourcemanager::v1::FetchBlobResponse>
  FetchBlob(
      google::cloud::securesourcemanager::v1::FetchBlobRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
  CreateIssue(google::cloud::securesourcemanager::v1::CreateIssueRequest const&
                  request);

  virtual StatusOr<google::longrunning::Operation> CreateIssue(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::CreateIssueRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
  CreateIssue(google::longrunning::Operation const& operation);

  virtual StatusOr<google::cloud::securesourcemanager::v1::Issue> GetIssue(
      google::cloud::securesourcemanager::v1::GetIssueRequest const& request);

  virtual StreamRange<google::cloud::securesourcemanager::v1::Issue> ListIssues(
      google::cloud::securesourcemanager::v1::ListIssuesRequest request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
  UpdateIssue(google::cloud::securesourcemanager::v1::UpdateIssueRequest const&
                  request);

  virtual StatusOr<google::longrunning::Operation> UpdateIssue(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::UpdateIssueRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
  UpdateIssue(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteIssue(google::cloud::securesourcemanager::v1::DeleteIssueRequest const&
                  request);

  virtual StatusOr<google::longrunning::Operation> DeleteIssue(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::DeleteIssueRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteIssue(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
  OpenIssue(
      google::cloud::securesourcemanager::v1::OpenIssueRequest const& request);

  virtual StatusOr<google::longrunning::Operation> OpenIssue(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::OpenIssueRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
  OpenIssue(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
  CloseIssue(
      google::cloud::securesourcemanager::v1::CloseIssueRequest const& request);

  virtual StatusOr<google::longrunning::Operation> CloseIssue(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::CloseIssueRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::Issue>>
  CloseIssue(google::longrunning::Operation const& operation);

  virtual StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>
  GetPullRequestComment(google::cloud::securesourcemanager::v1::
                            GetPullRequestCommentRequest const& request);

  virtual StreamRange<
      google::cloud::securesourcemanager::v1::PullRequestComment>
  ListPullRequestComments(
      google::cloud::securesourcemanager::v1::ListPullRequestCommentsRequest
          request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
  CreatePullRequestComment(google::cloud::securesourcemanager::v1::
                               CreatePullRequestCommentRequest const& request);

  virtual StatusOr<google::longrunning::Operation> CreatePullRequestComment(
      NoAwaitTag, google::cloud::securesourcemanager::v1::
                      CreatePullRequestCommentRequest const& request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
  CreatePullRequestComment(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
  UpdatePullRequestComment(google::cloud::securesourcemanager::v1::
                               UpdatePullRequestCommentRequest const& request);

  virtual StatusOr<google::longrunning::Operation> UpdatePullRequestComment(
      NoAwaitTag, google::cloud::securesourcemanager::v1::
                      UpdatePullRequestCommentRequest const& request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::PullRequestComment>>
  UpdatePullRequestComment(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeletePullRequestComment(google::cloud::securesourcemanager::v1::
                               DeletePullRequestCommentRequest const& request);

  virtual StatusOr<google::longrunning::Operation> DeletePullRequestComment(
      NoAwaitTag, google::cloud::securesourcemanager::v1::
                      DeletePullRequestCommentRequest const& request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeletePullRequestComment(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::
                              BatchCreatePullRequestCommentsResponse>>
  BatchCreatePullRequestComments(
      google::cloud::securesourcemanager::v1::
          BatchCreatePullRequestCommentsRequest const& request);

  virtual StatusOr<google::longrunning::Operation>
  BatchCreatePullRequestComments(
      NoAwaitTag, google::cloud::securesourcemanager::v1::
                      BatchCreatePullRequestCommentsRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::
                              BatchCreatePullRequestCommentsResponse>>
  BatchCreatePullRequestComments(
      google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::
                              ResolvePullRequestCommentsResponse>>
  ResolvePullRequestComments(
      google::cloud::securesourcemanager::v1::
          ResolvePullRequestCommentsRequest const& request);

  virtual StatusOr<google::longrunning::Operation> ResolvePullRequestComments(
      NoAwaitTag, google::cloud::securesourcemanager::v1::
                      ResolvePullRequestCommentsRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::
                              ResolvePullRequestCommentsResponse>>
  ResolvePullRequestComments(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::
                              UnresolvePullRequestCommentsResponse>>
  UnresolvePullRequestComments(
      google::cloud::securesourcemanager::v1::
          UnresolvePullRequestCommentsRequest const& request);

  virtual StatusOr<google::longrunning::Operation> UnresolvePullRequestComments(
      NoAwaitTag, google::cloud::securesourcemanager::v1::
                      UnresolvePullRequestCommentsRequest const& request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::
                              UnresolvePullRequestCommentsResponse>>
  UnresolvePullRequestComments(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
  CreateIssueComment(
      google::cloud::securesourcemanager::v1::CreateIssueCommentRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreateIssueComment(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::CreateIssueCommentRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
  CreateIssueComment(google::longrunning::Operation const& operation);

  virtual StatusOr<google::cloud::securesourcemanager::v1::IssueComment>
  GetIssueComment(
      google::cloud::securesourcemanager::v1::GetIssueCommentRequest const&
          request);

  virtual StreamRange<google::cloud::securesourcemanager::v1::IssueComment>
  ListIssueComments(
      google::cloud::securesourcemanager::v1::ListIssueCommentsRequest request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
  UpdateIssueComment(
      google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> UpdateIssueComment(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::UpdateIssueCommentRequest const&
          request);

  virtual future<StatusOr<google::cloud::securesourcemanager::v1::IssueComment>>
  UpdateIssueComment(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteIssueComment(
      google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> DeleteIssueComment(
      NoAwaitTag,
      google::cloud::securesourcemanager::v1::DeleteIssueCommentRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::securesourcemanager::v1::OperationMetadata>>
  DeleteIssueComment(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::location::Location> ListLocations(
      google::cloud::location::ListLocationsRequest request);

  virtual StatusOr<google::cloud::location::Location> GetLocation(
      google::cloud::location::GetLocationRequest const& request);

  virtual StatusOr<google::iam::v1::Policy> SetIamPolicy(
      google::iam::v1::SetIamPolicyRequest const& request);

  virtual StatusOr<google::iam::v1::Policy> GetIamPolicy(
      google::iam::v1::GetIamPolicyRequest const& request);

  virtual StatusOr<google::iam::v1::TestIamPermissionsResponse>
  TestIamPermissions(google::iam::v1::TestIamPermissionsRequest const& request);

  virtual StreamRange<google::longrunning::Operation> ListOperations(
      google::longrunning::ListOperationsRequest request);

  virtual StatusOr<google::longrunning::Operation> GetOperation(
      google::longrunning::GetOperationRequest const& request);

  virtual Status DeleteOperation(
      google::longrunning::DeleteOperationRequest const& request);

  virtual Status CancelOperation(
      google::longrunning::CancelOperationRequest const& request);
};

/**
 * A factory function to construct an object of type
 * `SecureSourceManagerConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of
 * SecureSourceManagerClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `SecureSourceManagerConnection`. Expected options are any of the
 * types in the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * -
 * `google::cloud::securesourcemanager_v1::SecureSourceManagerPolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `SecureSourceManagerConnection`
 * created by this function.
 */
std::shared_ptr<SecureSourceManagerConnection>
MakeSecureSourceManagerConnection(Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace securesourcemanager_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SECURESOURCEMANAGER_V1_SECURE_SOURCE_MANAGER_CONNECTION_H
