// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gaming/v1/game_server_clusters_service.proto

#include "google/cloud/gameservices/internal/game_server_clusters_tracing_stub.h"

namespace google {
namespace cloud {
namespace gameservices_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

GameServerClustersServiceTracingStub::GameServerClustersServiceTracingStub(
    std::shared_ptr<GameServerClustersServiceStub> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::gaming::v1::ListGameServerClustersResponse>
GameServerClustersServiceTracingStub::ListGameServerClusters(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::ListGameServerClustersRequest const& request) {
  return child_->ListGameServerClusters(context, request);
}

StatusOr<google::cloud::gaming::v1::GameServerCluster>
GameServerClustersServiceTracingStub::GetGameServerCluster(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::GetGameServerClusterRequest const& request) {
  return child_->GetGameServerCluster(context, request);
}

future<StatusOr<google::longrunning::Operation>>
GameServerClustersServiceTracingStub::AsyncCreateGameServerCluster(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::gaming::v1::CreateGameServerClusterRequest const& request) {
  return child_->AsyncCreateGameServerCluster(cq, std::move(context), request);
}

StatusOr<google::cloud::gaming::v1::PreviewCreateGameServerClusterResponse>
GameServerClustersServiceTracingStub::PreviewCreateGameServerCluster(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::PreviewCreateGameServerClusterRequest const&
        request) {
  return child_->PreviewCreateGameServerCluster(context, request);
}

future<StatusOr<google::longrunning::Operation>>
GameServerClustersServiceTracingStub::AsyncDeleteGameServerCluster(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::gaming::v1::DeleteGameServerClusterRequest const& request) {
  return child_->AsyncDeleteGameServerCluster(cq, std::move(context), request);
}

StatusOr<google::cloud::gaming::v1::PreviewDeleteGameServerClusterResponse>
GameServerClustersServiceTracingStub::PreviewDeleteGameServerCluster(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::PreviewDeleteGameServerClusterRequest const&
        request) {
  return child_->PreviewDeleteGameServerCluster(context, request);
}

future<StatusOr<google::longrunning::Operation>>
GameServerClustersServiceTracingStub::AsyncUpdateGameServerCluster(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::gaming::v1::UpdateGameServerClusterRequest const& request) {
  return child_->AsyncUpdateGameServerCluster(cq, std::move(context), request);
}

StatusOr<google::cloud::gaming::v1::PreviewUpdateGameServerClusterResponse>
GameServerClustersServiceTracingStub::PreviewUpdateGameServerCluster(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::PreviewUpdateGameServerClusterRequest const&
        request) {
  return child_->PreviewUpdateGameServerCluster(context, request);
}

future<StatusOr<google::longrunning::Operation>>
GameServerClustersServiceTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> GameServerClustersServiceTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gameservices_internal
}  // namespace cloud
}  // namespace google
