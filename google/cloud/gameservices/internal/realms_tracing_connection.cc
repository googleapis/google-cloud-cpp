// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gaming/v1/realms_service.proto

#include "google/cloud/gameservices/internal/realms_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace gameservices_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

RealmsServiceTracingConnection::RealmsServiceTracingConnection(
    std::shared_ptr<gameservices::RealmsServiceConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::gaming::v1::Realm>
RealmsServiceTracingConnection::ListRealms(
    google::cloud::gaming::v1::ListRealmsRequest request) {
  auto span =
      internal::MakeSpan("gameservices::RealmsServiceConnection::ListRealms");
  auto scope = absl::make_unique<opentelemetry::trace::Scope>(span);
  auto sr = child_->ListRealms(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::gaming::v1::Realm>(
      std::move(span), std::move(scope), std::move(sr));
}

StatusOr<google::cloud::gaming::v1::Realm>
RealmsServiceTracingConnection::GetRealm(
    google::cloud::gaming::v1::GetRealmRequest const& request) {
  auto span =
      internal::MakeSpan("gameservices::RealmsServiceConnection::GetRealm");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRealm(request));
}

future<StatusOr<google::cloud::gaming::v1::Realm>>
RealmsServiceTracingConnection::CreateRealm(
    google::cloud::gaming::v1::CreateRealmRequest const& request) {
  return child_->CreateRealm(request);
}

future<StatusOr<google::cloud::gaming::v1::OperationMetadata>>
RealmsServiceTracingConnection::DeleteRealm(
    google::cloud::gaming::v1::DeleteRealmRequest const& request) {
  return child_->DeleteRealm(request);
}

future<StatusOr<google::cloud::gaming::v1::Realm>>
RealmsServiceTracingConnection::UpdateRealm(
    google::cloud::gaming::v1::UpdateRealmRequest const& request) {
  return child_->UpdateRealm(request);
}

StatusOr<google::cloud::gaming::v1::PreviewRealmUpdateResponse>
RealmsServiceTracingConnection::PreviewRealmUpdate(
    google::cloud::gaming::v1::PreviewRealmUpdateRequest const& request) {
  auto span = internal::MakeSpan(
      "gameservices::RealmsServiceConnection::PreviewRealmUpdate");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->PreviewRealmUpdate(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<gameservices::RealmsServiceConnection>
MakeRealmsServiceTracingConnection(
    std::shared_ptr<gameservices::RealmsServiceConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<RealmsServiceTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gameservices_internal
}  // namespace cloud
}  // namespace google
