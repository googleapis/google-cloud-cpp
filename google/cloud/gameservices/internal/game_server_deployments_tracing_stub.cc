// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gaming/v1/game_server_deployments_service.proto

#include "google/cloud/gameservices/internal/game_server_deployments_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace gameservices_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GameServerDeploymentsServiceTracingStub::
    GameServerDeploymentsServiceTracingStub(
        std::shared_ptr<GameServerDeploymentsServiceStub> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::gaming::v1::ListGameServerDeploymentsResponse>
GameServerDeploymentsServiceTracingStub::ListGameServerDeployments(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::ListGameServerDeploymentsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gaming.v1.GameServerDeploymentsService",
      "ListGameServerDeployments");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListGameServerDeployments(context, request));
}

StatusOr<google::cloud::gaming::v1::GameServerDeployment>
GameServerDeploymentsServiceTracingStub::GetGameServerDeployment(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::GetGameServerDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gaming.v1.GameServerDeploymentsService",
      "GetGameServerDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetGameServerDeployment(context, request));
}

future<StatusOr<google::longrunning::Operation>>
GameServerDeploymentsServiceTracingStub::AsyncCreateGameServerDeployment(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::gaming::v1::CreateGameServerDeploymentRequest const&
        request) {
  return child_->AsyncCreateGameServerDeployment(cq, std::move(context),
                                                 request);
}

future<StatusOr<google::longrunning::Operation>>
GameServerDeploymentsServiceTracingStub::AsyncDeleteGameServerDeployment(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::gaming::v1::DeleteGameServerDeploymentRequest const&
        request) {
  return child_->AsyncDeleteGameServerDeployment(cq, std::move(context),
                                                 request);
}

future<StatusOr<google::longrunning::Operation>>
GameServerDeploymentsServiceTracingStub::AsyncUpdateGameServerDeployment(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::gaming::v1::UpdateGameServerDeploymentRequest const&
        request) {
  return child_->AsyncUpdateGameServerDeployment(cq, std::move(context),
                                                 request);
}

StatusOr<google::cloud::gaming::v1::GameServerDeploymentRollout>
GameServerDeploymentsServiceTracingStub::GetGameServerDeploymentRollout(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::GetGameServerDeploymentRolloutRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gaming.v1.GameServerDeploymentsService",
      "GetGameServerDeploymentRollout");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(
      context, *span, child_->GetGameServerDeploymentRollout(context, request));
}

future<StatusOr<google::longrunning::Operation>>
GameServerDeploymentsServiceTracingStub::AsyncUpdateGameServerDeploymentRollout(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::gaming::v1::UpdateGameServerDeploymentRolloutRequest const&
        request) {
  return child_->AsyncUpdateGameServerDeploymentRollout(cq, std::move(context),
                                                        request);
}

StatusOr<google::cloud::gaming::v1::PreviewGameServerDeploymentRolloutResponse>
GameServerDeploymentsServiceTracingStub::PreviewGameServerDeploymentRollout(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::PreviewGameServerDeploymentRolloutRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gaming.v1.GameServerDeploymentsService",
      "PreviewGameServerDeploymentRollout");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(
      context, *span,
      child_->PreviewGameServerDeploymentRollout(context, request));
}

StatusOr<google::cloud::gaming::v1::FetchDeploymentStateResponse>
GameServerDeploymentsServiceTracingStub::FetchDeploymentState(
    grpc::ClientContext& context,
    google::cloud::gaming::v1::FetchDeploymentStateRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gaming.v1.GameServerDeploymentsService",
      "FetchDeploymentState");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->FetchDeploymentState(context, request));
}

future<StatusOr<google::longrunning::Operation>>
GameServerDeploymentsServiceTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> GameServerDeploymentsServiceTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<GameServerDeploymentsServiceStub>
MakeGameServerDeploymentsServiceTracingStub(
    std::shared_ptr<GameServerDeploymentsServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<GameServerDeploymentsServiceTracingStub>(
      std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gameservices_internal
}  // namespace cloud
}  // namespace google
