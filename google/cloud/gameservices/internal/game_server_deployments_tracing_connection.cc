// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gaming/v1/game_server_deployments_service.proto

#include "google/cloud/gameservices/internal/game_server_deployments_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace gameservices_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GameServerDeploymentsServiceTracingConnection::
    GameServerDeploymentsServiceTracingConnection(
        std::shared_ptr<gameservices::GameServerDeploymentsServiceConnection>
            child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::gaming::v1::GameServerDeployment>
GameServerDeploymentsServiceTracingConnection::ListGameServerDeployments(
    google::cloud::gaming::v1::ListGameServerDeploymentsRequest request) {
  auto span = internal::MakeSpan(
      "gameservices::GameServerDeploymentsServiceConnection::"
      "ListGameServerDeployments");
  auto scope = absl::make_unique<opentelemetry::trace::Scope>(span);
  auto sr = child_->ListGameServerDeployments(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::gaming::v1::GameServerDeployment>(
      std::move(span), std::move(scope), std::move(sr));
}

StatusOr<google::cloud::gaming::v1::GameServerDeployment>
GameServerDeploymentsServiceTracingConnection::GetGameServerDeployment(
    google::cloud::gaming::v1::GetGameServerDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "gameservices::GameServerDeploymentsServiceConnection::"
      "GetGameServerDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetGameServerDeployment(request));
}

future<StatusOr<google::cloud::gaming::v1::GameServerDeployment>>
GameServerDeploymentsServiceTracingConnection::CreateGameServerDeployment(
    google::cloud::gaming::v1::CreateGameServerDeploymentRequest const&
        request) {
  return child_->CreateGameServerDeployment(request);
}

future<StatusOr<google::cloud::gaming::v1::OperationMetadata>>
GameServerDeploymentsServiceTracingConnection::DeleteGameServerDeployment(
    google::cloud::gaming::v1::DeleteGameServerDeploymentRequest const&
        request) {
  return child_->DeleteGameServerDeployment(request);
}

future<StatusOr<google::cloud::gaming::v1::GameServerDeployment>>
GameServerDeploymentsServiceTracingConnection::UpdateGameServerDeployment(
    google::cloud::gaming::v1::UpdateGameServerDeploymentRequest const&
        request) {
  return child_->UpdateGameServerDeployment(request);
}

StatusOr<google::cloud::gaming::v1::GameServerDeploymentRollout>
GameServerDeploymentsServiceTracingConnection::GetGameServerDeploymentRollout(
    google::cloud::gaming::v1::GetGameServerDeploymentRolloutRequest const&
        request) {
  auto span = internal::MakeSpan(
      "gameservices::GameServerDeploymentsServiceConnection::"
      "GetGameServerDeploymentRollout");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span,
                           child_->GetGameServerDeploymentRollout(request));
}

future<StatusOr<google::cloud::gaming::v1::GameServerDeployment>>
GameServerDeploymentsServiceTracingConnection::
    UpdateGameServerDeploymentRollout(
        google::cloud::gaming::v1::
            UpdateGameServerDeploymentRolloutRequest const& request) {
  return child_->UpdateGameServerDeploymentRollout(request);
}

StatusOr<google::cloud::gaming::v1::PreviewGameServerDeploymentRolloutResponse>
GameServerDeploymentsServiceTracingConnection::
    PreviewGameServerDeploymentRollout(
        google::cloud::gaming::v1::
            PreviewGameServerDeploymentRolloutRequest const& request) {
  auto span = internal::MakeSpan(
      "gameservices::GameServerDeploymentsServiceConnection::"
      "PreviewGameServerDeploymentRollout");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span,
                           child_->PreviewGameServerDeploymentRollout(request));
}

StatusOr<google::cloud::gaming::v1::FetchDeploymentStateResponse>
GameServerDeploymentsServiceTracingConnection::FetchDeploymentState(
    google::cloud::gaming::v1::FetchDeploymentStateRequest const& request) {
  auto span = internal::MakeSpan(
      "gameservices::GameServerDeploymentsServiceConnection::"
      "FetchDeploymentState");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->FetchDeploymentState(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gameservices_internal
}  // namespace cloud
}  // namespace google
