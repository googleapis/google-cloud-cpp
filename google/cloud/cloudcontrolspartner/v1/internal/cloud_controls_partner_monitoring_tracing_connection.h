// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/cloudcontrolspartner/v1/monitoring.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CLOUDCONTROLSPARTNER_V1_INTERNAL_CLOUD_CONTROLS_PARTNER_MONITORING_TRACING_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CLOUDCONTROLSPARTNER_V1_INTERNAL_CLOUD_CONTROLS_PARTNER_MONITORING_TRACING_CONNECTION_H

#include "google/cloud/cloudcontrolspartner/v1/cloud_controls_partner_monitoring_connection.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace cloudcontrolspartner_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

class CloudControlsPartnerMonitoringTracingConnection
    : public cloudcontrolspartner_v1::CloudControlsPartnerMonitoringConnection {
 public:
  ~CloudControlsPartnerMonitoringTracingConnection() override = default;

  explicit CloudControlsPartnerMonitoringTracingConnection(
      std::shared_ptr<
          cloudcontrolspartner_v1::CloudControlsPartnerMonitoringConnection>
          child);

  Options options() override { return child_->options(); }

  StreamRange<google::cloud::cloudcontrolspartner::v1::Violation>
  ListViolations(google::cloud::cloudcontrolspartner::v1::ListViolationsRequest
                     request) override;

  StatusOr<google::cloud::cloudcontrolspartner::v1::Violation> GetViolation(
      google::cloud::cloudcontrolspartner::v1::GetViolationRequest const&
          request) override;

 private:
  std::shared_ptr<
      cloudcontrolspartner_v1::CloudControlsPartnerMonitoringConnection>
      child_;
};

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

/**
 * Conditionally applies the tracing decorator to the given connection.
 *
 * The connection is only decorated if tracing is enabled (as determined by the
 * connection's options).
 */
std::shared_ptr<
    cloudcontrolspartner_v1::CloudControlsPartnerMonitoringConnection>
MakeCloudControlsPartnerMonitoringTracingConnection(
    std::shared_ptr<
        cloudcontrolspartner_v1::CloudControlsPartnerMonitoringConnection>
        conn);

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudcontrolspartner_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CLOUDCONTROLSPARTNER_V1_INTERNAL_CLOUD_CONTROLS_PARTNER_MONITORING_TRACING_CONNECTION_H
