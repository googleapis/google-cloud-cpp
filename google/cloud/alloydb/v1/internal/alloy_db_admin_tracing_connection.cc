// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/alloydb/v1/service.proto

#include "google/cloud/alloydb/v1/internal/alloy_db_admin_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace alloydb_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

AlloyDBAdminTracingConnection::AlloyDBAdminTracingConnection(
    std::shared_ptr<alloydb_v1::AlloyDBAdminConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::alloydb::v1::Cluster>
AlloyDBAdminTracingConnection::ListClusters(
    google::cloud::alloydb::v1::ListClustersRequest request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::ListClusters");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListClusters(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::alloydb::v1::Cluster>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::alloydb::v1::Cluster>
AlloyDBAdminTracingConnection::GetCluster(
    google::cloud::alloydb::v1::GetClusterRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::GetCluster");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetCluster(request));
}

future<StatusOr<google::cloud::alloydb::v1::Cluster>>
AlloyDBAdminTracingConnection::CreateCluster(
    google::cloud::alloydb::v1::CreateClusterRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::CreateCluster");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->CreateCluster(request));
}

future<StatusOr<google::cloud::alloydb::v1::Cluster>>
AlloyDBAdminTracingConnection::UpdateCluster(
    google::cloud::alloydb::v1::UpdateClusterRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::UpdateCluster");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateCluster(request));
}

future<StatusOr<google::cloud::alloydb::v1::OperationMetadata>>
AlloyDBAdminTracingConnection::DeleteCluster(
    google::cloud::alloydb::v1::DeleteClusterRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::DeleteCluster");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteCluster(request));
}

future<StatusOr<google::cloud::alloydb::v1::Cluster>>
AlloyDBAdminTracingConnection::PromoteCluster(
    google::cloud::alloydb::v1::PromoteClusterRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::PromoteCluster");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->PromoteCluster(request));
}

future<StatusOr<google::cloud::alloydb::v1::Cluster>>
AlloyDBAdminTracingConnection::RestoreCluster(
    google::cloud::alloydb::v1::RestoreClusterRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::RestoreCluster");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->RestoreCluster(request));
}

future<StatusOr<google::cloud::alloydb::v1::Cluster>>
AlloyDBAdminTracingConnection::CreateSecondaryCluster(
    google::cloud::alloydb::v1::CreateSecondaryClusterRequest const& request) {
  auto span = internal::MakeSpan(
      "alloydb_v1::AlloyDBAdminConnection::CreateSecondaryCluster");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreateSecondaryCluster(request));
}

StreamRange<google::cloud::alloydb::v1::Instance>
AlloyDBAdminTracingConnection::ListInstances(
    google::cloud::alloydb::v1::ListInstancesRequest request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::ListInstances");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListInstances(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::alloydb::v1::Instance>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::alloydb::v1::Instance>
AlloyDBAdminTracingConnection::GetInstance(
    google::cloud::alloydb::v1::GetInstanceRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::GetInstance");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetInstance(request));
}

future<StatusOr<google::cloud::alloydb::v1::Instance>>
AlloyDBAdminTracingConnection::CreateInstance(
    google::cloud::alloydb::v1::CreateInstanceRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::CreateInstance");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->CreateInstance(request));
}

future<StatusOr<google::cloud::alloydb::v1::Instance>>
AlloyDBAdminTracingConnection::CreateSecondaryInstance(
    google::cloud::alloydb::v1::CreateSecondaryInstanceRequest const& request) {
  auto span = internal::MakeSpan(
      "alloydb_v1::AlloyDBAdminConnection::CreateSecondaryInstance");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreateSecondaryInstance(request));
}

future<StatusOr<google::cloud::alloydb::v1::BatchCreateInstancesResponse>>
AlloyDBAdminTracingConnection::BatchCreateInstances(
    google::cloud::alloydb::v1::BatchCreateInstancesRequest const& request) {
  auto span = internal::MakeSpan(
      "alloydb_v1::AlloyDBAdminConnection::BatchCreateInstances");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span),
                           child_->BatchCreateInstances(request));
}

future<StatusOr<google::cloud::alloydb::v1::Instance>>
AlloyDBAdminTracingConnection::UpdateInstance(
    google::cloud::alloydb::v1::UpdateInstanceRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::UpdateInstance");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateInstance(request));
}

future<StatusOr<google::cloud::alloydb::v1::OperationMetadata>>
AlloyDBAdminTracingConnection::DeleteInstance(
    google::cloud::alloydb::v1::DeleteInstanceRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::DeleteInstance");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteInstance(request));
}

future<StatusOr<google::cloud::alloydb::v1::Instance>>
AlloyDBAdminTracingConnection::FailoverInstance(
    google::cloud::alloydb::v1::FailoverInstanceRequest const& request) {
  auto span = internal::MakeSpan(
      "alloydb_v1::AlloyDBAdminConnection::FailoverInstance");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->FailoverInstance(request));
}

future<StatusOr<google::cloud::alloydb::v1::Instance>>
AlloyDBAdminTracingConnection::InjectFault(
    google::cloud::alloydb::v1::InjectFaultRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::InjectFault");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->InjectFault(request));
}

future<StatusOr<google::cloud::alloydb::v1::Instance>>
AlloyDBAdminTracingConnection::RestartInstance(
    google::cloud::alloydb::v1::RestartInstanceRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::RestartInstance");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->RestartInstance(request));
}

StreamRange<google::cloud::alloydb::v1::Backup>
AlloyDBAdminTracingConnection::ListBackups(
    google::cloud::alloydb::v1::ListBackupsRequest request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::ListBackups");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListBackups(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::alloydb::v1::Backup>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::alloydb::v1::Backup>
AlloyDBAdminTracingConnection::GetBackup(
    google::cloud::alloydb::v1::GetBackupRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::GetBackup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetBackup(request));
}

future<StatusOr<google::cloud::alloydb::v1::Backup>>
AlloyDBAdminTracingConnection::CreateBackup(
    google::cloud::alloydb::v1::CreateBackupRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::CreateBackup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->CreateBackup(request));
}

future<StatusOr<google::cloud::alloydb::v1::Backup>>
AlloyDBAdminTracingConnection::UpdateBackup(
    google::cloud::alloydb::v1::UpdateBackupRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::UpdateBackup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateBackup(request));
}

future<StatusOr<google::cloud::alloydb::v1::OperationMetadata>>
AlloyDBAdminTracingConnection::DeleteBackup(
    google::cloud::alloydb::v1::DeleteBackupRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::DeleteBackup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteBackup(request));
}

StreamRange<google::cloud::alloydb::v1::SupportedDatabaseFlag>
AlloyDBAdminTracingConnection::ListSupportedDatabaseFlags(
    google::cloud::alloydb::v1::ListSupportedDatabaseFlagsRequest request) {
  auto span = internal::MakeSpan(
      "alloydb_v1::AlloyDBAdminConnection::ListSupportedDatabaseFlags");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListSupportedDatabaseFlags(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::alloydb::v1::SupportedDatabaseFlag>(std::move(span),
                                                         std::move(sr));
}

StreamRange<google::cloud::alloydb::v1::User>
AlloyDBAdminTracingConnection::ListUsers(
    google::cloud::alloydb::v1::ListUsersRequest request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::ListUsers");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListUsers(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::alloydb::v1::User>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::alloydb::v1::User>
AlloyDBAdminTracingConnection::GetUser(
    google::cloud::alloydb::v1::GetUserRequest const& request) {
  auto span = internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::GetUser");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetUser(request));
}

StatusOr<google::cloud::alloydb::v1::User>
AlloyDBAdminTracingConnection::CreateUser(
    google::cloud::alloydb::v1::CreateUserRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::CreateUser");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateUser(request));
}

StatusOr<google::cloud::alloydb::v1::User>
AlloyDBAdminTracingConnection::UpdateUser(
    google::cloud::alloydb::v1::UpdateUserRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::UpdateUser");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateUser(request));
}

Status AlloyDBAdminTracingConnection::DeleteUser(
    google::cloud::alloydb::v1::DeleteUserRequest const& request) {
  auto span =
      internal::MakeSpan("alloydb_v1::AlloyDBAdminConnection::DeleteUser");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteUser(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<alloydb_v1::AlloyDBAdminConnection>
MakeAlloyDBAdminTracingConnection(
    std::shared_ptr<alloydb_v1::AlloyDBAdminConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<AlloyDBAdminTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace alloydb_v1_internal
}  // namespace cloud
}  // namespace google
