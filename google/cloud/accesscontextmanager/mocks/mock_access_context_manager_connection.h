// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/identity/accesscontextmanager/v1/access_context_manager.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_ACCESSCONTEXTMANAGER_MOCKS_MOCK_ACCESS_CONTEXT_MANAGER_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_ACCESSCONTEXTMANAGER_MOCKS_MOCK_ACCESS_CONTEXT_MANAGER_CONNECTION_H

#include "google/cloud/accesscontextmanager/access_context_manager_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace accesscontextmanager_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class MockAccessContextManagerConnection
    : public accesscontextmanager::AccessContextManagerConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(
      StreamRange<google::identity::accesscontextmanager::v1::AccessPolicy>,
      ListAccessPolicies,
      (google::identity::accesscontextmanager::v1::ListAccessPoliciesRequest
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::identity::accesscontextmanager::v1::AccessPolicy>,
      GetAccessPolicy,
      (google::identity::accesscontextmanager::v1::GetAccessPolicyRequest const&
           request),
      (override));

  MOCK_METHOD(
      future<
          StatusOr<google::identity::accesscontextmanager::v1::AccessPolicy>>,
      CreateAccessPolicy,
      (google::identity::accesscontextmanager::v1::AccessPolicy const& request),
      (override));

  MOCK_METHOD(
      future<
          StatusOr<google::identity::accesscontextmanager::v1::AccessPolicy>>,
      UpdateAccessPolicy,
      (google::identity::accesscontextmanager::v1::
           UpdateAccessPolicyRequest const& request),
      (override));

  MOCK_METHOD(future<StatusOr<google::identity::accesscontextmanager::v1::
                                  AccessContextManagerOperationMetadata>>,
              DeleteAccessPolicy,
              (google::identity::accesscontextmanager::v1::
                   DeleteAccessPolicyRequest const& request),
              (override));

  MOCK_METHOD(
      StreamRange<google::identity::accesscontextmanager::v1::AccessLevel>,
      ListAccessLevels,
      (google::identity::accesscontextmanager::v1::ListAccessLevelsRequest
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::identity::accesscontextmanager::v1::AccessLevel>,
      GetAccessLevel,
      (google::identity::accesscontextmanager::v1::GetAccessLevelRequest const&
           request),
      (override));

  MOCK_METHOD(
      future<StatusOr<google::identity::accesscontextmanager::v1::AccessLevel>>,
      CreateAccessLevel,
      (google::identity::accesscontextmanager::v1::
           CreateAccessLevelRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<google::identity::accesscontextmanager::v1::AccessLevel>>,
      UpdateAccessLevel,
      (google::identity::accesscontextmanager::v1::
           UpdateAccessLevelRequest const& request),
      (override));

  MOCK_METHOD(future<StatusOr<google::identity::accesscontextmanager::v1::
                                  AccessContextManagerOperationMetadata>>,
              DeleteAccessLevel,
              (google::identity::accesscontextmanager::v1::
                   DeleteAccessLevelRequest const& request),
              (override));

  MOCK_METHOD(future<StatusOr<google::identity::accesscontextmanager::v1::
                                  ReplaceAccessLevelsResponse>>,
              ReplaceAccessLevels,
              (google::identity::accesscontextmanager::v1::
                   ReplaceAccessLevelsRequest const& request),
              (override));

  MOCK_METHOD(
      StreamRange<google::identity::accesscontextmanager::v1::ServicePerimeter>,
      ListServicePerimeters,
      (google::identity::accesscontextmanager::v1::ListServicePerimetersRequest
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::identity::accesscontextmanager::v1::ServicePerimeter>,
      GetServicePerimeter,
      (google::identity::accesscontextmanager::v1::
           GetServicePerimeterRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<
          google::identity::accesscontextmanager::v1::ServicePerimeter>>,
      CreateServicePerimeter,
      (google::identity::accesscontextmanager::v1::
           CreateServicePerimeterRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<
          google::identity::accesscontextmanager::v1::ServicePerimeter>>,
      UpdateServicePerimeter,
      (google::identity::accesscontextmanager::v1::
           UpdateServicePerimeterRequest const& request),
      (override));

  MOCK_METHOD(future<StatusOr<google::identity::accesscontextmanager::v1::
                                  AccessContextManagerOperationMetadata>>,
              DeleteServicePerimeter,
              (google::identity::accesscontextmanager::v1::
                   DeleteServicePerimeterRequest const& request),
              (override));

  MOCK_METHOD(future<StatusOr<google::identity::accesscontextmanager::v1::
                                  ReplaceServicePerimetersResponse>>,
              ReplaceServicePerimeters,
              (google::identity::accesscontextmanager::v1::
                   ReplaceServicePerimetersRequest const& request),
              (override));

  MOCK_METHOD(future<StatusOr<google::identity::accesscontextmanager::v1::
                                  CommitServicePerimetersResponse>>,
              CommitServicePerimeters,
              (google::identity::accesscontextmanager::v1::
                   CommitServicePerimetersRequest const& request),
              (override));

  MOCK_METHOD(
      StreamRange<
          google::identity::accesscontextmanager::v1::GcpUserAccessBinding>,
      ListGcpUserAccessBindings,
      (google::identity::accesscontextmanager::v1::
           ListGcpUserAccessBindingsRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<
          google::identity::accesscontextmanager::v1::GcpUserAccessBinding>,
      GetGcpUserAccessBinding,
      (google::identity::accesscontextmanager::v1::
           GetGcpUserAccessBindingRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<
          google::identity::accesscontextmanager::v1::GcpUserAccessBinding>>,
      CreateGcpUserAccessBinding,
      (google::identity::accesscontextmanager::v1::
           CreateGcpUserAccessBindingRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<
          google::identity::accesscontextmanager::v1::GcpUserAccessBinding>>,
      UpdateGcpUserAccessBinding,
      (google::identity::accesscontextmanager::v1::
           UpdateGcpUserAccessBindingRequest const& request),
      (override));

  MOCK_METHOD(future<StatusOr<google::identity::accesscontextmanager::v1::
                                  GcpUserAccessBindingOperationMetadata>>,
              DeleteGcpUserAccessBinding,
              (google::identity::accesscontextmanager::v1::
                   DeleteGcpUserAccessBindingRequest const& request),
              (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace accesscontextmanager_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_ACCESSCONTEXTMANAGER_MOCKS_MOCK_ACCESS_CONTEXT_MANAGER_CONNECTION_H
