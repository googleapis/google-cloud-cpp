// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/essentialcontacts/v1/service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_ESSENTIALCONTACTS_V1_ESSENTIAL_CONTACTS_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_ESSENTIALCONTACTS_V1_ESSENTIAL_CONTACTS_CONNECTION_H

#include "google/cloud/essentialcontacts/v1/essential_contacts_connection_idempotency_policy.h"
#include "google/cloud/essentialcontacts/v1/internal/essential_contacts_retry_traits.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/cloud/essentialcontacts/v1/service.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace essentialcontacts_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using EssentialContactsServiceRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        essentialcontacts_v1_internal::EssentialContactsServiceRetryTraits>;

using EssentialContactsServiceLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        essentialcontacts_v1_internal::EssentialContactsServiceRetryTraits>;

using EssentialContactsServiceLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        essentialcontacts_v1_internal::EssentialContactsServiceRetryTraits>;

/**
 * The `EssentialContactsServiceConnection` object for
 * `EssentialContactsServiceClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `EssentialContactsServiceClient`. This allows users to inject custom
 * behavior (e.g., with a Google Mock object) when writing tests that use
 * objects of type `EssentialContactsServiceClient`.
 *
 * To create a concrete instance, see
 * `MakeEssentialContactsServiceConnection()`.
 *
 * For mocking, see
 * `essentialcontacts_v1_mocks::MockEssentialContactsServiceConnection`.
 */
class EssentialContactsServiceConnection {
 public:
  virtual ~EssentialContactsServiceConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StatusOr<google::cloud::essentialcontacts::v1::Contact> CreateContact(
      google::cloud::essentialcontacts::v1::CreateContactRequest const&
          request);

  virtual StatusOr<google::cloud::essentialcontacts::v1::Contact> UpdateContact(
      google::cloud::essentialcontacts::v1::UpdateContactRequest const&
          request);

  virtual StreamRange<google::cloud::essentialcontacts::v1::Contact>
  ListContacts(
      google::cloud::essentialcontacts::v1::ListContactsRequest request);

  virtual StatusOr<google::cloud::essentialcontacts::v1::Contact> GetContact(
      google::cloud::essentialcontacts::v1::GetContactRequest const& request);

  virtual Status DeleteContact(
      google::cloud::essentialcontacts::v1::DeleteContactRequest const&
          request);

  virtual StreamRange<google::cloud::essentialcontacts::v1::Contact>
  ComputeContacts(
      google::cloud::essentialcontacts::v1::ComputeContactsRequest request);

  virtual Status SendTestMessage(
      google::cloud::essentialcontacts::v1::SendTestMessageRequest const&
          request);
};

/**
 * A factory function to construct an object of type
 * `EssentialContactsServiceConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of
 * EssentialContactsServiceClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `EssentialContactsServiceConnection`. Expected options are any of
 * the types in the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * -
 * `google::cloud::essentialcontacts_v1::EssentialContactsServicePolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `EssentialContactsServiceConnection`
 * created by this function.
 */
std::shared_ptr<EssentialContactsServiceConnection>
MakeEssentialContactsServiceConnection(Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace essentialcontacts_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_ESSENTIALCONTACTS_V1_ESSENTIAL_CONTACTS_CONNECTION_H
