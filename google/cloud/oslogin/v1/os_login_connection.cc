// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/oslogin/v1/oslogin.proto

#include "google/cloud/oslogin/v1/os_login_connection.h"
#include "google/cloud/oslogin/v1/internal/os_login_connection_impl.h"
#include "google/cloud/oslogin/v1/internal/os_login_option_defaults.h"
#include "google/cloud/oslogin/v1/internal/os_login_stub_factory.h"
#include "google/cloud/oslogin/v1/internal/os_login_tracing_connection.h"
#include "google/cloud/oslogin/v1/os_login_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>

namespace google {
namespace cloud {
namespace oslogin_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

OsLoginServiceConnection::~OsLoginServiceConnection() = default;

StatusOr<google::cloud::oslogin::common::SshPublicKey>
OsLoginServiceConnection::CreateSshPublicKey(
    google::cloud::oslogin::v1::CreateSshPublicKeyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status OsLoginServiceConnection::DeletePosixAccount(
    google::cloud::oslogin::v1::DeletePosixAccountRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status OsLoginServiceConnection::DeleteSshPublicKey(
    google::cloud::oslogin::v1::DeleteSshPublicKeyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::oslogin::v1::LoginProfile>
OsLoginServiceConnection::GetLoginProfile(
    google::cloud::oslogin::v1::GetLoginProfileRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::oslogin::common::SshPublicKey>
OsLoginServiceConnection::GetSshPublicKey(
    google::cloud::oslogin::v1::GetSshPublicKeyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::oslogin::v1::ImportSshPublicKeyResponse>
OsLoginServiceConnection::ImportSshPublicKey(
    google::cloud::oslogin::v1::ImportSshPublicKeyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::oslogin::common::SshPublicKey>
OsLoginServiceConnection::UpdateSshPublicKey(
    google::cloud::oslogin::v1::UpdateSshPublicKeyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<OsLoginServiceConnection> MakeOsLoginServiceConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 OsLoginServicePolicyOptionList>(options,
                                                                 __func__);
  options =
      oslogin_v1_internal::OsLoginServiceDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = oslogin_v1_internal::CreateDefaultOsLoginServiceStub(
      std::move(auth), options);
  return oslogin_v1_internal::MakeOsLoginServiceTracingConnection(
      std::make_shared<oslogin_v1_internal::OsLoginServiceConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace oslogin_v1
}  // namespace cloud
}  // namespace google
