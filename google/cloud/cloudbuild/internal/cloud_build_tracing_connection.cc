// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/devtools/cloudbuild/v1/cloudbuild.proto

#include "google/cloud/cloudbuild/internal/cloud_build_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>

namespace google {
namespace cloud {
namespace cloudbuild_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

CloudBuildTracingConnection::CloudBuildTracingConnection(
    std::shared_ptr<cloudbuild::CloudBuildConnection> child)
    : child_(std::move(child)) {}

future<StatusOr<google::devtools::cloudbuild::v1::Build>>
CloudBuildTracingConnection::CreateBuild(
    google::devtools::cloudbuild::v1::CreateBuildRequest const& request) {
  return child_->CreateBuild(request);
}

StatusOr<google::devtools::cloudbuild::v1::Build>
CloudBuildTracingConnection::GetBuild(
    google::devtools::cloudbuild::v1::GetBuildRequest const& request) {
  return child_->GetBuild(request);
}

StreamRange<google::devtools::cloudbuild::v1::Build>
CloudBuildTracingConnection::ListBuilds(
    google::devtools::cloudbuild::v1::ListBuildsRequest request) {
  return child_->ListBuilds(request);
}

StatusOr<google::devtools::cloudbuild::v1::Build>
CloudBuildTracingConnection::CancelBuild(
    google::devtools::cloudbuild::v1::CancelBuildRequest const& request) {
  return child_->CancelBuild(request);
}

future<StatusOr<google::devtools::cloudbuild::v1::Build>>
CloudBuildTracingConnection::RetryBuild(
    google::devtools::cloudbuild::v1::RetryBuildRequest const& request) {
  return child_->RetryBuild(request);
}

future<StatusOr<google::devtools::cloudbuild::v1::Build>>
CloudBuildTracingConnection::ApproveBuild(
    google::devtools::cloudbuild::v1::ApproveBuildRequest const& request) {
  return child_->ApproveBuild(request);
}

StatusOr<google::devtools::cloudbuild::v1::BuildTrigger>
CloudBuildTracingConnection::CreateBuildTrigger(
    google::devtools::cloudbuild::v1::CreateBuildTriggerRequest const&
        request) {
  return child_->CreateBuildTrigger(request);
}

StatusOr<google::devtools::cloudbuild::v1::BuildTrigger>
CloudBuildTracingConnection::GetBuildTrigger(
    google::devtools::cloudbuild::v1::GetBuildTriggerRequest const& request) {
  return child_->GetBuildTrigger(request);
}

StreamRange<google::devtools::cloudbuild::v1::BuildTrigger>
CloudBuildTracingConnection::ListBuildTriggers(
    google::devtools::cloudbuild::v1::ListBuildTriggersRequest request) {
  return child_->ListBuildTriggers(request);
}

Status CloudBuildTracingConnection::DeleteBuildTrigger(
    google::devtools::cloudbuild::v1::DeleteBuildTriggerRequest const&
        request) {
  return child_->DeleteBuildTrigger(request);
}

StatusOr<google::devtools::cloudbuild::v1::BuildTrigger>
CloudBuildTracingConnection::UpdateBuildTrigger(
    google::devtools::cloudbuild::v1::UpdateBuildTriggerRequest const&
        request) {
  return child_->UpdateBuildTrigger(request);
}

future<StatusOr<google::devtools::cloudbuild::v1::Build>>
CloudBuildTracingConnection::RunBuildTrigger(
    google::devtools::cloudbuild::v1::RunBuildTriggerRequest const& request) {
  return child_->RunBuildTrigger(request);
}

StatusOr<google::devtools::cloudbuild::v1::ReceiveTriggerWebhookResponse>
CloudBuildTracingConnection::ReceiveTriggerWebhook(
    google::devtools::cloudbuild::v1::ReceiveTriggerWebhookRequest const&
        request) {
  return child_->ReceiveTriggerWebhook(request);
}

future<StatusOr<google::devtools::cloudbuild::v1::WorkerPool>>
CloudBuildTracingConnection::CreateWorkerPool(
    google::devtools::cloudbuild::v1::CreateWorkerPoolRequest const& request) {
  return child_->CreateWorkerPool(request);
}

StatusOr<google::devtools::cloudbuild::v1::WorkerPool>
CloudBuildTracingConnection::GetWorkerPool(
    google::devtools::cloudbuild::v1::GetWorkerPoolRequest const& request) {
  return child_->GetWorkerPool(request);
}

future<StatusOr<
    google::devtools::cloudbuild::v1::DeleteWorkerPoolOperationMetadata>>
CloudBuildTracingConnection::DeleteWorkerPool(
    google::devtools::cloudbuild::v1::DeleteWorkerPoolRequest const& request) {
  return child_->DeleteWorkerPool(request);
}

future<StatusOr<google::devtools::cloudbuild::v1::WorkerPool>>
CloudBuildTracingConnection::UpdateWorkerPool(
    google::devtools::cloudbuild::v1::UpdateWorkerPoolRequest const& request) {
  return child_->UpdateWorkerPool(request);
}

StreamRange<google::devtools::cloudbuild::v1::WorkerPool>
CloudBuildTracingConnection::ListWorkerPools(
    google::devtools::cloudbuild::v1::ListWorkerPoolsRequest request) {
  return child_->ListWorkerPools(request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudbuild_internal
}  // namespace cloud
}  // namespace google
