// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/devtools/cloudbuild/v1/cloudbuild.proto

#include "google/cloud/cloudbuild/v1/internal/cloud_build_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace cloudbuild_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

CloudBuildTracingStub::CloudBuildTracingStub(
    std::shared_ptr<CloudBuildStub> child)
    : child_(std::move(child)) {}

future<StatusOr<google::longrunning::Operation>>
CloudBuildTracingStub::AsyncCreateBuild(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::devtools::cloudbuild::v1::CreateBuildRequest const& request) {
  return child_->AsyncCreateBuild(cq, std::move(context), request);
}

StatusOr<google::devtools::cloudbuild::v1::Build>
CloudBuildTracingStub::GetBuild(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::GetBuildRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "GetBuild");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetBuild(context, request));
}

StatusOr<google::devtools::cloudbuild::v1::ListBuildsResponse>
CloudBuildTracingStub::ListBuilds(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::ListBuildsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "ListBuilds");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListBuilds(context, request));
}

StatusOr<google::devtools::cloudbuild::v1::Build>
CloudBuildTracingStub::CancelBuild(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::CancelBuildRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "CancelBuild");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->CancelBuild(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudBuildTracingStub::AsyncRetryBuild(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::devtools::cloudbuild::v1::RetryBuildRequest const& request) {
  return child_->AsyncRetryBuild(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CloudBuildTracingStub::AsyncApproveBuild(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::devtools::cloudbuild::v1::ApproveBuildRequest const& request) {
  return child_->AsyncApproveBuild(cq, std::move(context), request);
}

StatusOr<google::devtools::cloudbuild::v1::BuildTrigger>
CloudBuildTracingStub::CreateBuildTrigger(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::CreateBuildTriggerRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "CreateBuildTrigger");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->CreateBuildTrigger(context, request));
}

StatusOr<google::devtools::cloudbuild::v1::BuildTrigger>
CloudBuildTracingStub::GetBuildTrigger(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::GetBuildTriggerRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "GetBuildTrigger");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetBuildTrigger(context, request));
}

StatusOr<google::devtools::cloudbuild::v1::ListBuildTriggersResponse>
CloudBuildTracingStub::ListBuildTriggers(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::ListBuildTriggersRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "ListBuildTriggers");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListBuildTriggers(context, request));
}

Status CloudBuildTracingStub::DeleteBuildTrigger(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::DeleteBuildTriggerRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "DeleteBuildTrigger");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->DeleteBuildTrigger(context, request));
}

StatusOr<google::devtools::cloudbuild::v1::BuildTrigger>
CloudBuildTracingStub::UpdateBuildTrigger(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::UpdateBuildTriggerRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "UpdateBuildTrigger");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->UpdateBuildTrigger(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudBuildTracingStub::AsyncRunBuildTrigger(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::devtools::cloudbuild::v1::RunBuildTriggerRequest const& request) {
  return child_->AsyncRunBuildTrigger(cq, std::move(context), request);
}

StatusOr<google::devtools::cloudbuild::v1::ReceiveTriggerWebhookResponse>
CloudBuildTracingStub::ReceiveTriggerWebhook(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::ReceiveTriggerWebhookRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "ReceiveTriggerWebhook");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ReceiveTriggerWebhook(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudBuildTracingStub::AsyncCreateWorkerPool(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::devtools::cloudbuild::v1::CreateWorkerPoolRequest const& request) {
  return child_->AsyncCreateWorkerPool(cq, std::move(context), request);
}

StatusOr<google::devtools::cloudbuild::v1::WorkerPool>
CloudBuildTracingStub::GetWorkerPool(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::GetWorkerPoolRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "GetWorkerPool");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetWorkerPool(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudBuildTracingStub::AsyncDeleteWorkerPool(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::devtools::cloudbuild::v1::DeleteWorkerPoolRequest const& request) {
  return child_->AsyncDeleteWorkerPool(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CloudBuildTracingStub::AsyncUpdateWorkerPool(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::devtools::cloudbuild::v1::UpdateWorkerPoolRequest const& request) {
  return child_->AsyncUpdateWorkerPool(cq, std::move(context), request);
}

StatusOr<google::devtools::cloudbuild::v1::ListWorkerPoolsResponse>
CloudBuildTracingStub::ListWorkerPools(
    grpc::ClientContext& context,
    google::devtools::cloudbuild::v1::ListWorkerPoolsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.devtools.cloudbuild.v1.CloudBuild",
                                     "ListWorkerPools");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListWorkerPools(context, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudBuildTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> CloudBuildTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<CloudBuildStub> MakeCloudBuildTracingStub(
    std::shared_ptr<CloudBuildStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<CloudBuildTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloudbuild_v1_internal
}  // namespace cloud
}  // namespace google
