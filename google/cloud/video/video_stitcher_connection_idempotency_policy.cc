// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/video/stitcher/v1/video_stitcher_service.proto

#include "google/cloud/video/video_stitcher_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace video {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

VideoStitcherServiceConnectionIdempotencyPolicy::
    ~VideoStitcherServiceConnectionIdempotencyPolicy() = default;

namespace {
class DefaultVideoStitcherServiceConnectionIdempotencyPolicy
    : public VideoStitcherServiceConnectionIdempotencyPolicy {
 public:
  ~DefaultVideoStitcherServiceConnectionIdempotencyPolicy() override = default;

  /// Create a new copy of this object.
  std::unique_ptr<VideoStitcherServiceConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<
        DefaultVideoStitcherServiceConnectionIdempotencyPolicy>(*this);
  }

  Idempotency CreateCdnKey(
      google::cloud::video::stitcher::v1::CreateCdnKeyRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListCdnKeys(
      google::cloud::video::stitcher::v1::ListCdnKeysRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetCdnKey(
      google::cloud::video::stitcher::v1::GetCdnKeyRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency DeleteCdnKey(
      google::cloud::video::stitcher::v1::DeleteCdnKeyRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateCdnKey(
      google::cloud::video::stitcher::v1::UpdateCdnKeyRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency CreateVodSession(
      google::cloud::video::stitcher::v1::CreateVodSessionRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetVodSession(
      google::cloud::video::stitcher::v1::GetVodSessionRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListVodStitchDetails(
      google::cloud::video::stitcher::v1::ListVodStitchDetailsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetVodStitchDetail(
      google::cloud::video::stitcher::v1::GetVodStitchDetailRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListVodAdTagDetails(
      google::cloud::video::stitcher::v1::ListVodAdTagDetailsRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetVodAdTagDetail(
      google::cloud::video::stitcher::v1::GetVodAdTagDetailRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListLiveAdTagDetails(
      google::cloud::video::stitcher::v1::ListLiveAdTagDetailsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetLiveAdTagDetail(
      google::cloud::video::stitcher::v1::GetLiveAdTagDetailRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateSlate(
      google::cloud::video::stitcher::v1::CreateSlateRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListSlates(
      google::cloud::video::stitcher::v1::ListSlatesRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetSlate(
      google::cloud::video::stitcher::v1::GetSlateRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency UpdateSlate(
      google::cloud::video::stitcher::v1::UpdateSlateRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteSlate(
      google::cloud::video::stitcher::v1::DeleteSlateRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency CreateLiveSession(
      google::cloud::video::stitcher::v1::CreateLiveSessionRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetLiveSession(
      google::cloud::video::stitcher::v1::GetLiveSessionRequest const&)
      override {
    return Idempotency::kIdempotent;
  }
};
}  // namespace

std::unique_ptr<VideoStitcherServiceConnectionIdempotencyPolicy>
MakeDefaultVideoStitcherServiceConnectionIdempotencyPolicy() {
  return absl::make_unique<
      DefaultVideoStitcherServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace video
}  // namespace cloud
}  // namespace google
