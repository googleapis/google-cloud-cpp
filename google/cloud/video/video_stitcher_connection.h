// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/video/stitcher/v1/video_stitcher_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_VIDEO_VIDEO_STITCHER_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_VIDEO_VIDEO_STITCHER_CONNECTION_H

#include "google/cloud/video/internal/video_stitcher_retry_traits.h"
#include "google/cloud/video/internal/video_stitcher_stub.h"
#include "google/cloud/video/video_stitcher_connection_idempotency_policy.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace video {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using VideoStitcherServiceRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        video_internal::VideoStitcherServiceRetryTraits>;

using VideoStitcherServiceLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        video_internal::VideoStitcherServiceRetryTraits>;

using VideoStitcherServiceLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        video_internal::VideoStitcherServiceRetryTraits>;

/**
 * The `VideoStitcherServiceConnection` object for `VideoStitcherServiceClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `VideoStitcherServiceClient`. This allows users to inject custom
 * behavior (e.g., with a Google Mock object) when writing tests that use
 * objects of type `VideoStitcherServiceClient`.
 *
 * To create a concrete instance, see `MakeVideoStitcherServiceConnection()`.
 *
 * For mocking, see `video_mocks::MockVideoStitcherServiceConnection`.
 */
class VideoStitcherServiceConnection {
 public:
  virtual ~VideoStitcherServiceConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StatusOr<google::cloud::video::stitcher::v1::CdnKey> CreateCdnKey(
      google::cloud::video::stitcher::v1::CreateCdnKeyRequest const& request);

  virtual StreamRange<google::cloud::video::stitcher::v1::CdnKey> ListCdnKeys(
      google::cloud::video::stitcher::v1::ListCdnKeysRequest request);

  virtual StatusOr<google::cloud::video::stitcher::v1::CdnKey> GetCdnKey(
      google::cloud::video::stitcher::v1::GetCdnKeyRequest const& request);

  virtual Status DeleteCdnKey(
      google::cloud::video::stitcher::v1::DeleteCdnKeyRequest const& request);

  virtual StatusOr<google::cloud::video::stitcher::v1::CdnKey> UpdateCdnKey(
      google::cloud::video::stitcher::v1::UpdateCdnKeyRequest const& request);

  virtual StatusOr<google::cloud::video::stitcher::v1::VodSession>
  CreateVodSession(
      google::cloud::video::stitcher::v1::CreateVodSessionRequest const&
          request);

  virtual StatusOr<google::cloud::video::stitcher::v1::VodSession>
  GetVodSession(
      google::cloud::video::stitcher::v1::GetVodSessionRequest const& request);

  virtual StreamRange<google::cloud::video::stitcher::v1::VodStitchDetail>
  ListVodStitchDetails(
      google::cloud::video::stitcher::v1::ListVodStitchDetailsRequest request);

  virtual StatusOr<google::cloud::video::stitcher::v1::VodStitchDetail>
  GetVodStitchDetail(
      google::cloud::video::stitcher::v1::GetVodStitchDetailRequest const&
          request);

  virtual StreamRange<google::cloud::video::stitcher::v1::VodAdTagDetail>
  ListVodAdTagDetails(
      google::cloud::video::stitcher::v1::ListVodAdTagDetailsRequest request);

  virtual StatusOr<google::cloud::video::stitcher::v1::VodAdTagDetail>
  GetVodAdTagDetail(
      google::cloud::video::stitcher::v1::GetVodAdTagDetailRequest const&
          request);

  virtual StreamRange<google::cloud::video::stitcher::v1::LiveAdTagDetail>
  ListLiveAdTagDetails(
      google::cloud::video::stitcher::v1::ListLiveAdTagDetailsRequest request);

  virtual StatusOr<google::cloud::video::stitcher::v1::LiveAdTagDetail>
  GetLiveAdTagDetail(
      google::cloud::video::stitcher::v1::GetLiveAdTagDetailRequest const&
          request);

  virtual StatusOr<google::cloud::video::stitcher::v1::Slate> CreateSlate(
      google::cloud::video::stitcher::v1::CreateSlateRequest const& request);

  virtual StreamRange<google::cloud::video::stitcher::v1::Slate> ListSlates(
      google::cloud::video::stitcher::v1::ListSlatesRequest request);

  virtual StatusOr<google::cloud::video::stitcher::v1::Slate> GetSlate(
      google::cloud::video::stitcher::v1::GetSlateRequest const& request);

  virtual StatusOr<google::cloud::video::stitcher::v1::Slate> UpdateSlate(
      google::cloud::video::stitcher::v1::UpdateSlateRequest const& request);

  virtual Status DeleteSlate(
      google::cloud::video::stitcher::v1::DeleteSlateRequest const& request);

  virtual StatusOr<google::cloud::video::stitcher::v1::LiveSession>
  CreateLiveSession(
      google::cloud::video::stitcher::v1::CreateLiveSessionRequest const&
          request);

  virtual StatusOr<google::cloud::video::stitcher::v1::LiveSession>
  GetLiveSession(
      google::cloud::video::stitcher::v1::GetLiveSessionRequest const& request);
};

/**
 * A factory function to construct an object of type
 * `VideoStitcherServiceConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of
 * VideoStitcherServiceClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `VideoStitcherServiceConnection`. Expected options are any of the
 * types in the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * - `google::cloud::video::VideoStitcherServicePolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `VideoStitcherServiceConnection`
 * created by this function.
 */
std::shared_ptr<VideoStitcherServiceConnection>
MakeVideoStitcherServiceConnection(Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace video
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_VIDEO_VIDEO_STITCHER_CONNECTION_H
