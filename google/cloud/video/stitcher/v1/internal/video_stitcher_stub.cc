// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/video/stitcher/v1/video_stitcher_service.proto

#include "google/cloud/video/stitcher/v1/internal/video_stitcher_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/video/stitcher/v1/video_stitcher_service.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace video_stitcher_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

VideoStitcherServiceStub::~VideoStitcherServiceStub() = default;

StatusOr<google::cloud::video::stitcher::v1::CdnKey>
DefaultVideoStitcherServiceStub::CreateCdnKey(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::CreateCdnKeyRequest const& request) {
  google::cloud::video::stitcher::v1::CdnKey response;
  auto status = grpc_stub_->CreateCdnKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::ListCdnKeysResponse>
DefaultVideoStitcherServiceStub::ListCdnKeys(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::ListCdnKeysRequest const& request) {
  google::cloud::video::stitcher::v1::ListCdnKeysResponse response;
  auto status = grpc_stub_->ListCdnKeys(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::CdnKey>
DefaultVideoStitcherServiceStub::GetCdnKey(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::GetCdnKeyRequest const& request) {
  google::cloud::video::stitcher::v1::CdnKey response;
  auto status = grpc_stub_->GetCdnKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultVideoStitcherServiceStub::DeleteCdnKey(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::DeleteCdnKeyRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteCdnKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::video::stitcher::v1::CdnKey>
DefaultVideoStitcherServiceStub::UpdateCdnKey(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::UpdateCdnKeyRequest const& request) {
  google::cloud::video::stitcher::v1::CdnKey response;
  auto status = grpc_stub_->UpdateCdnKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::VodSession>
DefaultVideoStitcherServiceStub::CreateVodSession(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::CreateVodSessionRequest const&
        request) {
  google::cloud::video::stitcher::v1::VodSession response;
  auto status =
      grpc_stub_->CreateVodSession(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::VodSession>
DefaultVideoStitcherServiceStub::GetVodSession(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::GetVodSessionRequest const& request) {
  google::cloud::video::stitcher::v1::VodSession response;
  auto status = grpc_stub_->GetVodSession(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::ListVodStitchDetailsResponse>
DefaultVideoStitcherServiceStub::ListVodStitchDetails(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::ListVodStitchDetailsRequest const&
        request) {
  google::cloud::video::stitcher::v1::ListVodStitchDetailsResponse response;
  auto status =
      grpc_stub_->ListVodStitchDetails(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::VodStitchDetail>
DefaultVideoStitcherServiceStub::GetVodStitchDetail(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::GetVodStitchDetailRequest const&
        request) {
  google::cloud::video::stitcher::v1::VodStitchDetail response;
  auto status =
      grpc_stub_->GetVodStitchDetail(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::ListVodAdTagDetailsResponse>
DefaultVideoStitcherServiceStub::ListVodAdTagDetails(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::ListVodAdTagDetailsRequest const&
        request) {
  google::cloud::video::stitcher::v1::ListVodAdTagDetailsResponse response;
  auto status =
      grpc_stub_->ListVodAdTagDetails(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::VodAdTagDetail>
DefaultVideoStitcherServiceStub::GetVodAdTagDetail(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::GetVodAdTagDetailRequest const&
        request) {
  google::cloud::video::stitcher::v1::VodAdTagDetail response;
  auto status =
      grpc_stub_->GetVodAdTagDetail(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::ListLiveAdTagDetailsResponse>
DefaultVideoStitcherServiceStub::ListLiveAdTagDetails(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::ListLiveAdTagDetailsRequest const&
        request) {
  google::cloud::video::stitcher::v1::ListLiveAdTagDetailsResponse response;
  auto status =
      grpc_stub_->ListLiveAdTagDetails(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::LiveAdTagDetail>
DefaultVideoStitcherServiceStub::GetLiveAdTagDetail(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::GetLiveAdTagDetailRequest const&
        request) {
  google::cloud::video::stitcher::v1::LiveAdTagDetail response;
  auto status =
      grpc_stub_->GetLiveAdTagDetail(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::Slate>
DefaultVideoStitcherServiceStub::CreateSlate(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::CreateSlateRequest const& request) {
  google::cloud::video::stitcher::v1::Slate response;
  auto status = grpc_stub_->CreateSlate(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::ListSlatesResponse>
DefaultVideoStitcherServiceStub::ListSlates(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::ListSlatesRequest const& request) {
  google::cloud::video::stitcher::v1::ListSlatesResponse response;
  auto status = grpc_stub_->ListSlates(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::Slate>
DefaultVideoStitcherServiceStub::GetSlate(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::GetSlateRequest const& request) {
  google::cloud::video::stitcher::v1::Slate response;
  auto status = grpc_stub_->GetSlate(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::Slate>
DefaultVideoStitcherServiceStub::UpdateSlate(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::UpdateSlateRequest const& request) {
  google::cloud::video::stitcher::v1::Slate response;
  auto status = grpc_stub_->UpdateSlate(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultVideoStitcherServiceStub::DeleteSlate(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::DeleteSlateRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteSlate(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::video::stitcher::v1::LiveSession>
DefaultVideoStitcherServiceStub::CreateLiveSession(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::CreateLiveSessionRequest const&
        request) {
  google::cloud::video::stitcher::v1::LiveSession response;
  auto status =
      grpc_stub_->CreateLiveSession(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::video::stitcher::v1::LiveSession>
DefaultVideoStitcherServiceStub::GetLiveSession(
    grpc::ClientContext& client_context,
    google::cloud::video::stitcher::v1::GetLiveSessionRequest const& request) {
  google::cloud::video::stitcher::v1::LiveSession response;
  auto status = grpc_stub_->GetLiveSession(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace video_stitcher_v1_internal
}  // namespace cloud
}  // namespace google
