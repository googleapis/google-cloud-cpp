// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/video/stitcher/v1/video_stitcher_service.proto

#include "google/cloud/video/internal/video_stitcher_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace video_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

VideoStitcherServiceTracingConnection::VideoStitcherServiceTracingConnection(
    std::shared_ptr<video::VideoStitcherServiceConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::video::stitcher::v1::CdnKey>
VideoStitcherServiceTracingConnection::CreateCdnKey(
    google::cloud::video::stitcher::v1::CreateCdnKeyRequest const& request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::CreateCdnKey");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateCdnKey(request));
}

StreamRange<google::cloud::video::stitcher::v1::CdnKey>
VideoStitcherServiceTracingConnection::ListCdnKeys(
    google::cloud::video::stitcher::v1::ListCdnKeysRequest request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::ListCdnKeys");
  auto scope = absl::make_unique<opentelemetry::trace::Scope>(span);
  auto sr = child_->ListCdnKeys(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::video::stitcher::v1::CdnKey>(
      std::move(span), std::move(scope), std::move(sr));
}

StatusOr<google::cloud::video::stitcher::v1::CdnKey>
VideoStitcherServiceTracingConnection::GetCdnKey(
    google::cloud::video::stitcher::v1::GetCdnKeyRequest const& request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::GetCdnKey");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetCdnKey(request));
}

Status VideoStitcherServiceTracingConnection::DeleteCdnKey(
    google::cloud::video::stitcher::v1::DeleteCdnKeyRequest const& request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::DeleteCdnKey");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteCdnKey(request));
}

StatusOr<google::cloud::video::stitcher::v1::CdnKey>
VideoStitcherServiceTracingConnection::UpdateCdnKey(
    google::cloud::video::stitcher::v1::UpdateCdnKeyRequest const& request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::UpdateCdnKey");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateCdnKey(request));
}

StatusOr<google::cloud::video::stitcher::v1::VodSession>
VideoStitcherServiceTracingConnection::CreateVodSession(
    google::cloud::video::stitcher::v1::CreateVodSessionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::CreateVodSession");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateVodSession(request));
}

StatusOr<google::cloud::video::stitcher::v1::VodSession>
VideoStitcherServiceTracingConnection::GetVodSession(
    google::cloud::video::stitcher::v1::GetVodSessionRequest const& request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::GetVodSession");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVodSession(request));
}

StreamRange<google::cloud::video::stitcher::v1::VodStitchDetail>
VideoStitcherServiceTracingConnection::ListVodStitchDetails(
    google::cloud::video::stitcher::v1::ListVodStitchDetailsRequest request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::ListVodStitchDetails");
  auto scope = absl::make_unique<opentelemetry::trace::Scope>(span);
  auto sr = child_->ListVodStitchDetails(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::video::stitcher::v1::VodStitchDetail>(
      std::move(span), std::move(scope), std::move(sr));
}

StatusOr<google::cloud::video::stitcher::v1::VodStitchDetail>
VideoStitcherServiceTracingConnection::GetVodStitchDetail(
    google::cloud::video::stitcher::v1::GetVodStitchDetailRequest const&
        request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::GetVodStitchDetail");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVodStitchDetail(request));
}

StreamRange<google::cloud::video::stitcher::v1::VodAdTagDetail>
VideoStitcherServiceTracingConnection::ListVodAdTagDetails(
    google::cloud::video::stitcher::v1::ListVodAdTagDetailsRequest request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::ListVodAdTagDetails");
  auto scope = absl::make_unique<opentelemetry::trace::Scope>(span);
  auto sr = child_->ListVodAdTagDetails(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::video::stitcher::v1::VodAdTagDetail>(
      std::move(span), std::move(scope), std::move(sr));
}

StatusOr<google::cloud::video::stitcher::v1::VodAdTagDetail>
VideoStitcherServiceTracingConnection::GetVodAdTagDetail(
    google::cloud::video::stitcher::v1::GetVodAdTagDetailRequest const&
        request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::GetVodAdTagDetail");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVodAdTagDetail(request));
}

StreamRange<google::cloud::video::stitcher::v1::LiveAdTagDetail>
VideoStitcherServiceTracingConnection::ListLiveAdTagDetails(
    google::cloud::video::stitcher::v1::ListLiveAdTagDetailsRequest request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::ListLiveAdTagDetails");
  auto scope = absl::make_unique<opentelemetry::trace::Scope>(span);
  auto sr = child_->ListLiveAdTagDetails(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::video::stitcher::v1::LiveAdTagDetail>(
      std::move(span), std::move(scope), std::move(sr));
}

StatusOr<google::cloud::video::stitcher::v1::LiveAdTagDetail>
VideoStitcherServiceTracingConnection::GetLiveAdTagDetail(
    google::cloud::video::stitcher::v1::GetLiveAdTagDetailRequest const&
        request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::GetLiveAdTagDetail");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetLiveAdTagDetail(request));
}

StatusOr<google::cloud::video::stitcher::v1::Slate>
VideoStitcherServiceTracingConnection::CreateSlate(
    google::cloud::video::stitcher::v1::CreateSlateRequest const& request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::CreateSlate");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateSlate(request));
}

StreamRange<google::cloud::video::stitcher::v1::Slate>
VideoStitcherServiceTracingConnection::ListSlates(
    google::cloud::video::stitcher::v1::ListSlatesRequest request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::ListSlates");
  auto scope = absl::make_unique<opentelemetry::trace::Scope>(span);
  auto sr = child_->ListSlates(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::video::stitcher::v1::Slate>(
      std::move(span), std::move(scope), std::move(sr));
}

StatusOr<google::cloud::video::stitcher::v1::Slate>
VideoStitcherServiceTracingConnection::GetSlate(
    google::cloud::video::stitcher::v1::GetSlateRequest const& request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::GetSlate");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetSlate(request));
}

StatusOr<google::cloud::video::stitcher::v1::Slate>
VideoStitcherServiceTracingConnection::UpdateSlate(
    google::cloud::video::stitcher::v1::UpdateSlateRequest const& request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::UpdateSlate");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateSlate(request));
}

Status VideoStitcherServiceTracingConnection::DeleteSlate(
    google::cloud::video::stitcher::v1::DeleteSlateRequest const& request) {
  auto span =
      internal::MakeSpan("video::VideoStitcherServiceConnection::DeleteSlate");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteSlate(request));
}

StatusOr<google::cloud::video::stitcher::v1::LiveSession>
VideoStitcherServiceTracingConnection::CreateLiveSession(
    google::cloud::video::stitcher::v1::CreateLiveSessionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::CreateLiveSession");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateLiveSession(request));
}

StatusOr<google::cloud::video::stitcher::v1::LiveSession>
VideoStitcherServiceTracingConnection::GetLiveSession(
    google::cloud::video::stitcher::v1::GetLiveSessionRequest const& request) {
  auto span = internal::MakeSpan(
      "video::VideoStitcherServiceConnection::GetLiveSession");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetLiveSession(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace video_internal
}  // namespace cloud
}  // namespace google
