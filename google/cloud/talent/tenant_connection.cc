// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/talent/v4/tenant_service.proto

#include "google/cloud/talent/tenant_connection.h"
#include "google/cloud/talent/internal/tenant_option_defaults.h"
#include "google/cloud/talent/internal/tenant_stub_factory.h"
#include "google/cloud/talent/tenant_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace talent {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

TenantServiceConnection::~TenantServiceConnection() = default;

StatusOr<google::cloud::talent::v4::Tenant>
TenantServiceConnection::CreateTenant(
    google::cloud::talent::v4::CreateTenantRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::talent::v4::Tenant> TenantServiceConnection::GetTenant(
    google::cloud::talent::v4::GetTenantRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::talent::v4::Tenant>
TenantServiceConnection::UpdateTenant(
    google::cloud::talent::v4::UpdateTenantRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status TenantServiceConnection::DeleteTenant(
    google::cloud::talent::v4::DeleteTenantRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::talent::v4::Tenant>
TenantServiceConnection::ListTenants(
    google::cloud::talent::v4::ListTenantsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::talent::v4::Tenant>>(
      std::move(request),
      [](google::cloud::talent::v4::ListTenantsRequest const&) {
        return StatusOr<google::cloud::talent::v4::ListTenantsResponse>{};
      },
      [](google::cloud::talent::v4::ListTenantsResponse const&) {
        return std::vector<google::cloud::talent::v4::Tenant>();
      });
}

namespace {
class TenantServiceConnectionImpl : public TenantServiceConnection {
 public:
  TenantServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<talent_internal::TenantServiceStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<TenantServiceRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<TenantServiceBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<TenantServiceConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~TenantServiceConnectionImpl() override = default;

  StatusOr<google::cloud::talent::v4::Tenant> CreateTenant(
      google::cloud::talent::v4::CreateTenantRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateTenant(request),
        [this](grpc::ClientContext& context,
               google::cloud::talent::v4::CreateTenantRequest const& request) {
          return stub_->CreateTenant(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::talent::v4::Tenant> GetTenant(
      google::cloud::talent::v4::GetTenantRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetTenant(request),
        [this](grpc::ClientContext& context,
               google::cloud::talent::v4::GetTenantRequest const& request) {
          return stub_->GetTenant(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::talent::v4::Tenant> UpdateTenant(
      google::cloud::talent::v4::UpdateTenantRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateTenant(request),
        [this](grpc::ClientContext& context,
               google::cloud::talent::v4::UpdateTenantRequest const& request) {
          return stub_->UpdateTenant(context, request);
        },
        request, __func__);
  }

  Status DeleteTenant(
      google::cloud::talent::v4::DeleteTenantRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteTenant(request),
        [this](grpc::ClientContext& context,
               google::cloud::talent::v4::DeleteTenantRequest const& request) {
          return stub_->DeleteTenant(context, request);
        },
        request, __func__);
  }

  StreamRange<google::cloud::talent::v4::Tenant> ListTenants(
      google::cloud::talent::v4::ListTenantsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<TenantServiceRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListTenants(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::talent::v4::Tenant>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::talent::v4::ListTenantsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::talent::v4::ListTenantsRequest const&
                         request) {
                return stub->ListTenants(context, request);
              },
              r, function_name);
        },
        [](google::cloud::talent::v4::ListTenantsResponse r) {
          std::vector<google::cloud::talent::v4::Tenant> result(
              r.tenants().size());
          auto& messages = *r.mutable_tenants();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<talent_internal::TenantServiceStub> stub_;
  std::unique_ptr<TenantServiceRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<TenantServiceConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<TenantServiceConnection> MakeTenantServiceConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 TenantServicePolicyOptionList>(options,
                                                                __func__);
  options = talent_internal::TenantServiceDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = talent_internal::CreateDefaultTenantServiceStub(background->cq(),
                                                              options);
  return std::make_shared<TenantServiceConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace talent
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace talent_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<talent::TenantServiceConnection> MakeTenantServiceConnection(
    std::shared_ptr<TenantServiceStub> stub, Options options) {
  options = TenantServiceDefaultOptions(std::move(options));
  return std::make_shared<talent::TenantServiceConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace talent_internal
}  // namespace cloud
}  // namespace google
