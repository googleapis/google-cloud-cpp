// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/talent/v4/job_service.proto

#include "google/cloud/talent/internal/job_tracing_stub.h"

namespace google {
namespace cloud {
namespace talent_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

JobServiceTracingStub::JobServiceTracingStub(
    std::shared_ptr<JobServiceStub> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::talent::v4::Job> JobServiceTracingStub::CreateJob(
    grpc::ClientContext& context,
    google::cloud::talent::v4::CreateJobRequest const& request) {
  return child_->CreateJob(context, request);
}

future<StatusOr<google::longrunning::Operation>>
JobServiceTracingStub::AsyncBatchCreateJobs(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::talent::v4::BatchCreateJobsRequest const& request) {
  return child_->AsyncBatchCreateJobs(cq, std::move(context), request);
}

StatusOr<google::cloud::talent::v4::Job> JobServiceTracingStub::GetJob(
    grpc::ClientContext& context,
    google::cloud::talent::v4::GetJobRequest const& request) {
  return child_->GetJob(context, request);
}

StatusOr<google::cloud::talent::v4::Job> JobServiceTracingStub::UpdateJob(
    grpc::ClientContext& context,
    google::cloud::talent::v4::UpdateJobRequest const& request) {
  return child_->UpdateJob(context, request);
}

future<StatusOr<google::longrunning::Operation>>
JobServiceTracingStub::AsyncBatchUpdateJobs(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::talent::v4::BatchUpdateJobsRequest const& request) {
  return child_->AsyncBatchUpdateJobs(cq, std::move(context), request);
}

Status JobServiceTracingStub::DeleteJob(
    grpc::ClientContext& context,
    google::cloud::talent::v4::DeleteJobRequest const& request) {
  return child_->DeleteJob(context, request);
}

future<StatusOr<google::longrunning::Operation>>
JobServiceTracingStub::AsyncBatchDeleteJobs(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::talent::v4::BatchDeleteJobsRequest const& request) {
  return child_->AsyncBatchDeleteJobs(cq, std::move(context), request);
}

StatusOr<google::cloud::talent::v4::ListJobsResponse>
JobServiceTracingStub::ListJobs(
    grpc::ClientContext& context,
    google::cloud::talent::v4::ListJobsRequest const& request) {
  return child_->ListJobs(context, request);
}

StatusOr<google::cloud::talent::v4::SearchJobsResponse>
JobServiceTracingStub::SearchJobs(
    grpc::ClientContext& context,
    google::cloud::talent::v4::SearchJobsRequest const& request) {
  return child_->SearchJobs(context, request);
}

StatusOr<google::cloud::talent::v4::SearchJobsResponse>
JobServiceTracingStub::SearchJobsForAlert(
    grpc::ClientContext& context,
    google::cloud::talent::v4::SearchJobsRequest const& request) {
  return child_->SearchJobsForAlert(context, request);
}

future<StatusOr<google::longrunning::Operation>>
JobServiceTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> JobServiceTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace talent_internal
}  // namespace cloud
}  // namespace google
