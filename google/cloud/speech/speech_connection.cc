// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/speech/v1/cloud_speech.proto

#include "google/cloud/speech/speech_connection.h"
#include "google/cloud/speech/internal/speech_connection_impl.h"
#include "google/cloud/speech/internal/speech_option_defaults.h"
#include "google/cloud/speech/internal/speech_stub_factory.h"
#include "google/cloud/speech/speech_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace speech {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SpeechConnection::~SpeechConnection() = default;

StatusOr<google::cloud::speech::v1::RecognizeResponse>
SpeechConnection::Recognize(
    google::cloud::speech::v1::RecognizeRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::speech::v1::LongRunningRecognizeResponse>>
SpeechConnection::LongRunningRecognize(
    google::cloud::speech::v1::LongRunningRecognizeRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::speech::v1::LongRunningRecognizeResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

std::unique_ptr<::google::cloud::AsyncStreamingReadWriteRpc<
    google::cloud::speech::v1::StreamingRecognizeRequest,
    google::cloud::speech::v1::StreamingRecognizeResponse>>
SpeechConnection::AsyncStreamingRecognize(ExperimentalTag) {
  return absl::make_unique<
      ::google::cloud::internal::AsyncStreamingReadWriteRpcError<
          google::cloud::speech::v1::StreamingRecognizeRequest,
          google::cloud::speech::v1::StreamingRecognizeResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

std::shared_ptr<SpeechConnection> MakeSpeechConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 SpeechPolicyOptionList>(options, __func__);
  options = speech_internal::SpeechDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub =
      speech_internal::CreateDefaultSpeechStub(background->cq(), options);
  return std::make_shared<speech_internal::SpeechConnectionImpl>(
      std::move(background), std::move(stub), std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace speech
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace speech_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<speech::SpeechConnection> MakeSpeechConnection(
    std::shared_ptr<SpeechStub> stub, Options options) {
  options = SpeechDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  return std::make_shared<speech_internal::SpeechConnectionImpl>(
      std::move(background), std::move(stub), std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace speech_internal
}  // namespace cloud
}  // namespace google
