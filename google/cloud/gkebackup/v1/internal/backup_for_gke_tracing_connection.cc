// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gkebackup/v1/gkebackup.proto

#include "google/cloud/gkebackup/v1/internal/backup_for_gke_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace gkebackup_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

BackupForGKETracingConnection::BackupForGKETracingConnection(
    std::shared_ptr<gkebackup_v1::BackupForGKEConnection> child)
    : child_(std::move(child)) {}

future<StatusOr<google::cloud::gkebackup::v1::BackupPlan>>
BackupForGKETracingConnection::CreateBackupPlan(
    google::cloud::gkebackup::v1::CreateBackupPlanRequest const& request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::CreateBackupPlan");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->CreateBackupPlan(request));
}

StreamRange<google::cloud::gkebackup::v1::BackupPlan>
BackupForGKETracingConnection::ListBackupPlans(
    google::cloud::gkebackup::v1::ListBackupPlansRequest request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::ListBackupPlans");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListBackupPlans(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::gkebackup::v1::BackupPlan>(std::move(span), std::move(sr));
}

StatusOr<google::cloud::gkebackup::v1::BackupPlan>
BackupForGKETracingConnection::GetBackupPlan(
    google::cloud::gkebackup::v1::GetBackupPlanRequest const& request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::GetBackupPlan");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetBackupPlan(request));
}

future<StatusOr<google::cloud::gkebackup::v1::BackupPlan>>
BackupForGKETracingConnection::UpdateBackupPlan(
    google::cloud::gkebackup::v1::UpdateBackupPlanRequest const& request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::UpdateBackupPlan");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateBackupPlan(request));
}

future<StatusOr<google::cloud::gkebackup::v1::OperationMetadata>>
BackupForGKETracingConnection::DeleteBackupPlan(
    google::cloud::gkebackup::v1::DeleteBackupPlanRequest const& request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::DeleteBackupPlan");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteBackupPlan(request));
}

future<StatusOr<google::cloud::gkebackup::v1::Backup>>
BackupForGKETracingConnection::CreateBackup(
    google::cloud::gkebackup::v1::CreateBackupRequest const& request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::CreateBackup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->CreateBackup(request));
}

StreamRange<google::cloud::gkebackup::v1::Backup>
BackupForGKETracingConnection::ListBackups(
    google::cloud::gkebackup::v1::ListBackupsRequest request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::ListBackups");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListBackups(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::gkebackup::v1::Backup>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::gkebackup::v1::Backup>
BackupForGKETracingConnection::GetBackup(
    google::cloud::gkebackup::v1::GetBackupRequest const& request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::GetBackup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetBackup(request));
}

future<StatusOr<google::cloud::gkebackup::v1::Backup>>
BackupForGKETracingConnection::UpdateBackup(
    google::cloud::gkebackup::v1::UpdateBackupRequest const& request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::UpdateBackup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateBackup(request));
}

future<StatusOr<google::cloud::gkebackup::v1::OperationMetadata>>
BackupForGKETracingConnection::DeleteBackup(
    google::cloud::gkebackup::v1::DeleteBackupRequest const& request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::DeleteBackup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteBackup(request));
}

StreamRange<google::cloud::gkebackup::v1::VolumeBackup>
BackupForGKETracingConnection::ListVolumeBackups(
    google::cloud::gkebackup::v1::ListVolumeBackupsRequest request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::ListVolumeBackups");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListVolumeBackups(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::gkebackup::v1::VolumeBackup>(std::move(span),
                                                  std::move(sr));
}

StatusOr<google::cloud::gkebackup::v1::VolumeBackup>
BackupForGKETracingConnection::GetVolumeBackup(
    google::cloud::gkebackup::v1::GetVolumeBackupRequest const& request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::GetVolumeBackup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVolumeBackup(request));
}

future<StatusOr<google::cloud::gkebackup::v1::RestorePlan>>
BackupForGKETracingConnection::CreateRestorePlan(
    google::cloud::gkebackup::v1::CreateRestorePlanRequest const& request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::CreateRestorePlan");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->CreateRestorePlan(request));
}

StreamRange<google::cloud::gkebackup::v1::RestorePlan>
BackupForGKETracingConnection::ListRestorePlans(
    google::cloud::gkebackup::v1::ListRestorePlansRequest request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::ListRestorePlans");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListRestorePlans(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::gkebackup::v1::RestorePlan>(std::move(span),
                                                 std::move(sr));
}

StatusOr<google::cloud::gkebackup::v1::RestorePlan>
BackupForGKETracingConnection::GetRestorePlan(
    google::cloud::gkebackup::v1::GetRestorePlanRequest const& request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::GetRestorePlan");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRestorePlan(request));
}

future<StatusOr<google::cloud::gkebackup::v1::RestorePlan>>
BackupForGKETracingConnection::UpdateRestorePlan(
    google::cloud::gkebackup::v1::UpdateRestorePlanRequest const& request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::UpdateRestorePlan");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateRestorePlan(request));
}

future<StatusOr<google::cloud::gkebackup::v1::OperationMetadata>>
BackupForGKETracingConnection::DeleteRestorePlan(
    google::cloud::gkebackup::v1::DeleteRestorePlanRequest const& request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::DeleteRestorePlan");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteRestorePlan(request));
}

future<StatusOr<google::cloud::gkebackup::v1::Restore>>
BackupForGKETracingConnection::CreateRestore(
    google::cloud::gkebackup::v1::CreateRestoreRequest const& request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::CreateRestore");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->CreateRestore(request));
}

StreamRange<google::cloud::gkebackup::v1::Restore>
BackupForGKETracingConnection::ListRestores(
    google::cloud::gkebackup::v1::ListRestoresRequest request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::ListRestores");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListRestores(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::gkebackup::v1::Restore>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::gkebackup::v1::Restore>
BackupForGKETracingConnection::GetRestore(
    google::cloud::gkebackup::v1::GetRestoreRequest const& request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::GetRestore");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRestore(request));
}

future<StatusOr<google::cloud::gkebackup::v1::Restore>>
BackupForGKETracingConnection::UpdateRestore(
    google::cloud::gkebackup::v1::UpdateRestoreRequest const& request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::UpdateRestore");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateRestore(request));
}

future<StatusOr<google::cloud::gkebackup::v1::OperationMetadata>>
BackupForGKETracingConnection::DeleteRestore(
    google::cloud::gkebackup::v1::DeleteRestoreRequest const& request) {
  auto span =
      internal::MakeSpan("gkebackup_v1::BackupForGKEConnection::DeleteRestore");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteRestore(request));
}

StreamRange<google::cloud::gkebackup::v1::VolumeRestore>
BackupForGKETracingConnection::ListVolumeRestores(
    google::cloud::gkebackup::v1::ListVolumeRestoresRequest request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::ListVolumeRestores");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListVolumeRestores(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::gkebackup::v1::VolumeRestore>(std::move(span),
                                                   std::move(sr));
}

StatusOr<google::cloud::gkebackup::v1::VolumeRestore>
BackupForGKETracingConnection::GetVolumeRestore(
    google::cloud::gkebackup::v1::GetVolumeRestoreRequest const& request) {
  auto span = internal::MakeSpan(
      "gkebackup_v1::BackupForGKEConnection::GetVolumeRestore");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVolumeRestore(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<gkebackup_v1::BackupForGKEConnection>
MakeBackupForGKETracingConnection(
    std::shared_ptr<gkebackup_v1::BackupForGKEConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<BackupForGKETracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gkebackup_v1_internal
}  // namespace cloud
}  // namespace google
