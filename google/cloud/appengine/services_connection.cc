// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/appengine/v1/appengine.proto

#include "google/cloud/appengine/services_connection.h"
#include "google/cloud/appengine/internal/services_option_defaults.h"
#include "google/cloud/appengine/internal/services_stub_factory.h"
#include "google/cloud/appengine/services_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace appengine {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ServicesConnection::~ServicesConnection() = default;

StreamRange<google::appengine::v1::Service> ServicesConnection::ListServices(
    google::appengine::v1::ListServicesRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::appengine::v1::Service>>(
      std::move(request),
      [](google::appengine::v1::ListServicesRequest const&) {
        return StatusOr<google::appengine::v1::ListServicesResponse>{};
      },
      [](google::appengine::v1::ListServicesResponse const&) {
        return std::vector<google::appengine::v1::Service>();
      });
}

StatusOr<google::appengine::v1::Service> ServicesConnection::GetService(
    google::appengine::v1::GetServiceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::appengine::v1::Service>>
ServicesConnection::UpdateService(
    google::appengine::v1::UpdateServiceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::appengine::v1::Service>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::appengine::v1::OperationMetadataV1>>
ServicesConnection::DeleteService(
    google::appengine::v1::DeleteServiceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::appengine::v1::OperationMetadataV1>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

namespace {
class ServicesConnectionImpl : public ServicesConnection {
 public:
  ServicesConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<appengine_internal::ServicesStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<ServicesRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<ServicesBackoffPolicyOption>()->clone()),
        polling_policy_prototype_(
            options.get<ServicesPollingPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<ServicesConnectionIdempotencyPolicyOption>()->clone()) {
  }

  ~ServicesConnectionImpl() override = default;

  StreamRange<google::appengine::v1::Service> ListServices(
      google::appengine::v1::ListServicesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<ServicesRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListServices(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::appengine::v1::Service>>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](google::appengine::v1::ListServicesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  google::appengine::v1::ListServicesRequest const& request) {
                return stub->ListServices(context, request);
              },
              r, function_name);
        },
        [](google::appengine::v1::ListServicesResponse r) {
          std::vector<google::appengine::v1::Service> result(
              r.services().size());
          auto& messages = *r.mutable_services();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::appengine::v1::Service> GetService(
      google::appengine::v1::GetServiceRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetService(request),
        [this](grpc::ClientContext& context,
               google::appengine::v1::GetServiceRequest const& request) {
          return stub_->GetService(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::appengine::v1::Service>> UpdateService(
      google::appengine::v1::UpdateServiceRequest const& request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::appengine::v1::Service>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::appengine::v1::UpdateServiceRequest const& request) {
          return stub->AsyncUpdateService(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::appengine::v1::Service>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateService(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::appengine::v1::OperationMetadataV1>> DeleteService(
      google::appengine::v1::DeleteServiceRequest const& request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::appengine::v1::OperationMetadataV1>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::appengine::v1::DeleteServiceRequest const& request) {
          return stub->AsyncDeleteService(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::appengine::v1::OperationMetadataV1>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteService(request),
        polling_policy_prototype_->clone(), __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<appengine_internal::ServicesStub> stub_;
  std::unique_ptr<ServicesRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<PollingPolicy const> polling_policy_prototype_;
  std::unique_ptr<ServicesConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<ServicesConnection> MakeServicesConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 ServicesPolicyOptionList>(options, __func__);
  options = appengine_internal::ServicesDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub =
      appengine_internal::CreateDefaultServicesStub(background->cq(), options);
  return std::make_shared<ServicesConnectionImpl>(std::move(background),
                                                  std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace appengine
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace appengine_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<appengine::ServicesConnection> MakeServicesConnection(
    std::shared_ptr<ServicesStub> stub, Options options) {
  options = ServicesDefaultOptions(std::move(options));
  return std::make_shared<appengine::ServicesConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace appengine_internal
}  // namespace cloud
}  // namespace google
