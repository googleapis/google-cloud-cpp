// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/appengine/v1/appengine.proto

#include "google/cloud/appengine/firewall_connection.h"
#include "google/cloud/appengine/firewall_options.h"
#include "google/cloud/appengine/internal/firewall_option_defaults.h"
#include "google/cloud/appengine/internal/firewall_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace appengine {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

FirewallConnection::~FirewallConnection() = default;

StreamRange<google::appengine::v1::FirewallRule>
FirewallConnection::ListIngressRules(
    google::appengine::v1::ListIngressRulesRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::appengine::v1::FirewallRule>>(
      std::move(request),
      [](google::appengine::v1::ListIngressRulesRequest const&) {
        return StatusOr<google::appengine::v1::ListIngressRulesResponse>{};
      },
      [](google::appengine::v1::ListIngressRulesResponse const&) {
        return std::vector<google::appengine::v1::FirewallRule>();
      });
}

StatusOr<google::appengine::v1::BatchUpdateIngressRulesResponse>
FirewallConnection::BatchUpdateIngressRules(
    google::appengine::v1::BatchUpdateIngressRulesRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::appengine::v1::FirewallRule>
FirewallConnection::CreateIngressRule(
    google::appengine::v1::CreateIngressRuleRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::appengine::v1::FirewallRule>
FirewallConnection::GetIngressRule(
    google::appengine::v1::GetIngressRuleRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::appengine::v1::FirewallRule>
FirewallConnection::UpdateIngressRule(
    google::appengine::v1::UpdateIngressRuleRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status FirewallConnection::DeleteIngressRule(
    google::appengine::v1::DeleteIngressRuleRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

namespace {
class FirewallConnectionImpl : public FirewallConnection {
 public:
  FirewallConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<appengine_internal::FirewallStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<FirewallRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<FirewallBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<FirewallConnectionIdempotencyPolicyOption>()->clone()) {
  }

  ~FirewallConnectionImpl() override = default;

  StreamRange<google::appengine::v1::FirewallRule> ListIngressRules(
      google::appengine::v1::ListIngressRulesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<FirewallRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListIngressRules(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::appengine::v1::FirewallRule>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::appengine::v1::ListIngressRulesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::appengine::v1::ListIngressRulesRequest const&
                         request) {
                return stub->ListIngressRules(context, request);
              },
              r, function_name);
        },
        [](google::appengine::v1::ListIngressRulesResponse r) {
          std::vector<google::appengine::v1::FirewallRule> result(
              r.ingress_rules().size());
          auto& messages = *r.mutable_ingress_rules();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::appengine::v1::BatchUpdateIngressRulesResponse>
  BatchUpdateIngressRules(
      google::appengine::v1::BatchUpdateIngressRulesRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->BatchUpdateIngressRules(request),
        [this](grpc::ClientContext& context,
               google::appengine::v1::BatchUpdateIngressRulesRequest const&
                   request) {
          return stub_->BatchUpdateIngressRules(context, request);
        },
        request, __func__);
  }

  StatusOr<google::appengine::v1::FirewallRule> CreateIngressRule(
      google::appengine::v1::CreateIngressRuleRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateIngressRule(request),
        [this](grpc::ClientContext& context,
               google::appengine::v1::CreateIngressRuleRequest const& request) {
          return stub_->CreateIngressRule(context, request);
        },
        request, __func__);
  }

  StatusOr<google::appengine::v1::FirewallRule> GetIngressRule(
      google::appengine::v1::GetIngressRuleRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetIngressRule(request),
        [this](grpc::ClientContext& context,
               google::appengine::v1::GetIngressRuleRequest const& request) {
          return stub_->GetIngressRule(context, request);
        },
        request, __func__);
  }

  StatusOr<google::appengine::v1::FirewallRule> UpdateIngressRule(
      google::appengine::v1::UpdateIngressRuleRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateIngressRule(request),
        [this](grpc::ClientContext& context,
               google::appengine::v1::UpdateIngressRuleRequest const& request) {
          return stub_->UpdateIngressRule(context, request);
        },
        request, __func__);
  }

  Status DeleteIngressRule(
      google::appengine::v1::DeleteIngressRuleRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteIngressRule(request),
        [this](grpc::ClientContext& context,
               google::appengine::v1::DeleteIngressRuleRequest const& request) {
          return stub_->DeleteIngressRule(context, request);
        },
        request, __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<appengine_internal::FirewallStub> stub_;
  std::unique_ptr<FirewallRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<FirewallConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<FirewallConnection> MakeFirewallConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 FirewallPolicyOptionList>(options, __func__);
  options = appengine_internal::FirewallDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub =
      appengine_internal::CreateDefaultFirewallStub(background->cq(), options);
  return std::make_shared<FirewallConnectionImpl>(std::move(background),
                                                  std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace appengine
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace appengine_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<appengine::FirewallConnection> MakeFirewallConnection(
    std::shared_ptr<FirewallStub> stub, Options options) {
  options = FirewallDefaultOptions(std::move(options));
  return std::make_shared<appengine::FirewallConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace appengine_internal
}  // namespace cloud
}  // namespace google
