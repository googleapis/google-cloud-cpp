// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/appengine/v1/appengine.proto

#include "google/cloud/appengine/authorized_domains_connection.h"
#include "google/cloud/appengine/authorized_domains_options.h"
#include "google/cloud/appengine/internal/authorized_domains_option_defaults.h"
#include "google/cloud/appengine/internal/authorized_domains_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace appengine {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

AuthorizedDomainsConnection::~AuthorizedDomainsConnection() = default;

StreamRange<google::appengine::v1::AuthorizedDomain>
AuthorizedDomainsConnection::ListAuthorizedDomains(
    google::appengine::v1::ListAuthorizedDomainsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::appengine::v1::AuthorizedDomain>>(
      std::move(request),
      [](google::appengine::v1::ListAuthorizedDomainsRequest const&) {
        return StatusOr<google::appengine::v1::ListAuthorizedDomainsResponse>{};
      },
      [](google::appengine::v1::ListAuthorizedDomainsResponse const&) {
        return std::vector<google::appengine::v1::AuthorizedDomain>();
      });
}

namespace {
class AuthorizedDomainsConnectionImpl : public AuthorizedDomainsConnection {
 public:
  AuthorizedDomainsConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<appengine_internal::AuthorizedDomainsStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<AuthorizedDomainsRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<AuthorizedDomainsBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<AuthorizedDomainsConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~AuthorizedDomainsConnectionImpl() override = default;

  StreamRange<google::appengine::v1::AuthorizedDomain> ListAuthorizedDomains(
      google::appengine::v1::ListAuthorizedDomainsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<AuthorizedDomainsRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListAuthorizedDomains(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::appengine::v1::AuthorizedDomain>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::appengine::v1::ListAuthorizedDomainsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::appengine::v1::ListAuthorizedDomainsRequest const&
                         request) {
                return stub->ListAuthorizedDomains(context, request);
              },
              r, function_name);
        },
        [](google::appengine::v1::ListAuthorizedDomainsResponse r) {
          std::vector<google::appengine::v1::AuthorizedDomain> result(
              r.domains().size());
          auto& messages = *r.mutable_domains();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<appengine_internal::AuthorizedDomainsStub> stub_;
  std::unique_ptr<AuthorizedDomainsRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<AuthorizedDomainsConnectionIdempotencyPolicy>
      idempotency_policy_;
};
}  // namespace

std::shared_ptr<AuthorizedDomainsConnection> MakeAuthorizedDomainsConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 AuthorizedDomainsPolicyOptionList>(options,
                                                                    __func__);
  options =
      appengine_internal::AuthorizedDomainsDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = appengine_internal::CreateDefaultAuthorizedDomainsStub(
      background->cq(), options);
  return std::make_shared<AuthorizedDomainsConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace appengine
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace appengine_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<appengine::AuthorizedDomainsConnection>
MakeAuthorizedDomainsConnection(std::shared_ptr<AuthorizedDomainsStub> stub,
                                Options options) {
  options = AuthorizedDomainsDefaultOptions(std::move(options));
  return std::make_shared<appengine::AuthorizedDomainsConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace appengine_internal
}  // namespace cloud
}  // namespace google
