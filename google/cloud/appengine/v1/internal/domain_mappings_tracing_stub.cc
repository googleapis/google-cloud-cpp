// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/appengine/v1/appengine.proto

#include "google/cloud/appengine/v1/internal/domain_mappings_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace appengine_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DomainMappingsTracingStub::DomainMappingsTracingStub(
    std::shared_ptr<DomainMappingsStub> child)
    : child_(std::move(child)) {}

StatusOr<google::appengine::v1::ListDomainMappingsResponse>
DomainMappingsTracingStub::ListDomainMappings(
    grpc::ClientContext& context,
    google::appengine::v1::ListDomainMappingsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.appengine.v1.DomainMappings",
                                     "ListDomainMappings");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListDomainMappings(context, request));
}

StatusOr<google::appengine::v1::DomainMapping>
DomainMappingsTracingStub::GetDomainMapping(
    grpc::ClientContext& context,
    google::appengine::v1::GetDomainMappingRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.appengine.v1.DomainMappings",
                                     "GetDomainMapping");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetDomainMapping(context, request));
}

future<StatusOr<google::longrunning::Operation>>
DomainMappingsTracingStub::AsyncCreateDomainMapping(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::appengine::v1::CreateDomainMappingRequest const& request) {
  return child_->AsyncCreateDomainMapping(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DomainMappingsTracingStub::AsyncUpdateDomainMapping(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::appengine::v1::UpdateDomainMappingRequest const& request) {
  return child_->AsyncUpdateDomainMapping(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DomainMappingsTracingStub::AsyncDeleteDomainMapping(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::appengine::v1::DeleteDomainMappingRequest const& request) {
  return child_->AsyncDeleteDomainMapping(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DomainMappingsTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> DomainMappingsTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<DomainMappingsStub> MakeDomainMappingsTracingStub(
    std::shared_ptr<DomainMappingsStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<DomainMappingsTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace appengine_v1_internal
}  // namespace cloud
}  // namespace google
