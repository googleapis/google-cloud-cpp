// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/appengine/v1/appengine.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_APPENGINE_AUTHORIZED_DOMAINS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_APPENGINE_AUTHORIZED_DOMAINS_CLIENT_H

#include "google/cloud/appengine/authorized_domains_connection.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace appengine {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Manages domains a user is authorized to administer. To authorize use of a
/// domain, verify ownership via
/// [Webmaster Central](https://www.google.com/webmasters/verification/home).
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class AuthorizedDomainsClient {
 public:
  explicit AuthorizedDomainsClient(
      std::shared_ptr<AuthorizedDomainsConnection> connection,
      Options opts = {});
  ~AuthorizedDomainsClient();

  //@{
  // @name Copy and move support
  AuthorizedDomainsClient(AuthorizedDomainsClient const&) = default;
  AuthorizedDomainsClient& operator=(AuthorizedDomainsClient const&) = default;
  AuthorizedDomainsClient(AuthorizedDomainsClient&&) = default;
  AuthorizedDomainsClient& operator=(AuthorizedDomainsClient&&) = default;
  //@}

  //@{
  // @name Equality
  friend bool operator==(AuthorizedDomainsClient const& a,
                         AuthorizedDomainsClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(AuthorizedDomainsClient const& a,
                         AuthorizedDomainsClient const& b) {
    return !(a == b);
  }
  //@}

  ///
  /// Lists all domains the user is authorized to administer.
  ///
  /// @param request
  /// @googleapis_link{google::appengine::v1::ListAuthorizedDomainsRequest,google/appengine/v1/appengine.proto#L719}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::appengine::v1::AuthorizedDomain,google/appengine/v1/domain.proto#L30}
  ///
  /// [google.appengine.v1.ListAuthorizedDomainsRequest]:
  /// @googleapis_reference_link{google/appengine/v1/appengine.proto#L719}
  /// [google.appengine.v1.AuthorizedDomain]:
  /// @googleapis_reference_link{google/appengine/v1/domain.proto#L30}
  ///
  StreamRange<google::appengine::v1::AuthorizedDomain> ListAuthorizedDomains(
      google::appengine::v1::ListAuthorizedDomainsRequest request,
      Options opts = {});

 private:
  std::shared_ptr<AuthorizedDomainsConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace appengine
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_APPENGINE_AUTHORIZED_DOMAINS_CLIENT_H
