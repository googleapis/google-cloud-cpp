// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/run/v2/service.proto

#include "google/cloud/run/v2/internal/services_option_defaults.h"
#include "google/cloud/run/v2/services_connection.h"
#include "google/cloud/run/v2/services_options.h"
#include "google/cloud/internal/populate_common_options.h"
#include "google/cloud/internal/populate_grpc_options.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace run_v2_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

namespace {
auto constexpr kBackoffScaling = 2.0;
}  // namespace

Options ServicesDefaultOptions(Options options) {
  options = internal::PopulateCommonOptions(
      std::move(options), "GOOGLE_CLOUD_CPP_RUN_SERVICES_ENDPOINT", "",
      "GOOGLE_CLOUD_CPP_RUN_SERVICES_AUTHORITY", "run.googleapis.com");
  options = internal::PopulateGrpcOptions(std::move(options));
  if (!options.has<run_v2::ServicesRetryPolicyOption>()) {
    options.set<run_v2::ServicesRetryPolicyOption>(
        run_v2::ServicesLimitedTimeRetryPolicy(std::chrono::minutes(30))
            .clone());
  }
  if (!options.has<run_v2::ServicesBackoffPolicyOption>()) {
    options.set<run_v2::ServicesBackoffPolicyOption>(
        ExponentialBackoffPolicy(
            std::chrono::seconds(0), std::chrono::seconds(1),
            std::chrono::minutes(5), kBackoffScaling, kBackoffScaling)
            .clone());
  }
  if (!options.has<run_v2::ServicesPollingPolicyOption>()) {
    options.set<run_v2::ServicesPollingPolicyOption>(
        GenericPollingPolicy<run_v2::ServicesRetryPolicyOption::Type,
                             run_v2::ServicesBackoffPolicyOption::Type>(
            options.get<run_v2::ServicesRetryPolicyOption>()->clone(),
            ExponentialBackoffPolicy(std::chrono::seconds(1),
                                     std::chrono::minutes(5), kBackoffScaling)
                .clone())
            .clone());
  }
  if (!options.has<run_v2::ServicesConnectionIdempotencyPolicyOption>()) {
    options.set<run_v2::ServicesConnectionIdempotencyPolicyOption>(
        run_v2::MakeDefaultServicesConnectionIdempotencyPolicy());
  }

  return options;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace run_v2_internal
}  // namespace cloud
}  // namespace google
