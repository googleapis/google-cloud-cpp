// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dialogflow/cx/v3/transition_route_group.proto

#include "google/cloud/dialogflow_cx/internal/transition_route_groups_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace dialogflow_cx_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

TransitionRouteGroupsTracingConnection::TransitionRouteGroupsTracingConnection(
    std::shared_ptr<dialogflow_cx::TransitionRouteGroupsConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::dialogflow::cx::v3::TransitionRouteGroup>
TransitionRouteGroupsTracingConnection::ListTransitionRouteGroups(
    google::cloud::dialogflow::cx::v3::ListTransitionRouteGroupsRequest
        request) {
  auto span = internal::MakeSpan(
      "dialogflow_cx::TransitionRouteGroupsConnection::"
      "ListTransitionRouteGroups");
  auto scope = absl::make_unique<opentelemetry::trace::Scope>(span);
  auto sr = child_->ListTransitionRouteGroups(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::dialogflow::cx::v3::TransitionRouteGroup>(
      std::move(span), std::move(scope), std::move(sr));
}

StatusOr<google::cloud::dialogflow::cx::v3::TransitionRouteGroup>
TransitionRouteGroupsTracingConnection::GetTransitionRouteGroup(
    google::cloud::dialogflow::cx::v3::GetTransitionRouteGroupRequest const&
        request) {
  auto span = internal::MakeSpan(
      "dialogflow_cx::TransitionRouteGroupsConnection::"
      "GetTransitionRouteGroup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetTransitionRouteGroup(request));
}

StatusOr<google::cloud::dialogflow::cx::v3::TransitionRouteGroup>
TransitionRouteGroupsTracingConnection::CreateTransitionRouteGroup(
    google::cloud::dialogflow::cx::v3::CreateTransitionRouteGroupRequest const&
        request) {
  auto span = internal::MakeSpan(
      "dialogflow_cx::TransitionRouteGroupsConnection::"
      "CreateTransitionRouteGroup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateTransitionRouteGroup(request));
}

StatusOr<google::cloud::dialogflow::cx::v3::TransitionRouteGroup>
TransitionRouteGroupsTracingConnection::UpdateTransitionRouteGroup(
    google::cloud::dialogflow::cx::v3::UpdateTransitionRouteGroupRequest const&
        request) {
  auto span = internal::MakeSpan(
      "dialogflow_cx::TransitionRouteGroupsConnection::"
      "UpdateTransitionRouteGroup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateTransitionRouteGroup(request));
}

Status TransitionRouteGroupsTracingConnection::DeleteTransitionRouteGroup(
    google::cloud::dialogflow::cx::v3::DeleteTransitionRouteGroupRequest const&
        request) {
  auto span = internal::MakeSpan(
      "dialogflow_cx::TransitionRouteGroupsConnection::"
      "DeleteTransitionRouteGroup");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteTransitionRouteGroup(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dialogflow_cx_internal
}  // namespace cloud
}  // namespace google
