// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dialogflow/cx/v3/changelog.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DIALOGFLOW_CX_INTERNAL_CHANGELOGS_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DIALOGFLOW_CX_INTERNAL_CHANGELOGS_CONNECTION_IMPL_H

#include "google/cloud/dialogflow_cx/changelogs_connection.h"
#include "google/cloud/dialogflow_cx/changelogs_connection_idempotency_policy.h"
#include "google/cloud/dialogflow_cx/changelogs_options.h"
#include "google/cloud/dialogflow_cx/internal/changelogs_retry_traits.h"
#include "google/cloud/dialogflow_cx/internal/changelogs_stub.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace dialogflow_cx_internal {

class ChangelogsConnectionImpl
    : public GOOGLE_CLOUD_CPP_NS::ChangelogsConnection {
 public:
  ~ChangelogsConnectionImpl() override = default;

  ChangelogsConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<GOOGLE_CLOUD_CPP_NS::ChangelogsStub> stub,
      Options options);

  Options options() override { return options_; }

  StreamRange<google::cloud::dialogflow::cx::v3::Changelog> ListChangelogs(
      google::cloud::dialogflow::cx::v3::ListChangelogsRequest request)
      override;

  StatusOr<google::cloud::dialogflow::cx::v3::Changelog> GetChangelog(
      google::cloud::dialogflow::cx::v3::GetChangelogRequest const& request)
      override;

 private:
  std::unique_ptr<GOOGLE_CLOUD_CPP_NS::ChangelogsRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<GOOGLE_CLOUD_CPP_NS::ChangelogsRetryPolicyOption>()) {
      return options.get<GOOGLE_CLOUD_CPP_NS::ChangelogsRetryPolicyOption>()
          ->clone();
    }
    return options_.get<GOOGLE_CLOUD_CPP_NS::ChangelogsRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<GOOGLE_CLOUD_CPP_NS::ChangelogsBackoffPolicyOption>()) {
      return options.get<GOOGLE_CLOUD_CPP_NS::ChangelogsBackoffPolicyOption>()
          ->clone();
    }
    return options_.get<GOOGLE_CLOUD_CPP_NS::ChangelogsBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<GOOGLE_CLOUD_CPP_NS::ChangelogsConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<GOOGLE_CLOUD_CPP_NS::
                        ChangelogsConnectionIdempotencyPolicyOption>()) {
      return options
          .get<GOOGLE_CLOUD_CPP_NS::
                   ChangelogsConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<GOOGLE_CLOUD_CPP_NS::ChangelogsConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<GOOGLE_CLOUD_CPP_NS::ChangelogsStub> stub_;
  Options options_;
};

}  // namespace dialogflow_cx_internal
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DIALOGFLOW_CX_INTERNAL_CHANGELOGS_CONNECTION_IMPL_H
