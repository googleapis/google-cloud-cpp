// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dialogflow/cx/v3/test_case.proto

#include "google/cloud/dialogflow_cx/test_cases_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace dialogflow_cx {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

TestCasesConnectionIdempotencyPolicy::~TestCasesConnectionIdempotencyPolicy() =
    default;

namespace {
class DefaultTestCasesConnectionIdempotencyPolicy
    : public TestCasesConnectionIdempotencyPolicy {
 public:
  ~DefaultTestCasesConnectionIdempotencyPolicy() override = default;

  /// Create a new copy of this object.
  std::unique_ptr<TestCasesConnectionIdempotencyPolicy> clone() const override {
    return absl::make_unique<DefaultTestCasesConnectionIdempotencyPolicy>(
        *this);
  }

  Idempotency ListTestCases(
      google::cloud::dialogflow::cx::v3::ListTestCasesRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency BatchDeleteTestCases(
      google::cloud::dialogflow::cx::v3::BatchDeleteTestCasesRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetTestCase(
      google::cloud::dialogflow::cx::v3::GetTestCaseRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateTestCase(
      google::cloud::dialogflow::cx::v3::CreateTestCaseRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateTestCase(
      google::cloud::dialogflow::cx::v3::UpdateTestCaseRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency RunTestCase(
      google::cloud::dialogflow::cx::v3::RunTestCaseRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency BatchRunTestCases(
      google::cloud::dialogflow::cx::v3::BatchRunTestCasesRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency CalculateCoverage(
      google::cloud::dialogflow::cx::v3::CalculateCoverageRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ImportTestCases(
      google::cloud::dialogflow::cx::v3::ImportTestCasesRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ExportTestCases(
      google::cloud::dialogflow::cx::v3::ExportTestCasesRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListTestCaseResults(
      google::cloud::dialogflow::cx::v3::ListTestCaseResultsRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetTestCaseResult(
      google::cloud::dialogflow::cx::v3::GetTestCaseResultRequest const&)
      override {
    return Idempotency::kIdempotent;
  }
};
}  // namespace

std::unique_ptr<TestCasesConnectionIdempotencyPolicy>
MakeDefaultTestCasesConnectionIdempotencyPolicy() {
  return absl::make_unique<DefaultTestCasesConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dialogflow_cx
}  // namespace cloud
}  // namespace google
