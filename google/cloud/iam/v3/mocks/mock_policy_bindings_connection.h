// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/policy_bindings_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_MOCKS_MOCK_POLICY_BINDINGS_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_MOCKS_MOCK_POLICY_BINDINGS_CONNECTION_H

#include "google/cloud/iam/v3/policy_bindings_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace iam_v3_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `PolicyBindingsConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `PolicyBindingsClient`. To do so,
 * construct an object of type `PolicyBindingsClient` with an instance of this
 * class. Then use the Google Test framework functions to program the behavior
 * of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockPolicyBindingsConnection : public iam_v3::PolicyBindingsConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreatePolicyBinding(Matcher<google::iam::v3::CreatePolicyBindingRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::iam::v3::PolicyBinding>>,
              CreatePolicyBinding,
              (google::iam::v3::CreatePolicyBindingRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreatePolicyBinding(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, CreatePolicyBinding,
              (NoAwaitTag,
               google::iam::v3::CreatePolicyBindingRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreatePolicyBinding(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::iam::v3::PolicyBinding>>,
              CreatePolicyBinding,
              (google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(StatusOr<google::iam::v3::PolicyBinding>, GetPolicyBinding,
              (google::iam::v3::GetPolicyBindingRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdatePolicyBinding(Matcher<google::iam::v3::UpdatePolicyBindingRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::iam::v3::PolicyBinding>>,
              UpdatePolicyBinding,
              (google::iam::v3::UpdatePolicyBindingRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdatePolicyBinding(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, UpdatePolicyBinding,
              (NoAwaitTag,
               google::iam::v3::UpdatePolicyBindingRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdatePolicyBinding(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::iam::v3::PolicyBinding>>,
              UpdatePolicyBinding,
              (google::longrunning::Operation const& operation), (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeletePolicyBinding(Matcher<google::iam::v3::DeletePolicyBindingRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::iam::v3::OperationMetadata>>,
              DeletePolicyBinding,
              (google::iam::v3::DeletePolicyBindingRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeletePolicyBinding(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, DeletePolicyBinding,
              (NoAwaitTag,
               google::iam::v3::DeletePolicyBindingRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeletePolicyBinding(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::iam::v3::OperationMetadata>>,
              DeletePolicyBinding,
              (google::longrunning::Operation const& operation), (override));

  MOCK_METHOD((StreamRange<google::iam::v3::PolicyBinding>), ListPolicyBindings,
              (google::iam::v3::ListPolicyBindingsRequest request), (override));

  MOCK_METHOD((StreamRange<google::iam::v3::PolicyBinding>),
              SearchTargetPolicyBindings,
              (google::iam::v3::SearchTargetPolicyBindingsRequest request),
              (override));

  MOCK_METHOD(StatusOr<google::longrunning::Operation>, GetOperation,
              (google::longrunning::GetOperationRequest const& request),
              (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_MOCKS_MOCK_POLICY_BINDINGS_CONNECTION_H
