// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/principal_access_boundary_policies_service.proto

#include "google/cloud/iam/v3/principal_access_boundary_policies_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace iam_v3 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

PrincipalAccessBoundaryPoliciesClient::PrincipalAccessBoundaryPoliciesClient(
    std::shared_ptr<PrincipalAccessBoundaryPoliciesConnection> connection,
    Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
PrincipalAccessBoundaryPoliciesClient::
    ~PrincipalAccessBoundaryPoliciesClient() = default;

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesClient::CreatePrincipalAccessBoundaryPolicy(
    std::string const& parent,
    google::iam::v3::PrincipalAccessBoundaryPolicy const&
        principal_access_boundary_policy,
    std::string const& principal_access_boundary_policy_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest request;
  request.set_parent(parent);
  *request.mutable_principal_access_boundary_policy() =
      principal_access_boundary_policy;
  request.set_principal_access_boundary_policy_id(
      principal_access_boundary_policy_id);
  return connection_->CreatePrincipalAccessBoundaryPolicy(request);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesClient::CreatePrincipalAccessBoundaryPolicy(
    NoAwaitTag, std::string const& parent,
    google::iam::v3::PrincipalAccessBoundaryPolicy const&
        principal_access_boundary_policy,
    std::string const& principal_access_boundary_policy_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest request;
  request.set_parent(parent);
  *request.mutable_principal_access_boundary_policy() =
      principal_access_boundary_policy;
  request.set_principal_access_boundary_policy_id(
      principal_access_boundary_policy_id);
  return connection_->CreatePrincipalAccessBoundaryPolicy(NoAwaitTag{},
                                                          request);
}

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesClient::CreatePrincipalAccessBoundaryPolicy(
    google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePrincipalAccessBoundaryPolicy(request);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesClient::CreatePrincipalAccessBoundaryPolicy(
    NoAwaitTag,
    google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePrincipalAccessBoundaryPolicy(NoAwaitTag{},
                                                          request);
}

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesClient::CreatePrincipalAccessBoundaryPolicy(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePrincipalAccessBoundaryPolicy(operation);
}

StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>
PrincipalAccessBoundaryPoliciesClient::GetPrincipalAccessBoundaryPolicy(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::GetPrincipalAccessBoundaryPolicyRequest request;
  request.set_name(name);
  return connection_->GetPrincipalAccessBoundaryPolicy(request);
}

StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>
PrincipalAccessBoundaryPoliciesClient::GetPrincipalAccessBoundaryPolicy(
    google::iam::v3::GetPrincipalAccessBoundaryPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetPrincipalAccessBoundaryPolicy(request);
}

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesClient::UpdatePrincipalAccessBoundaryPolicy(
    google::iam::v3::PrincipalAccessBoundaryPolicy const&
        principal_access_boundary_policy,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest request;
  *request.mutable_principal_access_boundary_policy() =
      principal_access_boundary_policy;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdatePrincipalAccessBoundaryPolicy(request);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesClient::UpdatePrincipalAccessBoundaryPolicy(
    NoAwaitTag,
    google::iam::v3::PrincipalAccessBoundaryPolicy const&
        principal_access_boundary_policy,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest request;
  *request.mutable_principal_access_boundary_policy() =
      principal_access_boundary_policy;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdatePrincipalAccessBoundaryPolicy(NoAwaitTag{},
                                                          request);
}

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesClient::UpdatePrincipalAccessBoundaryPolicy(
    google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePrincipalAccessBoundaryPolicy(request);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesClient::UpdatePrincipalAccessBoundaryPolicy(
    NoAwaitTag,
    google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePrincipalAccessBoundaryPolicy(NoAwaitTag{},
                                                          request);
}

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesClient::UpdatePrincipalAccessBoundaryPolicy(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePrincipalAccessBoundaryPolicy(operation);
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PrincipalAccessBoundaryPoliciesClient::DeletePrincipalAccessBoundaryPolicy(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest request;
  request.set_name(name);
  return connection_->DeletePrincipalAccessBoundaryPolicy(request);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesClient::DeletePrincipalAccessBoundaryPolicy(
    NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest request;
  request.set_name(name);
  return connection_->DeletePrincipalAccessBoundaryPolicy(NoAwaitTag{},
                                                          request);
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PrincipalAccessBoundaryPoliciesClient::DeletePrincipalAccessBoundaryPolicy(
    google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePrincipalAccessBoundaryPolicy(request);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesClient::DeletePrincipalAccessBoundaryPolicy(
    NoAwaitTag,
    google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePrincipalAccessBoundaryPolicy(NoAwaitTag{},
                                                          request);
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PrincipalAccessBoundaryPoliciesClient::DeletePrincipalAccessBoundaryPolicy(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePrincipalAccessBoundaryPolicy(operation);
}

StreamRange<google::iam::v3::PrincipalAccessBoundaryPolicy>
PrincipalAccessBoundaryPoliciesClient::ListPrincipalAccessBoundaryPolicies(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::ListPrincipalAccessBoundaryPoliciesRequest request;
  request.set_parent(parent);
  return connection_->ListPrincipalAccessBoundaryPolicies(request);
}

StreamRange<google::iam::v3::PrincipalAccessBoundaryPolicy>
PrincipalAccessBoundaryPoliciesClient::ListPrincipalAccessBoundaryPolicies(
    google::iam::v3::ListPrincipalAccessBoundaryPoliciesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListPrincipalAccessBoundaryPolicies(std::move(request));
}

StreamRange<google::iam::v3::PolicyBinding>
PrincipalAccessBoundaryPoliciesClient::
    SearchPrincipalAccessBoundaryPolicyBindings(std::string const& name,
                                                Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::SearchPrincipalAccessBoundaryPolicyBindingsRequest request;
  request.set_name(name);
  return connection_->SearchPrincipalAccessBoundaryPolicyBindings(request);
}

StreamRange<google::iam::v3::PolicyBinding>
PrincipalAccessBoundaryPoliciesClient::
    SearchPrincipalAccessBoundaryPolicyBindings(
        google::iam::v3::SearchPrincipalAccessBoundaryPolicyBindingsRequest
            request,
        Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SearchPrincipalAccessBoundaryPolicyBindings(
      std::move(request));
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesClient::GetOperation(std::string const& name,
                                                    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3
}  // namespace cloud
}  // namespace google
