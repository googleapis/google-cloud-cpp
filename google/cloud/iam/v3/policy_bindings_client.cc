// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/policy_bindings_service.proto

#include "google/cloud/iam/v3/policy_bindings_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace iam_v3 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

PolicyBindingsClient::PolicyBindingsClient(
    std::shared_ptr<PolicyBindingsConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
PolicyBindingsClient::~PolicyBindingsClient() = default;

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsClient::CreatePolicyBinding(
    std::string const& parent,
    google::iam::v3::PolicyBinding const& policy_binding,
    std::string const& policy_binding_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::CreatePolicyBindingRequest request;
  request.set_parent(parent);
  *request.mutable_policy_binding() = policy_binding;
  request.set_policy_binding_id(policy_binding_id);
  return connection_->CreatePolicyBinding(request);
}

StatusOr<google::longrunning::Operation>
PolicyBindingsClient::CreatePolicyBinding(
    NoAwaitTag, std::string const& parent,
    google::iam::v3::PolicyBinding const& policy_binding,
    std::string const& policy_binding_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::CreatePolicyBindingRequest request;
  request.set_parent(parent);
  *request.mutable_policy_binding() = policy_binding;
  request.set_policy_binding_id(policy_binding_id);
  return connection_->CreatePolicyBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsClient::CreatePolicyBinding(
    google::iam::v3::CreatePolicyBindingRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePolicyBinding(request);
}

StatusOr<google::longrunning::Operation>
PolicyBindingsClient::CreatePolicyBinding(
    NoAwaitTag, google::iam::v3::CreatePolicyBindingRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePolicyBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsClient::CreatePolicyBinding(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreatePolicyBinding(operation);
}

StatusOr<google::iam::v3::PolicyBinding> PolicyBindingsClient::GetPolicyBinding(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::GetPolicyBindingRequest request;
  request.set_name(name);
  return connection_->GetPolicyBinding(request);
}

StatusOr<google::iam::v3::PolicyBinding> PolicyBindingsClient::GetPolicyBinding(
    google::iam::v3::GetPolicyBindingRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetPolicyBinding(request);
}

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsClient::UpdatePolicyBinding(
    google::iam::v3::PolicyBinding const& policy_binding,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::UpdatePolicyBindingRequest request;
  *request.mutable_policy_binding() = policy_binding;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdatePolicyBinding(request);
}

StatusOr<google::longrunning::Operation>
PolicyBindingsClient::UpdatePolicyBinding(
    NoAwaitTag, google::iam::v3::PolicyBinding const& policy_binding,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::UpdatePolicyBindingRequest request;
  *request.mutable_policy_binding() = policy_binding;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdatePolicyBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsClient::UpdatePolicyBinding(
    google::iam::v3::UpdatePolicyBindingRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePolicyBinding(request);
}

StatusOr<google::longrunning::Operation>
PolicyBindingsClient::UpdatePolicyBinding(
    NoAwaitTag, google::iam::v3::UpdatePolicyBindingRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePolicyBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsClient::UpdatePolicyBinding(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdatePolicyBinding(operation);
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PolicyBindingsClient::DeletePolicyBinding(std::string const& name,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::DeletePolicyBindingRequest request;
  request.set_name(name);
  return connection_->DeletePolicyBinding(request);
}

StatusOr<google::longrunning::Operation>
PolicyBindingsClient::DeletePolicyBinding(NoAwaitTag, std::string const& name,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::DeletePolicyBindingRequest request;
  request.set_name(name);
  return connection_->DeletePolicyBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PolicyBindingsClient::DeletePolicyBinding(
    google::iam::v3::DeletePolicyBindingRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePolicyBinding(request);
}

StatusOr<google::longrunning::Operation>
PolicyBindingsClient::DeletePolicyBinding(
    NoAwaitTag, google::iam::v3::DeletePolicyBindingRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePolicyBinding(NoAwaitTag{}, request);
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PolicyBindingsClient::DeletePolicyBinding(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeletePolicyBinding(operation);
}

StreamRange<google::iam::v3::PolicyBinding>
PolicyBindingsClient::ListPolicyBindings(std::string const& parent,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::ListPolicyBindingsRequest request;
  request.set_parent(parent);
  return connection_->ListPolicyBindings(request);
}

StreamRange<google::iam::v3::PolicyBinding>
PolicyBindingsClient::ListPolicyBindings(
    google::iam::v3::ListPolicyBindingsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListPolicyBindings(std::move(request));
}

StreamRange<google::iam::v3::PolicyBinding>
PolicyBindingsClient::SearchTargetPolicyBindings(std::string const& parent,
                                                 std::string const& target,
                                                 Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::iam::v3::SearchTargetPolicyBindingsRequest request;
  request.set_parent(parent);
  request.set_target(target);
  return connection_->SearchTargetPolicyBindings(request);
}

StreamRange<google::iam::v3::PolicyBinding>
PolicyBindingsClient::SearchTargetPolicyBindings(
    google::iam::v3::SearchTargetPolicyBindingsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SearchTargetPolicyBindings(std::move(request));
}

StatusOr<google::longrunning::Operation> PolicyBindingsClient::GetOperation(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation> PolicyBindingsClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3
}  // namespace cloud
}  // namespace google
