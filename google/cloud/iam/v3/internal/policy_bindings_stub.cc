// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/policy_bindings_service.proto

#include "google/cloud/iam/v3/internal/policy_bindings_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/iam/v3/policy_bindings_service.grpc.pb.h>
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace iam_v3_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

PolicyBindingsStub::~PolicyBindingsStub() = default;

future<StatusOr<google::longrunning::Operation>>
DefaultPolicyBindingsStub::AsyncCreatePolicyBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::iam::v3::CreatePolicyBindingRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::iam::v3::CreatePolicyBindingRequest,
                                    google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::iam::v3::CreatePolicyBindingRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreatePolicyBinding(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultPolicyBindingsStub::CreatePolicyBinding(
    grpc::ClientContext& context, Options,
    google::iam::v3::CreatePolicyBindingRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreatePolicyBinding(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v3::PolicyBinding>
DefaultPolicyBindingsStub::GetPolicyBinding(
    grpc::ClientContext& context, Options const&,
    google::iam::v3::GetPolicyBindingRequest const& request) {
  google::iam::v3::PolicyBinding response;
  auto status = grpc_stub_->GetPolicyBinding(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultPolicyBindingsStub::AsyncUpdatePolicyBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::iam::v3::UpdatePolicyBindingRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::iam::v3::UpdatePolicyBindingRequest,
                                    google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::iam::v3::UpdatePolicyBindingRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdatePolicyBinding(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultPolicyBindingsStub::UpdatePolicyBinding(
    grpc::ClientContext& context, Options,
    google::iam::v3::UpdatePolicyBindingRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdatePolicyBinding(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultPolicyBindingsStub::AsyncDeletePolicyBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::iam::v3::DeletePolicyBindingRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::iam::v3::DeletePolicyBindingRequest,
                                    google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::iam::v3::DeletePolicyBindingRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeletePolicyBinding(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultPolicyBindingsStub::DeletePolicyBinding(
    grpc::ClientContext& context, Options,
    google::iam::v3::DeletePolicyBindingRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeletePolicyBinding(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v3::ListPolicyBindingsResponse>
DefaultPolicyBindingsStub::ListPolicyBindings(
    grpc::ClientContext& context, Options const&,
    google::iam::v3::ListPolicyBindingsRequest const& request) {
  google::iam::v3::ListPolicyBindingsResponse response;
  auto status = grpc_stub_->ListPolicyBindings(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v3::SearchTargetPolicyBindingsResponse>
DefaultPolicyBindingsStub::SearchTargetPolicyBindings(
    grpc::ClientContext& context, Options const&,
    google::iam::v3::SearchTargetPolicyBindingsRequest const& request) {
  google::iam::v3::SearchTargetPolicyBindingsResponse response;
  auto status =
      grpc_stub_->SearchTargetPolicyBindings(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::Operation>
DefaultPolicyBindingsStub::GetOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::GetOperationRequest const& request) {
  google::longrunning::Operation response;
  auto status = operations_stub_->GetOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultPolicyBindingsStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    // NOLINTNEXTLINE(performance-unnecessary-value-param)
    google::cloud::internal::ImmutableOptions,
    google::longrunning::GetOperationRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::longrunning::GetOperationRequest,
                                    google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::longrunning::GetOperationRequest const& request,
             grpc::CompletionQueue* cq) {
        return operations_stub_->AsyncGetOperation(context, request, cq);
      },
      request, std::move(context));
}

future<Status> DefaultPolicyBindingsStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    // NOLINTNEXTLINE(performance-unnecessary-value-param)
    google::cloud::internal::ImmutableOptions,
    google::longrunning::CancelOperationRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::longrunning::CancelOperationRequest,
                                    google::protobuf::Empty>(
             cq,
             [this](grpc::ClientContext* context,
                    google::longrunning::CancelOperationRequest const& request,
                    grpc::CompletionQueue* cq) {
               return operations_stub_->AsyncCancelOperation(context, request,
                                                             cq);
             },
             request, std::move(context))
      .then([](future<StatusOr<google::protobuf::Empty>> f) {
        return f.get().status();
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3_internal
}  // namespace cloud
}  // namespace google
