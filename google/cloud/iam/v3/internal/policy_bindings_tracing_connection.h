// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/policy_bindings_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_INTERNAL_POLICY_BINDINGS_TRACING_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_INTERNAL_POLICY_BINDINGS_TRACING_CONNECTION_H

#include "google/cloud/iam/v3/policy_bindings_connection.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace iam_v3_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

class PolicyBindingsTracingConnection
    : public iam_v3::PolicyBindingsConnection {
 public:
  ~PolicyBindingsTracingConnection() override = default;

  explicit PolicyBindingsTracingConnection(
      std::shared_ptr<iam_v3::PolicyBindingsConnection> child);

  Options options() override { return child_->options(); }

  future<StatusOr<google::iam::v3::PolicyBinding>> CreatePolicyBinding(
      google::iam::v3::CreatePolicyBindingRequest const& request) override;

  StatusOr<google::longrunning::Operation> CreatePolicyBinding(
      NoAwaitTag,
      google::iam::v3::CreatePolicyBindingRequest const& request) override;

  future<StatusOr<google::iam::v3::PolicyBinding>> CreatePolicyBinding(
      google::longrunning::Operation const& operation) override;

  StatusOr<google::iam::v3::PolicyBinding> GetPolicyBinding(
      google::iam::v3::GetPolicyBindingRequest const& request) override;

  future<StatusOr<google::iam::v3::PolicyBinding>> UpdatePolicyBinding(
      google::iam::v3::UpdatePolicyBindingRequest const& request) override;

  StatusOr<google::longrunning::Operation> UpdatePolicyBinding(
      NoAwaitTag,
      google::iam::v3::UpdatePolicyBindingRequest const& request) override;

  future<StatusOr<google::iam::v3::PolicyBinding>> UpdatePolicyBinding(
      google::longrunning::Operation const& operation) override;

  future<StatusOr<google::iam::v3::OperationMetadata>> DeletePolicyBinding(
      google::iam::v3::DeletePolicyBindingRequest const& request) override;

  StatusOr<google::longrunning::Operation> DeletePolicyBinding(
      NoAwaitTag,
      google::iam::v3::DeletePolicyBindingRequest const& request) override;

  future<StatusOr<google::iam::v3::OperationMetadata>> DeletePolicyBinding(
      google::longrunning::Operation const& operation) override;

  StreamRange<google::iam::v3::PolicyBinding> ListPolicyBindings(
      google::iam::v3::ListPolicyBindingsRequest request) override;

  StreamRange<google::iam::v3::PolicyBinding> SearchTargetPolicyBindings(
      google::iam::v3::SearchTargetPolicyBindingsRequest request) override;

  StatusOr<google::longrunning::Operation> GetOperation(
      google::longrunning::GetOperationRequest const& request) override;

 private:
  std::shared_ptr<iam_v3::PolicyBindingsConnection> child_;
};

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

/**
 * Conditionally applies the tracing decorator to the given connection.
 *
 * The connection is only decorated if tracing is enabled (as determined by the
 * connection's options).
 */
std::shared_ptr<iam_v3::PolicyBindingsConnection>
MakePolicyBindingsTracingConnection(
    std::shared_ptr<iam_v3::PolicyBindingsConnection> conn);

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_INTERNAL_POLICY_BINDINGS_TRACING_CONNECTION_H
