// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/principal_access_boundary_policies_service.proto

#include "google/cloud/iam/v3/internal/principal_access_boundary_policies_logging_decorator.h"
#include "google/cloud/internal/log_wrapper.h"
#include "google/cloud/status_or.h"
#include <google/iam/v3/principal_access_boundary_policies_service.grpc.pb.h>
#include <memory>
#include <set>
#include <string>
#include <utility>

namespace google {
namespace cloud {
namespace iam_v3_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

PrincipalAccessBoundaryPoliciesLogging::PrincipalAccessBoundaryPoliciesLogging(
    std::shared_ptr<PrincipalAccessBoundaryPoliciesStub> child,
    TracingOptions tracing_options, std::set<std::string> const&)
    : child_(std::move(child)), tracing_options_(std::move(tracing_options)) {}

future<StatusOr<google::longrunning::Operation>>
PrincipalAccessBoundaryPoliciesLogging::
    AsyncCreatePrincipalAccessBoundaryPolicy(
        google::cloud::CompletionQueue& cq,
        std::shared_ptr<grpc::ClientContext> context,
        google::cloud::internal::ImmutableOptions options,
        google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
            request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::cloud::internal::ImmutableOptions options,
             google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
                 request) {
        return child_->AsyncCreatePrincipalAccessBoundaryPolicy(
            cq, std::move(context), std::move(options), request);
      },
      cq, std::move(context), std::move(options), request, __func__,
      tracing_options_);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesLogging::CreatePrincipalAccessBoundaryPolicy(
    grpc::ClientContext& context, Options options,
    google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
                 request) {
        return child_->CreatePrincipalAccessBoundaryPolicy(context, options,
                                                           request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>
PrincipalAccessBoundaryPoliciesLogging::GetPrincipalAccessBoundaryPolicy(
    grpc::ClientContext& context, Options const& options,
    google::iam::v3::GetPrincipalAccessBoundaryPolicyRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::iam::v3::GetPrincipalAccessBoundaryPolicyRequest const&
                 request) {
        return child_->GetPrincipalAccessBoundaryPolicy(context, options,
                                                        request);
      },
      context, options, request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
PrincipalAccessBoundaryPoliciesLogging::
    AsyncUpdatePrincipalAccessBoundaryPolicy(
        google::cloud::CompletionQueue& cq,
        std::shared_ptr<grpc::ClientContext> context,
        google::cloud::internal::ImmutableOptions options,
        google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
            request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::cloud::internal::ImmutableOptions options,
             google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
                 request) {
        return child_->AsyncUpdatePrincipalAccessBoundaryPolicy(
            cq, std::move(context), std::move(options), request);
      },
      cq, std::move(context), std::move(options), request, __func__,
      tracing_options_);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesLogging::UpdatePrincipalAccessBoundaryPolicy(
    grpc::ClientContext& context, Options options,
    google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
                 request) {
        return child_->UpdatePrincipalAccessBoundaryPolicy(context, options,
                                                           request);
      },
      context, options, request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
PrincipalAccessBoundaryPoliciesLogging::
    AsyncDeletePrincipalAccessBoundaryPolicy(
        google::cloud::CompletionQueue& cq,
        std::shared_ptr<grpc::ClientContext> context,
        google::cloud::internal::ImmutableOptions options,
        google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
            request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::cloud::internal::ImmutableOptions options,
             google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
                 request) {
        return child_->AsyncDeletePrincipalAccessBoundaryPolicy(
            cq, std::move(context), std::move(options), request);
      },
      cq, std::move(context), std::move(options), request, __func__,
      tracing_options_);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesLogging::DeletePrincipalAccessBoundaryPolicy(
    grpc::ClientContext& context, Options options,
    google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
                 request) {
        return child_->DeletePrincipalAccessBoundaryPolicy(context, options,
                                                           request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::iam::v3::ListPrincipalAccessBoundaryPoliciesResponse>
PrincipalAccessBoundaryPoliciesLogging::ListPrincipalAccessBoundaryPolicies(
    grpc::ClientContext& context, Options const& options,
    google::iam::v3::ListPrincipalAccessBoundaryPoliciesRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::iam::v3::ListPrincipalAccessBoundaryPoliciesRequest const&
                 request) {
        return child_->ListPrincipalAccessBoundaryPolicies(context, options,
                                                           request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::iam::v3::SearchPrincipalAccessBoundaryPolicyBindingsResponse>
PrincipalAccessBoundaryPoliciesLogging::
    SearchPrincipalAccessBoundaryPolicyBindings(
        grpc::ClientContext& context, Options const& options,
        google::iam::v3::
            SearchPrincipalAccessBoundaryPolicyBindingsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::iam::v3::
                 SearchPrincipalAccessBoundaryPolicyBindingsRequest const&
                     request) {
        return child_->SearchPrincipalAccessBoundaryPolicyBindings(
            context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesLogging::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::GetOperationRequest const& request) {
        return child_->GetOperation(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
PrincipalAccessBoundaryPoliciesLogging::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::cloud::internal::ImmutableOptions options,
             google::longrunning::GetOperationRequest const& request) {
        return child_->AsyncGetOperation(cq, std::move(context),
                                         std::move(options), request);
      },
      cq, std::move(context), std::move(options), request, __func__,
      tracing_options_);
}

future<Status> PrincipalAccessBoundaryPoliciesLogging::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::cloud::internal::ImmutableOptions options,
             google::longrunning::CancelOperationRequest const& request) {
        return child_->AsyncCancelOperation(cq, std::move(context),
                                            std::move(options), request);
      },
      cq, std::move(context), std::move(options), request, __func__,
      tracing_options_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3_internal
}  // namespace cloud
}  // namespace google
