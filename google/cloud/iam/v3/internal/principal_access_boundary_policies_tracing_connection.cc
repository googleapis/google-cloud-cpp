// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/principal_access_boundary_policies_service.proto

#include "google/cloud/iam/v3/internal/principal_access_boundary_policies_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace iam_v3_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

PrincipalAccessBoundaryPoliciesTracingConnection::
    PrincipalAccessBoundaryPoliciesTracingConnection(
        std::shared_ptr<iam_v3::PrincipalAccessBoundaryPoliciesConnection>
            child)
    : child_(std::move(child)) {}

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesTracingConnection::
    CreatePrincipalAccessBoundaryPolicy(
        google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
            request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "CreatePrincipalAccessBoundaryPolicy");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->CreatePrincipalAccessBoundaryPolicy(request));
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesTracingConnection::
    CreatePrincipalAccessBoundaryPolicy(
        NoAwaitTag,
        google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
            request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "CreatePrincipalAccessBoundaryPolicy");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span, child_->CreatePrincipalAccessBoundaryPolicy(
                                      NoAwaitTag{}, request));
}

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesTracingConnection::
    CreatePrincipalAccessBoundaryPolicy(
        google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "CreatePrincipalAccessBoundaryPolicy");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->CreatePrincipalAccessBoundaryPolicy(operation));
}

StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>
PrincipalAccessBoundaryPoliciesTracingConnection::
    GetPrincipalAccessBoundaryPolicy(
        google::iam::v3::GetPrincipalAccessBoundaryPolicyRequest const&
            request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "GetPrincipalAccessBoundaryPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span,
                           child_->GetPrincipalAccessBoundaryPolicy(request));
}

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesTracingConnection::
    UpdatePrincipalAccessBoundaryPolicy(
        google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
            request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "UpdatePrincipalAccessBoundaryPolicy");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->UpdatePrincipalAccessBoundaryPolicy(request));
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesTracingConnection::
    UpdatePrincipalAccessBoundaryPolicy(
        NoAwaitTag,
        google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
            request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "UpdatePrincipalAccessBoundaryPolicy");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span, child_->UpdatePrincipalAccessBoundaryPolicy(
                                      NoAwaitTag{}, request));
}

future<StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>>
PrincipalAccessBoundaryPoliciesTracingConnection::
    UpdatePrincipalAccessBoundaryPolicy(
        google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "UpdatePrincipalAccessBoundaryPolicy");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->UpdatePrincipalAccessBoundaryPolicy(operation));
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PrincipalAccessBoundaryPoliciesTracingConnection::
    DeletePrincipalAccessBoundaryPolicy(
        google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
            request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "DeletePrincipalAccessBoundaryPolicy");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->DeletePrincipalAccessBoundaryPolicy(request));
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesTracingConnection::
    DeletePrincipalAccessBoundaryPolicy(
        NoAwaitTag,
        google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
            request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "DeletePrincipalAccessBoundaryPolicy");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span, child_->DeletePrincipalAccessBoundaryPolicy(
                                      NoAwaitTag{}, request));
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PrincipalAccessBoundaryPoliciesTracingConnection::
    DeletePrincipalAccessBoundaryPolicy(
        google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "DeletePrincipalAccessBoundaryPolicy");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->DeletePrincipalAccessBoundaryPolicy(operation));
}

StreamRange<google::iam::v3::PrincipalAccessBoundaryPolicy>
PrincipalAccessBoundaryPoliciesTracingConnection::
    ListPrincipalAccessBoundaryPolicies(
        google::iam::v3::ListPrincipalAccessBoundaryPoliciesRequest request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "ListPrincipalAccessBoundaryPolicies");
  internal::OTelScope scope(span);
  auto sr = child_->ListPrincipalAccessBoundaryPolicies(std::move(request));
  return internal::MakeTracedStreamRange<
      google::iam::v3::PrincipalAccessBoundaryPolicy>(std::move(span),
                                                      std::move(sr));
}

StreamRange<google::iam::v3::PolicyBinding>
PrincipalAccessBoundaryPoliciesTracingConnection::
    SearchPrincipalAccessBoundaryPolicyBindings(
        google::iam::v3::SearchPrincipalAccessBoundaryPolicyBindingsRequest
            request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::"
      "SearchPrincipalAccessBoundaryPolicyBindings");
  internal::OTelScope scope(span);
  auto sr =
      child_->SearchPrincipalAccessBoundaryPolicyBindings(std::move(request));
  return internal::MakeTracedStreamRange<google::iam::v3::PolicyBinding>(
      std::move(span), std::move(sr));
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesTracingConnection::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "iam_v3::PrincipalAccessBoundaryPoliciesConnection::GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetOperation(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<iam_v3::PrincipalAccessBoundaryPoliciesConnection>
MakePrincipalAccessBoundaryPoliciesTracingConnection(
    std::shared_ptr<iam_v3::PrincipalAccessBoundaryPoliciesConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<PrincipalAccessBoundaryPoliciesTracingConnection>(
        std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3_internal
}  // namespace cloud
}  // namespace google
