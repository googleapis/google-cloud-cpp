// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/principal_access_boundary_policies_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_INTERNAL_PRINCIPAL_ACCESS_BOUNDARY_POLICIES_TRACING_STUB_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_INTERNAL_PRINCIPAL_ACCESS_BOUNDARY_POLICIES_TRACING_STUB_H

#include "google/cloud/iam/v3/internal/principal_access_boundary_policies_stub.h"
#include "google/cloud/internal/trace_propagator.h"
#include "google/cloud/options.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace iam_v3_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

class PrincipalAccessBoundaryPoliciesTracingStub
    : public PrincipalAccessBoundaryPoliciesStub {
 public:
  ~PrincipalAccessBoundaryPoliciesTracingStub() override = default;

  explicit PrincipalAccessBoundaryPoliciesTracingStub(
      std::shared_ptr<PrincipalAccessBoundaryPoliciesStub> child);

  future<StatusOr<google::longrunning::Operation>>
  AsyncCreatePrincipalAccessBoundaryPolicy(
      google::cloud::CompletionQueue& cq,
      std::shared_ptr<grpc::ClientContext> context,
      google::cloud::internal::ImmutableOptions options,
      google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
          request) override;

  StatusOr<google::longrunning::Operation> CreatePrincipalAccessBoundaryPolicy(
      grpc::ClientContext& context, Options options,
      google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
          request) override;

  StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>
  GetPrincipalAccessBoundaryPolicy(
      grpc::ClientContext& context, Options const& options,
      google::iam::v3::GetPrincipalAccessBoundaryPolicyRequest const& request)
      override;

  future<StatusOr<google::longrunning::Operation>>
  AsyncUpdatePrincipalAccessBoundaryPolicy(
      google::cloud::CompletionQueue& cq,
      std::shared_ptr<grpc::ClientContext> context,
      google::cloud::internal::ImmutableOptions options,
      google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
          request) override;

  StatusOr<google::longrunning::Operation> UpdatePrincipalAccessBoundaryPolicy(
      grpc::ClientContext& context, Options options,
      google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
          request) override;

  future<StatusOr<google::longrunning::Operation>>
  AsyncDeletePrincipalAccessBoundaryPolicy(
      google::cloud::CompletionQueue& cq,
      std::shared_ptr<grpc::ClientContext> context,
      google::cloud::internal::ImmutableOptions options,
      google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
          request) override;

  StatusOr<google::longrunning::Operation> DeletePrincipalAccessBoundaryPolicy(
      grpc::ClientContext& context, Options options,
      google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
          request) override;

  StatusOr<google::iam::v3::ListPrincipalAccessBoundaryPoliciesResponse>
  ListPrincipalAccessBoundaryPolicies(
      grpc::ClientContext& context, Options const& options,
      google::iam::v3::ListPrincipalAccessBoundaryPoliciesRequest const&
          request) override;

  StatusOr<google::iam::v3::SearchPrincipalAccessBoundaryPolicyBindingsResponse>
  SearchPrincipalAccessBoundaryPolicyBindings(
      grpc::ClientContext& context, Options const& options,
      google::iam::v3::SearchPrincipalAccessBoundaryPolicyBindingsRequest const&
          request) override;

  StatusOr<google::longrunning::Operation> GetOperation(
      grpc::ClientContext& context, Options const& options,
      google::longrunning::GetOperationRequest const& request) override;

  future<StatusOr<google::longrunning::Operation>> AsyncGetOperation(
      google::cloud::CompletionQueue& cq,
      std::shared_ptr<grpc::ClientContext> context,
      google::cloud::internal::ImmutableOptions options,
      google::longrunning::GetOperationRequest const& request) override;

  future<Status> AsyncCancelOperation(
      google::cloud::CompletionQueue& cq,
      std::shared_ptr<grpc::ClientContext> context,
      google::cloud::internal::ImmutableOptions options,
      google::longrunning::CancelOperationRequest const& request) override;

 private:
  std::shared_ptr<PrincipalAccessBoundaryPoliciesStub> child_;
  std::shared_ptr<opentelemetry::context::propagation::TextMapPropagator>
      propagator_;
};

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

/**
 * Applies the tracing decorator to the given stub.
 *
 * The stub is only decorated if the library has been compiled with
 * OpenTelemetry.
 */
std::shared_ptr<PrincipalAccessBoundaryPoliciesStub>
MakePrincipalAccessBoundaryPoliciesTracingStub(
    std::shared_ptr<PrincipalAccessBoundaryPoliciesStub> stub);

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_INTERNAL_PRINCIPAL_ACCESS_BOUNDARY_POLICIES_TRACING_STUB_H
