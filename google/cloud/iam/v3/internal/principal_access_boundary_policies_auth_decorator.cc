// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/principal_access_boundary_policies_service.proto

#include "google/cloud/iam/v3/internal/principal_access_boundary_policies_auth_decorator.h"
#include <google/iam/v3/principal_access_boundary_policies_service.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace iam_v3_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

PrincipalAccessBoundaryPoliciesAuth::PrincipalAccessBoundaryPoliciesAuth(
    std::shared_ptr<google::cloud::internal::GrpcAuthenticationStrategy> auth,
    std::shared_ptr<PrincipalAccessBoundaryPoliciesStub> child)
    : auth_(std::move(auth)), child_(std::move(child)) {}

future<StatusOr<google::longrunning::Operation>>
PrincipalAccessBoundaryPoliciesAuth::AsyncCreatePrincipalAccessBoundaryPolicy(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
        request) {
  using ReturnType = StatusOr<google::longrunning::Operation>;
  return auth_->AsyncConfigureContext(std::move(context))
      .then([cq, child = child_, options = std::move(options),
             request](future<StatusOr<std::shared_ptr<grpc::ClientContext>>>
                          f) mutable {
        auto context = f.get();
        if (!context) {
          return make_ready_future(ReturnType(std::move(context).status()));
        }
        return child->AsyncCreatePrincipalAccessBoundaryPolicy(
            cq, *std::move(context), std::move(options), request);
      });
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesAuth::CreatePrincipalAccessBoundaryPolicy(
    grpc::ClientContext& context, Options options,
    google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CreatePrincipalAccessBoundaryPolicy(context, options, request);
}

StatusOr<google::iam::v3::PrincipalAccessBoundaryPolicy>
PrincipalAccessBoundaryPoliciesAuth::GetPrincipalAccessBoundaryPolicy(
    grpc::ClientContext& context, Options const& options,
    google::iam::v3::GetPrincipalAccessBoundaryPolicyRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetPrincipalAccessBoundaryPolicy(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
PrincipalAccessBoundaryPoliciesAuth::AsyncUpdatePrincipalAccessBoundaryPolicy(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
        request) {
  using ReturnType = StatusOr<google::longrunning::Operation>;
  return auth_->AsyncConfigureContext(std::move(context))
      .then([cq, child = child_, options = std::move(options),
             request](future<StatusOr<std::shared_ptr<grpc::ClientContext>>>
                          f) mutable {
        auto context = f.get();
        if (!context) {
          return make_ready_future(ReturnType(std::move(context).status()));
        }
        return child->AsyncUpdatePrincipalAccessBoundaryPolicy(
            cq, *std::move(context), std::move(options), request);
      });
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesAuth::UpdatePrincipalAccessBoundaryPolicy(
    grpc::ClientContext& context, Options options,
    google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->UpdatePrincipalAccessBoundaryPolicy(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
PrincipalAccessBoundaryPoliciesAuth::AsyncDeletePrincipalAccessBoundaryPolicy(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
        request) {
  using ReturnType = StatusOr<google::longrunning::Operation>;
  return auth_->AsyncConfigureContext(std::move(context))
      .then([cq, child = child_, options = std::move(options),
             request](future<StatusOr<std::shared_ptr<grpc::ClientContext>>>
                          f) mutable {
        auto context = f.get();
        if (!context) {
          return make_ready_future(ReturnType(std::move(context).status()));
        }
        return child->AsyncDeletePrincipalAccessBoundaryPolicy(
            cq, *std::move(context), std::move(options), request);
      });
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesAuth::DeletePrincipalAccessBoundaryPolicy(
    grpc::ClientContext& context, Options options,
    google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeletePrincipalAccessBoundaryPolicy(context, options, request);
}

StatusOr<google::iam::v3::ListPrincipalAccessBoundaryPoliciesResponse>
PrincipalAccessBoundaryPoliciesAuth::ListPrincipalAccessBoundaryPolicies(
    grpc::ClientContext& context, Options const& options,
    google::iam::v3::ListPrincipalAccessBoundaryPoliciesRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListPrincipalAccessBoundaryPolicies(context, options, request);
}

StatusOr<google::iam::v3::SearchPrincipalAccessBoundaryPolicyBindingsResponse>
PrincipalAccessBoundaryPoliciesAuth::
    SearchPrincipalAccessBoundaryPolicyBindings(
        grpc::ClientContext& context, Options const& options,
        google::iam::v3::
            SearchPrincipalAccessBoundaryPolicyBindingsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->SearchPrincipalAccessBoundaryPolicyBindings(context, options,
                                                             request);
}

StatusOr<google::longrunning::Operation>
PrincipalAccessBoundaryPoliciesAuth::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetOperation(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
PrincipalAccessBoundaryPoliciesAuth::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  using ReturnType = StatusOr<google::longrunning::Operation>;
  return auth_->AsyncConfigureContext(std::move(context))
      .then([cq, child = child_, options = std::move(options),
             request](future<StatusOr<std::shared_ptr<grpc::ClientContext>>>
                          f) mutable {
        auto context = f.get();
        if (!context) {
          return make_ready_future(ReturnType(std::move(context).status()));
        }
        return child->AsyncGetOperation(cq, *std::move(context),
                                        std::move(options), request);
      });
}

future<Status> PrincipalAccessBoundaryPoliciesAuth::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  return auth_->AsyncConfigureContext(std::move(context))
      .then([cq, child = child_, options = std::move(options),
             request](future<StatusOr<std::shared_ptr<grpc::ClientContext>>>
                          f) mutable {
        auto context = f.get();
        if (!context) return make_ready_future(std::move(context).status());
        return child->AsyncCancelOperation(cq, *std::move(context),
                                           std::move(options), request);
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3_internal
}  // namespace cloud
}  // namespace google
