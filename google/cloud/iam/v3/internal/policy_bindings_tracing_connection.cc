// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/policy_bindings_service.proto

#include "google/cloud/iam/v3/internal/policy_bindings_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace iam_v3_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

PolicyBindingsTracingConnection::PolicyBindingsTracingConnection(
    std::shared_ptr<iam_v3::PolicyBindingsConnection> child)
    : child_(std::move(child)) {}

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsTracingConnection::CreatePolicyBinding(
    google::iam::v3::CreatePolicyBindingRequest const& request) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::CreatePolicyBinding");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreatePolicyBinding(request));
}

StatusOr<google::longrunning::Operation>
PolicyBindingsTracingConnection::CreatePolicyBinding(
    NoAwaitTag, google::iam::v3::CreatePolicyBindingRequest const& request) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::CreatePolicyBinding");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span,
                           child_->CreatePolicyBinding(NoAwaitTag{}, request));
}

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsTracingConnection::CreatePolicyBinding(
    google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::CreatePolicyBinding");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreatePolicyBinding(operation));
}

StatusOr<google::iam::v3::PolicyBinding>
PolicyBindingsTracingConnection::GetPolicyBinding(
    google::iam::v3::GetPolicyBindingRequest const& request) {
  auto span =
      internal::MakeSpan("iam_v3::PolicyBindingsConnection::GetPolicyBinding");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetPolicyBinding(request));
}

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsTracingConnection::UpdatePolicyBinding(
    google::iam::v3::UpdatePolicyBindingRequest const& request) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::UpdatePolicyBinding");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->UpdatePolicyBinding(request));
}

StatusOr<google::longrunning::Operation>
PolicyBindingsTracingConnection::UpdatePolicyBinding(
    NoAwaitTag, google::iam::v3::UpdatePolicyBindingRequest const& request) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::UpdatePolicyBinding");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span,
                           child_->UpdatePolicyBinding(NoAwaitTag{}, request));
}

future<StatusOr<google::iam::v3::PolicyBinding>>
PolicyBindingsTracingConnection::UpdatePolicyBinding(
    google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::UpdatePolicyBinding");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->UpdatePolicyBinding(operation));
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PolicyBindingsTracingConnection::DeletePolicyBinding(
    google::iam::v3::DeletePolicyBindingRequest const& request) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::DeletePolicyBinding");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeletePolicyBinding(request));
}

StatusOr<google::longrunning::Operation>
PolicyBindingsTracingConnection::DeletePolicyBinding(
    NoAwaitTag, google::iam::v3::DeletePolicyBindingRequest const& request) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::DeletePolicyBinding");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span,
                           child_->DeletePolicyBinding(NoAwaitTag{}, request));
}

future<StatusOr<google::iam::v3::OperationMetadata>>
PolicyBindingsTracingConnection::DeletePolicyBinding(
    google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::DeletePolicyBinding");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeletePolicyBinding(operation));
}

StreamRange<google::iam::v3::PolicyBinding>
PolicyBindingsTracingConnection::ListPolicyBindings(
    google::iam::v3::ListPolicyBindingsRequest request) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::ListPolicyBindings");
  internal::OTelScope scope(span);
  auto sr = child_->ListPolicyBindings(std::move(request));
  return internal::MakeTracedStreamRange<google::iam::v3::PolicyBinding>(
      std::move(span), std::move(sr));
}

StreamRange<google::iam::v3::PolicyBinding>
PolicyBindingsTracingConnection::SearchTargetPolicyBindings(
    google::iam::v3::SearchTargetPolicyBindingsRequest request) {
  auto span = internal::MakeSpan(
      "iam_v3::PolicyBindingsConnection::SearchTargetPolicyBindings");
  internal::OTelScope scope(span);
  auto sr = child_->SearchTargetPolicyBindings(std::move(request));
  return internal::MakeTracedStreamRange<google::iam::v3::PolicyBinding>(
      std::move(span), std::move(sr));
}

StatusOr<google::longrunning::Operation>
PolicyBindingsTracingConnection::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpan("iam_v3::PolicyBindingsConnection::GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetOperation(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<iam_v3::PolicyBindingsConnection>
MakePolicyBindingsTracingConnection(
    std::shared_ptr<iam_v3::PolicyBindingsConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<PolicyBindingsTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3_internal
}  // namespace cloud
}  // namespace google
