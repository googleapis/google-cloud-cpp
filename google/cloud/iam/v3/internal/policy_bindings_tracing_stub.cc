// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/policy_bindings_service.proto

#include "google/cloud/iam/v3/internal/policy_bindings_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace iam_v3_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

PolicyBindingsTracingStub::PolicyBindingsTracingStub(
    std::shared_ptr<PolicyBindingsStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

future<StatusOr<google::longrunning::Operation>>
PolicyBindingsTracingStub::AsyncCreatePolicyBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::iam::v3::CreatePolicyBindingRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.iam.v3.PolicyBindings",
                                     "CreatePolicyBinding");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreatePolicyBinding(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
PolicyBindingsTracingStub::CreatePolicyBinding(
    grpc::ClientContext& context, Options options,
    google::iam::v3::CreatePolicyBindingRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.iam.v3.PolicyBindings",
                                     "CreatePolicyBinding");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreatePolicyBinding(context, options, request));
}

StatusOr<google::iam::v3::PolicyBinding>
PolicyBindingsTracingStub::GetPolicyBinding(
    grpc::ClientContext& context, Options const& options,
    google::iam::v3::GetPolicyBindingRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.iam.v3.PolicyBindings",
                                     "GetPolicyBinding");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetPolicyBinding(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
PolicyBindingsTracingStub::AsyncUpdatePolicyBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::iam::v3::UpdatePolicyBindingRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.iam.v3.PolicyBindings",
                                     "UpdatePolicyBinding");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdatePolicyBinding(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
PolicyBindingsTracingStub::UpdatePolicyBinding(
    grpc::ClientContext& context, Options options,
    google::iam::v3::UpdatePolicyBindingRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.iam.v3.PolicyBindings",
                                     "UpdatePolicyBinding");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdatePolicyBinding(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
PolicyBindingsTracingStub::AsyncDeletePolicyBinding(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::iam::v3::DeletePolicyBindingRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.iam.v3.PolicyBindings",
                                     "DeletePolicyBinding");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeletePolicyBinding(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
PolicyBindingsTracingStub::DeletePolicyBinding(
    grpc::ClientContext& context, Options options,
    google::iam::v3::DeletePolicyBindingRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.iam.v3.PolicyBindings",
                                     "DeletePolicyBinding");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeletePolicyBinding(context, options, request));
}

StatusOr<google::iam::v3::ListPolicyBindingsResponse>
PolicyBindingsTracingStub::ListPolicyBindings(
    grpc::ClientContext& context, Options const& options,
    google::iam::v3::ListPolicyBindingsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.iam.v3.PolicyBindings",
                                     "ListPolicyBindings");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListPolicyBindings(context, options, request));
}

StatusOr<google::iam::v3::SearchTargetPolicyBindingsResponse>
PolicyBindingsTracingStub::SearchTargetPolicyBindings(
    grpc::ClientContext& context, Options const& options,
    google::iam::v3::SearchTargetPolicyBindingsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.iam.v3.PolicyBindings",
                                     "SearchTargetPolicyBindings");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->SearchTargetPolicyBindings(context, options, request));
}

StatusOr<google::longrunning::Operation>
PolicyBindingsTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.iam.v3.PolicyBindings", "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
PolicyBindingsTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.longrunning.Operations", "GetOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGetOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<Status> PolicyBindingsTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.longrunning.Operations",
                                     "CancelOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCancelOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<PolicyBindingsStub> MakePolicyBindingsTracingStub(
    std::shared_ptr<PolicyBindingsStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<PolicyBindingsTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3_internal
}  // namespace cloud
}  // namespace google
