// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/policy_bindings_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_POLICY_BINDINGS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_POLICY_BINDINGS_CLIENT_H

#include "google/cloud/iam/v3/policy_bindings_connection.h"
#include "google/cloud/future.h"
#include "google/cloud/no_await_tag.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <map>
#include <memory>
#include <string>

namespace google {
namespace cloud {
namespace iam_v3 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// An interface for managing Identity and Access Management (IAM) policy
/// bindings.
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class PolicyBindingsClient {
 public:
  explicit PolicyBindingsClient(
      std::shared_ptr<PolicyBindingsConnection> connection, Options opts = {});
  ~PolicyBindingsClient();

  ///@{
  /// @name Copy and move support
  PolicyBindingsClient(PolicyBindingsClient const&) = default;
  PolicyBindingsClient& operator=(PolicyBindingsClient const&) = default;
  PolicyBindingsClient(PolicyBindingsClient&&) = default;
  PolicyBindingsClient& operator=(PolicyBindingsClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(PolicyBindingsClient const& a,
                         PolicyBindingsClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(PolicyBindingsClient const& a,
                         PolicyBindingsClient const& b) {
    return !(a == b);
  }
  ///@}

  // clang-format off
  ///
  /// Creates a policy binding and returns a long-running operation.
  /// Callers will need the IAM permissions on both the policy and target.
  /// Once the binding is created, the policy is applied to the target.
  ///
  /// @param parent  Required. The parent resource where this policy binding will be created.
  ///  The binding parent is the closest Resource Manager resource (Project,
  ///  Folder or Organization) to the binding target.
  ///  @n
  ///  Format:
  ///  @n
  ///  * `projects/{project_id}/locations/{location}`
  ///  * `projects/{project_number}/locations/{location}`
  ///  * `folders/{folder_id}/locations/{location}`
  ///  * `organizations/{organization_id}/locations/{location}`
  /// @param policy_binding  Required. The policy binding to create.
  /// @param policy_binding_id  Required. The ID to use for the policy binding, which will become the final
  ///  component of the policy binding's resource name.
  ///  @n
  ///  This value must start with a lowercase letter followed by up to 62
  ///  lowercase letters, numbers, hyphens, or dots. Pattern,
  ///  /[a-z][a-z0-9-\.]{2,62}/.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.iam.v3.PolicyBinding] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.CreatePolicyBindingRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L169}
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  ///
  // clang-format on
  future<StatusOr<google::iam::v3::PolicyBinding>> CreatePolicyBinding(
      std::string const& parent,
      google::iam::v3::PolicyBinding const& policy_binding,
      std::string const& policy_binding_id, Options opts = {});

  // clang-format off
  ///
  /// @copybrief CreatePolicyBinding
  ///
  /// Specifying the [`NoAwaitTag`] immediately returns the
  /// [`google::longrunning::Operation`] that corresponds to the Long Running
  /// Operation that has been started. No polling for operation status occurs.
  ///
  /// [`NoAwaitTag`]: @ref google::cloud::NoAwaitTag
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> CreatePolicyBinding(
      NoAwaitTag, std::string const& parent,
      google::iam::v3::PolicyBinding const& policy_binding,
      std::string const& policy_binding_id, Options opts = {});

  // clang-format off
  ///
  /// Creates a policy binding and returns a long-running operation.
  /// Callers will need the IAM permissions on both the policy and target.
  /// Once the binding is created, the policy is applied to the target.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.iam.v3.CreatePolicyBindingRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.iam.v3.PolicyBinding] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.CreatePolicyBindingRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L169}
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  ///
  // clang-format on
  future<StatusOr<google::iam::v3::PolicyBinding>> CreatePolicyBinding(
      google::iam::v3::CreatePolicyBindingRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// @copybrief CreatePolicyBinding
  ///
  /// Specifying the [`NoAwaitTag`] immediately returns the
  /// [`google::longrunning::Operation`] that corresponds to the Long Running
  /// Operation that has been started. No polling for operation status occurs.
  ///
  /// [`NoAwaitTag`]: @ref google::cloud::NoAwaitTag
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> CreatePolicyBinding(
      NoAwaitTag, google::iam::v3::CreatePolicyBindingRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// @copybrief CreatePolicyBinding
  ///
  /// This method accepts a `google::longrunning::Operation` that corresponds
  /// to a previously started Long Running Operation (LRO) and polls the status
  /// of the LRO in the background.
  ///
  // clang-format on
  future<StatusOr<google::iam::v3::PolicyBinding>> CreatePolicyBinding(
      google::longrunning::Operation const& operation, Options opts = {});

  // clang-format off
  ///
  /// Gets a policy binding.
  ///
  /// @param name  Required. The name of the policy binding to retrieve.
  ///  @n
  ///  Format:
  ///  @n
  ///  * `projects/{project_id}/locations/{location}/policyBindings/{policy_binding_id}`
  ///  * `projects/{project_number}/locations/{location}/policyBindings/{policy_binding_id}`
  ///  * `folders/{folder_id}/locations/{location}/policyBindings/{policy_binding_id}`
  ///  * `organizations/{organization_id}/locations/{location}/policyBindings/{policy_binding_id}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.iam.v3.PolicyBinding])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.GetPolicyBindingRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L204}
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  ///
  // clang-format on
  StatusOr<google::iam::v3::PolicyBinding> GetPolicyBinding(
      std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Gets a policy binding.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.iam.v3.GetPolicyBindingRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.iam.v3.PolicyBinding])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.GetPolicyBindingRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L204}
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  ///
  // clang-format on
  StatusOr<google::iam::v3::PolicyBinding> GetPolicyBinding(
      google::iam::v3::GetPolicyBindingRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Updates a policy binding and returns a long-running operation.
  /// Callers will need the IAM permissions on the policy and target in the
  /// binding to update, and the IAM permission to remove the existing policy
  /// from the binding. Target is immutable and cannot be updated. Once the
  /// binding is updated, the new policy is applied to the target.
  ///
  /// @param policy_binding  Required. The policy binding to update.
  ///  @n
  ///  The policy binding's `name` field is used to identify the policy binding to
  ///  update.
  /// @param update_mask  Optional. The list of fields to update
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.iam.v3.PolicyBinding] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  /// [google.iam.v3.UpdatePolicyBindingRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L222}
  ///
  // clang-format on
  future<StatusOr<google::iam::v3::PolicyBinding>> UpdatePolicyBinding(
      google::iam::v3::PolicyBinding const& policy_binding,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  // clang-format off
  ///
  /// @copybrief UpdatePolicyBinding
  ///
  /// Specifying the [`NoAwaitTag`] immediately returns the
  /// [`google::longrunning::Operation`] that corresponds to the Long Running
  /// Operation that has been started. No polling for operation status occurs.
  ///
  /// [`NoAwaitTag`]: @ref google::cloud::NoAwaitTag
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> UpdatePolicyBinding(
      NoAwaitTag, google::iam::v3::PolicyBinding const& policy_binding,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  // clang-format off
  ///
  /// Updates a policy binding and returns a long-running operation.
  /// Callers will need the IAM permissions on the policy and target in the
  /// binding to update, and the IAM permission to remove the existing policy
  /// from the binding. Target is immutable and cannot be updated. Once the
  /// binding is updated, the new policy is applied to the target.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.iam.v3.UpdatePolicyBindingRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.iam.v3.PolicyBinding] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  /// [google.iam.v3.UpdatePolicyBindingRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L222}
  ///
  // clang-format on
  future<StatusOr<google::iam::v3::PolicyBinding>> UpdatePolicyBinding(
      google::iam::v3::UpdatePolicyBindingRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// @copybrief UpdatePolicyBinding
  ///
  /// Specifying the [`NoAwaitTag`] immediately returns the
  /// [`google::longrunning::Operation`] that corresponds to the Long Running
  /// Operation that has been started. No polling for operation status occurs.
  ///
  /// [`NoAwaitTag`]: @ref google::cloud::NoAwaitTag
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> UpdatePolicyBinding(
      NoAwaitTag, google::iam::v3::UpdatePolicyBindingRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// @copybrief UpdatePolicyBinding
  ///
  /// This method accepts a `google::longrunning::Operation` that corresponds
  /// to a previously started Long Running Operation (LRO) and polls the status
  /// of the LRO in the background.
  ///
  // clang-format on
  future<StatusOr<google::iam::v3::PolicyBinding>> UpdatePolicyBinding(
      google::longrunning::Operation const& operation, Options opts = {});

  // clang-format off
  ///
  /// Deletes a policy binding and returns a long-running operation.
  /// Callers will need the IAM permissions on both the policy and target.
  /// Once the binding is deleted, the policy no longer applies to the target.
  ///
  /// @param name  Required. The name of the policy binding to delete.
  ///  @n
  ///  Format:
  ///  @n
  ///  * `projects/{project_id}/locations/{location}/policyBindings/{policy_binding_id}`
  ///  * `projects/{project_number}/locations/{location}/policyBindings/{policy_binding_id}`
  ///  * `folders/{folder_id}/locations/{location}/policyBindings/{policy_binding_id}`
  ///  * `organizations/{organization_id}/locations/{location}/policyBindings/{policy_binding_id}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.iam.v3.OperationMetadata] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.DeletePolicyBindingRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L239}
  /// [google.iam.v3.OperationMetadata]: @googleapis_reference_link{google/iam/v3/operation_metadata.proto#L29}
  ///
  // clang-format on
  future<StatusOr<google::iam::v3::OperationMetadata>> DeletePolicyBinding(
      std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// @copybrief DeletePolicyBinding
  ///
  /// Specifying the [`NoAwaitTag`] immediately returns the
  /// [`google::longrunning::Operation`] that corresponds to the Long Running
  /// Operation that has been started. No polling for operation status occurs.
  ///
  /// [`NoAwaitTag`]: @ref google::cloud::NoAwaitTag
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> DeletePolicyBinding(
      NoAwaitTag, std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Deletes a policy binding and returns a long-running operation.
  /// Callers will need the IAM permissions on both the policy and target.
  /// Once the binding is deleted, the policy no longer applies to the target.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.iam.v3.DeletePolicyBindingRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.iam.v3.OperationMetadata] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.DeletePolicyBindingRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L239}
  /// [google.iam.v3.OperationMetadata]: @googleapis_reference_link{google/iam/v3/operation_metadata.proto#L29}
  ///
  // clang-format on
  future<StatusOr<google::iam::v3::OperationMetadata>> DeletePolicyBinding(
      google::iam::v3::DeletePolicyBindingRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// @copybrief DeletePolicyBinding
  ///
  /// Specifying the [`NoAwaitTag`] immediately returns the
  /// [`google::longrunning::Operation`] that corresponds to the Long Running
  /// Operation that has been started. No polling for operation status occurs.
  ///
  /// [`NoAwaitTag`]: @ref google::cloud::NoAwaitTag
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> DeletePolicyBinding(
      NoAwaitTag, google::iam::v3::DeletePolicyBindingRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// @copybrief DeletePolicyBinding
  ///
  /// This method accepts a `google::longrunning::Operation` that corresponds
  /// to a previously started Long Running Operation (LRO) and polls the status
  /// of the LRO in the background.
  ///
  // clang-format on
  future<StatusOr<google::iam::v3::OperationMetadata>> DeletePolicyBinding(
      google::longrunning::Operation const& operation, Options opts = {});

  // clang-format off
  ///
  /// Lists policy bindings.
  ///
  /// @param parent  Required. The parent resource, which owns the collection of policy
  ///  bindings.
  ///  @n
  ///  Format:
  ///  @n
  ///  * `projects/{project_id}/locations/{location}`
  ///  * `projects/{project_number}/locations/{location}`
  ///  * `folders/{folder_id}/locations/{location}`
  ///  * `organizations/{organization_id}/locations/{location}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.iam.v3.PolicyBinding], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.ListPolicyBindingsRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L265}
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  ///
  // clang-format on
  StreamRange<google::iam::v3::PolicyBinding> ListPolicyBindings(
      std::string const& parent, Options opts = {});

  // clang-format off
  ///
  /// Lists policy bindings.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.iam.v3.ListPolicyBindingsRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.iam.v3.PolicyBinding], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.ListPolicyBindingsRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L265}
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  ///
  // clang-format on
  StreamRange<google::iam::v3::PolicyBinding> ListPolicyBindings(
      google::iam::v3::ListPolicyBindingsRequest request, Options opts = {});

  // clang-format off
  ///
  /// Search policy bindings by target. Returns all policy binding objects bound
  /// directly to target.
  ///
  /// @param parent  Required. The parent resource where this search will be performed. This
  ///  should be the nearest Resource Manager resource (project, folder, or
  ///  organization) to the target.
  ///  @n
  ///  Format:
  ///  @n
  ///  * `projects/{project_id}/locations/{location}`
  ///  * `projects/{project_number}/locations/{location}`
  ///  * `folders/{folder_id}/locations/{location}`
  ///  * `organizations/{organization_id}/locations/{location}`
  /// @param target  Required. The target resource, which is bound to the policy in the binding.
  ///  @n
  ///  Format:
  ///  @n
  ///  * `//iam.googleapis.com/locations/global/workforcePools/POOL_ID`
  ///  * `//iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID`
  ///  * `//iam.googleapis.com/locations/global/workspace/WORKSPACE_ID`
  ///  * `//cloudresourcemanager.googleapis.com/projects/{project_number}`
  ///  * `//cloudresourcemanager.googleapis.com/folders/{folder_id}`
  ///  * `//cloudresourcemanager.googleapis.com/organizations/{organization_id}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.iam.v3.PolicyBinding], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  /// [google.iam.v3.SearchTargetPolicyBindingsRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L323}
  ///
  // clang-format on
  StreamRange<google::iam::v3::PolicyBinding> SearchTargetPolicyBindings(
      std::string const& parent, std::string const& target, Options opts = {});

  // clang-format off
  ///
  /// Search policy bindings by target. Returns all policy binding objects bound
  /// directly to target.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.iam.v3.SearchTargetPolicyBindingsRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.iam.v3.PolicyBinding], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.iam.v3.PolicyBinding]: @googleapis_reference_link{google/iam/v3/policy_binding_resources.proto#L32}
  /// [google.iam.v3.SearchTargetPolicyBindingsRequest]: @googleapis_reference_link{google/iam/v3/policy_bindings_service.proto#L323}
  ///
  // clang-format on
  StreamRange<google::iam::v3::PolicyBinding> SearchTargetPolicyBindings(
      google::iam::v3::SearchTargetPolicyBindingsRequest request,
      Options opts = {});

  // clang-format off
  ///
  /// Gets the latest state of a long-running operation.  Clients can use this
  /// method to poll the operation result at intervals as recommended by the API
  /// service.
  ///
  /// @param name  The name of the operation resource.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.longrunning.Operation])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.GetOperationRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L160}
  /// [google.longrunning.Operation]: @googleapis_reference_link{google/longrunning/operations.proto#L121}
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> GetOperation(std::string const& name,
                                                        Options opts = {});

  // clang-format off
  ///
  /// Gets the latest state of a long-running operation.  Clients can use this
  /// method to poll the operation result at intervals as recommended by the API
  /// service.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.longrunning.GetOperationRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.longrunning.Operation])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.GetOperationRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L160}
  /// [google.longrunning.Operation]: @googleapis_reference_link{google/longrunning/operations.proto#L121}
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> GetOperation(
      google::longrunning::GetOperationRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<PolicyBindingsConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_POLICY_BINDINGS_CLIENT_H
