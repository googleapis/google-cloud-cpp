// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/principal_access_boundary_policies_service.proto

#include "google/cloud/iam/v3/principal_access_boundary_policies_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace iam_v3 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy::
    ~PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy() = default;

std::unique_ptr<PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy>
PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<
      PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy>(*this);
}

Idempotency PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy::
    CreatePrincipalAccessBoundaryPolicy(
        google::iam::v3::CreatePrincipalAccessBoundaryPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy::
    GetPrincipalAccessBoundaryPolicy(
        google::iam::v3::GetPrincipalAccessBoundaryPolicyRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy::
    UpdatePrincipalAccessBoundaryPolicy(
        google::iam::v3::UpdatePrincipalAccessBoundaryPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy::
    DeletePrincipalAccessBoundaryPolicy(
        google::iam::v3::DeletePrincipalAccessBoundaryPolicyRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy::
    ListPrincipalAccessBoundaryPolicies(
        google::iam::v3::
            ListPrincipalAccessBoundaryPoliciesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy::
    SearchPrincipalAccessBoundaryPolicyBindings(
        google::iam::v3::
            SearchPrincipalAccessBoundaryPolicyBindingsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency
PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Idempotency::kIdempotent;
}

std::unique_ptr<PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy>
MakeDefaultPrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy() {
  return std::make_unique<
      PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3
}  // namespace cloud
}  // namespace google
