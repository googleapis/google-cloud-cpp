// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v3/principal_access_boundary_policies_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_PRINCIPAL_ACCESS_BOUNDARY_POLICIES_OPTIONS_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_PRINCIPAL_ACCESS_BOUNDARY_POLICIES_OPTIONS_H

#include "google/cloud/iam/v3/principal_access_boundary_policies_connection.h"
#include "google/cloud/iam/v3/principal_access_boundary_policies_connection_idempotency_policy.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace iam_v3 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * Use with `google::cloud::Options` to configure the retry policy.
 *
 * @ingroup google-cloud-iam-options
 */
struct PrincipalAccessBoundaryPoliciesRetryPolicyOption {
  using Type = std::shared_ptr<PrincipalAccessBoundaryPoliciesRetryPolicy>;
};

/**
 * Use with `google::cloud::Options` to configure the backoff policy.
 *
 * @ingroup google-cloud-iam-options
 */
struct PrincipalAccessBoundaryPoliciesBackoffPolicyOption {
  using Type = std::shared_ptr<BackoffPolicy>;
};

/**
 * Use with `google::cloud::Options` to configure which operations are retried.
 *
 * @ingroup google-cloud-iam-options
 */
struct PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicyOption {
  using Type = std::shared_ptr<
      PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicy>;
};

/**
 * Use with `google::cloud::Options` to configure the long-running operations
 * polling policy.
 *
 * @ingroup google-cloud-iam-options
 */
struct PrincipalAccessBoundaryPoliciesPollingPolicyOption {
  using Type = std::shared_ptr<PollingPolicy>;
};

/**
 * The options applicable to PrincipalAccessBoundaryPolicies.
 *
 * @ingroup google-cloud-iam-options
 */
using PrincipalAccessBoundaryPoliciesPolicyOptionList = OptionList<
    PrincipalAccessBoundaryPoliciesRetryPolicyOption,
    PrincipalAccessBoundaryPoliciesBackoffPolicyOption,
    PrincipalAccessBoundaryPoliciesPollingPolicyOption,
    PrincipalAccessBoundaryPoliciesConnectionIdempotencyPolicyOption>;

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v3
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V3_PRINCIPAL_ACCESS_BOUNDARY_POLICIES_OPTIONS_H
