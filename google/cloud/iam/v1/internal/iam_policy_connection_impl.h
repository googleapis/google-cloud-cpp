// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v1/iam_policy.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V1_INTERNAL_IAM_POLICY_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V1_INTERNAL_IAM_POLICY_CONNECTION_IMPL_H

#include "google/cloud/iam/v1/iam_policy_connection.h"
#include "google/cloud/iam/v1/iam_policy_connection_idempotency_policy.h"
#include "google/cloud/iam/v1/iam_policy_options.h"
#include "google/cloud/iam/v1/internal/iam_policy_retry_traits.h"
#include "google/cloud/iam/v1/internal/iam_policy_stub.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace iam_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class IAMPolicyConnectionImpl : public iam_v1::IAMPolicyConnection {
 public:
  ~IAMPolicyConnectionImpl() override = default;

  IAMPolicyConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<iam_v1_internal::IAMPolicyStub> stub, Options options);

  Options options() override { return options_; }

  StatusOr<google::iam::v1::Policy> SetIamPolicy(
      google::iam::v1::SetIamPolicyRequest const& request) override;

  StatusOr<google::iam::v1::Policy> GetIamPolicy(
      google::iam::v1::GetIamPolicyRequest const& request) override;

  StatusOr<google::iam::v1::TestIamPermissionsResponse> TestIamPermissions(
      google::iam::v1::TestIamPermissionsRequest const& request) override;

 private:
  std::unique_ptr<iam_v1::IAMPolicyRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<iam_v1::IAMPolicyRetryPolicyOption>()) {
      return options.get<iam_v1::IAMPolicyRetryPolicyOption>()->clone();
    }
    return options_.get<iam_v1::IAMPolicyRetryPolicyOption>()->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<iam_v1::IAMPolicyBackoffPolicyOption>()) {
      return options.get<iam_v1::IAMPolicyBackoffPolicyOption>()->clone();
    }
    return options_.get<iam_v1::IAMPolicyBackoffPolicyOption>()->clone();
  }

  std::unique_ptr<iam_v1::IAMPolicyConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<iam_v1::IAMPolicyConnectionIdempotencyPolicyOption>()) {
      return options.get<iam_v1::IAMPolicyConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_.get<iam_v1::IAMPolicyConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<iam_v1_internal::IAMPolicyStub> stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace iam_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_IAM_V1_INTERNAL_IAM_POLICY_CONNECTION_IMPL_H
