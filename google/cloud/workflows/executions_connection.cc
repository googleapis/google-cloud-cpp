// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/workflows/executions/v1/executions.proto

#include "google/cloud/workflows/executions_connection.h"
#include "google/cloud/workflows/executions_options.h"
#include "google/cloud/workflows/internal/executions_option_defaults.h"
#include "google/cloud/workflows/internal/executions_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace workflows {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ExecutionsConnection::~ExecutionsConnection() = default;

StreamRange<google::cloud::workflows::executions::v1::Execution>
ExecutionsConnection::ListExecutions(
    google::cloud::workflows::executions::v1::ListExecutionsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::workflows::executions::v1::Execution>>(
      std::move(request),
      [](google::cloud::workflows::executions::v1::
             ListExecutionsRequest const&) {
        return StatusOr<
            google::cloud::workflows::executions::v1::ListExecutionsResponse>{};
      },
      [](google::cloud::workflows::executions::v1::
             ListExecutionsResponse const&) {
        return std::vector<
            google::cloud::workflows::executions::v1::Execution>();
      });
}

StatusOr<google::cloud::workflows::executions::v1::Execution>
ExecutionsConnection::CreateExecution(
    google::cloud::workflows::executions::v1::CreateExecutionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::workflows::executions::v1::Execution>
ExecutionsConnection::GetExecution(
    google::cloud::workflows::executions::v1::GetExecutionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::workflows::executions::v1::Execution>
ExecutionsConnection::CancelExecution(
    google::cloud::workflows::executions::v1::CancelExecutionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

namespace {
class ExecutionsConnectionImpl : public ExecutionsConnection {
 public:
  ExecutionsConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<workflows_internal::ExecutionsStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<ExecutionsRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<ExecutionsBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<ExecutionsConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~ExecutionsConnectionImpl() override = default;

  StreamRange<google::cloud::workflows::executions::v1::Execution>
  ListExecutions(google::cloud::workflows::executions::v1::ListExecutionsRequest
                     request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<ExecutionsRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListExecutions(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::workflows::executions::v1::Execution>>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](google::cloud::workflows::executions::v1::
                            ListExecutionsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::workflows::executions::v1::
                         ListExecutionsRequest const& request) {
                return stub->ListExecutions(context, request);
              },
              r, function_name);
        },
        [](google::cloud::workflows::executions::v1::ListExecutionsResponse r) {
          std::vector<google::cloud::workflows::executions::v1::Execution>
              result(r.executions().size());
          auto& messages = *r.mutable_executions();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::workflows::executions::v1::Execution> CreateExecution(
      google::cloud::workflows::executions::v1::CreateExecutionRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateExecution(request),
        [this](grpc::ClientContext& context,
               google::cloud::workflows::executions::v1::
                   CreateExecutionRequest const& request) {
          return stub_->CreateExecution(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::workflows::executions::v1::Execution> GetExecution(
      google::cloud::workflows::executions::v1::GetExecutionRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetExecution(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::workflows::executions::v1::GetExecutionRequest const&
                request) { return stub_->GetExecution(context, request); },
        request, __func__);
  }

  StatusOr<google::cloud::workflows::executions::v1::Execution> CancelExecution(
      google::cloud::workflows::executions::v1::CancelExecutionRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CancelExecution(request),
        [this](grpc::ClientContext& context,
               google::cloud::workflows::executions::v1::
                   CancelExecutionRequest const& request) {
          return stub_->CancelExecution(context, request);
        },
        request, __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<workflows_internal::ExecutionsStub> stub_;
  std::unique_ptr<ExecutionsRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<ExecutionsConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<ExecutionsConnection> MakeExecutionsConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 ExecutionsPolicyOptionList>(options, __func__);
  options = workflows_internal::ExecutionsDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = workflows_internal::CreateDefaultExecutionsStub(background->cq(),
                                                              options);
  return std::make_shared<ExecutionsConnectionImpl>(std::move(background),
                                                    std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace workflows
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace workflows_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<workflows::ExecutionsConnection> MakeExecutionsConnection(
    std::shared_ptr<ExecutionsStub> stub, Options options) {
  options = ExecutionsDefaultOptions(std::move(options));
  return std::make_shared<workflows::ExecutionsConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace workflows_internal
}  // namespace cloud
}  // namespace google
