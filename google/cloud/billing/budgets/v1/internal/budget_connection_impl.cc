// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/billing/budgets/v1/budget_service.proto

#include "google/cloud/billing/budgets/v1/internal/budget_connection_impl.h"
#include "google/cloud/billing/budgets/v1/internal/budget_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace billing_budgets_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace {

std::unique_ptr<billing_budgets_v1::BudgetServiceRetryPolicy> retry_policy(
    Options const& options) {
  return options.get<billing_budgets_v1::BudgetServiceRetryPolicyOption>()
      ->clone();
}

std::unique_ptr<BackoffPolicy> backoff_policy(Options const& options) {
  return options.get<billing_budgets_v1::BudgetServiceBackoffPolicyOption>()
      ->clone();
}

std::unique_ptr<billing_budgets_v1::BudgetServiceConnectionIdempotencyPolicy>
idempotency_policy(Options const& options) {
  return options
      .get<billing_budgets_v1::BudgetServiceConnectionIdempotencyPolicyOption>()
      ->clone();
}

}  // namespace

BudgetServiceConnectionImpl::BudgetServiceConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<billing_budgets_v1_internal::BudgetServiceStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      BudgetServiceConnection::options())) {}

StatusOr<google::cloud::billing::budgets::v1::Budget>
BudgetServiceConnectionImpl::CreateBudget(
    google::cloud::billing::budgets::v1::CreateBudgetRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateBudget(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::billing::budgets::v1::CreateBudgetRequest const&
                 request) {
        return stub_->CreateBudget(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::billing::budgets::v1::Budget>
BudgetServiceConnectionImpl::UpdateBudget(
    google::cloud::billing::budgets::v1::UpdateBudgetRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateBudget(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::billing::budgets::v1::UpdateBudgetRequest const&
                 request) {
        return stub_->UpdateBudget(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::billing::budgets::v1::Budget>
BudgetServiceConnectionImpl::GetBudget(
    google::cloud::billing::budgets::v1::GetBudgetRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetBudget(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::billing::budgets::v1::GetBudgetRequest const&
                 request) {
        return stub_->GetBudget(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::billing::budgets::v1::Budget>
BudgetServiceConnectionImpl::ListBudgets(
    google::cloud::billing::budgets::v1::ListBudgetsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListBudgets(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::billing::budgets::v1::Budget>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<billing_budgets_v1::BudgetServiceRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::billing::budgets::v1::ListBudgetsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context, Options const& options,
                google::cloud::billing::budgets::v1::ListBudgetsRequest const&
                    request) {
              return stub->ListBudgets(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::billing::budgets::v1::ListBudgetsResponse r) {
        std::vector<google::cloud::billing::budgets::v1::Budget> result(
            r.budgets().size());
        auto& messages = *r.mutable_budgets();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

Status BudgetServiceConnectionImpl::DeleteBudget(
    google::cloud::billing::budgets::v1::DeleteBudgetRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteBudget(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::billing::budgets::v1::DeleteBudgetRequest const&
                 request) {
        return stub_->DeleteBudget(context, options, request);
      },
      *current, request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace billing_budgets_v1_internal
}  // namespace cloud
}  // namespace google
