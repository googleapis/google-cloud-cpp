/*!

@page billing-override-retry Override Retry, Backoff, and Idempotency Policies

When it is safe to do so, the library automatically retries requests that fail
due to a transient error. The library then uses [exponential backoff] to backoff
before trying again. Which operations are considered safe to retry, which
errors are treated as transient failures, the details of the exponential backoff
algorithm, and for how long the library retries are all configurable via
policies.

This document provides examples showing how to override the default policies.

The policies can be set when the `*Connection` object is created. The library
provides default policies for any policy that is not set. The application can
also override some (or all) policies when the `*Client` object is created. This
can be useful if multiple `*Client` objects share the same `*Connection` object,
but you want different retry behavior in some of the clients. Finally, the
application can override some retry policies when calling a specific member
function.

The library uses three different options to control the retry loop. The options
have per-client names.

@section billing-override-retry-retry-policy Configuring the transient errors and retry duration

The `*RetryPolicyOption` controls:

- Which errors are to be treated as transient errors.
- How long the library will keep retrying transient errors.

You can provide your own class for this option. The library also provides two
built-in policies:

- `*LimitedErrorCountRetryPolicy`: stops retrying after a specified number
  of transient errors.
- `*LimitedTimeRetryPolicy`: stops retrying after a specified time.

Note that a library may have more than one version of these classes. Their name
match the `*Client` and `*Connection` object they are intended to be used
with. Some `*Client` objects treat different error codes as transient errors.
In most cases, only [kUnavailable](@ref google::cloud::StatusCode) is treated
as a transient error.

@section billing-override-retry-backoff-policy Controlling the backoff algorithm

The `*BackoffPolicyOption` controls how long the client library will wait
before retrying a request that failed with a transient error. You can provide
your own class for this option.

The only built-in backoff policy is
[`ExponentialBackoffPolicy`](@ref google::cloud::ExponentialBackoffPolicy).
This class implements a truncated exponential backoff algorithm, with jitter.
In summary, it doubles the current backoff time after each failure. The actual
backoff time for an RPC is chosen at random, but never exceeds the current
backoff. The current backoff is doubled after each failure, but never exceeds
(or is "truncated") if it reaches a prescribed maximum.

@section billing-override-retry-idempotency-policy Controlling which operations are retryable

The `*IdempotencyPolicyOption` controls which requests are retryable, as some
requests are never safe to retry.

Only one built-in idempotency policy is provided by the library. The name
matches the name of the client it is intended for. For example, `FooBarClient`
will use `FooBarIdempotencyPolicy`. This policy is very conservative.

@section billing-override-retry-example Example

<!-- inject-retry-snippet-start -->
For example, this will override the retry policies for `billing_budgets_v1::BudgetServiceClient`:

@snippet budget_client_samples.cc set-retry-policy

This assumes you have created a custom idempotency policy. Such as:

@snippet budget_client_samples.cc custom-idempotency-policy


Follow these links to find examples for other \c *Client classes:

- [\c billing_budgets_v1::BudgetServiceClient](@ref billing_budgets_v1::BudgetServiceClient-retry-snippet)
- [\c billing_v1::CloudBillingClient](@ref billing_v1::CloudBillingClient-retry-snippet)
- [\c billing_v1::CloudCatalogClient](@ref billing_v1::CloudCatalogClient-retry-snippet)

<!-- inject-retry-snippet-end -->

@section billing-override-retry-more-information More Information

@see google::cloud::Options
@see google::cloud::BackoffPolicy
@see google::cloud::ExponentialBackoffPolicy

[exponential backoff]: https://en.wikipedia.org/wiki/Exponential_backoff

*/

// <!-- inject-retry-pages-start -->

/*! @page billing_budgets_v1::BudgetServiceClient-retry-snippet Override billing_budgets_v1::BudgetServiceClient Retry Policies

This shows how to override the retry policies for billing_budgets_v1::BudgetServiceClient:

@snippet google/cloud/billing/budgets/v1/samples/budget_client_samples.cc set-retry-policy

Assuming you have created a custom idempotency policy. Such as:

@snippet google/cloud/billing/budgets/v1/samples/budget_client_samples.cc custom-idempotency-policy

*/

/*! @page billing_v1::CloudBillingClient-retry-snippet Override billing_v1::CloudBillingClient Retry Policies

This shows how to override the retry policies for billing_v1::CloudBillingClient:

@snippet google/cloud/billing/v1/samples/cloud_billing_client_samples.cc set-retry-policy

Assuming you have created a custom idempotency policy. Such as:

@snippet google/cloud/billing/v1/samples/cloud_billing_client_samples.cc custom-idempotency-policy

*/

/*! @page billing_v1::CloudCatalogClient-retry-snippet Override billing_v1::CloudCatalogClient Retry Policies

This shows how to override the retry policies for billing_v1::CloudCatalogClient:

@snippet google/cloud/billing/v1/samples/cloud_catalog_client_samples.cc set-retry-policy

Assuming you have created a custom idempotency policy. Such as:

@snippet google/cloud/billing/v1/samples/cloud_catalog_client_samples.cc custom-idempotency-policy

*/
// <!-- inject-retry-pages-end -->
