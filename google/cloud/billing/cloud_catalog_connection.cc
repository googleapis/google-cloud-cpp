// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/billing/v1/cloud_catalog.proto

#include "google/cloud/billing/cloud_catalog_connection.h"
#include "google/cloud/billing/cloud_catalog_options.h"
#include "google/cloud/billing/internal/cloud_catalog_option_defaults.h"
#include "google/cloud/billing/internal/cloud_catalog_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace billing {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

CloudCatalogConnection::~CloudCatalogConnection() = default;

StreamRange<google::cloud::billing::v1::Service>
CloudCatalogConnection::ListServices(
    google::cloud::billing::v1::ListServicesRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::billing::v1::Service>>(
      std::move(request),
      [](google::cloud::billing::v1::ListServicesRequest const&) {
        return StatusOr<google::cloud::billing::v1::ListServicesResponse>{};
      },
      [](google::cloud::billing::v1::ListServicesResponse const&) {
        return std::vector<google::cloud::billing::v1::Service>();
      });
}

StreamRange<google::cloud::billing::v1::Sku> CloudCatalogConnection::ListSkus(
    google::cloud::billing::v1::ListSkusRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::billing::v1::Sku>>(
      std::move(request),
      [](google::cloud::billing::v1::ListSkusRequest const&) {
        return StatusOr<google::cloud::billing::v1::ListSkusResponse>{};
      },
      [](google::cloud::billing::v1::ListSkusResponse const&) {
        return std::vector<google::cloud::billing::v1::Sku>();
      });
}

namespace {
class CloudCatalogConnectionImpl : public CloudCatalogConnection {
 public:
  CloudCatalogConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<billing_internal::CloudCatalogStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<CloudCatalogRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<CloudCatalogBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<CloudCatalogConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~CloudCatalogConnectionImpl() override = default;

  StreamRange<google::cloud::billing::v1::Service> ListServices(
      google::cloud::billing::v1::ListServicesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<CloudCatalogRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListServices(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::billing::v1::Service>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::billing::v1::ListServicesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::billing::v1::ListServicesRequest const&
                         request) {
                return stub->ListServices(context, request);
              },
              r, function_name);
        },
        [](google::cloud::billing::v1::ListServicesResponse r) {
          std::vector<google::cloud::billing::v1::Service> result(
              r.services().size());
          auto& messages = *r.mutable_services();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StreamRange<google::cloud::billing::v1::Sku> ListSkus(
      google::cloud::billing::v1::ListSkusRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<CloudCatalogRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListSkus(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::billing::v1::Sku>>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](google::cloud::billing::v1::ListSkusRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  google::cloud::billing::v1::ListSkusRequest const& request) {
                return stub->ListSkus(context, request);
              },
              r, function_name);
        },
        [](google::cloud::billing::v1::ListSkusResponse r) {
          std::vector<google::cloud::billing::v1::Sku> result(r.skus().size());
          auto& messages = *r.mutable_skus();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<billing_internal::CloudCatalogStub> stub_;
  std::unique_ptr<CloudCatalogRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<CloudCatalogConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<CloudCatalogConnection> MakeCloudCatalogConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 CloudCatalogPolicyOptionList>(options,
                                                               __func__);
  options = billing_internal::CloudCatalogDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = billing_internal::CreateDefaultCloudCatalogStub(background->cq(),
                                                              options);
  return std::make_shared<CloudCatalogConnectionImpl>(std::move(background),
                                                      std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace billing
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace billing_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<billing::CloudCatalogConnection> MakeCloudCatalogConnection(
    std::shared_ptr<CloudCatalogStub> stub, Options options) {
  options = CloudCatalogDefaultOptions(std::move(options));
  return std::make_shared<billing::CloudCatalogConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace billing_internal
}  // namespace cloud
}  // namespace google
