// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/scheduler/v1/cloudscheduler.proto

#include "google/cloud/scheduler/v1/cloud_scheduler_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace scheduler_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

CloudSchedulerClient::CloudSchedulerClient(
    std::shared_ptr<CloudSchedulerConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
CloudSchedulerClient::~CloudSchedulerClient() = default;

StreamRange<google::cloud::scheduler::v1::Job> CloudSchedulerClient::ListJobs(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::scheduler::v1::ListJobsRequest request;
  request.set_parent(parent);
  return connection_->ListJobs(request);
}

StreamRange<google::cloud::scheduler::v1::Job> CloudSchedulerClient::ListJobs(
    google::cloud::scheduler::v1::ListJobsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListJobs(std::move(request));
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::GetJob(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::scheduler::v1::GetJobRequest request;
  request.set_name(name);
  return connection_->GetJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::GetJob(
    google::cloud::scheduler::v1::GetJobRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::CreateJob(
    std::string const& parent, google::cloud::scheduler::v1::Job const& job,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::scheduler::v1::CreateJobRequest request;
  request.set_parent(parent);
  *request.mutable_job() = job;
  return connection_->CreateJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::CreateJob(
    google::cloud::scheduler::v1::CreateJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::UpdateJob(
    google::cloud::scheduler::v1::Job const& job,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::scheduler::v1::UpdateJobRequest request;
  *request.mutable_job() = job;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::UpdateJob(
    google::cloud::scheduler::v1::UpdateJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateJob(request);
}

Status CloudSchedulerClient::DeleteJob(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::scheduler::v1::DeleteJobRequest request;
  request.set_name(name);
  return connection_->DeleteJob(request);
}

Status CloudSchedulerClient::DeleteJob(
    google::cloud::scheduler::v1::DeleteJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::PauseJob(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::scheduler::v1::PauseJobRequest request;
  request.set_name(name);
  return connection_->PauseJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::PauseJob(
    google::cloud::scheduler::v1::PauseJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PauseJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::ResumeJob(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::scheduler::v1::ResumeJobRequest request;
  request.set_name(name);
  return connection_->ResumeJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::ResumeJob(
    google::cloud::scheduler::v1::ResumeJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ResumeJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::RunJob(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::scheduler::v1::RunJobRequest request;
  request.set_name(name);
  return connection_->RunJob(request);
}

StatusOr<google::cloud::scheduler::v1::Job> CloudSchedulerClient::RunJob(
    google::cloud::scheduler::v1::RunJobRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->RunJob(request);
}

StreamRange<google::cloud::location::Location>
CloudSchedulerClient::ListLocations(
    google::cloud::location::ListLocationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListLocations(std::move(request));
}

StatusOr<google::cloud::location::Location> CloudSchedulerClient::GetLocation(
    google::cloud::location::GetLocationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetLocation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace scheduler_v1
}  // namespace cloud
}  // namespace google
