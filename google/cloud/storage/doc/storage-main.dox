/*!

@mainpage Google Cloud Storage C++ Client Library

The Google Cloud Storage (GCS) C++ Client library offers types and functions
access GCS from C++11 applications. It offers full access to the GCS API,
including operations to list, read, write, and delete
[GCS objects][object-definition-link] and [buckets][bucket-definition-link].
The library also provides functions to modify the IAM permissions on buckets,
read and modify the metadata associated with objects and buckets, configure
encryption keys, configure notifications via Cloud Pub/Sub, and change the
access control list of object or buckets.

This library requires a C++11 compiler, it is supported (and tested) on multiple
Linux distributions, as well as Windows and macOS. The
[README][github-readme] on [GitHub][github-link] provides detailed
instructions to install the necessary dependencies, as well as how to compile
the client library.

### Setting up your repo

In order to use the Cloud Cloud Storage C++ client library from your own code,
you'll need to configure your build system how to fetch and compile the Cloud
C++ client library. The Cloud C++ client library natively supports the
[Bazel](https://bazel.build/) and [CMake](https://cmake.org/) build systems.
We've created a minimal, "Hello world", [quickstart repo][quickstart-link] that
includes detailed instructions on how to compile the library for use in your
application. You can fetch the source from [GitHub][github-link] as normal:

@code{.sh}
git clone https://github.com/googleapis/google-cloud-cpp.git
cd google-cloud-cpp/google/cloud/storage/quickstart
@endcode

@par Example: Quickstart

The following shows the code that you'll run in the
`google/cloud/storage/quickstart/` directory,
which should give you a taste of the Cloud Storage C++ client library API.

@include quickstart.cc

## API Notes

- `GOOGLE_CLOUD_PROJECT=...` is used in examples and integration tests to
  configure the GCP project.

- `CLOUD_STORAGE_ENABLE_TRACING=raw-client` enables logging for each "RPC"
  generated by the library. Unless you have configured you own logging backend,
  you should also set `GOOGLE_CLOUD_CPP_ENABLE_CLOG` to produce any output on
  the program's console.

- `CLOUD_STORAGE_ENABLE_TRACING=http` enables logging for the full http traffic
  generated by the library.

- `CLOUD_STORAGE_ENABLE_TRACING=raw-client,http` enables all logging.

- `CLOUD_STORAGE_EMULATOR_ENDPOINT=...` override the default endpoint used by
  the library, intended for testing only.

- `CLOUD_STORAGE_TESTBENCH_ENDPOINT=...` **DEPRECATED**
  please use `CLOUD_STORAGE_EMULATOR_ENDPOINT` instead.

- `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` turns on logging in the library, basically
  the library always "logs" but the logging infrastructure has no backend to
  actually print anything until the application sets a backend or they set this
  environment variable.

### Experimental

- `GOOGLE_CLOUD_CPP_STORAGE_REST_CONFIG=...` configuration for the REST
  protocol, currently only the `disable-xml` value has any effect. Sometimes
  the application developer may want to test using an emulator that does not
  support XML, while the library defaults to XML for some media operations.

- `GOOGLE_CLOUD_CPP_STORAGE_GRPC_CONFIG=...` used with
  `google::cloud::storage_experimental::DefaultGrpcClient()` to configure
  configure the gRPC protocol. Setting this to `media` enables gRPC for just
  media operations (reading and writing data), while setting this to `metadata`
  enables gRPC for all operations. Note that gRPC support is an early access
  program, contact Google Cloud support for details.

### Using GOOGLE_CLOUD_PROJECT to set the default project

Some of the GCS APIs need a [project][project-definition-link] as a parameter.
For such APIs the application can (a) call an overload that takes the project id
as a parameter, (b) define the project explicitly when the `Client` object is
constructed, or (c) set the `GOOGLE_CLOUD_PROJECT` environment variable to the
desired project id. If you have set this environment variable the code can
be even simpler:

@snippet storage_bucket_samples.cc create bucket

### Error Handling

[status-or-header]: https://github.com/googleapis/google-cloud-cpp/blob/main/google/cloud/status_or.h

This library never throws exceptions to signal error. In general, the library
returns a [`StatusOr<T>`][status-or-header] if an error is possible. Some
functions return objects that already have an existing error handling mechanism,
such as types derived from `std::ostream` where the application can check the
[state flags](https://en.cppreference.com/w/cpp/io/basic_ios/rdstate)
to determine if there was an error. In these cases no `StatusOr` wrapper is
used.

@par Error Handling Example (without exceptions):

Applications that do not use exceptions to signal errors should check if the
`StatusOr<T>` contains a value before using it. If the `StatusOr<T>` does
contain a value then the `StatusOr<T>` can be used as a smart pointer to `T`.
That is, `operator->()` and `operator*()` work as you would expect. If the
`StatusOr<T>` does not contain a value then the error details are available
using the `.status()` member function (and trying to access the value produces
undefined behavior).

@code {.cpp}
using gcs = google::cloud::storage;
[](gcs::Client client) {
  google::cloud::StatusOr<gcs::BucketMetadata> metadata =
    client.GetBucketMetadata("my-bucket");

  if (!metadata) {
    std::cerr << "GetBucketMetadata: " << metadata.status() << "\n";
    return;
  }

  // use `metadata` as a smart pointer to `BucketMetadata`
  std::cout << "The metadata for bucket " << metadata->name()
            << " is " << *metadata << "\n";
}
@endcode

@par Error Handling Example (with exceptions):

Applications that use exceptions to signal errors can simply call `.value()` on
the `StatusOr<T>` object. This will return a `T` if the `StatusOr<T>` object
contains a value, and will otherwise throw an exception.

@code {.cpp}
using gcs = google::cloud::storage;
[](gcs::Client client) {
  gcs::BucketMetadata metadata = client.GetBucketMetadata(
        "my-bucket").value();  // throws on error
  std::cout << "The metadata for bucket " << metadata.name()
            << " is " << metadata << "\n";
}
@endcode

### Retry, Backoff, and Idempotency Policies.

The library automatically retries requests that fail with transient errors, and
follows the
[recommended practice](https://cloud.google.com/storage/docs/exponential-backoff)
to backoff between retries. Application developers can override the default
[retry](@ref google::cloud::storage::v1::RetryPolicy) and
[backoff](@ref google::cloud::storage::v1::BackoffPolicy) policies:

@snippet storage_object_samples.cc insert object modified retry

The default policies are to continue retrying for up to 15 minutes, and to
use truncated (at 5 minutes) exponential backoff, doubling the maximum backoff
period between retries.

By default the library retries all operations, even those that are not
idempotent. Application developers can override the
[idempotency policy](@ref google::cloud::storage::v1::Client::Client)
to follow a more conservative approach:

@snippet storage_object_samples.cc insert object strict idempotency

@see [LimitedTimeRetryPolicy](@ref google::cloud::storage::v1::LimitedTimeRetryPolicy)
   and [LimitedErrorCountRetryPolicy](@ref google::cloud::storage::v1::LimitedErrorCountRetryPolicy)
   for alternative retry policies.

@see [ExponentialBackoffPolicy](@ref google::cloud::storage::v1::ExponentialBackoffPolicy)
   to configure different parameters for the exponential backoff policy.

@see [AlwaysRetryIdempotencyPolicy](@ref google::cloud::storage::v1::AlwaysRetryIdempotencyPolicy)
   and [StrictIdempotencyPolicy](@ref google::cloud::storage::v1::StrictIdempotencyPolicy)
   for alternative idempotency policies.

### Next Steps

The documentation for each member function in the [Client] class includes short
snippets on how to call the function. The snippets for
[ReadObject()][ReadObject], [WriteObject()][WriteObject],
[ListObjects()][ListObjects], and [DeleteObject()][DeleteObject] are
good places to continue learning about the library.

@ref storage-mocking "Example for mocking GCS C++ Client"

[Client]: @ref google::cloud::storage::v1::Client
[ReadObject]: @ref google::cloud::storage::v1::Client::ReadObject()
[WriteObject]: @ref google::cloud::storage::v1::Client::WriteObject()
[ListObjects]: @ref google::cloud::storage::v1::Client::ListObjects()
[DeleteObject]: @ref google::cloud::storage::v1::Client::DeleteObject()


[gcs-quickstart]: https://cloud.google.com/storage/docs/quickstarts 'GCS Quickstarts'
[resource-link]: https://console.cloud.google.com/cloud-resource-manager 'Console Resource Manager'
[billing-link]: https://cloud.google.com/billing/docs/how-to/modify-project 'How to: Modify Project'
[concepts-link]: https://cloud.google.com/storage/docs/concepts 'GCS Concepts'
[authentication-quickstart]: https://cloud.google.com/docs/authentication/getting-started 'Authentication Getting Started'
[gcloud-quickstart]: https://cloud.google.com/sdk/docs/quickstarts
[bucket-definition-link]: https://cloud.google.com/storage/docs/key-terms#buckets
[object-definition-link]: https://cloud.google.com/storage/docs/key-terms#objects
[project-definition-link]: https://cloud.google.com/storage/docs/projects 'Project Definition in GCS'
[github-link]: https://github.com/googleapis/google-cloud-cpp 'GitHub Repository'
<!-- The ugly %2E disables auto-linking in Doxygen -->
[github-readme]:  https://github.com/googleapis/google-cloud-cpp/blob/main/google/cloud/storage/README%2Emd
[github-install]: https://github.com/googleapis/google-cloud-cpp/blob/main/INSTALL%2Emd

*/
