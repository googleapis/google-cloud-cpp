// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/documentai/v1/document_processor_service.proto

#include "google/cloud/documentai/document_processor_client.h"
#include "google/cloud/documentai/internal/document_processor_option_defaults.h"
#include <memory>

namespace google {
namespace cloud {
namespace documentai {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DocumentProcessorServiceClient::DocumentProcessorServiceClient(
    std::shared_ptr<DocumentProcessorServiceConnection> connection,
    Options opts)
    : connection_(std::move(connection)),
      options_(internal::MergeOptions(
          std::move(opts),
          documentai_internal::DocumentProcessorServiceDefaultOptions(
              connection_->options()))) {}
DocumentProcessorServiceClient::~DocumentProcessorServiceClient() = default;

StatusOr<google::cloud::documentai::v1::ProcessResponse>
DocumentProcessorServiceClient::ProcessDocument(std::string const& name,
                                                Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::documentai::v1::ProcessRequest request;
  request.set_name(name);
  return connection_->ProcessDocument(request);
}

StatusOr<google::cloud::documentai::v1::ProcessResponse>
DocumentProcessorServiceClient::ProcessDocument(
    google::cloud::documentai::v1::ProcessRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ProcessDocument(request);
}

future<StatusOr<google::cloud::documentai::v1::BatchProcessResponse>>
DocumentProcessorServiceClient::BatchProcessDocuments(std::string const& name,
                                                      Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::documentai::v1::BatchProcessRequest request;
  request.set_name(name);
  return connection_->BatchProcessDocuments(request);
}

future<StatusOr<google::cloud::documentai::v1::BatchProcessResponse>>
DocumentProcessorServiceClient::BatchProcessDocuments(
    google::cloud::documentai::v1::BatchProcessRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->BatchProcessDocuments(request);
}

future<StatusOr<google::cloud::documentai::v1::ReviewDocumentResponse>>
DocumentProcessorServiceClient::ReviewDocument(
    std::string const& human_review_config, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::documentai::v1::ReviewDocumentRequest request;
  request.set_human_review_config(human_review_config);
  return connection_->ReviewDocument(request);
}

future<StatusOr<google::cloud::documentai::v1::ReviewDocumentResponse>>
DocumentProcessorServiceClient::ReviewDocument(
    google::cloud::documentai::v1::ReviewDocumentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ReviewDocument(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace documentai
}  // namespace cloud
}  // namespace google
