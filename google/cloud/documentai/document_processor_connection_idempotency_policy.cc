// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/documentai/v1/document_processor_service.proto

#include "google/cloud/documentai/document_processor_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace documentai {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

DocumentProcessorServiceConnectionIdempotencyPolicy::
    ~DocumentProcessorServiceConnectionIdempotencyPolicy() = default;

namespace {
class DefaultDocumentProcessorServiceConnectionIdempotencyPolicy
    : public DocumentProcessorServiceConnectionIdempotencyPolicy {
 public:
  ~DefaultDocumentProcessorServiceConnectionIdempotencyPolicy() override =
      default;

  /// Create a new copy of this object.
  std::unique_ptr<DocumentProcessorServiceConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<
        DefaultDocumentProcessorServiceConnectionIdempotencyPolicy>(*this);
  }

  Idempotency ProcessDocument(
      google::cloud::documentai::v1::ProcessRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency BatchProcessDocuments(
      google::cloud::documentai::v1::BatchProcessRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency FetchProcessorTypes(
      google::cloud::documentai::v1::FetchProcessorTypesRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListProcessorTypes(
      google::cloud::documentai::v1::ListProcessorTypesRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListProcessors(
      google::cloud::documentai::v1::ListProcessorsRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetProcessor(
      google::cloud::documentai::v1::GetProcessorRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetProcessorVersion(
      google::cloud::documentai::v1::GetProcessorVersionRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListProcessorVersions(
      google::cloud::documentai::v1::ListProcessorVersionsRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency DeleteProcessorVersion(
      google::cloud::documentai::v1::DeleteProcessorVersionRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeployProcessorVersion(
      google::cloud::documentai::v1::DeployProcessorVersionRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UndeployProcessorVersion(
      google::cloud::documentai::v1::UndeployProcessorVersionRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency CreateProcessor(
      google::cloud::documentai::v1::CreateProcessorRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteProcessor(
      google::cloud::documentai::v1::DeleteProcessorRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency EnableProcessor(
      google::cloud::documentai::v1::EnableProcessorRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DisableProcessor(
      google::cloud::documentai::v1::DisableProcessorRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency SetDefaultProcessorVersion(
      google::cloud::documentai::v1::SetDefaultProcessorVersionRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ReviewDocument(
      google::cloud::documentai::v1::ReviewDocumentRequest const&) override {
    return Idempotency::kNonIdempotent;
  }
};
}  // namespace

std::unique_ptr<DocumentProcessorServiceConnectionIdempotencyPolicy>
MakeDefaultDocumentProcessorServiceConnectionIdempotencyPolicy() {
  return absl::make_unique<
      DefaultDocumentProcessorServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace documentai
}  // namespace cloud
}  // namespace google
