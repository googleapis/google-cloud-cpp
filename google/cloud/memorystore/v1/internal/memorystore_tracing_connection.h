// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/memorystore/v1/memorystore.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_MEMORYSTORE_V1_INTERNAL_MEMORYSTORE_TRACING_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_MEMORYSTORE_V1_INTERNAL_MEMORYSTORE_TRACING_CONNECTION_H

#include "google/cloud/memorystore/v1/memorystore_connection.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace memorystore_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

class MemorystoreTracingConnection
    : public memorystore_v1::MemorystoreConnection {
 public:
  ~MemorystoreTracingConnection() override = default;

  explicit MemorystoreTracingConnection(
      std::shared_ptr<memorystore_v1::MemorystoreConnection> child);

  Options options() override { return child_->options(); }

  StreamRange<google::cloud::memorystore::v1::Instance> ListInstances(
      google::cloud::memorystore::v1::ListInstancesRequest request) override;

  StatusOr<google::cloud::memorystore::v1::Instance> GetInstance(
      google::cloud::memorystore::v1::GetInstanceRequest const& request)
      override;

  future<StatusOr<google::cloud::memorystore::v1::Instance>> CreateInstance(
      google::cloud::memorystore::v1::CreateInstanceRequest const& request)
      override;

  StatusOr<google::longrunning::Operation> CreateInstance(
      NoAwaitTag,
      google::cloud::memorystore::v1::CreateInstanceRequest const& request)
      override;

  future<StatusOr<google::cloud::memorystore::v1::Instance>> CreateInstance(
      google::longrunning::Operation const& operation) override;

  future<StatusOr<google::cloud::memorystore::v1::Instance>> UpdateInstance(
      google::cloud::memorystore::v1::UpdateInstanceRequest const& request)
      override;

  StatusOr<google::longrunning::Operation> UpdateInstance(
      NoAwaitTag,
      google::cloud::memorystore::v1::UpdateInstanceRequest const& request)
      override;

  future<StatusOr<google::cloud::memorystore::v1::Instance>> UpdateInstance(
      google::longrunning::Operation const& operation) override;

  future<StatusOr<google::cloud::memorystore::v1::OperationMetadata>>
  DeleteInstance(google::cloud::memorystore::v1::DeleteInstanceRequest const&
                     request) override;

  StatusOr<google::longrunning::Operation> DeleteInstance(
      NoAwaitTag,
      google::cloud::memorystore::v1::DeleteInstanceRequest const& request)
      override;

  future<StatusOr<google::cloud::memorystore::v1::OperationMetadata>>
  DeleteInstance(google::longrunning::Operation const& operation) override;

  StatusOr<google::cloud::memorystore::v1::CertificateAuthority>
  GetCertificateAuthority(
      google::cloud::memorystore::v1::GetCertificateAuthorityRequest const&
          request) override;

  future<StatusOr<google::cloud::memorystore::v1::Instance>>
  RescheduleMaintenance(
      google::cloud::memorystore::v1::RescheduleMaintenanceRequest const&
          request) override;

  StatusOr<google::longrunning::Operation> RescheduleMaintenance(
      NoAwaitTag,
      google::cloud::memorystore::v1::RescheduleMaintenanceRequest const&
          request) override;

  future<StatusOr<google::cloud::memorystore::v1::Instance>>
  RescheduleMaintenance(
      google::longrunning::Operation const& operation) override;

  StreamRange<google::cloud::memorystore::v1::BackupCollection>
  ListBackupCollections(
      google::cloud::memorystore::v1::ListBackupCollectionsRequest request)
      override;

  StatusOr<google::cloud::memorystore::v1::BackupCollection>
  GetBackupCollection(
      google::cloud::memorystore::v1::GetBackupCollectionRequest const& request)
      override;

  StreamRange<google::cloud::memorystore::v1::Backup> ListBackups(
      google::cloud::memorystore::v1::ListBackupsRequest request) override;

  StatusOr<google::cloud::memorystore::v1::Backup> GetBackup(
      google::cloud::memorystore::v1::GetBackupRequest const& request) override;

  future<StatusOr<google::cloud::memorystore::v1::OperationMetadata>>
  DeleteBackup(google::cloud::memorystore::v1::DeleteBackupRequest const&
                   request) override;

  StatusOr<google::longrunning::Operation> DeleteBackup(
      NoAwaitTag,
      google::cloud::memorystore::v1::DeleteBackupRequest const& request)
      override;

  future<StatusOr<google::cloud::memorystore::v1::OperationMetadata>>
  DeleteBackup(google::longrunning::Operation const& operation) override;

  future<StatusOr<google::cloud::memorystore::v1::Backup>> ExportBackup(
      google::cloud::memorystore::v1::ExportBackupRequest const& request)
      override;

  StatusOr<google::longrunning::Operation> ExportBackup(
      NoAwaitTag,
      google::cloud::memorystore::v1::ExportBackupRequest const& request)
      override;

  future<StatusOr<google::cloud::memorystore::v1::Backup>> ExportBackup(
      google::longrunning::Operation const& operation) override;

  future<StatusOr<google::cloud::memorystore::v1::Instance>> BackupInstance(
      google::cloud::memorystore::v1::BackupInstanceRequest const& request)
      override;

  StatusOr<google::longrunning::Operation> BackupInstance(
      NoAwaitTag,
      google::cloud::memorystore::v1::BackupInstanceRequest const& request)
      override;

  future<StatusOr<google::cloud::memorystore::v1::Instance>> BackupInstance(
      google::longrunning::Operation const& operation) override;

  StreamRange<google::cloud::location::Location> ListLocations(
      google::cloud::location::ListLocationsRequest request) override;

  StatusOr<google::cloud::location::Location> GetLocation(
      google::cloud::location::GetLocationRequest const& request) override;

  StreamRange<google::longrunning::Operation> ListOperations(
      google::longrunning::ListOperationsRequest request) override;

  StatusOr<google::longrunning::Operation> GetOperation(
      google::longrunning::GetOperationRequest const& request) override;

  Status DeleteOperation(
      google::longrunning::DeleteOperationRequest const& request) override;

  Status CancelOperation(
      google::longrunning::CancelOperationRequest const& request) override;

 private:
  std::shared_ptr<memorystore_v1::MemorystoreConnection> child_;
};

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

/**
 * Conditionally applies the tracing decorator to the given connection.
 *
 * The connection is only decorated if tracing is enabled (as determined by the
 * connection's options).
 */
std::shared_ptr<memorystore_v1::MemorystoreConnection>
MakeMemorystoreTracingConnection(
    std::shared_ptr<memorystore_v1::MemorystoreConnection> conn);

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace memorystore_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_MEMORYSTORE_V1_INTERNAL_MEMORYSTORE_TRACING_CONNECTION_H
