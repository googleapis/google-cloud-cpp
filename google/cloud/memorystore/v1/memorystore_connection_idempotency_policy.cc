// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/memorystore/v1/memorystore.proto

#include "google/cloud/memorystore/v1/memorystore_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace memorystore_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

MemorystoreConnectionIdempotencyPolicy::
    ~MemorystoreConnectionIdempotencyPolicy() = default;

std::unique_ptr<MemorystoreConnectionIdempotencyPolicy>
MemorystoreConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<MemorystoreConnectionIdempotencyPolicy>(*this);
}

Idempotency MemorystoreConnectionIdempotencyPolicy::ListInstances(
    google::cloud::memorystore::v1::ListInstancesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::GetInstance(
    google::cloud::memorystore::v1::GetInstanceRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::CreateInstance(
    google::cloud::memorystore::v1::CreateInstanceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::UpdateInstance(
    google::cloud::memorystore::v1::UpdateInstanceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::DeleteInstance(
    google::cloud::memorystore::v1::DeleteInstanceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::GetCertificateAuthority(
    google::cloud::memorystore::v1::GetCertificateAuthorityRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::RescheduleMaintenance(
    google::cloud::memorystore::v1::RescheduleMaintenanceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::ListBackupCollections(
    google::cloud::memorystore::v1::ListBackupCollectionsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::GetBackupCollection(
    google::cloud::memorystore::v1::GetBackupCollectionRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::ListBackups(
    google::cloud::memorystore::v1::ListBackupsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::GetBackup(
    google::cloud::memorystore::v1::GetBackupRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::DeleteBackup(
    google::cloud::memorystore::v1::DeleteBackupRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::ExportBackup(
    google::cloud::memorystore::v1::ExportBackupRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::BackupInstance(
    google::cloud::memorystore::v1::BackupInstanceRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::ListLocations(
    google::cloud::location::ListLocationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::ListOperations(
    google::longrunning::ListOperationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MemorystoreConnectionIdempotencyPolicy::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<MemorystoreConnectionIdempotencyPolicy>
MakeDefaultMemorystoreConnectionIdempotencyPolicy() {
  return std::make_unique<MemorystoreConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace memorystore_v1
}  // namespace cloud
}  // namespace google
