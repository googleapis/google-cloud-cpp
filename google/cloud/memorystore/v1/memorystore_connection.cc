// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/memorystore/v1/memorystore.proto

#include "google/cloud/memorystore/v1/memorystore_connection.h"
#include "google/cloud/memorystore/v1/internal/memorystore_connection_impl.h"
#include "google/cloud/memorystore/v1/internal/memorystore_option_defaults.h"
#include "google/cloud/memorystore/v1/internal/memorystore_stub_factory.h"
#include "google/cloud/memorystore/v1/internal/memorystore_tracing_connection.h"
#include "google/cloud/memorystore/v1/memorystore_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace memorystore_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

MemorystoreConnection::~MemorystoreConnection() = default;

StreamRange<google::cloud::memorystore::v1::Instance>
MemorystoreConnection::ListInstances(
    google::cloud::memorystore::v1::
        ListInstancesRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::memorystore::v1::Instance>>();
}

StatusOr<google::cloud::memorystore::v1::Instance>
MemorystoreConnection::GetInstance(
    google::cloud::memorystore::v1::GetInstanceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::memorystore::v1::Instance>>
MemorystoreConnection::CreateInstance(
    google::cloud::memorystore::v1::CreateInstanceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Instance>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation> MemorystoreConnection::CreateInstance(
    NoAwaitTag, google::cloud::memorystore::v1::CreateInstanceRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::Instance>>
MemorystoreConnection::CreateInstance(google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Instance>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::Instance>>
MemorystoreConnection::UpdateInstance(
    google::cloud::memorystore::v1::UpdateInstanceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Instance>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation> MemorystoreConnection::UpdateInstance(
    NoAwaitTag, google::cloud::memorystore::v1::UpdateInstanceRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::Instance>>
MemorystoreConnection::UpdateInstance(google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Instance>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::OperationMetadata>>
MemorystoreConnection::DeleteInstance(
    google::cloud::memorystore::v1::DeleteInstanceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation> MemorystoreConnection::DeleteInstance(
    NoAwaitTag, google::cloud::memorystore::v1::DeleteInstanceRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::OperationMetadata>>
MemorystoreConnection::DeleteInstance(google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::cloud::memorystore::v1::CertificateAuthority>
MemorystoreConnection::GetCertificateAuthority(
    google::cloud::memorystore::v1::GetCertificateAuthorityRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::memorystore::v1::Instance>>
MemorystoreConnection::RescheduleMaintenance(
    google::cloud::memorystore::v1::RescheduleMaintenanceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Instance>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation>
MemorystoreConnection::RescheduleMaintenance(
    NoAwaitTag,
    google::cloud::memorystore::v1::RescheduleMaintenanceRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::Instance>>
MemorystoreConnection::RescheduleMaintenance(
    google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Instance>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::memorystore::v1::BackupCollection>
MemorystoreConnection::ListBackupCollections(
    google::cloud::memorystore::v1::
        ListBackupCollectionsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::memorystore::v1::BackupCollection>>();
}

StatusOr<google::cloud::memorystore::v1::BackupCollection>
MemorystoreConnection::GetBackupCollection(
    google::cloud::memorystore::v1::GetBackupCollectionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::memorystore::v1::Backup>
MemorystoreConnection::ListBackups(
    google::cloud::memorystore::v1::
        ListBackupsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::memorystore::v1::Backup>>();
}

StatusOr<google::cloud::memorystore::v1::Backup>
MemorystoreConnection::GetBackup(
    google::cloud::memorystore::v1::GetBackupRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::memorystore::v1::OperationMetadata>>
MemorystoreConnection::DeleteBackup(
    google::cloud::memorystore::v1::DeleteBackupRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation> MemorystoreConnection::DeleteBackup(
    NoAwaitTag, google::cloud::memorystore::v1::DeleteBackupRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::OperationMetadata>>
MemorystoreConnection::DeleteBackup(google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::Backup>>
MemorystoreConnection::ExportBackup(
    google::cloud::memorystore::v1::ExportBackupRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Backup>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation> MemorystoreConnection::ExportBackup(
    NoAwaitTag, google::cloud::memorystore::v1::ExportBackupRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::Backup>>
MemorystoreConnection::ExportBackup(google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Backup>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::Instance>>
MemorystoreConnection::BackupInstance(
    google::cloud::memorystore::v1::BackupInstanceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Instance>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation> MemorystoreConnection::BackupInstance(
    NoAwaitTag, google::cloud::memorystore::v1::BackupInstanceRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::memorystore::v1::Instance>>
MemorystoreConnection::BackupInstance(google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::memorystore::v1::Instance>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::location::Location>
MemorystoreConnection::ListLocations(
    google::cloud::location::
        ListLocationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::location::Location>>();
}

StatusOr<google::cloud::location::Location> MemorystoreConnection::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::longrunning::Operation>
MemorystoreConnection::ListOperations(
    google::longrunning::
        ListOperationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::longrunning::Operation>>();
}

StatusOr<google::longrunning::Operation> MemorystoreConnection::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status MemorystoreConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status MemorystoreConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<MemorystoreConnection> MakeMemorystoreConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 MemorystorePolicyOptionList>(options,
                                                              __func__);
  options =
      memorystore_v1_internal::MemorystoreDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = memorystore_v1_internal::CreateDefaultMemorystoreStub(
      std::move(auth), options);
  return memorystore_v1_internal::MakeMemorystoreTracingConnection(
      std::make_shared<memorystore_v1_internal::MemorystoreConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace memorystore_v1
}  // namespace cloud
}  // namespace google
