// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/monitoring/v3/notification_service.proto

#include "google/cloud/monitoring/v3/internal/notification_channel_metadata_decorator.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/internal/url_encode.h"
#include "google/cloud/status_or.h"
#include <google/monitoring/v3/notification_service.grpc.pb.h>
#include <memory>
#include <string>
#include <utility>
#include <vector>

namespace google {
namespace cloud {
namespace monitoring_v3_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

NotificationChannelServiceMetadata::NotificationChannelServiceMetadata(
    std::shared_ptr<NotificationChannelServiceStub> child,
    std::multimap<std::string, std::string> fixed_metadata,
    std::string api_client_header)
    : child_(std::move(child)),
      fixed_metadata_(std::move(fixed_metadata)),
      api_client_header_(
          api_client_header.empty()
              ? google::cloud::internal::GeneratedLibClientHeader()
              : std::move(api_client_header)) {}

StatusOr<google::monitoring::v3::ListNotificationChannelDescriptorsResponse>
NotificationChannelServiceMetadata::ListNotificationChannelDescriptors(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::ListNotificationChannelDescriptorsRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ListNotificationChannelDescriptors(context, options, request);
}

StatusOr<google::monitoring::v3::NotificationChannelDescriptor>
NotificationChannelServiceMetadata::GetNotificationChannelDescriptor(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::GetNotificationChannelDescriptorRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetNotificationChannelDescriptor(context, options, request);
}

StatusOr<google::monitoring::v3::ListNotificationChannelsResponse>
NotificationChannelServiceMetadata::ListNotificationChannels(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::ListNotificationChannelsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ListNotificationChannels(context, options, request);
}

StatusOr<google::monitoring::v3::NotificationChannel>
NotificationChannelServiceMetadata::GetNotificationChannel(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::GetNotificationChannelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetNotificationChannel(context, options, request);
}

StatusOr<google::monitoring::v3::NotificationChannel>
NotificationChannelServiceMetadata::CreateNotificationChannel(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::CreateNotificationChannelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->CreateNotificationChannel(context, options, request);
}

StatusOr<google::monitoring::v3::NotificationChannel>
NotificationChannelServiceMetadata::UpdateNotificationChannel(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::UpdateNotificationChannelRequest const& request) {
  SetMetadata(
      context, options,
      absl::StrCat("notification_channel.name=",
                   internal::UrlEncode(request.notification_channel().name())));
  return child_->UpdateNotificationChannel(context, options, request);
}

Status NotificationChannelServiceMetadata::DeleteNotificationChannel(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::DeleteNotificationChannelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteNotificationChannel(context, options, request);
}

Status
NotificationChannelServiceMetadata::SendNotificationChannelVerificationCode(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::
        SendNotificationChannelVerificationCodeRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->SendNotificationChannelVerificationCode(context, options,
                                                         request);
}

StatusOr<google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>
NotificationChannelServiceMetadata::GetNotificationChannelVerificationCode(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::GetNotificationChannelVerificationCodeRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetNotificationChannelVerificationCode(context, options,
                                                        request);
}

StatusOr<google::monitoring::v3::NotificationChannel>
NotificationChannelServiceMetadata::VerifyNotificationChannel(
    grpc::ClientContext& context, Options const& options,
    google::monitoring::v3::VerifyNotificationChannelRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->VerifyNotificationChannel(context, options, request);
}

void NotificationChannelServiceMetadata::SetMetadata(
    grpc::ClientContext& context, Options const& options,
    std::string const& request_params) {
  context.AddMetadata("x-goog-request-params", request_params);
  SetMetadata(context, options);
}

void NotificationChannelServiceMetadata::SetMetadata(
    grpc::ClientContext& context, Options const& options) {
  google::cloud::internal::SetMetadata(context, options, fixed_metadata_,
                                       api_client_header_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace monitoring_v3_internal
}  // namespace cloud
}  // namespace google
