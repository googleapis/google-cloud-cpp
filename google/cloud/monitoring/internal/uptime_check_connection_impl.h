// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/monitoring/v3/uptime_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_MONITORING_INTERNAL_UPTIME_CHECK_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_MONITORING_INTERNAL_UPTIME_CHECK_CONNECTION_IMPL_H

#include "google/cloud/monitoring/internal/uptime_check_retry_traits.h"
#include "google/cloud/monitoring/internal/uptime_check_stub.h"
#include "google/cloud/monitoring/uptime_check_connection.h"
#include "google/cloud/monitoring/uptime_check_connection_idempotency_policy.h"
#include "google/cloud/monitoring/uptime_check_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace monitoring_internal {

class UptimeCheckServiceConnectionImpl
    : public GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceConnection {
 public:
  ~UptimeCheckServiceConnectionImpl() override = default;

  UptimeCheckServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceStub> stub,
      Options options);

  Options options() override { return options_; }

  StreamRange<google::monitoring::v3::UptimeCheckConfig> ListUptimeCheckConfigs(
      google::monitoring::v3::ListUptimeCheckConfigsRequest request) override;

  StatusOr<google::monitoring::v3::UptimeCheckConfig> GetUptimeCheckConfig(
      google::monitoring::v3::GetUptimeCheckConfigRequest const& request)
      override;

  StatusOr<google::monitoring::v3::UptimeCheckConfig> CreateUptimeCheckConfig(
      google::monitoring::v3::CreateUptimeCheckConfigRequest const& request)
      override;

  StatusOr<google::monitoring::v3::UptimeCheckConfig> UpdateUptimeCheckConfig(
      google::monitoring::v3::UpdateUptimeCheckConfigRequest const& request)
      override;

  Status DeleteUptimeCheckConfig(
      google::monitoring::v3::DeleteUptimeCheckConfigRequest const& request)
      override;

  StreamRange<google::monitoring::v3::UptimeCheckIp> ListUptimeCheckIps(
      google::monitoring::v3::ListUptimeCheckIpsRequest request) override;

 private:
  std::unique_ptr<GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceRetryPolicy>
  retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options
            .has<GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceRetryPolicyOption>()) {
      return options
          .get<GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceRetryPolicyOption>()
          ->clone();
    }
    return options_
        .get<GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceBackoffPolicyOption>()) {
      return options
          .get<GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceBackoffPolicyOption>()
          ->clone();
    }
    return options_
        .get<GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<
      GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options
            .has<GOOGLE_CLOUD_CPP_NS::
                     UptimeCheckServiceConnectionIdempotencyPolicyOption>()) {
      return options
          .get<GOOGLE_CLOUD_CPP_NS::
                   UptimeCheckServiceConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<GOOGLE_CLOUD_CPP_NS::
                 UptimeCheckServiceConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<GOOGLE_CLOUD_CPP_NS::UptimeCheckServiceStub> stub_;
  Options options_;
};

}  // namespace monitoring_internal
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_MONITORING_INTERNAL_UPTIME_CHECK_CONNECTION_IMPL_H
