// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/shell/v1/cloudshell.proto

#include "google/cloud/shell/v1/internal/cloud_shell_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace shell_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

CloudShellServiceTracingConnection::CloudShellServiceTracingConnection(
    std::shared_ptr<shell_v1::CloudShellServiceConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::shell::v1::Environment>
CloudShellServiceTracingConnection::GetEnvironment(
    google::cloud::shell::v1::GetEnvironmentRequest const& request) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::GetEnvironment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetEnvironment(request));
}

future<StatusOr<google::cloud::shell::v1::StartEnvironmentResponse>>
CloudShellServiceTracingConnection::StartEnvironment(
    google::cloud::shell::v1::StartEnvironmentRequest const& request) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::StartEnvironment");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->StartEnvironment(request));
}

StatusOr<google::longrunning::Operation>
CloudShellServiceTracingConnection::StartEnvironment(
    NoAwaitTag,
    google::cloud::shell::v1::StartEnvironmentRequest const& request) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::StartEnvironment");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span,
                           child_->StartEnvironment(NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::shell::v1::StartEnvironmentResponse>>
CloudShellServiceTracingConnection::StartEnvironment(
    google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::StartEnvironment");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->StartEnvironment(operation));
}

future<StatusOr<google::cloud::shell::v1::AuthorizeEnvironmentResponse>>
CloudShellServiceTracingConnection::AuthorizeEnvironment(
    google::cloud::shell::v1::AuthorizeEnvironmentRequest const& request) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::AuthorizeEnvironment");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->AuthorizeEnvironment(request));
}

StatusOr<google::longrunning::Operation>
CloudShellServiceTracingConnection::AuthorizeEnvironment(
    NoAwaitTag,
    google::cloud::shell::v1::AuthorizeEnvironmentRequest const& request) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::AuthorizeEnvironment");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span,
                           child_->AuthorizeEnvironment(NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::shell::v1::AuthorizeEnvironmentResponse>>
CloudShellServiceTracingConnection::AuthorizeEnvironment(
    google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::AuthorizeEnvironment");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->AuthorizeEnvironment(operation));
}

future<StatusOr<google::cloud::shell::v1::AddPublicKeyResponse>>
CloudShellServiceTracingConnection::AddPublicKey(
    google::cloud::shell::v1::AddPublicKeyRequest const& request) {
  auto span =
      internal::MakeSpan("shell_v1::CloudShellServiceConnection::AddPublicKey");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->AddPublicKey(request));
}

StatusOr<google::longrunning::Operation>
CloudShellServiceTracingConnection::AddPublicKey(
    NoAwaitTag, google::cloud::shell::v1::AddPublicKeyRequest const& request) {
  auto span =
      internal::MakeSpan("shell_v1::CloudShellServiceConnection::AddPublicKey");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span, child_->AddPublicKey(NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::shell::v1::AddPublicKeyResponse>>
CloudShellServiceTracingConnection::AddPublicKey(
    google::longrunning::Operation const& operation) {
  auto span =
      internal::MakeSpan("shell_v1::CloudShellServiceConnection::AddPublicKey");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->AddPublicKey(operation));
}

future<StatusOr<google::cloud::shell::v1::RemovePublicKeyResponse>>
CloudShellServiceTracingConnection::RemovePublicKey(
    google::cloud::shell::v1::RemovePublicKeyRequest const& request) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::RemovePublicKey");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->RemovePublicKey(request));
}

StatusOr<google::longrunning::Operation>
CloudShellServiceTracingConnection::RemovePublicKey(
    NoAwaitTag,
    google::cloud::shell::v1::RemovePublicKeyRequest const& request) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::RemovePublicKey");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(*span,
                           child_->RemovePublicKey(NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::shell::v1::RemovePublicKeyResponse>>
CloudShellServiceTracingConnection::RemovePublicKey(
    google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "shell_v1::CloudShellServiceConnection::RemovePublicKey");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->RemovePublicKey(operation));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<shell_v1::CloudShellServiceConnection>
MakeCloudShellServiceTracingConnection(
    std::shared_ptr<shell_v1::CloudShellServiceConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn =
        std::make_shared<CloudShellServiceTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace shell_v1_internal
}  // namespace cloud
}  // namespace google
