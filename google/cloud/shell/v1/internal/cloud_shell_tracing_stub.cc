// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/shell/v1/cloudshell.proto

#include "google/cloud/shell/v1/internal/cloud_shell_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace shell_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

CloudShellServiceTracingStub::CloudShellServiceTracingStub(
    std::shared_ptr<CloudShellServiceStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::shell::v1::Environment>
CloudShellServiceTracingStub::GetEnvironment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::shell::v1::GetEnvironmentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.shell.v1.CloudShellService",
                                     "GetEnvironment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetEnvironment(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudShellServiceTracingStub::AsyncStartEnvironment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::shell::v1::StartEnvironmentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.shell.v1.CloudShellService",
                                     "StartEnvironment");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncStartEnvironment(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
CloudShellServiceTracingStub::StartEnvironment(
    grpc::ClientContext& context, Options options,
    google::cloud::shell::v1::StartEnvironmentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.shell.v1.CloudShellService",
                                     "StartEnvironment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->StartEnvironment(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudShellServiceTracingStub::AsyncAuthorizeEnvironment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::shell::v1::AuthorizeEnvironmentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.shell.v1.CloudShellService",
                                     "AuthorizeEnvironment");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncAuthorizeEnvironment(cq, context, std::move(options),
                                             request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
CloudShellServiceTracingStub::AuthorizeEnvironment(
    grpc::ClientContext& context, Options options,
    google::cloud::shell::v1::AuthorizeEnvironmentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.shell.v1.CloudShellService",
                                     "AuthorizeEnvironment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->AuthorizeEnvironment(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudShellServiceTracingStub::AsyncAddPublicKey(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::shell::v1::AddPublicKeyRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.shell.v1.CloudShellService",
                                     "AddPublicKey");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncAddPublicKey(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
CloudShellServiceTracingStub::AddPublicKey(
    grpc::ClientContext& context, Options options,
    google::cloud::shell::v1::AddPublicKeyRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.shell.v1.CloudShellService",
                                     "AddPublicKey");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->AddPublicKey(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudShellServiceTracingStub::AsyncRemovePublicKey(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::shell::v1::RemovePublicKeyRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.shell.v1.CloudShellService",
                                     "RemovePublicKey");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncRemovePublicKey(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
CloudShellServiceTracingStub::RemovePublicKey(
    grpc::ClientContext& context, Options options,
    google::cloud::shell::v1::RemovePublicKeyRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.shell.v1.CloudShellService",
                                     "RemovePublicKey");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->RemovePublicKey(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
CloudShellServiceTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.longrunning.Operations", "GetOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGetOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<Status> CloudShellServiceTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.longrunning.Operations",
                                     "CancelOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCancelOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<CloudShellServiceStub> MakeCloudShellServiceTracingStub(
    std::shared_ptr<CloudShellServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<CloudShellServiceTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace shell_v1_internal
}  // namespace cloud
}  // namespace google
