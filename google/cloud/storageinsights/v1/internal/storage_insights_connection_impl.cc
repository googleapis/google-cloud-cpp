// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/storageinsights/v1/storageinsights.proto

#include "google/cloud/storageinsights/v1/internal/storage_insights_connection_impl.h"
#include "google/cloud/storageinsights/v1/internal/storage_insights_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace storageinsights_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

StorageInsightsConnectionImpl::StorageInsightsConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<storageinsights_v1_internal::StorageInsightsStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      StorageInsightsConnection::options())) {}

StreamRange<google::cloud::storageinsights::v1::ReportConfig>
StorageInsightsConnectionImpl::ListReportConfigs(
    google::cloud::storageinsights::v1::ListReportConfigsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<storageinsights_v1::StorageInsightsRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListReportConfigs(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::storageinsights::v1::ReportConfig>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::storageinsights::v1::ListReportConfigsRequest const&
              r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::storageinsights::v1::
                       ListReportConfigsRequest const& request) {
              return stub->ListReportConfigs(context, request);
            },
            r, function_name);
      },
      [](google::cloud::storageinsights::v1::ListReportConfigsResponse r) {
        std::vector<google::cloud::storageinsights::v1::ReportConfig> result(
            r.report_configs().size());
        auto& messages = *r.mutable_report_configs();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::storageinsights::v1::ReportConfig>
StorageInsightsConnectionImpl::GetReportConfig(
    google::cloud::storageinsights::v1::GetReportConfigRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetReportConfig(request),
      [this](grpc::ClientContext& context,
             google::cloud::storageinsights::v1::GetReportConfigRequest const&
                 request) { return stub_->GetReportConfig(context, request); },
      request, __func__);
}

StatusOr<google::cloud::storageinsights::v1::ReportConfig>
StorageInsightsConnectionImpl::CreateReportConfig(
    google::cloud::storageinsights::v1::CreateReportConfigRequest const&
        request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateReportConfig(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::storageinsights::v1::CreateReportConfigRequest const&
              request) { return stub_->CreateReportConfig(context, request); },
      request, __func__);
}

StatusOr<google::cloud::storageinsights::v1::ReportConfig>
StorageInsightsConnectionImpl::UpdateReportConfig(
    google::cloud::storageinsights::v1::UpdateReportConfigRequest const&
        request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateReportConfig(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::storageinsights::v1::UpdateReportConfigRequest const&
              request) { return stub_->UpdateReportConfig(context, request); },
      request, __func__);
}

Status StorageInsightsConnectionImpl::DeleteReportConfig(
    google::cloud::storageinsights::v1::DeleteReportConfigRequest const&
        request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteReportConfig(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::storageinsights::v1::DeleteReportConfigRequest const&
              request) { return stub_->DeleteReportConfig(context, request); },
      request, __func__);
}

StreamRange<google::cloud::storageinsights::v1::ReportDetail>
StorageInsightsConnectionImpl::ListReportDetails(
    google::cloud::storageinsights::v1::ListReportDetailsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<storageinsights_v1::StorageInsightsRetryPolicy const>(
          retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListReportDetails(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::storageinsights::v1::ReportDetail>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::storageinsights::v1::ListReportDetailsRequest const&
              r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::storageinsights::v1::
                       ListReportDetailsRequest const& request) {
              return stub->ListReportDetails(context, request);
            },
            r, function_name);
      },
      [](google::cloud::storageinsights::v1::ListReportDetailsResponse r) {
        std::vector<google::cloud::storageinsights::v1::ReportDetail> result(
            r.report_details().size());
        auto& messages = *r.mutable_report_details();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::storageinsights::v1::ReportDetail>
StorageInsightsConnectionImpl::GetReportDetail(
    google::cloud::storageinsights::v1::GetReportDetailRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetReportDetail(request),
      [this](grpc::ClientContext& context,
             google::cloud::storageinsights::v1::GetReportDetailRequest const&
                 request) { return stub_->GetReportDetail(context, request); },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace storageinsights_v1_internal
}  // namespace cloud
}  // namespace google
