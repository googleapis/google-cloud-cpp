// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/storageinsights/v1/storageinsights.proto

#include "google/cloud/storageinsights/v1/internal/storage_insights_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace storageinsights_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

StorageInsightsTracingStub::StorageInsightsTracingStub(
    std::shared_ptr<StorageInsightsStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::storageinsights::v1::ListReportConfigsResponse>
StorageInsightsTracingStub::ListReportConfigs(
    grpc::ClientContext& context, Options const& options,
    google::cloud::storageinsights::v1::ListReportConfigsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "ListReportConfigs");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListReportConfigs(context, options, request));
}

StatusOr<google::cloud::storageinsights::v1::ReportConfig>
StorageInsightsTracingStub::GetReportConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::storageinsights::v1::GetReportConfigRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "GetReportConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetReportConfig(context, options, request));
}

StatusOr<google::cloud::storageinsights::v1::ReportConfig>
StorageInsightsTracingStub::CreateReportConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::storageinsights::v1::CreateReportConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "CreateReportConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateReportConfig(context, options, request));
}

StatusOr<google::cloud::storageinsights::v1::ReportConfig>
StorageInsightsTracingStub::UpdateReportConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::storageinsights::v1::UpdateReportConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "UpdateReportConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateReportConfig(context, options, request));
}

Status StorageInsightsTracingStub::DeleteReportConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::storageinsights::v1::DeleteReportConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "DeleteReportConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteReportConfig(context, options, request));
}

StatusOr<google::cloud::storageinsights::v1::ListReportDetailsResponse>
StorageInsightsTracingStub::ListReportDetails(
    grpc::ClientContext& context, Options const& options,
    google::cloud::storageinsights::v1::ListReportDetailsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "ListReportDetails");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListReportDetails(context, options, request));
}

StatusOr<google::cloud::storageinsights::v1::ReportDetail>
StorageInsightsTracingStub::GetReportDetail(
    grpc::ClientContext& context, Options const& options,
    google::cloud::storageinsights::v1::GetReportDetailRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "GetReportDetail");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetReportDetail(context, options, request));
}

StatusOr<google::cloud::storageinsights::v1::ListDatasetConfigsResponse>
StorageInsightsTracingStub::ListDatasetConfigs(
    grpc::ClientContext& context, Options const& options,
    google::cloud::storageinsights::v1::ListDatasetConfigsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "ListDatasetConfigs");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListDatasetConfigs(context, options, request));
}

StatusOr<google::cloud::storageinsights::v1::DatasetConfig>
StorageInsightsTracingStub::GetDatasetConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::storageinsights::v1::GetDatasetConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "GetDatasetConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetDatasetConfig(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
StorageInsightsTracingStub::AsyncCreateDatasetConfig(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::storageinsights::v1::CreateDatasetConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "CreateDatasetConfig");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateDatasetConfig(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
StorageInsightsTracingStub::CreateDatasetConfig(
    grpc::ClientContext& context, Options options,
    google::cloud::storageinsights::v1::CreateDatasetConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "CreateDatasetConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateDatasetConfig(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
StorageInsightsTracingStub::AsyncUpdateDatasetConfig(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::storageinsights::v1::UpdateDatasetConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "UpdateDatasetConfig");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateDatasetConfig(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
StorageInsightsTracingStub::UpdateDatasetConfig(
    grpc::ClientContext& context, Options options,
    google::cloud::storageinsights::v1::UpdateDatasetConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "UpdateDatasetConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateDatasetConfig(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
StorageInsightsTracingStub::AsyncDeleteDatasetConfig(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::storageinsights::v1::DeleteDatasetConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "DeleteDatasetConfig");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteDatasetConfig(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
StorageInsightsTracingStub::DeleteDatasetConfig(
    grpc::ClientContext& context, Options options,
    google::cloud::storageinsights::v1::DeleteDatasetConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "DeleteDatasetConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteDatasetConfig(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
StorageInsightsTracingStub::AsyncLinkDataset(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::storageinsights::v1::LinkDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "LinkDataset");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncLinkDataset(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
StorageInsightsTracingStub::LinkDataset(
    grpc::ClientContext& context, Options options,
    google::cloud::storageinsights::v1::LinkDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "LinkDataset");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->LinkDataset(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
StorageInsightsTracingStub::AsyncUnlinkDataset(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::storageinsights::v1::UnlinkDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "UnlinkDataset");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUnlinkDataset(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
StorageInsightsTracingStub::UnlinkDataset(
    grpc::ClientContext& context, Options options,
    google::cloud::storageinsights::v1::UnlinkDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "UnlinkDataset");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UnlinkDataset(context, options, request));
}

StatusOr<google::cloud::location::ListLocationsResponse>
StorageInsightsTracingStub::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "ListLocations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListLocations(context, options, request));
}

StatusOr<google::cloud::location::Location>
StorageInsightsTracingStub::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetLocation(context, options, request));
}

StatusOr<google::longrunning::ListOperationsResponse>
StorageInsightsTracingStub::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "ListOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListOperations(context, options, request));
}

StatusOr<google::longrunning::Operation>
StorageInsightsTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

Status StorageInsightsTracingStub::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteOperation(context, options, request));
}

Status StorageInsightsTracingStub::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.storageinsights.v1.StorageInsights", "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CancelOperation(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
StorageInsightsTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.longrunning.Operations", "GetOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGetOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<Status> StorageInsightsTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.longrunning.Operations",
                                     "CancelOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCancelOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<StorageInsightsStub> MakeStorageInsightsTracingStub(
    std::shared_ptr<StorageInsightsStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<StorageInsightsTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace storageinsights_v1_internal
}  // namespace cloud
}  // namespace google
