// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/orchestration/airflow/service/v1/image_versions.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPOSER_IMAGE_VERSIONS_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPOSER_IMAGE_VERSIONS_CONNECTION_H

#include "google/cloud/composer/image_versions_connection_idempotency_policy.h"
#include "google/cloud/composer/internal/image_versions_retry_traits.h"
#include "google/cloud/composer/internal/image_versions_stub.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace composer {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ImageVersionsRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        composer_internal::ImageVersionsRetryTraits>;

using ImageVersionsLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        composer_internal::ImageVersionsRetryTraits>;

using ImageVersionsLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        composer_internal::ImageVersionsRetryTraits>;

/**
 * The `ImageVersionsConnection` object for `ImageVersionsClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `ImageVersionsClient`. This allows users to inject custom behavior
 * (e.g., with a Google Mock object) when writing tests that use objects of type
 * `ImageVersionsClient`.
 *
 * To create a concrete instance, see `MakeImageVersionsConnection()`.
 *
 * For mocking, see `composer_mocks::MockImageVersionsConnection`.
 */
class ImageVersionsConnection {
 public:
  virtual ~ImageVersionsConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StreamRange<
      google::cloud::orchestration::airflow::service::v1::ImageVersion>
  ListImageVersions(google::cloud::orchestration::airflow::service::v1::
                        ListImageVersionsRequest request);
};

/**
 * A factory function to construct an object of type `ImageVersionsConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of ImageVersionsClient,
 * and that class used instead.
 *
 * The optional @p opts argument may be used to configure aspects of the
 * returned `ImageVersionsConnection`. Expected options are any of the types in
 * the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::composer::ImageVersionsPolicyOptionList`
 *
 * @note Unrecognized options will be ignored. To debug issues with options set
 *     `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment and unexpected
 *     options will be logged.
 *
 * @param options (optional) Configure the `ImageVersionsConnection` created by
 * this function.
 */
std::shared_ptr<ImageVersionsConnection> MakeImageVersionsConnection(
    Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace composer
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_COMPOSER_IMAGE_VERSIONS_CONNECTION_H
