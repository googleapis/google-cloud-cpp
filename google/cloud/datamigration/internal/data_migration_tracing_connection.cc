// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/clouddms/v1/clouddms.proto

#include "google/cloud/datamigration/internal/data_migration_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace datamigration_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DataMigrationServiceTracingConnection::DataMigrationServiceTracingConnection(
    std::shared_ptr<datamigration::DataMigrationServiceConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::clouddms::v1::MigrationJob>
DataMigrationServiceTracingConnection::ListMigrationJobs(
    google::cloud::clouddms::v1::ListMigrationJobsRequest request) {
  auto span = internal::MakeSpan(
      "datamigration::DataMigrationServiceConnection::ListMigrationJobs");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListMigrationJobs(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::clouddms::v1::MigrationJob>(std::move(span),
                                                 std::move(sr));
}

StatusOr<google::cloud::clouddms::v1::MigrationJob>
DataMigrationServiceTracingConnection::GetMigrationJob(
    google::cloud::clouddms::v1::GetMigrationJobRequest const& request) {
  auto span = internal::MakeSpan(
      "datamigration::DataMigrationServiceConnection::GetMigrationJob");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetMigrationJob(request));
}

future<StatusOr<google::cloud::clouddms::v1::MigrationJob>>
DataMigrationServiceTracingConnection::CreateMigrationJob(
    google::cloud::clouddms::v1::CreateMigrationJobRequest const& request) {
  return child_->CreateMigrationJob(request);
}

future<StatusOr<google::cloud::clouddms::v1::MigrationJob>>
DataMigrationServiceTracingConnection::UpdateMigrationJob(
    google::cloud::clouddms::v1::UpdateMigrationJobRequest const& request) {
  return child_->UpdateMigrationJob(request);
}

future<StatusOr<google::cloud::clouddms::v1::OperationMetadata>>
DataMigrationServiceTracingConnection::DeleteMigrationJob(
    google::cloud::clouddms::v1::DeleteMigrationJobRequest const& request) {
  return child_->DeleteMigrationJob(request);
}

future<StatusOr<google::cloud::clouddms::v1::MigrationJob>>
DataMigrationServiceTracingConnection::StartMigrationJob(
    google::cloud::clouddms::v1::StartMigrationJobRequest const& request) {
  return child_->StartMigrationJob(request);
}

future<StatusOr<google::cloud::clouddms::v1::MigrationJob>>
DataMigrationServiceTracingConnection::StopMigrationJob(
    google::cloud::clouddms::v1::StopMigrationJobRequest const& request) {
  return child_->StopMigrationJob(request);
}

future<StatusOr<google::cloud::clouddms::v1::MigrationJob>>
DataMigrationServiceTracingConnection::ResumeMigrationJob(
    google::cloud::clouddms::v1::ResumeMigrationJobRequest const& request) {
  return child_->ResumeMigrationJob(request);
}

future<StatusOr<google::cloud::clouddms::v1::MigrationJob>>
DataMigrationServiceTracingConnection::PromoteMigrationJob(
    google::cloud::clouddms::v1::PromoteMigrationJobRequest const& request) {
  return child_->PromoteMigrationJob(request);
}

future<StatusOr<google::cloud::clouddms::v1::MigrationJob>>
DataMigrationServiceTracingConnection::VerifyMigrationJob(
    google::cloud::clouddms::v1::VerifyMigrationJobRequest const& request) {
  return child_->VerifyMigrationJob(request);
}

future<StatusOr<google::cloud::clouddms::v1::MigrationJob>>
DataMigrationServiceTracingConnection::RestartMigrationJob(
    google::cloud::clouddms::v1::RestartMigrationJobRequest const& request) {
  return child_->RestartMigrationJob(request);
}

StatusOr<google::cloud::clouddms::v1::SshScript>
DataMigrationServiceTracingConnection::GenerateSshScript(
    google::cloud::clouddms::v1::GenerateSshScriptRequest const& request) {
  auto span = internal::MakeSpan(
      "datamigration::DataMigrationServiceConnection::GenerateSshScript");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GenerateSshScript(request));
}

StreamRange<google::cloud::clouddms::v1::ConnectionProfile>
DataMigrationServiceTracingConnection::ListConnectionProfiles(
    google::cloud::clouddms::v1::ListConnectionProfilesRequest request) {
  auto span = internal::MakeSpan(
      "datamigration::DataMigrationServiceConnection::ListConnectionProfiles");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListConnectionProfiles(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::clouddms::v1::ConnectionProfile>(std::move(span),
                                                      std::move(sr));
}

StatusOr<google::cloud::clouddms::v1::ConnectionProfile>
DataMigrationServiceTracingConnection::GetConnectionProfile(
    google::cloud::clouddms::v1::GetConnectionProfileRequest const& request) {
  auto span = internal::MakeSpan(
      "datamigration::DataMigrationServiceConnection::GetConnectionProfile");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetConnectionProfile(request));
}

future<StatusOr<google::cloud::clouddms::v1::ConnectionProfile>>
DataMigrationServiceTracingConnection::CreateConnectionProfile(
    google::cloud::clouddms::v1::CreateConnectionProfileRequest const&
        request) {
  return child_->CreateConnectionProfile(request);
}

future<StatusOr<google::cloud::clouddms::v1::ConnectionProfile>>
DataMigrationServiceTracingConnection::UpdateConnectionProfile(
    google::cloud::clouddms::v1::UpdateConnectionProfileRequest const&
        request) {
  return child_->UpdateConnectionProfile(request);
}

future<StatusOr<google::cloud::clouddms::v1::OperationMetadata>>
DataMigrationServiceTracingConnection::DeleteConnectionProfile(
    google::cloud::clouddms::v1::DeleteConnectionProfileRequest const&
        request) {
  return child_->DeleteConnectionProfile(request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<datamigration::DataMigrationServiceConnection>
MakeDataMigrationServiceTracingConnection(
    std::shared_ptr<datamigration::DataMigrationServiceConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<DataMigrationServiceTracingConnection>(
        std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace datamigration_internal
}  // namespace cloud
}  // namespace google
