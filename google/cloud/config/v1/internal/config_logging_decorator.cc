// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/config/v1/config.proto

#include "google/cloud/config/v1/internal/config_logging_decorator.h"
#include "google/cloud/internal/log_wrapper.h"
#include "google/cloud/status_or.h"
#include <google/cloud/config/v1/config.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace config_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ConfigLogging::ConfigLogging(std::shared_ptr<ConfigStub> child,
                             TracingOptions tracing_options,
                             std::set<std::string> const& components)
    : child_(std::move(child)),
      tracing_options_(std::move(tracing_options)),
      stream_logging_(components.find("rpc-streams") != components.end()) {}

StatusOr<google::cloud::config::v1::ListDeploymentsResponse>
ConfigLogging::ListDeployments(
    grpc::ClientContext& context,
    google::cloud::config::v1::ListDeploymentsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ListDeploymentsRequest const& request) {
        return child_->ListDeployments(context, request);
      },
      context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::config::v1::Deployment> ConfigLogging::GetDeployment(
    grpc::ClientContext& context,
    google::cloud::config::v1::GetDeploymentRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::GetDeploymentRequest const& request) {
        return child_->GetDeployment(context, request);
      },
      context, request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
ConfigLogging::AsyncCreateDeployment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::config::v1::CreateDeploymentRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::config::v1::CreateDeploymentRequest const& request) {
        return child_->AsyncCreateDeployment(cq, std::move(context), request);
      },
      cq, std::move(context), request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
ConfigLogging::AsyncUpdateDeployment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::config::v1::UpdateDeploymentRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::config::v1::UpdateDeploymentRequest const& request) {
        return child_->AsyncUpdateDeployment(cq, std::move(context), request);
      },
      cq, std::move(context), request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
ConfigLogging::AsyncDeleteDeployment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::config::v1::DeleteDeploymentRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::config::v1::DeleteDeploymentRequest const& request) {
        return child_->AsyncDeleteDeployment(cq, std::move(context), request);
      },
      cq, std::move(context), request, __func__, tracing_options_);
}

StatusOr<google::cloud::config::v1::ListRevisionsResponse>
ConfigLogging::ListRevisions(
    grpc::ClientContext& context,
    google::cloud::config::v1::ListRevisionsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ListRevisionsRequest const& request) {
        return child_->ListRevisions(context, request);
      },
      context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::config::v1::Revision> ConfigLogging::GetRevision(
    grpc::ClientContext& context,
    google::cloud::config::v1::GetRevisionRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::GetRevisionRequest const& request) {
        return child_->GetRevision(context, request);
      },
      context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::config::v1::Resource> ConfigLogging::GetResource(
    grpc::ClientContext& context,
    google::cloud::config::v1::GetResourceRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::GetResourceRequest const& request) {
        return child_->GetResource(context, request);
      },
      context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::config::v1::ListResourcesResponse>
ConfigLogging::ListResources(
    grpc::ClientContext& context,
    google::cloud::config::v1::ListResourcesRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ListResourcesRequest const& request) {
        return child_->ListResources(context, request);
      },
      context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::config::v1::Statefile>
ConfigLogging::ExportDeploymentStatefile(
    grpc::ClientContext& context,
    google::cloud::config::v1::ExportDeploymentStatefileRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ExportDeploymentStatefileRequest const&
                 request) {
        return child_->ExportDeploymentStatefile(context, request);
      },
      context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::config::v1::Statefile>
ConfigLogging::ExportRevisionStatefile(
    grpc::ClientContext& context,
    google::cloud::config::v1::ExportRevisionStatefileRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ExportRevisionStatefileRequest const&
                 request) {
        return child_->ExportRevisionStatefile(context, request);
      },
      context, request, __func__, tracing_options_);
}

StatusOr<google::cloud::config::v1::Statefile> ConfigLogging::ImportStatefile(
    grpc::ClientContext& context,
    google::cloud::config::v1::ImportStatefileRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ImportStatefileRequest const& request) {
        return child_->ImportStatefile(context, request);
      },
      context, request, __func__, tracing_options_);
}

Status ConfigLogging::DeleteStatefile(
    grpc::ClientContext& context,
    google::cloud::config::v1::DeleteStatefileRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::DeleteStatefileRequest const& request) {
        return child_->DeleteStatefile(context, request);
      },
      context, request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
ConfigLogging::AsyncLockDeployment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::config::v1::LockDeploymentRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::cloud::config::v1::LockDeploymentRequest const& request) {
        return child_->AsyncLockDeployment(cq, std::move(context), request);
      },
      cq, std::move(context), request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
ConfigLogging::AsyncUnlockDeployment(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::config::v1::UnlockDeploymentRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::config::v1::UnlockDeploymentRequest const& request) {
        return child_->AsyncUnlockDeployment(cq, std::move(context), request);
      },
      cq, std::move(context), request, __func__, tracing_options_);
}

StatusOr<google::cloud::config::v1::LockInfo> ConfigLogging::ExportLockInfo(
    grpc::ClientContext& context,
    google::cloud::config::v1::ExportLockInfoRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ExportLockInfoRequest const& request) {
        return child_->ExportLockInfo(context, request);
      },
      context, request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
ConfigLogging::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return child_->AsyncGetOperation(cq, std::move(context), request);
      },
      cq, std::move(context), request, __func__, tracing_options_);
}

future<Status> ConfigLogging::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return child_->AsyncCancelOperation(cq, std::move(context), request);
      },
      cq, std::move(context), request, __func__, tracing_options_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace config_v1_internal
}  // namespace cloud
}  // namespace google
