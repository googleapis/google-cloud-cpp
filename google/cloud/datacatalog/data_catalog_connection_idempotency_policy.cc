// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/datacatalog/v1/datacatalog.proto

#include "google/cloud/datacatalog/data_catalog_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace datacatalog {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

DataCatalogConnectionIdempotencyPolicy::
    ~DataCatalogConnectionIdempotencyPolicy() = default;

namespace {
class DefaultDataCatalogConnectionIdempotencyPolicy
    : public DataCatalogConnectionIdempotencyPolicy {
 public:
  ~DefaultDataCatalogConnectionIdempotencyPolicy() override = default;

  /// Create a new copy of this object.
  std::unique_ptr<DataCatalogConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<DefaultDataCatalogConnectionIdempotencyPolicy>(
        *this);
  }

  Idempotency SearchCatalog(
      google::cloud::datacatalog::v1::SearchCatalogRequest) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency CreateEntryGroup(
      google::cloud::datacatalog::v1::CreateEntryGroupRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetEntryGroup(
      google::cloud::datacatalog::v1::GetEntryGroupRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency UpdateEntryGroup(
      google::cloud::datacatalog::v1::UpdateEntryGroupRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteEntryGroup(
      google::cloud::datacatalog::v1::DeleteEntryGroupRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListEntryGroups(
      google::cloud::datacatalog::v1::ListEntryGroupsRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateEntry(
      google::cloud::datacatalog::v1::CreateEntryRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateEntry(
      google::cloud::datacatalog::v1::UpdateEntryRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteEntry(
      google::cloud::datacatalog::v1::DeleteEntryRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetEntry(
      google::cloud::datacatalog::v1::GetEntryRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency LookupEntry(
      google::cloud::datacatalog::v1::LookupEntryRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListEntries(
      google::cloud::datacatalog::v1::ListEntriesRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateTagTemplate(
      google::cloud::datacatalog::v1::CreateTagTemplateRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetTagTemplate(
      google::cloud::datacatalog::v1::GetTagTemplateRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency UpdateTagTemplate(
      google::cloud::datacatalog::v1::UpdateTagTemplateRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteTagTemplate(
      google::cloud::datacatalog::v1::DeleteTagTemplateRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency CreateTagTemplateField(
      google::cloud::datacatalog::v1::CreateTagTemplateFieldRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateTagTemplateField(
      google::cloud::datacatalog::v1::UpdateTagTemplateFieldRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency RenameTagTemplateField(
      google::cloud::datacatalog::v1::RenameTagTemplateFieldRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency RenameTagTemplateFieldEnumValue(
      google::cloud::datacatalog::v1::
          RenameTagTemplateFieldEnumValueRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteTagTemplateField(
      google::cloud::datacatalog::v1::DeleteTagTemplateFieldRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency CreateTag(
      google::cloud::datacatalog::v1::CreateTagRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateTag(
      google::cloud::datacatalog::v1::UpdateTagRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteTag(
      google::cloud::datacatalog::v1::DeleteTagRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListTags(
      google::cloud::datacatalog::v1::ListTagsRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency SetIamPolicy(
      google::iam::v1::SetIamPolicyRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetIamPolicy(
      google::iam::v1::GetIamPolicyRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency TestIamPermissions(
      google::iam::v1::TestIamPermissionsRequest const&) override {
    return Idempotency::kNonIdempotent;
  }
};
}  // namespace

std::unique_ptr<DataCatalogConnectionIdempotencyPolicy>
MakeDefaultDataCatalogConnectionIdempotencyPolicy() {
  return absl::make_unique<DefaultDataCatalogConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace datacatalog
}  // namespace cloud
}  // namespace google
