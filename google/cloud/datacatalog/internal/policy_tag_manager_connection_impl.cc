// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/datacatalog/v1/policytagmanager.proto

#include "google/cloud/datacatalog/internal/policy_tag_manager_connection_impl.h"
#include "google/cloud/datacatalog/internal/policy_tag_manager_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace datacatalog_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

PolicyTagManagerConnectionImpl::PolicyTagManagerConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<datacatalog_internal::PolicyTagManagerStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      PolicyTagManagerConnection::options())) {}

StatusOr<google::cloud::datacatalog::v1::Taxonomy>
PolicyTagManagerConnectionImpl::CreateTaxonomy(
    google::cloud::datacatalog::v1::CreateTaxonomyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateTaxonomy(request),
      [this](grpc::ClientContext& context,
             google::cloud::datacatalog::v1::CreateTaxonomyRequest const&
                 request) { return stub_->CreateTaxonomy(context, request); },
      request, __func__);
}

Status PolicyTagManagerConnectionImpl::DeleteTaxonomy(
    google::cloud::datacatalog::v1::DeleteTaxonomyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteTaxonomy(request),
      [this](grpc::ClientContext& context,
             google::cloud::datacatalog::v1::DeleteTaxonomyRequest const&
                 request) { return stub_->DeleteTaxonomy(context, request); },
      request, __func__);
}

StatusOr<google::cloud::datacatalog::v1::Taxonomy>
PolicyTagManagerConnectionImpl::UpdateTaxonomy(
    google::cloud::datacatalog::v1::UpdateTaxonomyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateTaxonomy(request),
      [this](grpc::ClientContext& context,
             google::cloud::datacatalog::v1::UpdateTaxonomyRequest const&
                 request) { return stub_->UpdateTaxonomy(context, request); },
      request, __func__);
}

StreamRange<google::cloud::datacatalog::v1::Taxonomy>
PolicyTagManagerConnectionImpl::ListTaxonomies(
    google::cloud::datacatalog::v1::ListTaxonomiesRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<datacatalog::PolicyTagManagerRetryPolicy const>(
      retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListTaxonomies(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::datacatalog::v1::Taxonomy>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::datacatalog::v1::ListTaxonomiesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::datacatalog::v1::ListTaxonomiesRequest const&
                       request) {
              return stub->ListTaxonomies(context, request);
            },
            r, function_name);
      },
      [](google::cloud::datacatalog::v1::ListTaxonomiesResponse r) {
        std::vector<google::cloud::datacatalog::v1::Taxonomy> result(
            r.taxonomies().size());
        auto& messages = *r.mutable_taxonomies();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::datacatalog::v1::Taxonomy>
PolicyTagManagerConnectionImpl::GetTaxonomy(
    google::cloud::datacatalog::v1::GetTaxonomyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetTaxonomy(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::datacatalog::v1::GetTaxonomyRequest const& request) {
        return stub_->GetTaxonomy(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::datacatalog::v1::PolicyTag>
PolicyTagManagerConnectionImpl::CreatePolicyTag(
    google::cloud::datacatalog::v1::CreatePolicyTagRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreatePolicyTag(request),
      [this](grpc::ClientContext& context,
             google::cloud::datacatalog::v1::CreatePolicyTagRequest const&
                 request) { return stub_->CreatePolicyTag(context, request); },
      request, __func__);
}

Status PolicyTagManagerConnectionImpl::DeletePolicyTag(
    google::cloud::datacatalog::v1::DeletePolicyTagRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeletePolicyTag(request),
      [this](grpc::ClientContext& context,
             google::cloud::datacatalog::v1::DeletePolicyTagRequest const&
                 request) { return stub_->DeletePolicyTag(context, request); },
      request, __func__);
}

StatusOr<google::cloud::datacatalog::v1::PolicyTag>
PolicyTagManagerConnectionImpl::UpdatePolicyTag(
    google::cloud::datacatalog::v1::UpdatePolicyTagRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdatePolicyTag(request),
      [this](grpc::ClientContext& context,
             google::cloud::datacatalog::v1::UpdatePolicyTagRequest const&
                 request) { return stub_->UpdatePolicyTag(context, request); },
      request, __func__);
}

StreamRange<google::cloud::datacatalog::v1::PolicyTag>
PolicyTagManagerConnectionImpl::ListPolicyTags(
    google::cloud::datacatalog::v1::ListPolicyTagsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<datacatalog::PolicyTagManagerRetryPolicy const>(
      retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListPolicyTags(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::datacatalog::v1::PolicyTag>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::datacatalog::v1::ListPolicyTagsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::datacatalog::v1::ListPolicyTagsRequest const&
                       request) {
              return stub->ListPolicyTags(context, request);
            },
            r, function_name);
      },
      [](google::cloud::datacatalog::v1::ListPolicyTagsResponse r) {
        std::vector<google::cloud::datacatalog::v1::PolicyTag> result(
            r.policy_tags().size());
        auto& messages = *r.mutable_policy_tags();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::datacatalog::v1::PolicyTag>
PolicyTagManagerConnectionImpl::GetPolicyTag(
    google::cloud::datacatalog::v1::GetPolicyTagRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetPolicyTag(request),
      [this](
          grpc::ClientContext& context,
          google::cloud::datacatalog::v1::GetPolicyTagRequest const& request) {
        return stub_->GetPolicyTag(context, request);
      },
      request, __func__);
}

StatusOr<google::iam::v1::Policy> PolicyTagManagerConnectionImpl::GetIamPolicy(
    google::iam::v1::GetIamPolicyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetIamPolicy(request),
      [this](grpc::ClientContext& context,
             google::iam::v1::GetIamPolicyRequest const& request) {
        return stub_->GetIamPolicy(context, request);
      },
      request, __func__);
}

StatusOr<google::iam::v1::Policy> PolicyTagManagerConnectionImpl::SetIamPolicy(
    google::iam::v1::SetIamPolicyRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->SetIamPolicy(request),
      [this](grpc::ClientContext& context,
             google::iam::v1::SetIamPolicyRequest const& request) {
        return stub_->SetIamPolicy(context, request);
      },
      request, __func__);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
PolicyTagManagerConnectionImpl::TestIamPermissions(
    google::iam::v1::TestIamPermissionsRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->TestIamPermissions(request),
      [this](grpc::ClientContext& context,
             google::iam::v1::TestIamPermissionsRequest const& request) {
        return stub_->TestIamPermissions(context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace datacatalog_internal
}  // namespace cloud
}  // namespace google
