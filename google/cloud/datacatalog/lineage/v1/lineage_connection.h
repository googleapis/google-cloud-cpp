// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/datacatalog/lineage/v1/lineage.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DATACATALOG_LINEAGE_V1_LINEAGE_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DATACATALOG_LINEAGE_V1_LINEAGE_CONNECTION_H

#include "google/cloud/datacatalog/lineage/v1/internal/lineage_retry_traits.h"
#include "google/cloud/datacatalog/lineage/v1/internal/lineage_stub.h"
#include "google/cloud/datacatalog/lineage/v1/lineage_connection_idempotency_policy.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace datacatalog_lineage_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using LineageRetryPolicy = ::google::cloud::internal::TraitBasedRetryPolicy<
    datacatalog_lineage_v1_internal::LineageRetryTraits>;

using LineageLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        datacatalog_lineage_v1_internal::LineageRetryTraits>;

using LineageLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        datacatalog_lineage_v1_internal::LineageRetryTraits>;

/**
 * The `LineageConnection` object for `LineageClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `LineageClient`. This allows users to inject custom behavior
 * (e.g., with a Google Mock object) when writing tests that use objects of type
 * `LineageClient`.
 *
 * To create a concrete instance, see `MakeLineageConnection()`.
 *
 * For mocking, see `datacatalog_lineage_v1_mocks::MockLineageConnection`.
 */
class LineageConnection {
 public:
  virtual ~LineageConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StatusOr<google::cloud::datacatalog::lineage::v1::Process>
  CreateProcess(
      google::cloud::datacatalog::lineage::v1::CreateProcessRequest const&
          request);

  virtual StatusOr<google::cloud::datacatalog::lineage::v1::Process>
  UpdateProcess(
      google::cloud::datacatalog::lineage::v1::UpdateProcessRequest const&
          request);

  virtual StatusOr<google::cloud::datacatalog::lineage::v1::Process> GetProcess(
      google::cloud::datacatalog::lineage::v1::GetProcessRequest const&
          request);

  virtual StreamRange<google::cloud::datacatalog::lineage::v1::Process>
  ListProcesses(
      google::cloud::datacatalog::lineage::v1::ListProcessesRequest request);

  virtual future<
      StatusOr<google::cloud::datacatalog::lineage::v1::OperationMetadata>>
  DeleteProcess(
      google::cloud::datacatalog::lineage::v1::DeleteProcessRequest const&
          request);

  virtual StatusOr<google::cloud::datacatalog::lineage::v1::Run> CreateRun(
      google::cloud::datacatalog::lineage::v1::CreateRunRequest const& request);

  virtual StatusOr<google::cloud::datacatalog::lineage::v1::Run> UpdateRun(
      google::cloud::datacatalog::lineage::v1::UpdateRunRequest const& request);

  virtual StatusOr<google::cloud::datacatalog::lineage::v1::Run> GetRun(
      google::cloud::datacatalog::lineage::v1::GetRunRequest const& request);

  virtual StreamRange<google::cloud::datacatalog::lineage::v1::Run> ListRuns(
      google::cloud::datacatalog::lineage::v1::ListRunsRequest request);

  virtual future<
      StatusOr<google::cloud::datacatalog::lineage::v1::OperationMetadata>>
  DeleteRun(
      google::cloud::datacatalog::lineage::v1::DeleteRunRequest const& request);

  virtual StatusOr<google::cloud::datacatalog::lineage::v1::LineageEvent>
  CreateLineageEvent(
      google::cloud::datacatalog::lineage::v1::CreateLineageEventRequest const&
          request);

  virtual StatusOr<google::cloud::datacatalog::lineage::v1::LineageEvent>
  GetLineageEvent(
      google::cloud::datacatalog::lineage::v1::GetLineageEventRequest const&
          request);

  virtual StreamRange<google::cloud::datacatalog::lineage::v1::LineageEvent>
  ListLineageEvents(
      google::cloud::datacatalog::lineage::v1::ListLineageEventsRequest
          request);

  virtual Status DeleteLineageEvent(
      google::cloud::datacatalog::lineage::v1::DeleteLineageEventRequest const&
          request);

  virtual StreamRange<google::cloud::datacatalog::lineage::v1::Link>
  SearchLinks(
      google::cloud::datacatalog::lineage::v1::SearchLinksRequest request);

  virtual StreamRange<google::cloud::datacatalog::lineage::v1::ProcessLinks>
  BatchSearchLinkProcesses(
      google::cloud::datacatalog::lineage::v1::BatchSearchLinkProcessesRequest
          request);
};

/**
 * A factory function to construct an object of type `LineageConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of LineageClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `LineageConnection`. Expected options are any of the types in
 * the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * - `google::cloud::datacatalog_lineage_v1::LineagePolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `LineageConnection` created by
 * this function.
 */
std::shared_ptr<LineageConnection> MakeLineageConnection(ExperimentalTag,
                                                         Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace datacatalog_lineage_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DATACATALOG_LINEAGE_V1_LINEAGE_CONNECTION_H
