// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/v1/managed_kafka.proto

#include "google/cloud/managedkafka/v1/managed_kafka_connection.h"
#include "google/cloud/managedkafka/v1/internal/managed_kafka_connection_impl.h"
#include "google/cloud/managedkafka/v1/internal/managed_kafka_option_defaults.h"
#include "google/cloud/managedkafka/v1/internal/managed_kafka_stub_factory.h"
#include "google/cloud/managedkafka/v1/internal/managed_kafka_tracing_connection.h"
#include "google/cloud/managedkafka/v1/managed_kafka_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace managedkafka_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ManagedKafkaConnection::~ManagedKafkaConnection() = default;

StreamRange<google::cloud::managedkafka::v1::Cluster>
ManagedKafkaConnection::ListClusters(
    google::cloud::managedkafka::v1::
        ListClustersRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::managedkafka::v1::Cluster>>();
}

StatusOr<google::cloud::managedkafka::v1::Cluster>
ManagedKafkaConnection::GetCluster(
    google::cloud::managedkafka::v1::GetClusterRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::managedkafka::v1::Cluster>>
ManagedKafkaConnection::CreateCluster(
    google::cloud::managedkafka::v1::CreateClusterRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::managedkafka::v1::Cluster>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation> ManagedKafkaConnection::CreateCluster(
    NoAwaitTag, google::cloud::managedkafka::v1::CreateClusterRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::managedkafka::v1::Cluster>>
ManagedKafkaConnection::CreateCluster(google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::managedkafka::v1::Cluster>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::managedkafka::v1::Cluster>>
ManagedKafkaConnection::UpdateCluster(
    google::cloud::managedkafka::v1::UpdateClusterRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::managedkafka::v1::Cluster>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation> ManagedKafkaConnection::UpdateCluster(
    NoAwaitTag, google::cloud::managedkafka::v1::UpdateClusterRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::managedkafka::v1::Cluster>>
ManagedKafkaConnection::UpdateCluster(google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::managedkafka::v1::Cluster>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::managedkafka::v1::OperationMetadata>>
ManagedKafkaConnection::DeleteCluster(
    google::cloud::managedkafka::v1::DeleteClusterRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::managedkafka::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::longrunning::Operation> ManagedKafkaConnection::DeleteCluster(
    NoAwaitTag, google::cloud::managedkafka::v1::DeleteClusterRequest const&) {
  return StatusOr<google::longrunning::Operation>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::managedkafka::v1::OperationMetadata>>
ManagedKafkaConnection::DeleteCluster(google::longrunning::Operation const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::managedkafka::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::managedkafka::v1::Topic>
ManagedKafkaConnection::ListTopics(
    google::cloud::managedkafka::v1::
        ListTopicsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::managedkafka::v1::Topic>>();
}

StatusOr<google::cloud::managedkafka::v1::Topic>
ManagedKafkaConnection::GetTopic(
    google::cloud::managedkafka::v1::GetTopicRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::v1::Topic>
ManagedKafkaConnection::CreateTopic(
    google::cloud::managedkafka::v1::CreateTopicRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::v1::Topic>
ManagedKafkaConnection::UpdateTopic(
    google::cloud::managedkafka::v1::UpdateTopicRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ManagedKafkaConnection::DeleteTopic(
    google::cloud::managedkafka::v1::DeleteTopicRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::managedkafka::v1::ConsumerGroup>
ManagedKafkaConnection::ListConsumerGroups(
    google::cloud::managedkafka::v1::
        ListConsumerGroupsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::managedkafka::v1::ConsumerGroup>>();
}

StatusOr<google::cloud::managedkafka::v1::ConsumerGroup>
ManagedKafkaConnection::GetConsumerGroup(
    google::cloud::managedkafka::v1::GetConsumerGroupRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::v1::ConsumerGroup>
ManagedKafkaConnection::UpdateConsumerGroup(
    google::cloud::managedkafka::v1::UpdateConsumerGroupRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ManagedKafkaConnection::DeleteConsumerGroup(
    google::cloud::managedkafka::v1::DeleteConsumerGroupRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::location::Location>
ManagedKafkaConnection::ListLocations(
    google::cloud::location::
        ListLocationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::location::Location>>();
}

StatusOr<google::cloud::location::Location> ManagedKafkaConnection::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::longrunning::Operation>
ManagedKafkaConnection::ListOperations(
    google::longrunning::
        ListOperationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::longrunning::Operation>>();
}

StatusOr<google::longrunning::Operation> ManagedKafkaConnection::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ManagedKafkaConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ManagedKafkaConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<ManagedKafkaConnection> MakeManagedKafkaConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 ManagedKafkaPolicyOptionList>(options,
                                                               __func__);
  options =
      managedkafka_v1_internal::ManagedKafkaDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = managedkafka_v1_internal::CreateDefaultManagedKafkaStub(
      std::move(auth), options);
  return managedkafka_v1_internal::MakeManagedKafkaTracingConnection(
      std::make_shared<managedkafka_v1_internal::ManagedKafkaConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_v1
}  // namespace cloud
}  // namespace google
