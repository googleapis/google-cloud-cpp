// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#include "google/cloud/managedkafka/schemaregistry/v1/managed_schema_registry_connection.h"
#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_connection_impl.h"
#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_option_defaults.h"
#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_stub_factory.h"
#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_tracing_connection.h"
#include "google/cloud/managedkafka/schemaregistry/v1/managed_schema_registry_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ManagedSchemaRegistryConnection::~ManagedSchemaRegistryConnection() = default;

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryConnection::GetSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaRegistryRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::
             ListSchemaRegistriesResponse>
ManagedSchemaRegistryConnection::ListSchemaRegistries(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaRegistriesRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryConnection::CreateSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        CreateSchemaRegistryRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ManagedSchemaRegistryConnection::DeleteSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaRegistryRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Context>
ManagedSchemaRegistryConnection::GetContext(
    google::cloud::managedkafka::schemaregistry::v1::GetContextRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryConnection::ListContexts(
    google::cloud::managedkafka::schemaregistry::v1::
        ListContextsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Schema>
ManagedSchemaRegistryConnection::GetSchema(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryConnection::GetRawSchema(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnection::ListSchemaVersions(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaVersionsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnection::ListSchemaTypes(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaTypesRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryConnection::ListSubjects(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnection::ListSubjectsBySchemaId(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsBySchemaIdRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryConnection::DeleteSubject(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSubjectRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryConnection::LookupVersion(
    google::cloud::managedkafka::schemaregistry::v1::
        LookupVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryConnection::GetVersion(
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnection::GetRawSchemaVersion(
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryConnection::ListVersions(
    google::cloud::managedkafka::schemaregistry::v1::
        ListVersionsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::CreateVersionResponse>
ManagedSchemaRegistryConnection::CreateVersion(
    google::cloud::managedkafka::schemaregistry::v1::
        CreateVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryConnection::DeleteVersion(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteVersionRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnection::ListReferencedSchemas(
    google::cloud::managedkafka::schemaregistry::v1::
        ListReferencedSchemasRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<
    google::cloud::managedkafka::schemaregistry::v1::CheckCompatibilityResponse>
ManagedSchemaRegistryConnection::CheckCompatibility(
    google::cloud::managedkafka::schemaregistry::v1::
        CheckCompatibilityRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryConnection::GetSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaConfigRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryConnection::UpdateSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaConfigRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryConnection::DeleteSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaConfigRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryConnection::GetSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaModeRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryConnection::UpdateSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaModeRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryConnection::DeleteSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaModeRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::location::Location>
ManagedSchemaRegistryConnection::ListLocations(
    google::cloud::location::
        ListLocationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::location::Location>>();
}

StatusOr<google::cloud::location::Location>
ManagedSchemaRegistryConnection::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::longrunning::Operation>
ManagedSchemaRegistryConnection::ListOperations(
    google::longrunning::
        ListOperationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::longrunning::Operation>>();
}

StatusOr<google::longrunning::Operation>
ManagedSchemaRegistryConnection::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ManagedSchemaRegistryConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ManagedSchemaRegistryConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<ManagedSchemaRegistryConnection>
MakeManagedSchemaRegistryConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 ManagedSchemaRegistryPolicyOptionList>(
      options, __func__);
  options = managedkafka_schemaregistry_v1_internal::
      ManagedSchemaRegistryDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = managedkafka_schemaregistry_v1_internal::
      CreateDefaultManagedSchemaRegistryStub(std::move(auth), options);
  return managedkafka_schemaregistry_v1_internal::
      MakeManagedSchemaRegistryTracingConnection(
          std::make_shared<managedkafka_schemaregistry_v1_internal::
                               ManagedSchemaRegistryConnectionImpl>(
              std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1
}  // namespace cloud
}  // namespace google
