// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_option_defaults.h"
#include "google/cloud/managedkafka/schemaregistry/v1/managed_schema_registry_connection.h"
#include "google/cloud/managedkafka/schemaregistry/v1/managed_schema_registry_options.h"
#include "google/cloud/internal/populate_common_options.h"
#include "google/cloud/internal/populate_grpc_options.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

namespace {
auto constexpr kBackoffScaling = 2.0;
}  // namespace

Options ManagedSchemaRegistryDefaultOptions(Options options) {
  options = internal::PopulateCommonOptions(
      std::move(options), "GOOGLE_CLOUD_CPP_MANAGED_SCHEMA_REGISTRY_ENDPOINT",
      "", "GOOGLE_CLOUD_CPP_MANAGED_SCHEMA_REGISTRY_AUTHORITY",
      "managedkafka.googleapis.com");
  options = internal::PopulateGrpcOptions(std::move(options));
  if (!options.has<managedkafka_schemaregistry_v1::
                       ManagedSchemaRegistryRetryPolicyOption>()) {
    options.set<
        managedkafka_schemaregistry_v1::ManagedSchemaRegistryRetryPolicyOption>(
        managedkafka_schemaregistry_v1::
            ManagedSchemaRegistryLimitedTimeRetryPolicy(
                std::chrono::minutes(30))
                .clone());
  }
  if (!options.has<managedkafka_schemaregistry_v1::
                       ManagedSchemaRegistryBackoffPolicyOption>()) {
    options.set<managedkafka_schemaregistry_v1::
                    ManagedSchemaRegistryBackoffPolicyOption>(
        ExponentialBackoffPolicy(
            std::chrono::seconds(0), std::chrono::seconds(1),
            std::chrono::minutes(5), kBackoffScaling, kBackoffScaling)
            .clone());
  }
  if (!options
           .has<managedkafka_schemaregistry_v1::
                    ManagedSchemaRegistryConnectionIdempotencyPolicyOption>()) {
    options.set<managedkafka_schemaregistry_v1::
                    ManagedSchemaRegistryConnectionIdempotencyPolicyOption>(
        managedkafka_schemaregistry_v1::
            MakeDefaultManagedSchemaRegistryConnectionIdempotencyPolicy());
  }

  return options;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1_internal
}  // namespace cloud
}  // namespace google
