// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ManagedSchemaRegistryTracingConnection::ManagedSchemaRegistryTracingConnection(
    std::shared_ptr<
        managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection>
        child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryTracingConnection::GetSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaRegistryRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetSchemaRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetSchemaRegistry(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::
             ListSchemaRegistriesResponse>
ManagedSchemaRegistryTracingConnection::ListSchemaRegistries(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaRegistriesRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListSchemaRegistries");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListSchemaRegistries(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryTracingConnection::CreateSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        CreateSchemaRegistryRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "CreateSchemaRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateSchemaRegistry(request));
}

Status ManagedSchemaRegistryTracingConnection::DeleteSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaRegistryRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "DeleteSchemaRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteSchemaRegistry(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Context>
ManagedSchemaRegistryTracingConnection::GetContext(
    google::cloud::managedkafka::schemaregistry::v1::GetContextRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetContext");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetContext(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::ListContexts(
    google::cloud::managedkafka::schemaregistry::v1::ListContextsRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListContexts");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListContexts(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Schema>
ManagedSchemaRegistryTracingConnection::GetSchema(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetSchema");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetSchema(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::GetRawSchema(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetRawSchema");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRawSchema(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::ListSchemaVersions(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaVersionsRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListSchemaVersions");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListSchemaVersions(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::ListSchemaTypes(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaTypesRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListSchemaTypes");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListSchemaTypes(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::ListSubjects(
    google::cloud::managedkafka::schemaregistry::v1::ListSubjectsRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListSubjects");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListSubjects(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::ListSubjectsBySchemaId(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsBySchemaIdRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListSubjectsBySchemaId");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListSubjectsBySchemaId(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::DeleteSubject(
    google::cloud::managedkafka::schemaregistry::v1::DeleteSubjectRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "DeleteSubject");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteSubject(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryTracingConnection::LookupVersion(
    google::cloud::managedkafka::schemaregistry::v1::LookupVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "LookupVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->LookupVersion(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryTracingConnection::GetVersion(
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVersion(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::GetRawSchemaVersion(
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetRawSchemaVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRawSchemaVersion(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::ListVersions(
    google::cloud::managedkafka::schemaregistry::v1::ListVersionsRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListVersions");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListVersions(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::CreateVersionResponse>
ManagedSchemaRegistryTracingConnection::CreateVersion(
    google::cloud::managedkafka::schemaregistry::v1::CreateVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "CreateVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateVersion(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::DeleteVersion(
    google::cloud::managedkafka::schemaregistry::v1::DeleteVersionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "DeleteVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteVersion(request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingConnection::ListReferencedSchemas(
    google::cloud::managedkafka::schemaregistry::v1::
        ListReferencedSchemasRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListReferencedSchemas");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListReferencedSchemas(request));
}

StatusOr<
    google::cloud::managedkafka::schemaregistry::v1::CheckCompatibilityResponse>
ManagedSchemaRegistryTracingConnection::CheckCompatibility(
    google::cloud::managedkafka::schemaregistry::v1::
        CheckCompatibilityRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "CheckCompatibility");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CheckCompatibility(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryTracingConnection::GetSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaConfigRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetSchemaConfig");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetSchemaConfig(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryTracingConnection::UpdateSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaConfigRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "UpdateSchemaConfig");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateSchemaConfig(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryTracingConnection::DeleteSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaConfigRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "DeleteSchemaConfig");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteSchemaConfig(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryTracingConnection::GetSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaModeRequest const&
        request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetSchemaMode");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetSchemaMode(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryTracingConnection::UpdateSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaModeRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "UpdateSchemaMode");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateSchemaMode(request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryTracingConnection::DeleteSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaModeRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "DeleteSchemaMode");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteSchemaMode(request));
}

StreamRange<google::cloud::location::Location>
ManagedSchemaRegistryTracingConnection::ListLocations(
    google::cloud::location::ListLocationsRequest request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListLocations");
  internal::OTelScope scope(span);
  auto sr = child_->ListLocations(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::location::Location>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::location::Location>
ManagedSchemaRegistryTracingConnection::GetLocation(
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetLocation(request));
}

StreamRange<google::longrunning::Operation>
ManagedSchemaRegistryTracingConnection::ListOperations(
    google::longrunning::ListOperationsRequest request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "ListOperations");
  internal::OTelScope scope(span);
  auto sr = child_->ListOperations(std::move(request));
  return internal::MakeTracedStreamRange<google::longrunning::Operation>(
      std::move(span), std::move(sr));
}

StatusOr<google::longrunning::Operation>
ManagedSchemaRegistryTracingConnection::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetOperation(request));
}

Status ManagedSchemaRegistryTracingConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteOperation(request));
}

Status ManagedSchemaRegistryTracingConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpan(
      "managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection::"
      "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CancelOperation(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection>
MakeManagedSchemaRegistryTracingConnection(
    std::shared_ptr<
        managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection>
        conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<ManagedSchemaRegistryTracingConnection>(
        std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1_internal
}  // namespace cloud
}  // namespace google
