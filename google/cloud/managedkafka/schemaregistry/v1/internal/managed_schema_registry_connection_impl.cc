// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_connection_impl.h"
#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace {

std::unique_ptr<
    managedkafka_schemaregistry_v1::ManagedSchemaRegistryRetryPolicy>
retry_policy(Options const& options) {
  return options
      .get<managedkafka_schemaregistry_v1::
               ManagedSchemaRegistryRetryPolicyOption>()
      ->clone();
}

std::unique_ptr<BackoffPolicy> backoff_policy(Options const& options) {
  return options
      .get<managedkafka_schemaregistry_v1::
               ManagedSchemaRegistryBackoffPolicyOption>()
      ->clone();
}

std::unique_ptr<managedkafka_schemaregistry_v1::
                    ManagedSchemaRegistryConnectionIdempotencyPolicy>
idempotency_policy(Options const& options) {
  return options
      .get<managedkafka_schemaregistry_v1::
               ManagedSchemaRegistryConnectionIdempotencyPolicyOption>()
      ->clone();
}

}  // namespace

ManagedSchemaRegistryConnectionImpl::ManagedSchemaRegistryConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<
        managedkafka_schemaregistry_v1_internal::ManagedSchemaRegistryStub>
        stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(
          std::move(options), ManagedSchemaRegistryConnection::options())) {}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryConnectionImpl::GetSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaRegistryRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetSchemaRegistry(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaRegistryRequest const& request) {
        return stub_->GetSchemaRegistry(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::
             ListSchemaRegistriesResponse>
ManagedSchemaRegistryConnectionImpl::ListSchemaRegistries(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaRegistriesRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListSchemaRegistries(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSchemaRegistriesRequest const& request) {
        return stub_->ListSchemaRegistries(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryConnectionImpl::CreateSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        CreateSchemaRegistryRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateSchemaRegistry(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 CreateSchemaRegistryRequest const& request) {
        return stub_->CreateSchemaRegistry(context, options, request);
      },
      *current, request, __func__);
}

Status ManagedSchemaRegistryConnectionImpl::DeleteSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaRegistryRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteSchemaRegistry(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteSchemaRegistryRequest const& request) {
        return stub_->DeleteSchemaRegistry(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Context>
ManagedSchemaRegistryConnectionImpl::GetContext(
    google::cloud::managedkafka::schemaregistry::v1::GetContextRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetContext(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetContextRequest const& request) {
        return stub_->GetContext(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::ListContexts(
    google::cloud::managedkafka::schemaregistry::v1::ListContextsRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListContexts(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListContextsRequest const& request) {
        return stub_->ListContexts(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Schema>
ManagedSchemaRegistryConnectionImpl::GetSchema(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetSchema(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaRequest const& request) {
        return stub_->GetSchema(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::GetRawSchema(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetRawSchema(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaRequest const& request) {
        return stub_->GetRawSchema(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::ListSchemaVersions(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaVersionsRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListSchemaVersions(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSchemaVersionsRequest const& request) {
        return stub_->ListSchemaVersions(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::ListSchemaTypes(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaTypesRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListSchemaTypes(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSchemaTypesRequest const& request) {
        return stub_->ListSchemaTypes(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::ListSubjects(
    google::cloud::managedkafka::schemaregistry::v1::ListSubjectsRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListSubjects(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSubjectsRequest const& request) {
        return stub_->ListSubjects(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::ListSubjectsBySchemaId(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsBySchemaIdRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListSubjectsBySchemaId(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSubjectsBySchemaIdRequest const& request) {
        return stub_->ListSubjectsBySchemaId(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::DeleteSubject(
    google::cloud::managedkafka::schemaregistry::v1::DeleteSubjectRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteSubject(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteSubjectRequest const& request) {
        return stub_->DeleteSubject(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryConnectionImpl::LookupVersion(
    google::cloud::managedkafka::schemaregistry::v1::LookupVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->LookupVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 LookupVersionRequest const& request) {
        return stub_->LookupVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryConnectionImpl::GetVersion(
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetVersionRequest const& request) {
        return stub_->GetVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::GetRawSchemaVersion(
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetRawSchemaVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetVersionRequest const& request) {
        return stub_->GetRawSchemaVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::ListVersions(
    google::cloud::managedkafka::schemaregistry::v1::ListVersionsRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListVersions(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListVersionsRequest const& request) {
        return stub_->ListVersions(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::CreateVersionResponse>
ManagedSchemaRegistryConnectionImpl::CreateVersion(
    google::cloud::managedkafka::schemaregistry::v1::CreateVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 CreateVersionRequest const& request) {
        return stub_->CreateVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::DeleteVersion(
    google::cloud::managedkafka::schemaregistry::v1::DeleteVersionRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteVersionRequest const& request) {
        return stub_->DeleteVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryConnectionImpl::ListReferencedSchemas(
    google::cloud::managedkafka::schemaregistry::v1::
        ListReferencedSchemasRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListReferencedSchemas(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListReferencedSchemasRequest const& request) {
        return stub_->ListReferencedSchemas(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<
    google::cloud::managedkafka::schemaregistry::v1::CheckCompatibilityResponse>
ManagedSchemaRegistryConnectionImpl::CheckCompatibility(
    google::cloud::managedkafka::schemaregistry::v1::
        CheckCompatibilityRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CheckCompatibility(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 CheckCompatibilityRequest const& request) {
        return stub_->CheckCompatibility(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryConnectionImpl::GetSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetSchemaConfig(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaConfigRequest const& request) {
        return stub_->GetSchemaConfig(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryConnectionImpl::UpdateSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateSchemaConfig(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 UpdateSchemaConfigRequest const& request) {
        return stub_->UpdateSchemaConfig(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryConnectionImpl::DeleteSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteSchemaConfig(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteSchemaConfigRequest const& request) {
        return stub_->DeleteSchemaConfig(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryConnectionImpl::GetSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaModeRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetSchemaMode(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaModeRequest const& request) {
        return stub_->GetSchemaMode(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryConnectionImpl::UpdateSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaModeRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateSchemaMode(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 UpdateSchemaModeRequest const& request) {
        return stub_->UpdateSchemaMode(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryConnectionImpl::DeleteSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaModeRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteSchemaMode(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteSchemaModeRequest const& request) {
        return stub_->DeleteSchemaMode(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::location::Location>
ManagedSchemaRegistryConnectionImpl::ListLocations(
    google::cloud::location::ListLocationsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListLocations(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::location::Location>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<
           managedkafka_schemaregistry_v1::ManagedSchemaRegistryRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::location::ListLocationsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context, Options const& options,
                google::cloud::location::ListLocationsRequest const& request) {
              return stub->ListLocations(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::location::ListLocationsResponse r) {
        std::vector<google::cloud::location::Location> result(
            r.locations().size());
        auto& messages = *r.mutable_locations();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::location::Location>
ManagedSchemaRegistryConnectionImpl::GetLocation(
    google::cloud::location::GetLocationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetLocation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::location::GetLocationRequest const& request) {
        return stub_->GetLocation(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::longrunning::Operation>
ManagedSchemaRegistryConnectionImpl::ListOperations(
    google::longrunning::ListOperationsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListOperations(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::longrunning::Operation>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<
           managedkafka_schemaregistry_v1::ManagedSchemaRegistryRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::longrunning::ListOperationsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::longrunning::ListOperationsRequest const& request) {
              return stub->ListOperations(context, options, request);
            },
            options, r, function_name);
      },
      [](google::longrunning::ListOperationsResponse r) {
        std::vector<google::longrunning::Operation> result(
            r.operations().size());
        auto& messages = *r.mutable_operations();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::longrunning::Operation>
ManagedSchemaRegistryConnectionImpl::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::GetOperationRequest const& request) {
        return stub_->GetOperation(context, options, request);
      },
      *current, request, __func__);
}

Status ManagedSchemaRegistryConnectionImpl::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::DeleteOperationRequest const& request) {
        return stub_->DeleteOperation(context, options, request);
      },
      *current, request, __func__);
}

Status ManagedSchemaRegistryConnectionImpl::CancelOperation(
    google::longrunning::CancelOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CancelOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::CancelOperationRequest const& request) {
        return stub_->CancelOperation(context, options, request);
      },
      *current, request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1_internal
}  // namespace cloud
}  // namespace google
