// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ManagedSchemaRegistryTracingStub::ManagedSchemaRegistryTracingStub(
    std::shared_ptr<ManagedSchemaRegistryStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryTracingStub::GetSchemaRegistry(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaRegistryRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetSchemaRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetSchemaRegistry(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::
             ListSchemaRegistriesResponse>
ManagedSchemaRegistryTracingStub::ListSchemaRegistries(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaRegistriesRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListSchemaRegistries");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListSchemaRegistries(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryTracingStub::CreateSchemaRegistry(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        CreateSchemaRegistryRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "CreateSchemaRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateSchemaRegistry(context, options, request));
}

Status ManagedSchemaRegistryTracingStub::DeleteSchemaRegistry(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaRegistryRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "DeleteSchemaRegistry");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteSchemaRegistry(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Context>
ManagedSchemaRegistryTracingStub::GetContext(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetContextRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetContext");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetContext(context, options, request));
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryTracingStub::ListContexts(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::ListContextsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListContexts");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListContexts(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Schema>
ManagedSchemaRegistryTracingStub::GetSchema(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetSchema");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetSchema(context, options, request));
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryTracingStub::GetRawSchema(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetRawSchema");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetRawSchema(context, options, request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingStub::ListSchemaVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaVersionsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListSchemaVersions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListSchemaVersions(context, options, request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingStub::ListSchemaTypes(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaTypesRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListSchemaTypes");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListSchemaTypes(context, options, request));
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryTracingStub::ListSubjects(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::ListSubjectsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListSubjects");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListSubjects(context, options, request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingStub::ListSubjectsBySchemaId(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsBySchemaIdRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListSubjectsBySchemaId");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ListSubjectsBySchemaId(context, options, request));
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryTracingStub::DeleteSubject(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::DeleteSubjectRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "DeleteSubject");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteSubject(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryTracingStub::LookupVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::LookupVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "LookupVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->LookupVersion(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryTracingStub::GetVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetVersion(context, options, request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingStub::GetRawSchemaVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetRawSchemaVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetRawSchemaVersion(context, options, request));
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryTracingStub::ListVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::ListVersionsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListVersions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListVersions(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::CreateVersionResponse>
ManagedSchemaRegistryTracingStub::CreateVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::CreateVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "CreateVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateVersion(context, options, request));
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryTracingStub::DeleteVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::DeleteVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "DeleteVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteVersion(context, options, request));
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryTracingStub::ListReferencedSchemas(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListReferencedSchemasRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListReferencedSchemas");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListReferencedSchemas(context, options, request));
}

StatusOr<
    google::cloud::managedkafka::schemaregistry::v1::CheckCompatibilityResponse>
ManagedSchemaRegistryTracingStub::CheckCompatibility(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        CheckCompatibilityRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "CheckCompatibility");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CheckCompatibility(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryTracingStub::GetSchemaConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaConfigRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetSchemaConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetSchemaConfig(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryTracingStub::UpdateSchemaConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaConfigRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "UpdateSchemaConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateSchemaConfig(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryTracingStub::DeleteSchemaConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaConfigRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "DeleteSchemaConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteSchemaConfig(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryTracingStub::GetSchemaMode(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaModeRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetSchemaMode");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetSchemaMode(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryTracingStub::UpdateSchemaMode(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaModeRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "UpdateSchemaMode");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateSchemaMode(context, options, request));
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryTracingStub::DeleteSchemaMode(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaModeRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "DeleteSchemaMode");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteSchemaMode(context, options, request));
}

StatusOr<google::cloud::location::ListLocationsResponse>
ManagedSchemaRegistryTracingStub::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListLocations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListLocations(context, options, request));
}

StatusOr<google::cloud::location::Location>
ManagedSchemaRegistryTracingStub::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetLocation(context, options, request));
}

StatusOr<google::longrunning::ListOperationsResponse>
ManagedSchemaRegistryTracingStub::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "ListOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListOperations(context, options, request));
}

StatusOr<google::longrunning::Operation>
ManagedSchemaRegistryTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

Status ManagedSchemaRegistryTracingStub::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteOperation(context, options, request));
}

Status ManagedSchemaRegistryTracingStub::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
      "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CancelOperation(context, options, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<ManagedSchemaRegistryStub> MakeManagedSchemaRegistryTracingStub(
    std::shared_ptr<ManagedSchemaRegistryStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<ManagedSchemaRegistryTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1_internal
}  // namespace cloud
}  // namespace google
