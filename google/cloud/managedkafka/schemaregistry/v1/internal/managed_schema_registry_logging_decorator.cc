// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_logging_decorator.h"
#include "google/cloud/internal/log_wrapper.h"
#include "google/cloud/status_or.h"
#include <google/cloud/managedkafka/schemaregistry/v1/schema_registry.grpc.pb.h>
#include <memory>
#include <set>
#include <string>
#include <utility>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ManagedSchemaRegistryLogging::ManagedSchemaRegistryLogging(
    std::shared_ptr<ManagedSchemaRegistryStub> child,
    TracingOptions tracing_options, std::set<std::string> const&)
    : child_(std::move(child)), tracing_options_(std::move(tracing_options)) {}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryLogging::GetSchemaRegistry(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaRegistryRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaRegistryRequest const& request) {
        return child_->GetSchemaRegistry(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::
             ListSchemaRegistriesResponse>
ManagedSchemaRegistryLogging::ListSchemaRegistries(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaRegistriesRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSchemaRegistriesRequest const& request) {
        return child_->ListSchemaRegistries(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryLogging::CreateSchemaRegistry(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        CreateSchemaRegistryRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 CreateSchemaRegistryRequest const& request) {
        return child_->CreateSchemaRegistry(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

Status ManagedSchemaRegistryLogging::DeleteSchemaRegistry(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaRegistryRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteSchemaRegistryRequest const& request) {
        return child_->DeleteSchemaRegistry(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Context>
ManagedSchemaRegistryLogging::GetContext(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetContextRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetContextRequest const& request) {
        return child_->GetContext(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryLogging::ListContexts(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::ListContextsRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListContextsRequest const& request) {
        return child_->ListContexts(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Schema>
ManagedSchemaRegistryLogging::GetSchema(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaRequest const& request) {
        return child_->GetSchema(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryLogging::GetRawSchema(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaRequest const& request) {
        return child_->GetRawSchema(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryLogging::ListSchemaVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaVersionsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSchemaVersionsRequest const& request) {
        return child_->ListSchemaVersions(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryLogging::ListSchemaTypes(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaTypesRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSchemaTypesRequest const& request) {
        return child_->ListSchemaTypes(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryLogging::ListSubjects(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::ListSubjectsRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSubjectsRequest const& request) {
        return child_->ListSubjects(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryLogging::ListSubjectsBySchemaId(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsBySchemaIdRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListSubjectsBySchemaIdRequest const& request) {
        return child_->ListSubjectsBySchemaId(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryLogging::DeleteSubject(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::DeleteSubjectRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteSubjectRequest const& request) {
        return child_->DeleteSubject(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryLogging::LookupVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::LookupVersionRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 LookupVersionRequest const& request) {
        return child_->LookupVersion(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryLogging::GetVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetVersionRequest const& request) {
        return child_->GetVersion(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryLogging::GetRawSchemaVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetVersionRequest const& request) {
        return child_->GetRawSchemaVersion(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryLogging::ListVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::ListVersionsRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListVersionsRequest const& request) {
        return child_->ListVersions(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::CreateVersionResponse>
ManagedSchemaRegistryLogging::CreateVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::CreateVersionRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 CreateVersionRequest const& request) {
        return child_->CreateVersion(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryLogging::DeleteVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::DeleteVersionRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteVersionRequest const& request) {
        return child_->DeleteVersion(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryLogging::ListReferencedSchemas(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListReferencedSchemasRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 ListReferencedSchemasRequest const& request) {
        return child_->ListReferencedSchemas(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<
    google::cloud::managedkafka::schemaregistry::v1::CheckCompatibilityResponse>
ManagedSchemaRegistryLogging::CheckCompatibility(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        CheckCompatibilityRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 CheckCompatibilityRequest const& request) {
        return child_->CheckCompatibility(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryLogging::GetSchemaConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaConfigRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaConfigRequest const& request) {
        return child_->GetSchemaConfig(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryLogging::UpdateSchemaConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaConfigRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 UpdateSchemaConfigRequest const& request) {
        return child_->UpdateSchemaConfig(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryLogging::DeleteSchemaConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaConfigRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteSchemaConfigRequest const& request) {
        return child_->DeleteSchemaConfig(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryLogging::GetSchemaMode(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaModeRequest const&
        request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 GetSchemaModeRequest const& request) {
        return child_->GetSchemaMode(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryLogging::UpdateSchemaMode(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaModeRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 UpdateSchemaModeRequest const& request) {
        return child_->UpdateSchemaMode(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryLogging::DeleteSchemaMode(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaModeRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::managedkafka::schemaregistry::v1::
                 DeleteSchemaModeRequest const& request) {
        return child_->DeleteSchemaMode(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::location::ListLocationsResponse>
ManagedSchemaRegistryLogging::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::location::ListLocationsRequest const& request) {
        return child_->ListLocations(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::location::Location>
ManagedSchemaRegistryLogging::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::location::GetLocationRequest const& request) {
        return child_->GetLocation(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::longrunning::ListOperationsResponse>
ManagedSchemaRegistryLogging::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::ListOperationsRequest const& request) {
        return child_->ListOperations(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::longrunning::Operation>
ManagedSchemaRegistryLogging::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::GetOperationRequest const& request) {
        return child_->GetOperation(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

Status ManagedSchemaRegistryLogging::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::DeleteOperationRequest const& request) {
        return child_->DeleteOperation(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

Status ManagedSchemaRegistryLogging::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::CancelOperationRequest const& request) {
        return child_->CancelOperation(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1_internal
}  // namespace cloud
}  // namespace google
