// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_auth_decorator.h"
#include <google/cloud/managedkafka/schemaregistry/v1/schema_registry.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ManagedSchemaRegistryAuth::ManagedSchemaRegistryAuth(
    std::shared_ptr<google::cloud::internal::GrpcAuthenticationStrategy> auth,
    std::shared_ptr<ManagedSchemaRegistryStub> child)
    : auth_(std::move(auth)), child_(std::move(child)) {}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryAuth::GetSchemaRegistry(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaRegistryRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetSchemaRegistry(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::
             ListSchemaRegistriesResponse>
ManagedSchemaRegistryAuth::ListSchemaRegistries(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaRegistriesRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListSchemaRegistries(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
ManagedSchemaRegistryAuth::CreateSchemaRegistry(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        CreateSchemaRegistryRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CreateSchemaRegistry(context, options, request);
}

Status ManagedSchemaRegistryAuth::DeleteSchemaRegistry(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaRegistryRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteSchemaRegistry(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Context>
ManagedSchemaRegistryAuth::GetContext(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetContextRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetContext(context, options, request);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryAuth::ListContexts(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::ListContextsRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListContexts(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Schema>
ManagedSchemaRegistryAuth::GetSchema(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetSchema(context, options, request);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryAuth::GetRawSchema(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetRawSchema(context, options, request);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryAuth::ListSchemaVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaVersionsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListSchemaVersions(context, options, request);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryAuth::ListSchemaTypes(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaTypesRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListSchemaTypes(context, options, request);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryAuth::ListSubjects(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::ListSubjectsRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListSubjects(context, options, request);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryAuth::ListSubjectsBySchemaId(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsBySchemaIdRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListSubjectsBySchemaId(context, options, request);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryAuth::DeleteSubject(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::DeleteSubjectRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteSubject(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryAuth::LookupVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::LookupVersionRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->LookupVersion(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
ManagedSchemaRegistryAuth::GetVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetVersion(context, options, request);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryAuth::GetRawSchemaVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetRawSchemaVersion(context, options, request);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryAuth::ListVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::ListVersionsRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListVersions(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::CreateVersionResponse>
ManagedSchemaRegistryAuth::CreateVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::CreateVersionRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CreateVersion(context, options, request);
}

StatusOr<google::api::HttpBody> ManagedSchemaRegistryAuth::DeleteVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::DeleteVersionRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteVersion(context, options, request);
}

StatusOr<google::api::HttpBody>
ManagedSchemaRegistryAuth::ListReferencedSchemas(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        ListReferencedSchemasRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListReferencedSchemas(context, options, request);
}

StatusOr<
    google::cloud::managedkafka::schemaregistry::v1::CheckCompatibilityResponse>
ManagedSchemaRegistryAuth::CheckCompatibility(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        CheckCompatibilityRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CheckCompatibility(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryAuth::GetSchemaConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaConfigRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetSchemaConfig(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryAuth::UpdateSchemaConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaConfigRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->UpdateSchemaConfig(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
ManagedSchemaRegistryAuth::DeleteSchemaConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaConfigRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteSchemaConfig(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryAuth::GetSchemaMode(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaModeRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetSchemaMode(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryAuth::UpdateSchemaMode(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaModeRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->UpdateSchemaMode(context, options, request);
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
ManagedSchemaRegistryAuth::DeleteSchemaMode(
    grpc::ClientContext& context, Options const& options,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaModeRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteSchemaMode(context, options, request);
}

StatusOr<google::cloud::location::ListLocationsResponse>
ManagedSchemaRegistryAuth::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListLocations(context, options, request);
}

StatusOr<google::cloud::location::Location>
ManagedSchemaRegistryAuth::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetLocation(context, options, request);
}

StatusOr<google::longrunning::ListOperationsResponse>
ManagedSchemaRegistryAuth::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListOperations(context, options, request);
}

StatusOr<google::longrunning::Operation>
ManagedSchemaRegistryAuth::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetOperation(context, options, request);
}

Status ManagedSchemaRegistryAuth::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteOperation(context, options, request);
}

Status ManagedSchemaRegistryAuth::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CancelOperation(context, options, request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1_internal
}  // namespace cloud
}  // namespace google
