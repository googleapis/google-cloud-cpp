// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_MANAGEDKAFKA_SCHEMAREGISTRY_V1_INTERNAL_MANAGED_SCHEMA_REGISTRY_TRACING_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_MANAGEDKAFKA_SCHEMAREGISTRY_V1_INTERNAL_MANAGED_SCHEMA_REGISTRY_TRACING_CONNECTION_H

#include "google/cloud/managedkafka/schemaregistry/v1/managed_schema_registry_connection.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

class ManagedSchemaRegistryTracingConnection
    : public managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection {
 public:
  ~ManagedSchemaRegistryTracingConnection() override = default;

  explicit ManagedSchemaRegistryTracingConnection(
      std::shared_ptr<
          managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection>
          child);

  Options options() override { return child_->options(); }

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
  GetSchemaRegistry(google::cloud::managedkafka::schemaregistry::v1::
                        GetSchemaRegistryRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::
               ListSchemaRegistriesResponse>
  ListSchemaRegistries(google::cloud::managedkafka::schemaregistry::v1::
                           ListSchemaRegistriesRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
  CreateSchemaRegistry(google::cloud::managedkafka::schemaregistry::v1::
                           CreateSchemaRegistryRequest const& request) override;

  Status DeleteSchemaRegistry(
      google::cloud::managedkafka::schemaregistry::v1::
          DeleteSchemaRegistryRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::Context> GetContext(
      google::cloud::managedkafka::schemaregistry::v1::GetContextRequest const&
          request) override;

  StatusOr<google::api::HttpBody> ListContexts(
      google::cloud::managedkafka::schemaregistry::v1::
          ListContextsRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::Schema> GetSchema(
      google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
          request) override;

  StatusOr<google::api::HttpBody> GetRawSchema(
      google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
          request) override;

  StatusOr<google::api::HttpBody> ListSchemaVersions(
      google::cloud::managedkafka::schemaregistry::v1::
          ListSchemaVersionsRequest const& request) override;

  StatusOr<google::api::HttpBody> ListSchemaTypes(
      google::cloud::managedkafka::schemaregistry::v1::
          ListSchemaTypesRequest const& request) override;

  StatusOr<google::api::HttpBody> ListSubjects(
      google::cloud::managedkafka::schemaregistry::v1::
          ListSubjectsRequest const& request) override;

  StatusOr<google::api::HttpBody> ListSubjectsBySchemaId(
      google::cloud::managedkafka::schemaregistry::v1::
          ListSubjectsBySchemaIdRequest const& request) override;

  StatusOr<google::api::HttpBody> DeleteSubject(
      google::cloud::managedkafka::schemaregistry::v1::
          DeleteSubjectRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
  LookupVersion(google::cloud::managedkafka::schemaregistry::v1::
                    LookupVersionRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
  GetVersion(
      google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
          request) override;

  StatusOr<google::api::HttpBody> GetRawSchemaVersion(
      google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
          request) override;

  StatusOr<google::api::HttpBody> ListVersions(
      google::cloud::managedkafka::schemaregistry::v1::
          ListVersionsRequest const& request) override;

  StatusOr<
      google::cloud::managedkafka::schemaregistry::v1::CreateVersionResponse>
  CreateVersion(google::cloud::managedkafka::schemaregistry::v1::
                    CreateVersionRequest const& request) override;

  StatusOr<google::api::HttpBody> DeleteVersion(
      google::cloud::managedkafka::schemaregistry::v1::
          DeleteVersionRequest const& request) override;

  StatusOr<google::api::HttpBody> ListReferencedSchemas(
      google::cloud::managedkafka::schemaregistry::v1::
          ListReferencedSchemasRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::
               CheckCompatibilityResponse>
  CheckCompatibility(google::cloud::managedkafka::schemaregistry::v1::
                         CheckCompatibilityRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
  GetSchemaConfig(google::cloud::managedkafka::schemaregistry::v1::
                      GetSchemaConfigRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
  UpdateSchemaConfig(google::cloud::managedkafka::schemaregistry::v1::
                         UpdateSchemaConfigRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
  DeleteSchemaConfig(google::cloud::managedkafka::schemaregistry::v1::
                         DeleteSchemaConfigRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
  GetSchemaMode(google::cloud::managedkafka::schemaregistry::v1::
                    GetSchemaModeRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
  UpdateSchemaMode(google::cloud::managedkafka::schemaregistry::v1::
                       UpdateSchemaModeRequest const& request) override;

  StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
  DeleteSchemaMode(google::cloud::managedkafka::schemaregistry::v1::
                       DeleteSchemaModeRequest const& request) override;

  StreamRange<google::cloud::location::Location> ListLocations(
      google::cloud::location::ListLocationsRequest request) override;

  StatusOr<google::cloud::location::Location> GetLocation(
      google::cloud::location::GetLocationRequest const& request) override;

  StreamRange<google::longrunning::Operation> ListOperations(
      google::longrunning::ListOperationsRequest request) override;

  StatusOr<google::longrunning::Operation> GetOperation(
      google::longrunning::GetOperationRequest const& request) override;

  Status DeleteOperation(
      google::longrunning::DeleteOperationRequest const& request) override;

  Status CancelOperation(
      google::longrunning::CancelOperationRequest const& request) override;

 private:
  std::shared_ptr<
      managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection>
      child_;
};

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

/**
 * Conditionally applies the tracing decorator to the given connection.
 *
 * The connection is only decorated if tracing is enabled (as determined by the
 * connection's options).
 */
std::shared_ptr<managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection>
MakeManagedSchemaRegistryTracingConnection(
    std::shared_ptr<
        managedkafka_schemaregistry_v1::ManagedSchemaRegistryConnection>
        conn);

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_MANAGEDKAFKA_SCHEMAREGISTRY_V1_INTERNAL_MANAGED_SCHEMA_REGISTRY_TRACING_CONNECTION_H
