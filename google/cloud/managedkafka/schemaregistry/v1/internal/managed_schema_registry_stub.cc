// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#include "google/cloud/managedkafka/schemaregistry/v1/internal/managed_schema_registry_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/managedkafka/schemaregistry/v1/schema_registry.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ManagedSchemaRegistryStub::~ManagedSchemaRegistryStub() = default;

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
DefaultManagedSchemaRegistryStub::GetSchemaRegistry(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaRegistryRequest const& request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry response;
  auto status = grpc_stub_->GetSchemaRegistry(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::
             ListSchemaRegistriesResponse>
DefaultManagedSchemaRegistryStub::ListSchemaRegistries(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaRegistriesRequest const& request) {
  google::cloud::managedkafka::schemaregistry::v1::ListSchemaRegistriesResponse
      response;
  auto status = grpc_stub_->ListSchemaRegistries(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry>
DefaultManagedSchemaRegistryStub::CreateSchemaRegistry(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        CreateSchemaRegistryRequest const& request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaRegistry response;
  auto status = grpc_stub_->CreateSchemaRegistry(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultManagedSchemaRegistryStub::DeleteSchemaRegistry(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaRegistryRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteSchemaRegistry(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Context>
DefaultManagedSchemaRegistryStub::GetContext(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::GetContextRequest const&
        request) {
  google::cloud::managedkafka::schemaregistry::v1::Context response;
  auto status = grpc_stub_->GetContext(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody> DefaultManagedSchemaRegistryStub::ListContexts(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::ListContextsRequest const&
        request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->ListContexts(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::Schema>
DefaultManagedSchemaRegistryStub::GetSchema(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  google::cloud::managedkafka::schemaregistry::v1::Schema response;
  auto status = grpc_stub_->GetSchema(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody> DefaultManagedSchemaRegistryStub::GetRawSchema(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&
        request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->GetRawSchema(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody>
DefaultManagedSchemaRegistryStub::ListSchemaVersions(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaVersionsRequest const& request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->ListSchemaVersions(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody>
DefaultManagedSchemaRegistryStub::ListSchemaTypes(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaTypesRequest const& request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->ListSchemaTypes(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody> DefaultManagedSchemaRegistryStub::ListSubjects(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::ListSubjectsRequest const&
        request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->ListSubjects(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody>
DefaultManagedSchemaRegistryStub::ListSubjectsBySchemaId(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsBySchemaIdRequest const& request) {
  google::api::HttpBody response;
  auto status =
      grpc_stub_->ListSubjectsBySchemaId(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody> DefaultManagedSchemaRegistryStub::DeleteSubject(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::DeleteSubjectRequest const&
        request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->DeleteSubject(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
DefaultManagedSchemaRegistryStub::LookupVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::LookupVersionRequest const&
        request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaVersion response;
  auto status = grpc_stub_->LookupVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaVersion>
DefaultManagedSchemaRegistryStub::GetVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaVersion response;
  auto status = grpc_stub_->GetVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody>
DefaultManagedSchemaRegistryStub::GetRawSchemaVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&
        request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->GetRawSchemaVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody> DefaultManagedSchemaRegistryStub::ListVersions(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::ListVersionsRequest const&
        request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->ListVersions(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::CreateVersionResponse>
DefaultManagedSchemaRegistryStub::CreateVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::CreateVersionRequest const&
        request) {
  google::cloud::managedkafka::schemaregistry::v1::CreateVersionResponse
      response;
  auto status = grpc_stub_->CreateVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody> DefaultManagedSchemaRegistryStub::DeleteVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::DeleteVersionRequest const&
        request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->DeleteVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody>
DefaultManagedSchemaRegistryStub::ListReferencedSchemas(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        ListReferencedSchemasRequest const& request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->ListReferencedSchemas(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<
    google::cloud::managedkafka::schemaregistry::v1::CheckCompatibilityResponse>
DefaultManagedSchemaRegistryStub::CheckCompatibility(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        CheckCompatibilityRequest const& request) {
  google::cloud::managedkafka::schemaregistry::v1::CheckCompatibilityResponse
      response;
  auto status = grpc_stub_->CheckCompatibility(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
DefaultManagedSchemaRegistryStub::GetSchemaConfig(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaConfigRequest const& request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaConfig response;
  auto status = grpc_stub_->GetSchemaConfig(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
DefaultManagedSchemaRegistryStub::UpdateSchemaConfig(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaConfigRequest const& request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaConfig response;
  auto status = grpc_stub_->UpdateSchemaConfig(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaConfig>
DefaultManagedSchemaRegistryStub::DeleteSchemaConfig(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaConfigRequest const& request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaConfig response;
  auto status = grpc_stub_->DeleteSchemaConfig(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
DefaultManagedSchemaRegistryStub::GetSchemaMode(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaModeRequest const&
        request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaMode response;
  auto status = grpc_stub_->GetSchemaMode(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
DefaultManagedSchemaRegistryStub::UpdateSchemaMode(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaModeRequest const& request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaMode response;
  auto status = grpc_stub_->UpdateSchemaMode(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::managedkafka::schemaregistry::v1::SchemaMode>
DefaultManagedSchemaRegistryStub::DeleteSchemaMode(
    grpc::ClientContext& context, Options const&,
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaModeRequest const& request) {
  google::cloud::managedkafka::schemaregistry::v1::SchemaMode response;
  auto status = grpc_stub_->DeleteSchemaMode(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::ListLocationsResponse>
DefaultManagedSchemaRegistryStub::ListLocations(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::ListLocationsRequest const& request) {
  google::cloud::location::ListLocationsResponse response;
  auto status = locations_stub_->ListLocations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::Location>
DefaultManagedSchemaRegistryStub::GetLocation(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::GetLocationRequest const& request) {
  google::cloud::location::Location response;
  auto status = locations_stub_->GetLocation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::ListOperationsResponse>
DefaultManagedSchemaRegistryStub::ListOperations(
    grpc::ClientContext& context, Options const&,
    google::longrunning::ListOperationsRequest const& request) {
  google::longrunning::ListOperationsResponse response;
  auto status = operations_stub_->ListOperations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::Operation>
DefaultManagedSchemaRegistryStub::GetOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::GetOperationRequest const& request) {
  google::longrunning::Operation response;
  auto status = operations_stub_->GetOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultManagedSchemaRegistryStub::DeleteOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::DeleteOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->DeleteOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

Status DefaultManagedSchemaRegistryStub::CancelOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::CancelOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->CancelOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1_internal
}  // namespace cloud
}  // namespace google
