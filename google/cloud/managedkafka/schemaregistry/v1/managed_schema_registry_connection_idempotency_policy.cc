// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

#include "google/cloud/managedkafka/schemaregistry/v1/managed_schema_registry_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace managedkafka_schemaregistry_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

ManagedSchemaRegistryConnectionIdempotencyPolicy::
    ~ManagedSchemaRegistryConnectionIdempotencyPolicy() = default;

std::unique_ptr<ManagedSchemaRegistryConnectionIdempotencyPolicy>
ManagedSchemaRegistryConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<ManagedSchemaRegistryConnectionIdempotencyPolicy>(
      *this);
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::GetSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaRegistryRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::ListSchemaRegistries(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaRegistriesRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::CreateSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        CreateSchemaRegistryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::DeleteSchemaRegistry(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaRegistryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::GetContext(
    google::cloud::managedkafka::schemaregistry::v1::GetContextRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::ListContexts(
    google::cloud::managedkafka::schemaregistry::v1::
        ListContextsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::GetSchema(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::GetRawSchema(
    google::cloud::managedkafka::schemaregistry::v1::GetSchemaRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::ListSchemaVersions(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaVersionsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::ListSchemaTypes(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSchemaTypesRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::ListSubjects(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::ListSubjectsBySchemaId(
    google::cloud::managedkafka::schemaregistry::v1::
        ListSubjectsBySchemaIdRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::DeleteSubject(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSubjectRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::LookupVersion(
    google::cloud::managedkafka::schemaregistry::v1::
        LookupVersionRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::GetVersion(
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::GetRawSchemaVersion(
    google::cloud::managedkafka::schemaregistry::v1::GetVersionRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::ListVersions(
    google::cloud::managedkafka::schemaregistry::v1::
        ListVersionsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::CreateVersion(
    google::cloud::managedkafka::schemaregistry::v1::
        CreateVersionRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::DeleteVersion(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteVersionRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::ListReferencedSchemas(
    google::cloud::managedkafka::schemaregistry::v1::
        ListReferencedSchemasRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::CheckCompatibility(
    google::cloud::managedkafka::schemaregistry::v1::
        CheckCompatibilityRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::GetSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaConfigRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::UpdateSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaConfigRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
ManagedSchemaRegistryConnectionIdempotencyPolicy::DeleteSchemaConfig(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaConfigRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::GetSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        GetSchemaModeRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::UpdateSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        UpdateSchemaModeRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::DeleteSchemaMode(
    google::cloud::managedkafka::schemaregistry::v1::
        DeleteSchemaModeRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::ListLocations(
    google::cloud::location::ListLocationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::ListOperations(
    google::longrunning::ListOperationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency ManagedSchemaRegistryConnectionIdempotencyPolicy::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<ManagedSchemaRegistryConnectionIdempotencyPolicy>
MakeDefaultManagedSchemaRegistryConnectionIdempotencyPolicy() {
  return std::make_unique<ManagedSchemaRegistryConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace managedkafka_schemaregistry_v1
}  // namespace cloud
}  // namespace google
