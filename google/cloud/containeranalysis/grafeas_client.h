// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: grafeas/v1/grafeas.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CONTAINERANALYSIS_GRAFEAS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CONTAINERANALYSIS_GRAFEAS_CLIENT_H

#include "google/cloud/containeranalysis/grafeas_connection.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace containeranalysis {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// [Grafeas](https://grafeas.io) API.
///
/// Retrieves analysis results of Cloud components such as Docker container
/// images.
///
/// Analysis results are stored as a series of occurrences. An `Occurrence`
/// contains information about a specific analysis instance on a resource. An
/// occurrence refers to a `Note`. A note contains details describing the
/// analysis and is generally stored in a separate project, called a `Provider`.
/// Multiple occurrences can refer to the same note.
///
/// For example, an SSL vulnerability could affect multiple images. In this
/// case, there would be one note for the vulnerability and an occurrence for
/// each image with the vulnerability referring to that note.
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class GrafeasClient {
 public:
  explicit GrafeasClient(std::shared_ptr<GrafeasConnection> connection,
                         Options opts = {});
  ~GrafeasClient();

  ///@{
  /// @name Copy and move support
  GrafeasClient(GrafeasClient const&) = default;
  GrafeasClient& operator=(GrafeasClient const&) = default;
  GrafeasClient(GrafeasClient&&) = default;
  GrafeasClient& operator=(GrafeasClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(GrafeasClient const& a, GrafeasClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(GrafeasClient const& a, GrafeasClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Gets the specified occurrence.
  ///
  /// @param name  The name of the occurrence in the form of
  ///  `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.GetOccurrenceRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L321}
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  ///
  StatusOr<grafeas::v1::Occurrence> GetOccurrence(std::string const& name,
                                                  Options opts = {});

  ///
  /// Gets the specified occurrence.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::GetOccurrenceRequest,grafeas/v1/grafeas.proto#L321}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.GetOccurrenceRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L321}
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  ///
  StatusOr<grafeas::v1::Occurrence> GetOccurrence(
      grafeas::v1::GetOccurrenceRequest const& request, Options opts = {});

  ///
  /// Lists occurrences for the specified project.
  ///
  /// @param parent  The name of the project to list occurrences for in the form
  /// of
  ///  `projects/[PROJECT_ID]`.
  /// @param filter  The filter expression.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.ListOccurrencesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L331}
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  ///
  StreamRange<grafeas::v1::Occurrence> ListOccurrences(
      std::string const& parent, std::string const& filter, Options opts = {});

  ///
  /// Lists occurrences for the specified project.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::ListOccurrencesRequest,grafeas/v1/grafeas.proto#L331}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.ListOccurrencesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L331}
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  ///
  StreamRange<grafeas::v1::Occurrence> ListOccurrences(
      grafeas::v1::ListOccurrencesRequest request, Options opts = {});

  ///
  /// Deletes the specified occurrence. For example, use this method to delete
  /// an occurrence when the occurrence is no longer applicable for the given
  /// resource.
  ///
  /// @param name  The name of the occurrence in the form of
  ///  `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  ///
  /// [grafeas.v1.DeleteOccurrenceRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L361}
  ///
  Status DeleteOccurrence(std::string const& name, Options opts = {});

  ///
  /// Deletes the specified occurrence. For example, use this method to delete
  /// an occurrence when the occurrence is no longer applicable for the given
  /// resource.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::DeleteOccurrenceRequest,grafeas/v1/grafeas.proto#L361}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  ///
  /// [grafeas.v1.DeleteOccurrenceRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L361}
  ///
  Status DeleteOccurrence(grafeas::v1::DeleteOccurrenceRequest const& request,
                          Options opts = {});

  ///
  /// Creates a new occurrence.
  ///
  /// @param parent  The name of the project in the form of
  /// `projects/[PROJECT_ID]`, under which
  ///  the occurrence is to be created.
  /// @param occurrence  The occurrence to create.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.CreateOccurrenceRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L371}
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  ///
  StatusOr<grafeas::v1::Occurrence> CreateOccurrence(
      std::string const& parent, grafeas::v1::Occurrence const& occurrence,
      Options opts = {});

  ///
  /// Creates a new occurrence.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::CreateOccurrenceRequest,grafeas/v1/grafeas.proto#L371}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.CreateOccurrenceRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L371}
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  ///
  StatusOr<grafeas::v1::Occurrence> CreateOccurrence(
      grafeas::v1::CreateOccurrenceRequest const& request, Options opts = {});

  ///
  /// Creates new occurrences in batch.
  ///
  /// @param parent  The name of the project in the form of
  /// `projects/[PROJECT_ID]`, under which
  ///  the occurrences are to be created.
  /// @param occurrences  The occurrences to create. Max allowed length is 1000.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::BatchCreateOccurrencesResponse,grafeas/v1/grafeas.proto#L541}
  ///
  /// [grafeas.v1.BatchCreateOccurrencesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L528}
  /// [grafeas.v1.BatchCreateOccurrencesResponse]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L541}
  ///
  StatusOr<grafeas::v1::BatchCreateOccurrencesResponse> BatchCreateOccurrences(
      std::string const& parent,
      std::vector<grafeas::v1::Occurrence> const& occurrences,
      Options opts = {});

  ///
  /// Creates new occurrences in batch.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::BatchCreateOccurrencesRequest,grafeas/v1/grafeas.proto#L528}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::BatchCreateOccurrencesResponse,grafeas/v1/grafeas.proto#L541}
  ///
  /// [grafeas.v1.BatchCreateOccurrencesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L528}
  /// [grafeas.v1.BatchCreateOccurrencesResponse]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L541}
  ///
  StatusOr<grafeas::v1::BatchCreateOccurrencesResponse> BatchCreateOccurrences(
      grafeas::v1::BatchCreateOccurrencesRequest const& request,
      Options opts = {});

  ///
  /// Updates the specified occurrence.
  ///
  /// @param name  The name of the occurrence in the form of
  ///  `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
  /// @param occurrence  The updated occurrence.
  /// @param update_mask  The fields to update.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  /// [grafeas.v1.UpdateOccurrenceRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L383}
  ///
  StatusOr<grafeas::v1::Occurrence> UpdateOccurrence(
      std::string const& name, grafeas::v1::Occurrence const& occurrence,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  ///
  /// Updates the specified occurrence.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::UpdateOccurrenceRequest,grafeas/v1/grafeas.proto#L383}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  /// [grafeas.v1.UpdateOccurrenceRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L383}
  ///
  StatusOr<grafeas::v1::Occurrence> UpdateOccurrence(
      grafeas::v1::UpdateOccurrenceRequest const& request, Options opts = {});

  ///
  /// Gets the note attached to the specified occurrence. Consumer projects can
  /// use this method to get a note that belongs to a provider project.
  ///
  /// @param name  The name of the occurrence in the form of
  ///  `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.GetOccurrenceNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L407}
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  ///
  StatusOr<grafeas::v1::Note> GetOccurrenceNote(std::string const& name,
                                                Options opts = {});

  ///
  /// Gets the note attached to the specified occurrence. Consumer projects can
  /// use this method to get a note that belongs to a provider project.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::GetOccurrenceNoteRequest,grafeas/v1/grafeas.proto#L407}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.GetOccurrenceNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L407}
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  ///
  StatusOr<grafeas::v1::Note> GetOccurrenceNote(
      grafeas::v1::GetOccurrenceNoteRequest const& request, Options opts = {});

  ///
  /// Gets the specified note.
  ///
  /// @param name  The name of the note in the form of
  ///  `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.GetNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L397}
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  ///
  StatusOr<grafeas::v1::Note> GetNote(std::string const& name,
                                      Options opts = {});

  ///
  /// Gets the specified note.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::GetNoteRequest,grafeas/v1/grafeas.proto#L397}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.GetNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L397}
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  ///
  StatusOr<grafeas::v1::Note> GetNote(
      grafeas::v1::GetNoteRequest const& request, Options opts = {});

  ///
  /// Lists notes for the specified project.
  ///
  /// @param parent  The name of the project to list notes for in the form of
  ///  `projects/[PROJECT_ID]`.
  /// @param filter  The filter expression.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.ListNotesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L417}
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  ///
  StreamRange<grafeas::v1::Note> ListNotes(std::string const& parent,
                                           std::string const& filter,
                                           Options opts = {});

  ///
  /// Lists notes for the specified project.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::ListNotesRequest,grafeas/v1/grafeas.proto#L417}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.ListNotesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L417}
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  ///
  StreamRange<grafeas::v1::Note> ListNotes(
      grafeas::v1::ListNotesRequest request, Options opts = {});

  ///
  /// Deletes the specified note.
  ///
  /// @param name  The name of the note in the form of
  ///  `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  ///
  /// [grafeas.v1.DeleteNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L447}
  ///
  Status DeleteNote(std::string const& name, Options opts = {});

  ///
  /// Deletes the specified note.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::DeleteNoteRequest,grafeas/v1/grafeas.proto#L447}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  ///
  /// [grafeas.v1.DeleteNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L447}
  ///
  Status DeleteNote(grafeas::v1::DeleteNoteRequest const& request,
                    Options opts = {});

  ///
  /// Creates a new note.
  ///
  /// @param parent  The name of the project in the form of
  /// `projects/[PROJECT_ID]`, under which
  ///  the note is to be created.
  /// @param note_id  The ID to use for this note.
  /// @param note  The note to create.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.CreateNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L457}
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  ///
  StatusOr<grafeas::v1::Note> CreateNote(std::string const& parent,
                                         std::string const& note_id,
                                         grafeas::v1::Note const& note,
                                         Options opts = {});

  ///
  /// Creates a new note.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::CreateNoteRequest,grafeas/v1/grafeas.proto#L457}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.CreateNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L457}
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  ///
  StatusOr<grafeas::v1::Note> CreateNote(
      grafeas::v1::CreateNoteRequest const& request, Options opts = {});

  ///
  /// Creates new notes in batch.
  ///
  /// @param parent  The name of the project in the form of
  /// `projects/[PROJECT_ID]`, under which
  ///  the notes are to be created.
  /// @param notes  The notes to create. Max allowed length is 1000.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::BatchCreateNotesResponse,grafeas/v1/grafeas.proto#L522}
  ///
  /// [grafeas.v1.BatchCreateNotesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L509}
  /// [grafeas.v1.BatchCreateNotesResponse]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L522}
  ///
  StatusOr<grafeas::v1::BatchCreateNotesResponse> BatchCreateNotes(
      std::string const& parent,
      std::map<std::string, grafeas::v1::Note> const& notes, Options opts = {});

  ///
  /// Creates new notes in batch.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::BatchCreateNotesRequest,grafeas/v1/grafeas.proto#L509}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::BatchCreateNotesResponse,grafeas/v1/grafeas.proto#L522}
  ///
  /// [grafeas.v1.BatchCreateNotesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L509}
  /// [grafeas.v1.BatchCreateNotesResponse]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L522}
  ///
  StatusOr<grafeas::v1::BatchCreateNotesResponse> BatchCreateNotes(
      grafeas::v1::BatchCreateNotesRequest const& request, Options opts = {});

  ///
  /// Updates the specified note.
  ///
  /// @param name  The name of the note in the form of
  ///  `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
  /// @param note  The updated note.
  /// @param update_mask  The fields to update.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  /// [grafeas.v1.UpdateNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L471}
  ///
  StatusOr<grafeas::v1::Note> UpdateNote(
      std::string const& name, grafeas::v1::Note const& note,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  ///
  /// Updates the specified note.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::UpdateNoteRequest,grafeas/v1/grafeas.proto#L471}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return @googleapis_link{grafeas::v1::Note,grafeas/v1/grafeas.proto#L258}
  ///
  /// [grafeas.v1.Note]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L258}
  /// [grafeas.v1.UpdateNoteRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L471}
  ///
  StatusOr<grafeas::v1::Note> UpdateNote(
      grafeas::v1::UpdateNoteRequest const& request, Options opts = {});

  ///
  /// Lists occurrences referencing the specified note. Provider projects can
  /// use this method to get all occurrences across consumer projects
  /// referencing the specified note.
  ///
  /// @param name  The name of the note to list occurrences for in the form of
  ///  `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
  /// @param filter  The filter expression.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.ListNoteOccurrencesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L485}
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  ///
  StreamRange<grafeas::v1::Occurrence> ListNoteOccurrences(
      std::string const& name, std::string const& filter, Options opts = {});

  ///
  /// Lists occurrences referencing the specified note. Provider projects can
  /// use this method to get all occurrences across consumer projects
  /// referencing the specified note.
  ///
  /// @param request
  /// @googleapis_link{grafeas::v1::ListNoteOccurrencesRequest,grafeas/v1/grafeas.proto#L485}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{grafeas::v1::Occurrence,grafeas/v1/grafeas.proto#L194}
  ///
  /// [grafeas.v1.ListNoteOccurrencesRequest]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L485}
  /// [grafeas.v1.Occurrence]:
  /// @googleapis_reference_link{grafeas/v1/grafeas.proto#L194}
  ///
  StreamRange<grafeas::v1::Occurrence> ListNoteOccurrences(
      grafeas::v1::ListNoteOccurrencesRequest request, Options opts = {});

 private:
  std::shared_ptr<GrafeasConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace containeranalysis
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CONTAINERANALYSIS_GRAFEAS_CLIENT_H
