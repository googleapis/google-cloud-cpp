// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/translate/v3/translation_service.proto

#include "google/cloud/translate/v3/translation_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace translate_v3 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

TranslationServiceConnectionIdempotencyPolicy::
    ~TranslationServiceConnectionIdempotencyPolicy() = default;

std::unique_ptr<TranslationServiceConnectionIdempotencyPolicy>
TranslationServiceConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<TranslationServiceConnectionIdempotencyPolicy>(*this);
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::TranslateText(
    google::cloud::translation::v3::TranslateTextRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::RomanizeText(
    google::cloud::translation::v3::RomanizeTextRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::DetectLanguage(
    google::cloud::translation::v3::DetectLanguageRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
TranslationServiceConnectionIdempotencyPolicy::GetSupportedLanguages(
    google::cloud::translation::v3::GetSupportedLanguagesRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::TranslateDocument(
    google::cloud::translation::v3::TranslateDocumentRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::BatchTranslateText(
    google::cloud::translation::v3::BatchTranslateTextRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
TranslationServiceConnectionIdempotencyPolicy::BatchTranslateDocument(
    google::cloud::translation::v3::BatchTranslateDocumentRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::CreateGlossary(
    google::cloud::translation::v3::CreateGlossaryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::UpdateGlossary(
    google::cloud::translation::v3::UpdateGlossaryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ListGlossaries(
    google::cloud::translation::v3::ListGlossariesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::GetGlossary(
    google::cloud::translation::v3::GetGlossaryRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::DeleteGlossary(
    google::cloud::translation::v3::DeleteGlossaryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::GetGlossaryEntry(
    google::cloud::translation::v3::GetGlossaryEntryRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ListGlossaryEntries(
    google::cloud::translation::v3::ListGlossaryEntriesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::CreateGlossaryEntry(
    google::cloud::translation::v3::CreateGlossaryEntryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::UpdateGlossaryEntry(
    google::cloud::translation::v3::UpdateGlossaryEntryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::DeleteGlossaryEntry(
    google::cloud::translation::v3::DeleteGlossaryEntryRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::CreateDataset(
    google::cloud::translation::v3::CreateDatasetRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::GetDataset(
    google::cloud::translation::v3::GetDatasetRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ListDatasets(
    google::cloud::translation::v3::ListDatasetsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::DeleteDataset(
    google::cloud::translation::v3::DeleteDatasetRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
TranslationServiceConnectionIdempotencyPolicy::CreateAdaptiveMtDataset(
    google::cloud::translation::v3::CreateAdaptiveMtDatasetRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency
TranslationServiceConnectionIdempotencyPolicy::DeleteAdaptiveMtDataset(
    google::cloud::translation::v3::DeleteAdaptiveMtDatasetRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::GetAdaptiveMtDataset(
    google::cloud::translation::v3::GetAdaptiveMtDatasetRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency
TranslationServiceConnectionIdempotencyPolicy::ListAdaptiveMtDatasets(
    google::cloud::translation::v3::ListAdaptiveMtDatasetsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::AdaptiveMtTranslate(
    google::cloud::translation::v3::AdaptiveMtTranslateRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::GetAdaptiveMtFile(
    google::cloud::translation::v3::GetAdaptiveMtFileRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::DeleteAdaptiveMtFile(
    google::cloud::translation::v3::DeleteAdaptiveMtFileRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ImportAdaptiveMtFile(
    google::cloud::translation::v3::ImportAdaptiveMtFileRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ListAdaptiveMtFiles(
    google::cloud::translation::v3::ListAdaptiveMtFilesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency
TranslationServiceConnectionIdempotencyPolicy::ListAdaptiveMtSentences(
    google::cloud::translation::v3::ListAdaptiveMtSentencesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ImportData(
    google::cloud::translation::v3::ImportDataRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ExportData(
    google::cloud::translation::v3::ExportDataRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ListExamples(
    google::cloud::translation::v3::ListExamplesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::CreateModel(
    google::cloud::translation::v3::CreateModelRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ListModels(
    google::cloud::translation::v3::ListModelsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::GetModel(
    google::cloud::translation::v3::GetModelRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::DeleteModel(
    google::cloud::translation::v3::DeleteModelRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ListLocations(
    google::cloud::location::ListLocationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::ListOperations(
    google::longrunning::ListOperationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency TranslationServiceConnectionIdempotencyPolicy::WaitOperation(
    google::longrunning::WaitOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<TranslationServiceConnectionIdempotencyPolicy>
MakeDefaultTranslationServiceConnectionIdempotencyPolicy() {
  return std::make_unique<TranslationServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace translate_v3
}  // namespace cloud
}  // namespace google
