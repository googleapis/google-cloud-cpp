// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/translate/v3/translation_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_TRANSLATE_V3_MOCKS_MOCK_TRANSLATION_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_TRANSLATE_V3_MOCKS_MOCK_TRANSLATION_CONNECTION_H

#include "google/cloud/translate/v3/translation_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace translate_v3_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `TranslationServiceConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `TranslationServiceClient`. To do
 * so, construct an object of type `TranslationServiceClient` with an instance
 * of this class. Then use the Google Test framework functions to program the
 * behavior of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockTranslationServiceConnection
    : public translate_v3::TranslationServiceConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::TranslateTextResponse>,
      TranslateText,
      (google::cloud::translation::v3::TranslateTextRequest const& request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::RomanizeTextResponse>,
      RomanizeText,
      (google::cloud::translation::v3::RomanizeTextRequest const& request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::DetectLanguageResponse>,
      DetectLanguage,
      (google::cloud::translation::v3::DetectLanguageRequest const& request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::SupportedLanguages>,
      GetSupportedLanguages,
      (google::cloud::translation::v3::GetSupportedLanguagesRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::TranslateDocumentResponse>,
      TranslateDocument,
      (google::cloud::translation::v3::TranslateDocumentRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// BatchTranslateText(Matcher<google::cloud::translation::v3::BatchTranslateTextRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::BatchTranslateResponse>>,
      BatchTranslateText,
      (google::cloud::translation::v3::BatchTranslateTextRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, BatchTranslateText(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, BatchTranslateText,
              (NoAwaitTag,
               google::cloud::translation::v3::BatchTranslateTextRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// BatchTranslateText(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::BatchTranslateResponse>>,
      BatchTranslateText, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// BatchTranslateDocument(Matcher<google::cloud::translation::v3::BatchTranslateDocumentRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::cloud::translation::v3::BatchTranslateDocumentResponse>>,
      BatchTranslateDocument,
      (google::cloud::translation::v3::BatchTranslateDocumentRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, BatchTranslateDocument(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, BatchTranslateDocument,
      (NoAwaitTag,
       google::cloud::translation::v3::BatchTranslateDocumentRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// BatchTranslateDocument(Matcher<google::longrunning::Operation const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::cloud::translation::v3::BatchTranslateDocumentResponse>>,
      BatchTranslateDocument, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateGlossary(Matcher<google::cloud::translation::v3::CreateGlossaryRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::Glossary>>,
      CreateGlossary,
      (google::cloud::translation::v3::CreateGlossaryRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateGlossary(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateGlossary,
      (NoAwaitTag,
       google::cloud::translation::v3::CreateGlossaryRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateGlossary(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::translation::v3::Glossary>>,
              CreateGlossary, (google::longrunning::Operation const& operation),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateGlossary(Matcher<google::cloud::translation::v3::UpdateGlossaryRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::Glossary>>,
      UpdateGlossary,
      (google::cloud::translation::v3::UpdateGlossaryRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateGlossary(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, UpdateGlossary,
      (NoAwaitTag,
       google::cloud::translation::v3::UpdateGlossaryRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateGlossary(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::translation::v3::Glossary>>,
              UpdateGlossary, (google::longrunning::Operation const& operation),
              (override));

  MOCK_METHOD((StreamRange<google::cloud::translation::v3::Glossary>),
              ListGlossaries,
              (google::cloud::translation::v3::ListGlossariesRequest request),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::Glossary>, GetGlossary,
      (google::cloud::translation::v3::GetGlossaryRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteGlossary(Matcher<google::cloud::translation::v3::DeleteGlossaryRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::DeleteGlossaryResponse>>,
      DeleteGlossary,
      (google::cloud::translation::v3::DeleteGlossaryRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteGlossary(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteGlossary,
      (NoAwaitTag,
       google::cloud::translation::v3::DeleteGlossaryRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteGlossary(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::DeleteGlossaryResponse>>,
      DeleteGlossary, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::GlossaryEntry>, GetGlossaryEntry,
      (google::cloud::translation::v3::GetGlossaryEntryRequest const& request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::translation::v3::GlossaryEntry>),
      ListGlossaryEntries,
      (google::cloud::translation::v3::ListGlossaryEntriesRequest request),
      (override));

  MOCK_METHOD(StatusOr<google::cloud::translation::v3::GlossaryEntry>,
              CreateGlossaryEntry,
              (google::cloud::translation::v3::CreateGlossaryEntryRequest const&
                   request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::translation::v3::GlossaryEntry>,
              UpdateGlossaryEntry,
              (google::cloud::translation::v3::UpdateGlossaryEntryRequest const&
                   request),
              (override));

  MOCK_METHOD(Status, DeleteGlossaryEntry,
              (google::cloud::translation::v3::DeleteGlossaryEntryRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateDataset(Matcher<google::cloud::translation::v3::CreateDatasetRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::Dataset>>, CreateDataset,
      (google::cloud::translation::v3::CreateDatasetRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateDataset(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateDataset,
      (NoAwaitTag,
       google::cloud::translation::v3::CreateDatasetRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateDataset(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::translation::v3::Dataset>>,
              CreateDataset, (google::longrunning::Operation const& operation),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::Dataset>, GetDataset,
      (google::cloud::translation::v3::GetDatasetRequest const& request),
      (override));

  MOCK_METHOD((StreamRange<google::cloud::translation::v3::Dataset>),
              ListDatasets,
              (google::cloud::translation::v3::ListDatasetsRequest request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteDataset(Matcher<google::cloud::translation::v3::DeleteDatasetRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::DeleteDatasetMetadata>>,
      DeleteDataset,
      (google::cloud::translation::v3::DeleteDatasetRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteDataset(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteDataset,
      (NoAwaitTag,
       google::cloud::translation::v3::DeleteDatasetRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteDataset(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::DeleteDatasetMetadata>>,
      DeleteDataset, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::AdaptiveMtDataset>,
      CreateAdaptiveMtDataset,
      (google::cloud::translation::v3::CreateAdaptiveMtDatasetRequest const&
           request),
      (override));

  MOCK_METHOD(
      Status, DeleteAdaptiveMtDataset,
      (google::cloud::translation::v3::DeleteAdaptiveMtDatasetRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::AdaptiveMtDataset>,
      GetAdaptiveMtDataset,
      (google::cloud::translation::v3::GetAdaptiveMtDatasetRequest const&
           request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::translation::v3::AdaptiveMtDataset>),
      ListAdaptiveMtDatasets,
      (google::cloud::translation::v3::ListAdaptiveMtDatasetsRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::AdaptiveMtTranslateResponse>,
      AdaptiveMtTranslate,
      (google::cloud::translation::v3::AdaptiveMtTranslateRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::AdaptiveMtFile>,
      GetAdaptiveMtFile,
      (google::cloud::translation::v3::GetAdaptiveMtFileRequest const& request),
      (override));

  MOCK_METHOD(
      Status, DeleteAdaptiveMtFile,
      (google::cloud::translation::v3::DeleteAdaptiveMtFileRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::translation::v3::ImportAdaptiveMtFileResponse>,
      ImportAdaptiveMtFile,
      (google::cloud::translation::v3::ImportAdaptiveMtFileRequest const&
           request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::translation::v3::AdaptiveMtFile>),
      ListAdaptiveMtFiles,
      (google::cloud::translation::v3::ListAdaptiveMtFilesRequest request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::translation::v3::AdaptiveMtSentence>),
      ListAdaptiveMtSentences,
      (google::cloud::translation::v3::ListAdaptiveMtSentencesRequest request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// ImportData(Matcher<google::cloud::translation::v3::ImportDataRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::ImportDataMetadata>>,
      ImportData,
      (google::cloud::translation::v3::ImportDataRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, ImportData(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, ImportData,
      (NoAwaitTag,
       google::cloud::translation::v3::ImportDataRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, ImportData(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::ImportDataMetadata>>,
      ImportData, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// ExportData(Matcher<google::cloud::translation::v3::ExportDataRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::ExportDataMetadata>>,
      ExportData,
      (google::cloud::translation::v3::ExportDataRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, ExportData(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, ExportData,
      (NoAwaitTag,
       google::cloud::translation::v3::ExportDataRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, ExportData(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::ExportDataMetadata>>,
      ExportData, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD((StreamRange<google::cloud::translation::v3::Example>),
              ListExamples,
              (google::cloud::translation::v3::ListExamplesRequest request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateModel(Matcher<google::cloud::translation::v3::CreateModelRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::Model>>, CreateModel,
      (google::cloud::translation::v3::CreateModelRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateModel(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateModel,
      (NoAwaitTag,
       google::cloud::translation::v3::CreateModelRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateModel(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::translation::v3::Model>>,
              CreateModel, (google::longrunning::Operation const& operation),
              (override));

  MOCK_METHOD((StreamRange<google::cloud::translation::v3::Model>), ListModels,
              (google::cloud::translation::v3::ListModelsRequest request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::translation::v3::Model>, GetModel,
              (google::cloud::translation::v3::GetModelRequest const& request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteModel(Matcher<google::cloud::translation::v3::DeleteModelRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::DeleteModelMetadata>>,
      DeleteModel,
      (google::cloud::translation::v3::DeleteModelRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteModel(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteModel,
      (NoAwaitTag,
       google::cloud::translation::v3::DeleteModelRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteModel(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::translation::v3::DeleteModelMetadata>>,
      DeleteModel, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD((StreamRange<google::cloud::location::Location>), ListLocations,
              (google::cloud::location::ListLocationsRequest request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::location::Location>, GetLocation,
              (google::cloud::location::GetLocationRequest const& request),
              (override));

  MOCK_METHOD((StreamRange<google::longrunning::Operation>), ListOperations,
              (google::longrunning::ListOperationsRequest request), (override));

  MOCK_METHOD(StatusOr<google::longrunning::Operation>, GetOperation,
              (google::longrunning::GetOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, DeleteOperation,
              (google::longrunning::DeleteOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, CancelOperation,
              (google::longrunning::CancelOperationRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::longrunning::Operation>, WaitOperation,
              (google::longrunning::WaitOperationRequest const& request),
              (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace translate_v3_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_TRANSLATE_V3_MOCKS_MOCK_TRANSLATION_CONNECTION_H
