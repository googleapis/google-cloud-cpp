// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/translate/v3/translation_service.proto

#include "google/cloud/translate/translation_connection.h"
#include "google/cloud/translate/internal/translation_option_defaults.h"
#include "google/cloud/translate/internal/translation_stub_factory.h"
#include "google/cloud/translate/translation_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace translate {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

TranslationServiceConnection::~TranslationServiceConnection() = default;

StatusOr<google::cloud::translation::v3::TranslateTextResponse>
TranslationServiceConnection::TranslateText(
    google::cloud::translation::v3::TranslateTextRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::translation::v3::DetectLanguageResponse>
TranslationServiceConnection::DetectLanguage(
    google::cloud::translation::v3::DetectLanguageRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::translation::v3::SupportedLanguages>
TranslationServiceConnection::GetSupportedLanguages(
    google::cloud::translation::v3::GetSupportedLanguagesRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::translation::v3::TranslateDocumentResponse>
TranslationServiceConnection::TranslateDocument(
    google::cloud::translation::v3::TranslateDocumentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::translation::v3::BatchTranslateResponse>>
TranslationServiceConnection::BatchTranslateText(
    google::cloud::translation::v3::BatchTranslateTextRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::translation::v3::BatchTranslateResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::translation::v3::BatchTranslateDocumentResponse>>
TranslationServiceConnection::BatchTranslateDocument(
    google::cloud::translation::v3::BatchTranslateDocumentRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::translation::v3::BatchTranslateDocumentResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::translation::v3::Glossary>>
TranslationServiceConnection::CreateGlossary(
    google::cloud::translation::v3::CreateGlossaryRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::translation::v3::Glossary>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::translation::v3::Glossary>
TranslationServiceConnection::ListGlossaries(
    google::cloud::translation::v3::ListGlossariesRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::translation::v3::Glossary>>(
      std::move(request),
      [](google::cloud::translation::v3::ListGlossariesRequest const&) {
        return StatusOr<
            google::cloud::translation::v3::ListGlossariesResponse>{};
      },
      [](google::cloud::translation::v3::ListGlossariesResponse const&) {
        return std::vector<google::cloud::translation::v3::Glossary>();
      });
}

StatusOr<google::cloud::translation::v3::Glossary>
TranslationServiceConnection::GetGlossary(
    google::cloud::translation::v3::GetGlossaryRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::translation::v3::DeleteGlossaryResponse>>
TranslationServiceConnection::DeleteGlossary(
    google::cloud::translation::v3::DeleteGlossaryRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::translation::v3::DeleteGlossaryResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

namespace {
class TranslationServiceConnectionImpl : public TranslationServiceConnection {
 public:
  TranslationServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<translate_internal::TranslationServiceStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<TranslationServiceRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<TranslationServiceBackoffPolicyOption>()->clone()),
        polling_policy_prototype_(
            options.get<TranslationServicePollingPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<TranslationServiceConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~TranslationServiceConnectionImpl() override = default;

  StatusOr<google::cloud::translation::v3::TranslateTextResponse> TranslateText(
      google::cloud::translation::v3::TranslateTextRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->TranslateText(request),
        [this](grpc::ClientContext& context,
               google::cloud::translation::v3::TranslateTextRequest const&
                   request) { return stub_->TranslateText(context, request); },
        request, __func__);
  }

  StatusOr<google::cloud::translation::v3::DetectLanguageResponse>
  DetectLanguage(google::cloud::translation::v3::DetectLanguageRequest const&
                     request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DetectLanguage(request),
        [this](grpc::ClientContext& context,
               google::cloud::translation::v3::DetectLanguageRequest const&
                   request) { return stub_->DetectLanguage(context, request); },
        request, __func__);
  }

  StatusOr<google::cloud::translation::v3::SupportedLanguages>
  GetSupportedLanguages(
      google::cloud::translation::v3::GetSupportedLanguagesRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetSupportedLanguages(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::translation::v3::GetSupportedLanguagesRequest const&
                request) {
          return stub_->GetSupportedLanguages(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::translation::v3::TranslateDocumentResponse>
  TranslateDocument(
      google::cloud::translation::v3::TranslateDocumentRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->TranslateDocument(request),
        [this](grpc::ClientContext& context,
               google::cloud::translation::v3::TranslateDocumentRequest const&
                   request) {
          return stub_->TranslateDocument(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::translation::v3::BatchTranslateResponse>>
  BatchTranslateText(
      google::cloud::translation::v3::BatchTranslateTextRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::translation::v3::BatchTranslateResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::translation::v3::BatchTranslateTextRequest const&
                   request) {
          return stub->AsyncBatchTranslateText(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::translation::v3::BatchTranslateResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->BatchTranslateText(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<
      StatusOr<google::cloud::translation::v3::BatchTranslateDocumentResponse>>
  BatchTranslateDocument(
      google::cloud::translation::v3::BatchTranslateDocumentRequest const&
          request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::translation::v3::BatchTranslateDocumentResponse>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::translation::v3::BatchTranslateDocumentRequest const&
                request) {
          return stub->AsyncBatchTranslateDocument(cq, std::move(context),
                                                   request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::translation::v3::BatchTranslateDocumentResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->BatchTranslateDocument(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::translation::v3::Glossary>> CreateGlossary(
      google::cloud::translation::v3::CreateGlossaryRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::translation::v3::Glossary>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::translation::v3::CreateGlossaryRequest const&
                   request) {
          return stub->AsyncCreateGlossary(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::translation::v3::Glossary>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateGlossary(request),
        polling_policy_prototype_->clone(), __func__);
  }

  StreamRange<google::cloud::translation::v3::Glossary> ListGlossaries(
      google::cloud::translation::v3::ListGlossariesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<TranslationServiceRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListGlossaries(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::translation::v3::Glossary>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::translation::v3::ListGlossariesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  google::cloud::translation::v3::ListGlossariesRequest const&
                      request) {
                return stub->ListGlossaries(context, request);
              },
              r, function_name);
        },
        [](google::cloud::translation::v3::ListGlossariesResponse r) {
          std::vector<google::cloud::translation::v3::Glossary> result(
              r.glossaries().size());
          auto& messages = *r.mutable_glossaries();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::translation::v3::Glossary> GetGlossary(
      google::cloud::translation::v3::GetGlossaryRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetGlossary(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::translation::v3::GetGlossaryRequest const& request) {
          return stub_->GetGlossary(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::translation::v3::DeleteGlossaryResponse>>
  DeleteGlossary(google::cloud::translation::v3::DeleteGlossaryRequest const&
                     request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::translation::v3::DeleteGlossaryResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::translation::v3::DeleteGlossaryRequest const&
                   request) {
          return stub->AsyncDeleteGlossary(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::translation::v3::DeleteGlossaryResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteGlossary(request),
        polling_policy_prototype_->clone(), __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<translate_internal::TranslationServiceStub> stub_;
  std::unique_ptr<TranslationServiceRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<PollingPolicy const> polling_policy_prototype_;
  std::unique_ptr<TranslationServiceConnectionIdempotencyPolicy>
      idempotency_policy_;
};
}  // namespace

std::shared_ptr<TranslationServiceConnection> MakeTranslationServiceConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 TranslationServicePolicyOptionList>(options,
                                                                     __func__);
  options =
      translate_internal::TranslationServiceDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = translate_internal::CreateDefaultTranslationServiceStub(
      background->cq(), options);
  return std::make_shared<TranslationServiceConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace translate
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace translate_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<translate::TranslationServiceConnection>
MakeTranslationServiceConnection(std::shared_ptr<TranslationServiceStub> stub,
                                 Options options) {
  options = TranslationServiceDefaultOptions(std::move(options));
  return std::make_shared<translate::TranslationServiceConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace translate_internal
}  // namespace cloud
}  // namespace google
