/*!

@mainpage Web Security Scanner API C++ Client Library

An idiomatic C++ client library for
[Web Security Scanner](https://cloud.google.com/security-command-center/), a
service that scans your Compute and App Engine apps for common web
vulnerabilities.

This library is **experimental**. Its APIs are subject to change without notice.

This library requires a C++11 compiler. It is supported (and tested) on multiple
Linux distributions, as well as Windows and macOS. The
[README][github-readme] on [GitHub][github-link] provides detailed
instructions to install the necessary dependencies, as well as how to compile
the client library.

### Setting up your repo

In order to use the Web Security Scanner API C++ client library from your own code,
you'll need to configure your build system to discover and compile the Cloud
C++ client libraries. In some cases your build system or package manager may
need to download the libraries too. The Cloud C++ client libraries natively
support [Bazel](https://bazel.build/) and [CMake](https://cmake.org/) as build
systems. We've created a minimal, "Hello World", [quickstart][github-quickstart]
that includes detailed instructions on how to compile the library for use in
your application. You can fetch the source from [GitHub][github-link] as normal:

@code{.sh}
git clone https://github.com/googleapis/google-cloud-cpp.git
cd google-cloud-cpp/google/cloud/websecurityscanner/quickstart
@endcode

@par Example: Quickstart

The following shows the code that you'll run in the
`google/cloud/websecurityscanner/quickstart/` directory,
which should give you a taste of the Web Security Scanner API C++ client library API.

@include quickstart.cc

## Environment Variables

- `GOOGLE_CLOUD_CPP_ENABLE_TRACING=rpc` turns on tracing for most gRPC
  calls. The library injects an additional Stub decorator that prints each gRPC
  request and response.  Unless you have configured your own logging backend,
  you should also set `GOOGLE_CLOUD_CPP_ENABLE_CLOG` to produce any output on
  the program's console.

- `GOOGLE_CLOUD_CPP_ENABLE_TRACING=rpc-streams` turns on tracing for streaming
  gRPC calls, such as `Client::Read()`, `Client::ExecuteQuery()`, and
  `Client::ProfileQuery()`. This can produce a lot of output, so use with
  caution!

- `GOOGLE_CLOUD_CPP_TRACING_OPTIONS=...` modifies the behavior of gRPC tracing,
  including whether messages will be output on multiple lines, or whether
  string/bytes fields will be truncated.

- `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` turns on logging in the library. Basically
  the library always "logs" but the logging infrastructure has no backend to
  actually print anything until the application sets a backend or it sets this
  environment variable.

### Error Handling

[status-or-header]: https://github.com/googleapis/google-cloud-cpp/blob/main/google/cloud/status_or.h

This library never throws exceptions to signal error, but you can use exceptions
to detect errors in the returned objects. In general, the library returns a
[`StatusOr<T>`][status-or-header] if an error is possible. This is an "outcome"
type, when the operation is successful a `StatusOr<T>` converts to `true` in
boolean context (and its `.ok()` member function returns `true`), the
application can then use `operator->` or `operator*` to access the `T` value.
When the operation fails a `StatusOr<T>` converts to `false` (and `.ok()`
returns `false`). It is undefined behavior to use the value in this case.

If you prefer to use exceptions on error, you can use the `.value()` accessor.
It will return the `T` value or throw on error.

For operations that do not return a value the library simply returns
`google::cloud::Status`.

### Retry, Backoff, and Idempotency Policies.

The library automatically retries requests that fail with transient errors, and
uses [exponential backoff] to backoff between retries. Application developers
can override the default policies.

[exponential backoff]: https://en.wikipedia.org/wiki/Exponential_backoff
[gcs-quickstart]: https://cloud.google.com/security-command-center/docs/quickstarts 'Quickstarts'
[resource-link]: https://console.cloud.google.com/cloud-resource-manager 'Console Resource Manager'
[billing-link]: https://cloud.google.com/billing/docs/how-to/modify-project 'How to: Modify Project'
[authentication-quickstart]: https://cloud.google.com/docs/authentication/getting-started 'Authentication Getting Started'
[gcloud-quickstart]: https://cloud.google.com/sdk/docs/quickstarts
[github-link]: https://github.com/googleapis/google-cloud-cpp 'GitHub Repository'
<!-- The ugly %2E disables auto-linking in Doxygen -->
[github-readme]:  https://github.com/googleapis/google-cloud-cpp/blob/main/google/cloud/websecurityscanner/README%2Emd
[github-install]: https://github.com/googleapis/google-cloud-cpp/blob/main/doc/packaging%2Emd
[github-quickstart]:  https://github.com/googleapis/google-cloud-cpp/blob/main/google/cloud/websecurityscanner/quickstart/README%2Emd

*/
