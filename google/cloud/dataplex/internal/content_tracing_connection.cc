// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dataplex/v1/content.proto

#include "google/cloud/dataplex/internal/content_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace dataplex_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ContentServiceTracingConnection::ContentServiceTracingConnection(
    std::shared_ptr<dataplex::ContentServiceConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::dataplex::v1::Content>
ContentServiceTracingConnection::CreateContent(
    google::cloud::dataplex::v1::CreateContentRequest const& request) {
  auto span =
      internal::MakeSpan("dataplex::ContentServiceConnection::CreateContent");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateContent(request));
}

StatusOr<google::cloud::dataplex::v1::Content>
ContentServiceTracingConnection::UpdateContent(
    google::cloud::dataplex::v1::UpdateContentRequest const& request) {
  auto span =
      internal::MakeSpan("dataplex::ContentServiceConnection::UpdateContent");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateContent(request));
}

Status ContentServiceTracingConnection::DeleteContent(
    google::cloud::dataplex::v1::DeleteContentRequest const& request) {
  auto span =
      internal::MakeSpan("dataplex::ContentServiceConnection::DeleteContent");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteContent(request));
}

StatusOr<google::cloud::dataplex::v1::Content>
ContentServiceTracingConnection::GetContent(
    google::cloud::dataplex::v1::GetContentRequest const& request) {
  auto span =
      internal::MakeSpan("dataplex::ContentServiceConnection::GetContent");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetContent(request));
}

StatusOr<google::iam::v1::Policy> ContentServiceTracingConnection::GetIamPolicy(
    google::iam::v1::GetIamPolicyRequest const& request) {
  auto span =
      internal::MakeSpan("dataplex::ContentServiceConnection::GetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetIamPolicy(request));
}

StatusOr<google::iam::v1::Policy> ContentServiceTracingConnection::SetIamPolicy(
    google::iam::v1::SetIamPolicyRequest const& request) {
  auto span =
      internal::MakeSpan("dataplex::ContentServiceConnection::SetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->SetIamPolicy(request));
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
ContentServiceTracingConnection::TestIamPermissions(
    google::iam::v1::TestIamPermissionsRequest const& request) {
  auto span = internal::MakeSpan(
      "dataplex::ContentServiceConnection::TestIamPermissions");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->TestIamPermissions(request));
}

StreamRange<google::cloud::dataplex::v1::Content>
ContentServiceTracingConnection::ListContent(
    google::cloud::dataplex::v1::ListContentRequest request) {
  auto span =
      internal::MakeSpan("dataplex::ContentServiceConnection::ListContent");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListContent(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::dataplex::v1::Content>(
      std::move(span), std::move(sr));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<dataplex::ContentServiceConnection>
MakeContentServiceTracingConnection(
    std::shared_ptr<dataplex::ContentServiceConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<ContentServiceTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dataplex_internal
}  // namespace cloud
}  // namespace google
