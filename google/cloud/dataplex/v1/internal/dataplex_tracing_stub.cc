// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dataplex/v1/service.proto

#include "google/cloud/dataplex/v1/internal/dataplex_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace dataplex_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DataplexServiceTracingStub::DataplexServiceTracingStub(
    std::shared_ptr<DataplexServiceStub> child)
    : child_(std::move(child)) {}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncCreateLake(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::CreateLakeRequest const& request) {
  return child_->AsyncCreateLake(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncUpdateLake(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::UpdateLakeRequest const& request) {
  return child_->AsyncUpdateLake(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncDeleteLake(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::DeleteLakeRequest const& request) {
  return child_->AsyncDeleteLake(cq, std::move(context), request);
}

StatusOr<google::cloud::dataplex::v1::ListLakesResponse>
DataplexServiceTracingStub::ListLakes(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListLakesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListLakes");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->ListLakes(context, request));
}

StatusOr<google::cloud::dataplex::v1::Lake> DataplexServiceTracingStub::GetLake(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::GetLakeRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "GetLake");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetLake(context, request));
}

StatusOr<google::cloud::dataplex::v1::ListActionsResponse>
DataplexServiceTracingStub::ListLakeActions(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListLakeActionsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListLakeActions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListLakeActions(context, request));
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncCreateZone(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::CreateZoneRequest const& request) {
  return child_->AsyncCreateZone(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncUpdateZone(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::UpdateZoneRequest const& request) {
  return child_->AsyncUpdateZone(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncDeleteZone(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::DeleteZoneRequest const& request) {
  return child_->AsyncDeleteZone(cq, std::move(context), request);
}

StatusOr<google::cloud::dataplex::v1::ListZonesResponse>
DataplexServiceTracingStub::ListZones(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListZonesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListZones");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->ListZones(context, request));
}

StatusOr<google::cloud::dataplex::v1::Zone> DataplexServiceTracingStub::GetZone(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::GetZoneRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "GetZone");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetZone(context, request));
}

StatusOr<google::cloud::dataplex::v1::ListActionsResponse>
DataplexServiceTracingStub::ListZoneActions(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListZoneActionsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListZoneActions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListZoneActions(context, request));
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncCreateAsset(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::CreateAssetRequest const& request) {
  return child_->AsyncCreateAsset(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncUpdateAsset(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::UpdateAssetRequest const& request) {
  return child_->AsyncUpdateAsset(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncDeleteAsset(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::DeleteAssetRequest const& request) {
  return child_->AsyncDeleteAsset(cq, std::move(context), request);
}

StatusOr<google::cloud::dataplex::v1::ListAssetsResponse>
DataplexServiceTracingStub::ListAssets(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListAssetsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListAssets");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListAssets(context, request));
}

StatusOr<google::cloud::dataplex::v1::Asset>
DataplexServiceTracingStub::GetAsset(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::GetAssetRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "GetAsset");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetAsset(context, request));
}

StatusOr<google::cloud::dataplex::v1::ListActionsResponse>
DataplexServiceTracingStub::ListAssetActions(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListAssetActionsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListAssetActions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListAssetActions(context, request));
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncCreateTask(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::CreateTaskRequest const& request) {
  return child_->AsyncCreateTask(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncUpdateTask(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::UpdateTaskRequest const& request) {
  return child_->AsyncUpdateTask(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncDeleteTask(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::DeleteTaskRequest const& request) {
  return child_->AsyncDeleteTask(cq, std::move(context), request);
}

StatusOr<google::cloud::dataplex::v1::ListTasksResponse>
DataplexServiceTracingStub::ListTasks(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListTasksRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListTasks");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->ListTasks(context, request));
}

StatusOr<google::cloud::dataplex::v1::Task> DataplexServiceTracingStub::GetTask(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::GetTaskRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "GetTask");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetTask(context, request));
}

StatusOr<google::cloud::dataplex::v1::ListJobsResponse>
DataplexServiceTracingStub::ListJobs(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListJobsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListJobs");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->ListJobs(context, request));
}

StatusOr<google::cloud::dataplex::v1::Job> DataplexServiceTracingStub::GetJob(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::GetJobRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "GetJob");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->GetJob(context, request));
}

Status DataplexServiceTracingStub::CancelJob(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::CancelJobRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "CancelJob");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span, child_->CancelJob(context, request));
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncCreateEnvironment(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::CreateEnvironmentRequest const& request) {
  return child_->AsyncCreateEnvironment(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncUpdateEnvironment(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::UpdateEnvironmentRequest const& request) {
  return child_->AsyncUpdateEnvironment(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncDeleteEnvironment(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataplex::v1::DeleteEnvironmentRequest const& request) {
  return child_->AsyncDeleteEnvironment(cq, std::move(context), request);
}

StatusOr<google::cloud::dataplex::v1::ListEnvironmentsResponse>
DataplexServiceTracingStub::ListEnvironments(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListEnvironmentsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListEnvironments");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListEnvironments(context, request));
}

StatusOr<google::cloud::dataplex::v1::Environment>
DataplexServiceTracingStub::GetEnvironment(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::GetEnvironmentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "GetEnvironment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetEnvironment(context, request));
}

StatusOr<google::cloud::dataplex::v1::ListSessionsResponse>
DataplexServiceTracingStub::ListSessions(
    grpc::ClientContext& context,
    google::cloud::dataplex::v1::ListSessionsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.dataplex.v1.DataplexService",
                                     "ListSessions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListSessions(context, request));
}

future<StatusOr<google::longrunning::Operation>>
DataplexServiceTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> DataplexServiceTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<DataplexServiceStub> MakeDataplexServiceTracingStub(
    std::shared_ptr<DataplexServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<DataplexServiceTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dataplex_v1_internal
}  // namespace cloud
}  // namespace google
