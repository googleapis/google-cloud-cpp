// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/edgecontainer/v1/service.proto

#include "google/cloud/edgecontainer/edge_container_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace edgecontainer {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

EdgeContainerConnectionIdempotencyPolicy::
    ~EdgeContainerConnectionIdempotencyPolicy() = default;

namespace {
class DefaultEdgeContainerConnectionIdempotencyPolicy
    : public EdgeContainerConnectionIdempotencyPolicy {
 public:
  ~DefaultEdgeContainerConnectionIdempotencyPolicy() override = default;

  /// Create a new copy of this object.
  std::unique_ptr<EdgeContainerConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<DefaultEdgeContainerConnectionIdempotencyPolicy>(
        *this);
  }

  Idempotency ListClusters(
      google::cloud::edgecontainer::v1::ListClustersRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetCluster(
      google::cloud::edgecontainer::v1::GetClusterRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateCluster(
      google::cloud::edgecontainer::v1::CreateClusterRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateCluster(
      google::cloud::edgecontainer::v1::UpdateClusterRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteCluster(
      google::cloud::edgecontainer::v1::DeleteClusterRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GenerateAccessToken(
      google::cloud::edgecontainer::v1::GenerateAccessTokenRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListNodePools(
      google::cloud::edgecontainer::v1::ListNodePoolsRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetNodePool(
      google::cloud::edgecontainer::v1::GetNodePoolRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateNodePool(
      google::cloud::edgecontainer::v1::CreateNodePoolRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateNodePool(
      google::cloud::edgecontainer::v1::UpdateNodePoolRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteNodePool(
      google::cloud::edgecontainer::v1::DeleteNodePoolRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListMachines(
      google::cloud::edgecontainer::v1::ListMachinesRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetMachine(
      google::cloud::edgecontainer::v1::GetMachineRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListVpnConnections(
      google::cloud::edgecontainer::v1::ListVpnConnectionsRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetVpnConnection(
      google::cloud::edgecontainer::v1::GetVpnConnectionRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateVpnConnection(
      google::cloud::edgecontainer::v1::CreateVpnConnectionRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteVpnConnection(
      google::cloud::edgecontainer::v1::DeleteVpnConnectionRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }
};
}  // namespace

std::unique_ptr<EdgeContainerConnectionIdempotencyPolicy>
MakeDefaultEdgeContainerConnectionIdempotencyPolicy() {
  return absl::make_unique<DefaultEdgeContainerConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace edgecontainer
}  // namespace cloud
}  // namespace google
