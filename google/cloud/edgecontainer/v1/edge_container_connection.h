// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/edgecontainer/v1/service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_EDGECONTAINER_V1_EDGE_CONTAINER_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_EDGECONTAINER_V1_EDGE_CONTAINER_CONNECTION_H

#include "google/cloud/edgecontainer/v1/edge_container_connection_idempotency_policy.h"
#include "google/cloud/edgecontainer/v1/internal/edge_container_retry_traits.h"
#include "google/cloud/edgecontainer/v1/internal/edge_container_stub.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace edgecontainer_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using EdgeContainerRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        edgecontainer_v1_internal::EdgeContainerRetryTraits>;

using EdgeContainerLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        edgecontainer_v1_internal::EdgeContainerRetryTraits>;

using EdgeContainerLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        edgecontainer_v1_internal::EdgeContainerRetryTraits>;

/**
 * The `EdgeContainerConnection` object for `EdgeContainerClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `EdgeContainerClient`. This allows users to inject custom behavior
 * (e.g., with a Google Mock object) when writing tests that use objects of type
 * `EdgeContainerClient`.
 *
 * To create a concrete instance, see `MakeEdgeContainerConnection()`.
 *
 * For mocking, see `edgecontainer_v1_mocks::MockEdgeContainerConnection`.
 */
class EdgeContainerConnection {
 public:
  virtual ~EdgeContainerConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StreamRange<google::cloud::edgecontainer::v1::Cluster> ListClusters(
      google::cloud::edgecontainer::v1::ListClustersRequest request);

  virtual StatusOr<google::cloud::edgecontainer::v1::Cluster> GetCluster(
      google::cloud::edgecontainer::v1::GetClusterRequest const& request);

  virtual future<StatusOr<google::cloud::edgecontainer::v1::Cluster>>
  CreateCluster(
      google::cloud::edgecontainer::v1::CreateClusterRequest const& request);

  virtual future<StatusOr<google::cloud::edgecontainer::v1::Cluster>>
  UpdateCluster(
      google::cloud::edgecontainer::v1::UpdateClusterRequest const& request);

  virtual future<StatusOr<google::cloud::edgecontainer::v1::OperationMetadata>>
  DeleteCluster(
      google::cloud::edgecontainer::v1::DeleteClusterRequest const& request);

  virtual StatusOr<
      google::cloud::edgecontainer::v1::GenerateAccessTokenResponse>
  GenerateAccessToken(
      google::cloud::edgecontainer::v1::GenerateAccessTokenRequest const&
          request);

  virtual StreamRange<google::cloud::edgecontainer::v1::NodePool> ListNodePools(
      google::cloud::edgecontainer::v1::ListNodePoolsRequest request);

  virtual StatusOr<google::cloud::edgecontainer::v1::NodePool> GetNodePool(
      google::cloud::edgecontainer::v1::GetNodePoolRequest const& request);

  virtual future<StatusOr<google::cloud::edgecontainer::v1::NodePool>>
  CreateNodePool(
      google::cloud::edgecontainer::v1::CreateNodePoolRequest const& request);

  virtual future<StatusOr<google::cloud::edgecontainer::v1::NodePool>>
  UpdateNodePool(
      google::cloud::edgecontainer::v1::UpdateNodePoolRequest const& request);

  virtual future<StatusOr<google::cloud::edgecontainer::v1::OperationMetadata>>
  DeleteNodePool(
      google::cloud::edgecontainer::v1::DeleteNodePoolRequest const& request);

  virtual StreamRange<google::cloud::edgecontainer::v1::Machine> ListMachines(
      google::cloud::edgecontainer::v1::ListMachinesRequest request);

  virtual StatusOr<google::cloud::edgecontainer::v1::Machine> GetMachine(
      google::cloud::edgecontainer::v1::GetMachineRequest const& request);

  virtual StreamRange<google::cloud::edgecontainer::v1::VpnConnection>
  ListVpnConnections(
      google::cloud::edgecontainer::v1::ListVpnConnectionsRequest request);

  virtual StatusOr<google::cloud::edgecontainer::v1::VpnConnection>
  GetVpnConnection(
      google::cloud::edgecontainer::v1::GetVpnConnectionRequest const& request);

  virtual future<StatusOr<google::cloud::edgecontainer::v1::VpnConnection>>
  CreateVpnConnection(
      google::cloud::edgecontainer::v1::CreateVpnConnectionRequest const&
          request);

  virtual future<StatusOr<google::cloud::edgecontainer::v1::OperationMetadata>>
  DeleteVpnConnection(
      google::cloud::edgecontainer::v1::DeleteVpnConnectionRequest const&
          request);
};

/**
 * A factory function to construct an object of type `EdgeContainerConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of EdgeContainerClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `EdgeContainerConnection`. Expected options are any of the types in
 * the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * - `google::cloud::edgecontainer_v1::EdgeContainerPolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `EdgeContainerConnection` created by
 * this function.
 */
std::shared_ptr<EdgeContainerConnection> MakeEdgeContainerConnection(
    Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace edgecontainer_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_EDGECONTAINER_V1_EDGE_CONTAINER_CONNECTION_H
