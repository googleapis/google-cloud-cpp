// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/redis/v1/cloud_redis.proto

#include "google/cloud/redis/internal/cloud_redis_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>

namespace google {
namespace cloud {
namespace redis_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

CloudRedisTracingConnection::CloudRedisTracingConnection(
    std::shared_ptr<redis::CloudRedisConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::redis::v1::Instance>
CloudRedisTracingConnection::ListInstances(
    google::cloud::redis::v1::ListInstancesRequest request) {
  return child_->ListInstances(request);
}

StatusOr<google::cloud::redis::v1::Instance>
CloudRedisTracingConnection::GetInstance(
    google::cloud::redis::v1::GetInstanceRequest const& request) {
  return child_->GetInstance(request);
}

StatusOr<google::cloud::redis::v1::InstanceAuthString>
CloudRedisTracingConnection::GetInstanceAuthString(
    google::cloud::redis::v1::GetInstanceAuthStringRequest const& request) {
  return child_->GetInstanceAuthString(request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisTracingConnection::CreateInstance(
    google::cloud::redis::v1::CreateInstanceRequest const& request) {
  return child_->CreateInstance(request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisTracingConnection::UpdateInstance(
    google::cloud::redis::v1::UpdateInstanceRequest const& request) {
  return child_->UpdateInstance(request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisTracingConnection::UpgradeInstance(
    google::cloud::redis::v1::UpgradeInstanceRequest const& request) {
  return child_->UpgradeInstance(request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisTracingConnection::ImportInstance(
    google::cloud::redis::v1::ImportInstanceRequest const& request) {
  return child_->ImportInstance(request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisTracingConnection::ExportInstance(
    google::cloud::redis::v1::ExportInstanceRequest const& request) {
  return child_->ExportInstance(request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisTracingConnection::FailoverInstance(
    google::cloud::redis::v1::FailoverInstanceRequest const& request) {
  return child_->FailoverInstance(request);
}

future<StatusOr<google::cloud::redis::v1::OperationMetadata>>
CloudRedisTracingConnection::DeleteInstance(
    google::cloud::redis::v1::DeleteInstanceRequest const& request) {
  return child_->DeleteInstance(request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisTracingConnection::RescheduleMaintenance(
    google::cloud::redis::v1::RescheduleMaintenanceRequest const& request) {
  return child_->RescheduleMaintenance(request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace redis_internal
}  // namespace cloud
}  // namespace google
