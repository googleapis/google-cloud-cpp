// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/redis/v1/cloud_redis.proto

#include "google/cloud/redis/v1/cloud_redis_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace redis_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

CloudRedisClient::CloudRedisClient(
    std::shared_ptr<CloudRedisConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
CloudRedisClient::~CloudRedisClient() = default;

StreamRange<google::cloud::redis::v1::Instance> CloudRedisClient::ListInstances(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::ListInstancesRequest request;
  request.set_parent(parent);
  return connection_->ListInstances(request);
}

StreamRange<google::cloud::redis::v1::Instance> CloudRedisClient::ListInstances(
    google::cloud::redis::v1::ListInstancesRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListInstances(std::move(request));
}

StatusOr<google::cloud::redis::v1::Instance> CloudRedisClient::GetInstance(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::GetInstanceRequest request;
  request.set_name(name);
  return connection_->GetInstance(request);
}

StatusOr<google::cloud::redis::v1::Instance> CloudRedisClient::GetInstance(
    google::cloud::redis::v1::GetInstanceRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetInstance(request);
}

StatusOr<google::cloud::redis::v1::InstanceAuthString>
CloudRedisClient::GetInstanceAuthString(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::GetInstanceAuthStringRequest request;
  request.set_name(name);
  return connection_->GetInstanceAuthString(request);
}

StatusOr<google::cloud::redis::v1::InstanceAuthString>
CloudRedisClient::GetInstanceAuthString(
    google::cloud::redis::v1::GetInstanceAuthStringRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetInstanceAuthString(request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::CreateInstance(
    std::string const& parent, std::string const& instance_id,
    google::cloud::redis::v1::Instance const& instance, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::CreateInstanceRequest request;
  request.set_parent(parent);
  request.set_instance_id(instance_id);
  *request.mutable_instance() = instance;
  return connection_->CreateInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::CreateInstance(
    ExperimentalTag, NoAwaitTag, std::string const& parent,
    std::string const& instance_id,
    google::cloud::redis::v1::Instance const& instance, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::CreateInstanceRequest request;
  request.set_parent(parent);
  request.set_instance_id(instance_id);
  *request.mutable_instance() = instance;
  return connection_->CreateInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::CreateInstance(
    google::cloud::redis::v1::CreateInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::CreateInstance(
    ExperimentalTag, NoAwaitTag,
    google::cloud::redis::v1::CreateInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::CreateInstance(
    ExperimentalTag, google::longrunning::Operation const& operation,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateInstance(ExperimentalTag{}, operation);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::UpdateInstance(
    google::protobuf::FieldMask const& update_mask,
    google::cloud::redis::v1::Instance const& instance, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::UpdateInstanceRequest request;
  *request.mutable_update_mask() = update_mask;
  *request.mutable_instance() = instance;
  return connection_->UpdateInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::UpdateInstance(
    ExperimentalTag, NoAwaitTag, google::protobuf::FieldMask const& update_mask,
    google::cloud::redis::v1::Instance const& instance, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::UpdateInstanceRequest request;
  *request.mutable_update_mask() = update_mask;
  *request.mutable_instance() = instance;
  return connection_->UpdateInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::UpdateInstance(
    google::cloud::redis::v1::UpdateInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::UpdateInstance(
    ExperimentalTag, NoAwaitTag,
    google::cloud::redis::v1::UpdateInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::UpdateInstance(
    ExperimentalTag, google::longrunning::Operation const& operation,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateInstance(ExperimentalTag{}, operation);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::UpgradeInstance(std::string const& name,
                                  std::string const& redis_version,
                                  Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::UpgradeInstanceRequest request;
  request.set_name(name);
  request.set_redis_version(redis_version);
  return connection_->UpgradeInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::UpgradeInstance(
    ExperimentalTag, NoAwaitTag, std::string const& name,
    std::string const& redis_version, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::UpgradeInstanceRequest request;
  request.set_name(name);
  request.set_redis_version(redis_version);
  return connection_->UpgradeInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::UpgradeInstance(
    google::cloud::redis::v1::UpgradeInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpgradeInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::UpgradeInstance(
    ExperimentalTag, NoAwaitTag,
    google::cloud::redis::v1::UpgradeInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpgradeInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::UpgradeInstance(
    ExperimentalTag, google::longrunning::Operation const& operation,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpgradeInstance(ExperimentalTag{}, operation);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::ImportInstance(
    std::string const& name,
    google::cloud::redis::v1::InputConfig const& input_config, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::ImportInstanceRequest request;
  request.set_name(name);
  *request.mutable_input_config() = input_config;
  return connection_->ImportInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::ImportInstance(
    ExperimentalTag, NoAwaitTag, std::string const& name,
    google::cloud::redis::v1::InputConfig const& input_config, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::ImportInstanceRequest request;
  request.set_name(name);
  *request.mutable_input_config() = input_config;
  return connection_->ImportInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::ImportInstance(
    google::cloud::redis::v1::ImportInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ImportInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::ImportInstance(
    ExperimentalTag, NoAwaitTag,
    google::cloud::redis::v1::ImportInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ImportInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::ImportInstance(
    ExperimentalTag, google::longrunning::Operation const& operation,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ImportInstance(ExperimentalTag{}, operation);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::ExportInstance(
    std::string const& name,
    google::cloud::redis::v1::OutputConfig const& output_config, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::ExportInstanceRequest request;
  request.set_name(name);
  *request.mutable_output_config() = output_config;
  return connection_->ExportInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::ExportInstance(
    ExperimentalTag, NoAwaitTag, std::string const& name,
    google::cloud::redis::v1::OutputConfig const& output_config, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::ExportInstanceRequest request;
  request.set_name(name);
  *request.mutable_output_config() = output_config;
  return connection_->ExportInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::ExportInstance(
    google::cloud::redis::v1::ExportInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ExportInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::ExportInstance(
    ExperimentalTag, NoAwaitTag,
    google::cloud::redis::v1::ExportInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ExportInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::ExportInstance(
    ExperimentalTag, google::longrunning::Operation const& operation,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ExportInstance(ExperimentalTag{}, operation);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::FailoverInstance(
    std::string const& name,
    google::cloud::redis::v1::FailoverInstanceRequest::DataProtectionMode
        data_protection_mode,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::FailoverInstanceRequest request;
  request.set_name(name);
  request.set_data_protection_mode(data_protection_mode);
  return connection_->FailoverInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::FailoverInstance(
    ExperimentalTag, NoAwaitTag, std::string const& name,
    google::cloud::redis::v1::FailoverInstanceRequest::DataProtectionMode
        data_protection_mode,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::FailoverInstanceRequest request;
  request.set_name(name);
  request.set_data_protection_mode(data_protection_mode);
  return connection_->FailoverInstance(ExperimentalTag{}, NoAwaitTag{},
                                       request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::FailoverInstance(
    google::cloud::redis::v1::FailoverInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->FailoverInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::FailoverInstance(
    ExperimentalTag, NoAwaitTag,
    google::cloud::redis::v1::FailoverInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->FailoverInstance(ExperimentalTag{}, NoAwaitTag{},
                                       request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::FailoverInstance(
    ExperimentalTag, google::longrunning::Operation const& operation,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->FailoverInstance(ExperimentalTag{}, operation);
}

future<StatusOr<google::cloud::redis::v1::OperationMetadata>>
CloudRedisClient::DeleteInstance(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::DeleteInstanceRequest request;
  request.set_name(name);
  return connection_->DeleteInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::DeleteInstance(
    ExperimentalTag, NoAwaitTag, std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::DeleteInstanceRequest request;
  request.set_name(name);
  return connection_->DeleteInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::OperationMetadata>>
CloudRedisClient::DeleteInstance(
    google::cloud::redis::v1::DeleteInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteInstance(request);
}

StatusOr<google::longrunning::Operation> CloudRedisClient::DeleteInstance(
    ExperimentalTag, NoAwaitTag,
    google::cloud::redis::v1::DeleteInstanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteInstance(ExperimentalTag{}, NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::redis::v1::OperationMetadata>>
CloudRedisClient::DeleteInstance(
    ExperimentalTag, google::longrunning::Operation const& operation,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteInstance(ExperimentalTag{}, operation);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::RescheduleMaintenance(
    std::string const& name,
    google::cloud::redis::v1::RescheduleMaintenanceRequest::RescheduleType
        reschedule_type,
    google::protobuf::Timestamp const& schedule_time, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::RescheduleMaintenanceRequest request;
  request.set_name(name);
  request.set_reschedule_type(reschedule_type);
  *request.mutable_schedule_time() = schedule_time;
  return connection_->RescheduleMaintenance(request);
}

StatusOr<google::longrunning::Operation>
CloudRedisClient::RescheduleMaintenance(
    ExperimentalTag, NoAwaitTag, std::string const& name,
    google::cloud::redis::v1::RescheduleMaintenanceRequest::RescheduleType
        reschedule_type,
    google::protobuf::Timestamp const& schedule_time, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::redis::v1::RescheduleMaintenanceRequest request;
  request.set_name(name);
  request.set_reschedule_type(reschedule_type);
  *request.mutable_schedule_time() = schedule_time;
  return connection_->RescheduleMaintenance(ExperimentalTag{}, NoAwaitTag{},
                                            request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::RescheduleMaintenance(
    google::cloud::redis::v1::RescheduleMaintenanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->RescheduleMaintenance(request);
}

StatusOr<google::longrunning::Operation>
CloudRedisClient::RescheduleMaintenance(
    ExperimentalTag, NoAwaitTag,
    google::cloud::redis::v1::RescheduleMaintenanceRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->RescheduleMaintenance(ExperimentalTag{}, NoAwaitTag{},
                                            request);
}

future<StatusOr<google::cloud::redis::v1::Instance>>
CloudRedisClient::RescheduleMaintenance(
    ExperimentalTag, google::longrunning::Operation const& operation,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->RescheduleMaintenance(ExperimentalTag{}, operation);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace redis_v1
}  // namespace cloud
}  // namespace google
