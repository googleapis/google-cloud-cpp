// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/redis/v1/cloud_redis.proto

#include "google/cloud/redis/cloud_redis_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace redis {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

CloudRedisConnectionIdempotencyPolicy::
    ~CloudRedisConnectionIdempotencyPolicy() = default;

namespace {
class DefaultCloudRedisConnectionIdempotencyPolicy
    : public CloudRedisConnectionIdempotencyPolicy {
 public:
  ~DefaultCloudRedisConnectionIdempotencyPolicy() override = default;

  /// Create a new copy of this object.
  std::unique_ptr<CloudRedisConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<DefaultCloudRedisConnectionIdempotencyPolicy>(
        *this);
  }

  Idempotency ListInstances(
      google::cloud::redis::v1::ListInstancesRequest) override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetInstance(
      google::cloud::redis::v1::GetInstanceRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateInstance(
      google::cloud::redis::v1::CreateInstanceRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateInstance(
      google::cloud::redis::v1::UpdateInstanceRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpgradeInstance(
      google::cloud::redis::v1::UpgradeInstanceRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ImportInstance(
      google::cloud::redis::v1::ImportInstanceRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ExportInstance(
      google::cloud::redis::v1::ExportInstanceRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency FailoverInstance(
      google::cloud::redis::v1::FailoverInstanceRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteInstance(
      google::cloud::redis::v1::DeleteInstanceRequest const&) override {
    return Idempotency::kNonIdempotent;
  }
};
}  // namespace

std::unique_ptr<CloudRedisConnectionIdempotencyPolicy>
MakeDefaultCloudRedisConnectionIdempotencyPolicy() {
  return absl::make_unique<DefaultCloudRedisConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace redis
}  // namespace cloud
}  // namespace google
