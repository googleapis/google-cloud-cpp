// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/retail/v2/control_service.proto

#include "google/cloud/retail/v2/internal/control_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace retail_v2_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ControlServiceTracingConnection::ControlServiceTracingConnection(
    std::shared_ptr<retail_v2::ControlServiceConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::retail::v2::Control>
ControlServiceTracingConnection::CreateControl(
    google::cloud::retail::v2::CreateControlRequest const& request) {
  auto span =
      internal::MakeSpan("retail_v2::ControlServiceConnection::CreateControl");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateControl(request));
}

Status ControlServiceTracingConnection::DeleteControl(
    google::cloud::retail::v2::DeleteControlRequest const& request) {
  auto span =
      internal::MakeSpan("retail_v2::ControlServiceConnection::DeleteControl");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteControl(request));
}

StatusOr<google::cloud::retail::v2::Control>
ControlServiceTracingConnection::UpdateControl(
    google::cloud::retail::v2::UpdateControlRequest const& request) {
  auto span =
      internal::MakeSpan("retail_v2::ControlServiceConnection::UpdateControl");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateControl(request));
}

StatusOr<google::cloud::retail::v2::Control>
ControlServiceTracingConnection::GetControl(
    google::cloud::retail::v2::GetControlRequest const& request) {
  auto span =
      internal::MakeSpan("retail_v2::ControlServiceConnection::GetControl");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetControl(request));
}

StreamRange<google::cloud::retail::v2::Control>
ControlServiceTracingConnection::ListControls(
    google::cloud::retail::v2::ListControlsRequest request) {
  auto span =
      internal::MakeSpan("retail_v2::ControlServiceConnection::ListControls");
  internal::OTelScope scope(span);
  auto sr = child_->ListControls(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::retail::v2::Control>(
      std::move(span), std::move(sr));
}

StreamRange<google::longrunning::Operation>
ControlServiceTracingConnection::ListOperations(
    google::longrunning::ListOperationsRequest request) {
  auto span =
      internal::MakeSpan("retail_v2::ControlServiceConnection::ListOperations");
  internal::OTelScope scope(span);
  auto sr = child_->ListOperations(std::move(request));
  return internal::MakeTracedStreamRange<google::longrunning::Operation>(
      std::move(span), std::move(sr));
}

StatusOr<google::longrunning::Operation>
ControlServiceTracingConnection::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpan("retail_v2::ControlServiceConnection::GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetOperation(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<retail_v2::ControlServiceConnection>
MakeControlServiceTracingConnection(
    std::shared_ptr<retail_v2::ControlServiceConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<ControlServiceTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace retail_v2_internal
}  // namespace cloud
}  // namespace google
