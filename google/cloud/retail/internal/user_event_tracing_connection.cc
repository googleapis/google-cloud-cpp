// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/retail/v2/user_event_service.proto

#include "google/cloud/retail/internal/user_event_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>

namespace google {
namespace cloud {
namespace retail_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

UserEventServiceTracingConnection::UserEventServiceTracingConnection(
    std::shared_ptr<retail::UserEventServiceConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::retail::v2::UserEvent>
UserEventServiceTracingConnection::WriteUserEvent(
    google::cloud::retail::v2::WriteUserEventRequest const& request) {
  return child_->WriteUserEvent(request);
}

StatusOr<google::api::HttpBody>
UserEventServiceTracingConnection::CollectUserEvent(
    google::cloud::retail::v2::CollectUserEventRequest const& request) {
  return child_->CollectUserEvent(request);
}

future<StatusOr<google::cloud::retail::v2::PurgeUserEventsResponse>>
UserEventServiceTracingConnection::PurgeUserEvents(
    google::cloud::retail::v2::PurgeUserEventsRequest const& request) {
  return child_->PurgeUserEvents(request);
}

future<StatusOr<google::cloud::retail::v2::ImportUserEventsResponse>>
UserEventServiceTracingConnection::ImportUserEvents(
    google::cloud::retail::v2::ImportUserEventsRequest const& request) {
  return child_->ImportUserEvents(request);
}

future<StatusOr<google::cloud::retail::v2::RejoinUserEventsResponse>>
UserEventServiceTracingConnection::RejoinUserEvents(
    google::cloud::retail::v2::RejoinUserEventsRequest const& request) {
  return child_->RejoinUserEvents(request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace retail_internal
}  // namespace cloud
}  // namespace google
