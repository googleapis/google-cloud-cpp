// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/retail/v2/user_event_service.proto

#include "google/cloud/retail/internal/user_event_option_defaults.h"
#include "google/cloud/retail/user_event_connection.h"
#include "google/cloud/retail/user_event_options.h"
#include "google/cloud/internal/populate_common_options.h"
#include "google/cloud/internal/populate_grpc_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace retail_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

namespace {
auto constexpr kBackoffScaling = 2.0;
}  // namespace

Options UserEventServiceDefaultOptions(Options options) {
  options = google::cloud::internal::PopulateCommonOptions(
      std::move(options), "GOOGLE_CLOUD_CPP_USER_EVENT_SERVICE_ENDPOINT", "",
      "GOOGLE_CLOUD_CPP_USER_EVENT_SERVICE_AUTHORITY", "retail.googleapis.com");
  options =
      google::cloud::internal::PopulateGrpcOptions(std::move(options), "");
  if (!options.has<retail::UserEventServiceRetryPolicyOption>()) {
    options.set<retail::UserEventServiceRetryPolicyOption>(
        retail::UserEventServiceLimitedTimeRetryPolicy(std::chrono::minutes(30))
            .clone());
  }
  if (!options.has<retail::UserEventServiceBackoffPolicyOption>()) {
    options.set<retail::UserEventServiceBackoffPolicyOption>(
        ExponentialBackoffPolicy(std::chrono::seconds(1),
                                 std::chrono::minutes(5), kBackoffScaling)
            .clone());
  }
  if (!options.has<retail::UserEventServicePollingPolicyOption>()) {
    options.set<retail::UserEventServicePollingPolicyOption>(
        GenericPollingPolicy<retail::UserEventServiceRetryPolicyOption::Type,
                             retail::UserEventServiceBackoffPolicyOption::Type>(
            options.get<retail::UserEventServiceRetryPolicyOption>()->clone(),
            options.get<retail::UserEventServiceBackoffPolicyOption>()->clone())
            .clone());
  }
  if (!options
           .has<retail::UserEventServiceConnectionIdempotencyPolicyOption>()) {
    options.set<retail::UserEventServiceConnectionIdempotencyPolicyOption>(
        retail::MakeDefaultUserEventServiceConnectionIdempotencyPolicy());
  }

  return options;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace retail_internal
}  // namespace cloud
}  // namespace google
