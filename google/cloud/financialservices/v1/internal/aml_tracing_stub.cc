// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/financialservices/v1/service.proto

#include "google/cloud/financialservices/v1/internal/aml_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace financialservices_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

AMLTracingStub::AMLTracingStub(std::shared_ptr<AMLStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::financialservices::v1::ListInstancesResponse>
AMLTracingStub::ListInstances(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::ListInstancesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ListInstances");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListInstances(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::Instance>
AMLTracingStub::GetInstance(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::GetInstanceRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "GetInstance");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetInstance(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncCreateInstance(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::CreateInstanceRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateInstance");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCreateInstance(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::CreateInstance(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::CreateInstanceRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateInstance");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateInstance(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncUpdateInstance(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::UpdateInstanceRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateInstance");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncUpdateInstance(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::UpdateInstance(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::UpdateInstanceRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateInstance");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateInstance(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncDeleteInstance(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::DeleteInstanceRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteInstance");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncDeleteInstance(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::DeleteInstance(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::DeleteInstanceRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteInstance");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteInstance(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncImportRegisteredParties(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::ImportRegisteredPartiesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ImportRegisteredParties");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncImportRegisteredParties(cq, context, std::move(options),
                                                request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
AMLTracingStub::ImportRegisteredParties(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::ImportRegisteredPartiesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ImportRegisteredParties");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ImportRegisteredParties(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncExportRegisteredParties(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::ExportRegisteredPartiesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportRegisteredParties");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncExportRegisteredParties(cq, context, std::move(options),
                                                request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
AMLTracingStub::ExportRegisteredParties(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::ExportRegisteredPartiesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportRegisteredParties");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ExportRegisteredParties(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::ListDatasetsResponse>
AMLTracingStub::ListDatasets(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::ListDatasetsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ListDatasets");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListDatasets(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::Dataset>
AMLTracingStub::GetDataset(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::GetDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "GetDataset");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetDataset(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncCreateDataset(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::CreateDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateDataset");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateDataset(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::CreateDataset(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::CreateDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateDataset");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateDataset(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncUpdateDataset(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::UpdateDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateDataset");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateDataset(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::UpdateDataset(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::UpdateDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateDataset");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateDataset(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncDeleteDataset(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::DeleteDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteDataset");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteDataset(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::DeleteDataset(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::DeleteDatasetRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteDataset");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteDataset(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::ListModelsResponse>
AMLTracingStub::ListModels(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::ListModelsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ListModels");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListModels(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::Model> AMLTracingStub::GetModel(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::GetModelRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "GetModel");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetModel(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncCreateModel(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::CreateModelRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateModel");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateModel(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::CreateModel(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::CreateModelRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateModel");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateModel(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncUpdateModel(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::UpdateModelRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateModel");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateModel(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::UpdateModel(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::UpdateModelRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateModel");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateModel(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncExportModelMetadata(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::ExportModelMetadataRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportModelMetadata");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncExportModelMetadata(cq, context, std::move(options),
                                            request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::ExportModelMetadata(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::ExportModelMetadataRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportModelMetadata");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ExportModelMetadata(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncDeleteModel(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::DeleteModelRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteModel");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteModel(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::DeleteModel(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::DeleteModelRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteModel");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteModel(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::ListEngineConfigsResponse>
AMLTracingStub::ListEngineConfigs(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::ListEngineConfigsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ListEngineConfigs");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListEngineConfigs(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::EngineConfig>
AMLTracingStub::GetEngineConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::GetEngineConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "GetEngineConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetEngineConfig(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncCreateEngineConfig(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::CreateEngineConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateEngineConfig");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCreateEngineConfig(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::CreateEngineConfig(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::CreateEngineConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateEngineConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateEngineConfig(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncUpdateEngineConfig(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::UpdateEngineConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateEngineConfig");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncUpdateEngineConfig(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::UpdateEngineConfig(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::UpdateEngineConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateEngineConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateEngineConfig(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncExportEngineConfigMetadata(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::
        ExportEngineConfigMetadataRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportEngineConfigMetadata");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncExportEngineConfigMetadata(cq, context,
                                                   std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
AMLTracingStub::ExportEngineConfigMetadata(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::
        ExportEngineConfigMetadataRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportEngineConfigMetadata");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ExportEngineConfigMetadata(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncDeleteEngineConfig(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::DeleteEngineConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteEngineConfig");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncDeleteEngineConfig(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::DeleteEngineConfig(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::DeleteEngineConfigRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteEngineConfig");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteEngineConfig(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::EngineVersion>
AMLTracingStub::GetEngineVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::GetEngineVersionRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "GetEngineVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetEngineVersion(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::ListEngineVersionsResponse>
AMLTracingStub::ListEngineVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::ListEngineVersionsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ListEngineVersions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListEngineVersions(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::ListPredictionResultsResponse>
AMLTracingStub::ListPredictionResults(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::ListPredictionResultsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ListPredictionResults");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListPredictionResults(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::PredictionResult>
AMLTracingStub::GetPredictionResult(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::GetPredictionResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "GetPredictionResult");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetPredictionResult(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncCreatePredictionResult(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::CreatePredictionResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreatePredictionResult");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreatePredictionResult(cq, context, std::move(options),
                                               request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::CreatePredictionResult(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::CreatePredictionResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreatePredictionResult");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->CreatePredictionResult(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncUpdatePredictionResult(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::UpdatePredictionResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdatePredictionResult");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdatePredictionResult(cq, context, std::move(options),
                                               request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::UpdatePredictionResult(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::UpdatePredictionResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdatePredictionResult");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->UpdatePredictionResult(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncExportPredictionResultMetadata(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::
        ExportPredictionResultMetadataRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportPredictionResultMetadata");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncExportPredictionResultMetadata(
      cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
AMLTracingStub::ExportPredictionResultMetadata(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::
        ExportPredictionResultMetadataRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportPredictionResultMetadata");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ExportPredictionResultMetadata(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncDeletePredictionResult(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::DeletePredictionResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeletePredictionResult");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeletePredictionResult(cq, context, std::move(options),
                                               request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::DeletePredictionResult(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::DeletePredictionResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeletePredictionResult");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->DeletePredictionResult(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::ListBacktestResultsResponse>
AMLTracingStub::ListBacktestResults(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::ListBacktestResultsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ListBacktestResults");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListBacktestResults(context, options, request));
}

StatusOr<google::cloud::financialservices::v1::BacktestResult>
AMLTracingStub::GetBacktestResult(
    grpc::ClientContext& context, Options const& options,
    google::cloud::financialservices::v1::GetBacktestResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "GetBacktestResult");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetBacktestResult(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncCreateBacktestResult(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::CreateBacktestResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateBacktestResult");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncCreateBacktestResult(cq, context, std::move(options),
                                             request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::CreateBacktestResult(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::CreateBacktestResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CreateBacktestResult");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateBacktestResult(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncUpdateBacktestResult(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::UpdateBacktestResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateBacktestResult");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncUpdateBacktestResult(cq, context, std::move(options),
                                             request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::UpdateBacktestResult(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::UpdateBacktestResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "UpdateBacktestResult");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateBacktestResult(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncExportBacktestResultMetadata(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::
        ExportBacktestResultMetadataRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportBacktestResultMetadata");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncExportBacktestResultMetadata(
      cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
AMLTracingStub::ExportBacktestResultMetadata(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::
        ExportBacktestResultMetadataRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ExportBacktestResultMetadata");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ExportBacktestResultMetadata(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncDeleteBacktestResult(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::financialservices::v1::DeleteBacktestResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteBacktestResult");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncDeleteBacktestResult(cq, context, std::move(options),
                                             request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::DeleteBacktestResult(
    grpc::ClientContext& context, Options options,
    google::cloud::financialservices::v1::DeleteBacktestResultRequest const&
        request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteBacktestResult");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteBacktestResult(context, options, request));
}

StatusOr<google::cloud::location::ListLocationsResponse>
AMLTracingStub::ListLocations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::ListLocationsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ListLocations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListLocations(context, options, request));
}

StatusOr<google::cloud::location::Location> AMLTracingStub::GetLocation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::location::GetLocationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "GetLocation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetLocation(context, options, request));
}

StatusOr<google::longrunning::ListOperationsResponse>
AMLTracingStub::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "ListOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListOperations(context, options, request));
}

StatusOr<google::longrunning::Operation> AMLTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

Status AMLTracingStub::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteOperation(context, options, request));
}

Status AMLTracingStub::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.financialservices.v1.AML",
                                     "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CancelOperation(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
AMLTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.longrunning.Operations", "GetOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGetOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<Status> AMLTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.longrunning.Operations",
                                     "CancelOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCancelOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<AMLStub> MakeAMLTracingStub(std::shared_ptr<AMLStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<AMLTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace financialservices_v1_internal
}  // namespace cloud
}  // namespace google
