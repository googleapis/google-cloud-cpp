// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/financialservices/v1/service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_FINANCIALSERVICES_V1_AML_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_FINANCIALSERVICES_V1_AML_CONNECTION_H

#include "google/cloud/financialservices/v1/aml_connection_idempotency_policy.h"
#include "google/cloud/financialservices/v1/internal/aml_retry_traits.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/internal/retry_policy_impl.h"
#include "google/cloud/no_await_tag.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/cloud/financialservices/v1/service.pb.h>
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace financialservices_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/// The retry policy for `AMLConnection`.
class AMLRetryPolicy : public ::google::cloud::RetryPolicy {
 public:
  /// Creates a new instance of the policy, reset to the initial state.
  virtual std::unique_ptr<AMLRetryPolicy> clone() const = 0;
};

/**
 * A retry policy for `AMLConnection` based on counting errors.
 *
 * This policy stops retrying if:
 * - An RPC returns a non-transient error.
 * - More than a prescribed number of transient failures is detected.
 *
 * In this class the following status codes are treated as transient errors:
 * - [`kUnavailable`](@ref google::cloud::StatusCode)
 */
class AMLLimitedErrorCountRetryPolicy : public AMLRetryPolicy {
 public:
  /**
   * Create an instance that tolerates up to @p maximum_failures transient
   * errors.
   *
   * @note Disable the retry loop by providing an instance of this policy with
   *     @p maximum_failures == 0.
   */
  explicit AMLLimitedErrorCountRetryPolicy(int maximum_failures)
      : impl_(maximum_failures) {}

  AMLLimitedErrorCountRetryPolicy(
      AMLLimitedErrorCountRetryPolicy&& rhs) noexcept
      : AMLLimitedErrorCountRetryPolicy(rhs.maximum_failures()) {}
  AMLLimitedErrorCountRetryPolicy(
      AMLLimitedErrorCountRetryPolicy const& rhs) noexcept
      : AMLLimitedErrorCountRetryPolicy(rhs.maximum_failures()) {}

  int maximum_failures() const { return impl_.maximum_failures(); }

  bool OnFailure(Status const& status) override {
    return impl_.OnFailure(status);
  }
  bool IsExhausted() const override { return impl_.IsExhausted(); }
  bool IsPermanentFailure(Status const& status) const override {
    return impl_.IsPermanentFailure(status);
  }
  std::unique_ptr<AMLRetryPolicy> clone() const override {
    return std::make_unique<AMLLimitedErrorCountRetryPolicy>(
        maximum_failures());
  }

  // This is provided only for backwards compatibility.
  using BaseType = AMLRetryPolicy;

 private:
  google::cloud::internal::LimitedErrorCountRetryPolicy<
      financialservices_v1_internal::AMLRetryTraits>
      impl_;
};

/**
 * A retry policy for `AMLConnection` based on elapsed time.
 *
 * This policy stops retrying if:
 * - An RPC returns a non-transient error.
 * - The elapsed time in the retry loop exceeds a prescribed duration.
 *
 * In this class the following status codes are treated as transient errors:
 * - [`kUnavailable`](@ref google::cloud::StatusCode)
 */
class AMLLimitedTimeRetryPolicy : public AMLRetryPolicy {
 public:
  /**
   * Constructor given a `std::chrono::duration<>` object.
   *
   * @tparam DurationRep a placeholder to match the `Rep` tparam for @p
   *     duration's type. The semantics of this template parameter are
   *     documented in `std::chrono::duration<>`. In brief, the underlying
   *     arithmetic type used to store the number of ticks. For our purposes it
   *     is simply a formal parameter.
   * @tparam DurationPeriod a placeholder to match the `Period` tparam for @p
   *     duration's type. The semantics of this template parameter are
   *     documented in `std::chrono::duration<>`. In brief, the length of the
   *     tick in seconds, expressed as a `std::ratio<>`. For our purposes it is
   *     simply a formal parameter.
   * @param maximum_duration the maximum time allowed before the policy expires.
   *     While the application can express this time in any units they desire,
   *     the class truncates to milliseconds.
   *
   * @see https://en.cppreference.com/w/cpp/chrono/duration for more information
   *     about `std::chrono::duration`.
   */
  template <typename DurationRep, typename DurationPeriod>
  explicit AMLLimitedTimeRetryPolicy(
      std::chrono::duration<DurationRep, DurationPeriod> maximum_duration)
      : impl_(maximum_duration) {}

  AMLLimitedTimeRetryPolicy(AMLLimitedTimeRetryPolicy&& rhs) noexcept
      : AMLLimitedTimeRetryPolicy(rhs.maximum_duration()) {}
  AMLLimitedTimeRetryPolicy(AMLLimitedTimeRetryPolicy const& rhs) noexcept
      : AMLLimitedTimeRetryPolicy(rhs.maximum_duration()) {}

  std::chrono::milliseconds maximum_duration() const {
    return impl_.maximum_duration();
  }

  bool OnFailure(Status const& status) override {
    return impl_.OnFailure(status);
  }
  bool IsExhausted() const override { return impl_.IsExhausted(); }
  bool IsPermanentFailure(Status const& status) const override {
    return impl_.IsPermanentFailure(status);
  }
  std::unique_ptr<AMLRetryPolicy> clone() const override {
    return std::make_unique<AMLLimitedTimeRetryPolicy>(maximum_duration());
  }

  // This is provided only for backwards compatibility.
  using BaseType = AMLRetryPolicy;

 private:
  google::cloud::internal::LimitedTimeRetryPolicy<
      financialservices_v1_internal::AMLRetryTraits>
      impl_;
};

/**
 * The `AMLConnection` object for `AMLClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `AMLClient`. This allows users to inject custom behavior
 * (e.g., with a Google Mock object) when writing tests that use objects of type
 * `AMLClient`.
 *
 * To create a concrete instance, see `MakeAMLConnection()`.
 *
 * For mocking, see `financialservices_v1_mocks::MockAMLConnection`.
 */
class AMLConnection {
 public:
  virtual ~AMLConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StreamRange<google::cloud::financialservices::v1::Instance>
  ListInstances(
      google::cloud::financialservices::v1::ListInstancesRequest request);

  virtual StatusOr<google::cloud::financialservices::v1::Instance> GetInstance(
      google::cloud::financialservices::v1::GetInstanceRequest const& request);

  virtual future<StatusOr<google::cloud::financialservices::v1::Instance>>
  CreateInstance(
      google::cloud::financialservices::v1::CreateInstanceRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreateInstance(
      NoAwaitTag,
      google::cloud::financialservices::v1::CreateInstanceRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::Instance>>
  CreateInstance(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::financialservices::v1::Instance>>
  UpdateInstance(
      google::cloud::financialservices::v1::UpdateInstanceRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> UpdateInstance(
      NoAwaitTag,
      google::cloud::financialservices::v1::UpdateInstanceRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::Instance>>
  UpdateInstance(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteInstance(
      google::cloud::financialservices::v1::DeleteInstanceRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> DeleteInstance(
      NoAwaitTag,
      google::cloud::financialservices::v1::DeleteInstanceRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteInstance(google::longrunning::Operation const& operation);

  virtual future<StatusOr<
      google::cloud::financialservices::v1::ImportRegisteredPartiesResponse>>
  ImportRegisteredParties(google::cloud::financialservices::v1::
                              ImportRegisteredPartiesRequest const& request);

  virtual StatusOr<google::longrunning::Operation> ImportRegisteredParties(
      NoAwaitTag, google::cloud::financialservices::v1::
                      ImportRegisteredPartiesRequest const& request);

  virtual future<StatusOr<
      google::cloud::financialservices::v1::ImportRegisteredPartiesResponse>>
  ImportRegisteredParties(google::longrunning::Operation const& operation);

  virtual future<StatusOr<
      google::cloud::financialservices::v1::ExportRegisteredPartiesResponse>>
  ExportRegisteredParties(google::cloud::financialservices::v1::
                              ExportRegisteredPartiesRequest const& request);

  virtual StatusOr<google::longrunning::Operation> ExportRegisteredParties(
      NoAwaitTag, google::cloud::financialservices::v1::
                      ExportRegisteredPartiesRequest const& request);

  virtual future<StatusOr<
      google::cloud::financialservices::v1::ExportRegisteredPartiesResponse>>
  ExportRegisteredParties(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::financialservices::v1::Dataset>
  ListDatasets(
      google::cloud::financialservices::v1::ListDatasetsRequest request);

  virtual StatusOr<google::cloud::financialservices::v1::Dataset> GetDataset(
      google::cloud::financialservices::v1::GetDatasetRequest const& request);

  virtual future<StatusOr<google::cloud::financialservices::v1::Dataset>>
  CreateDataset(
      google::cloud::financialservices::v1::CreateDatasetRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreateDataset(
      NoAwaitTag,
      google::cloud::financialservices::v1::CreateDatasetRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::Dataset>>
  CreateDataset(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::financialservices::v1::Dataset>>
  UpdateDataset(
      google::cloud::financialservices::v1::UpdateDatasetRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> UpdateDataset(
      NoAwaitTag,
      google::cloud::financialservices::v1::UpdateDatasetRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::Dataset>>
  UpdateDataset(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteDataset(
      google::cloud::financialservices::v1::DeleteDatasetRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> DeleteDataset(
      NoAwaitTag,
      google::cloud::financialservices::v1::DeleteDatasetRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteDataset(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::financialservices::v1::Model> ListModels(
      google::cloud::financialservices::v1::ListModelsRequest request);

  virtual StatusOr<google::cloud::financialservices::v1::Model> GetModel(
      google::cloud::financialservices::v1::GetModelRequest const& request);

  virtual future<StatusOr<google::cloud::financialservices::v1::Model>>
  CreateModel(
      google::cloud::financialservices::v1::CreateModelRequest const& request);

  virtual StatusOr<google::longrunning::Operation> CreateModel(
      NoAwaitTag,
      google::cloud::financialservices::v1::CreateModelRequest const& request);

  virtual future<StatusOr<google::cloud::financialservices::v1::Model>>
  CreateModel(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::financialservices::v1::Model>>
  UpdateModel(
      google::cloud::financialservices::v1::UpdateModelRequest const& request);

  virtual StatusOr<google::longrunning::Operation> UpdateModel(
      NoAwaitTag,
      google::cloud::financialservices::v1::UpdateModelRequest const& request);

  virtual future<StatusOr<google::cloud::financialservices::v1::Model>>
  UpdateModel(google::longrunning::Operation const& operation);

  virtual future<StatusOr<
      google::cloud::financialservices::v1::ExportModelMetadataResponse>>
  ExportModelMetadata(
      google::cloud::financialservices::v1::ExportModelMetadataRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> ExportModelMetadata(
      NoAwaitTag,
      google::cloud::financialservices::v1::ExportModelMetadataRequest const&
          request);

  virtual future<StatusOr<
      google::cloud::financialservices::v1::ExportModelMetadataResponse>>
  ExportModelMetadata(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteModel(
      google::cloud::financialservices::v1::DeleteModelRequest const& request);

  virtual StatusOr<google::longrunning::Operation> DeleteModel(
      NoAwaitTag,
      google::cloud::financialservices::v1::DeleteModelRequest const& request);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteModel(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::financialservices::v1::EngineConfig>
  ListEngineConfigs(
      google::cloud::financialservices::v1::ListEngineConfigsRequest request);

  virtual StatusOr<google::cloud::financialservices::v1::EngineConfig>
  GetEngineConfig(
      google::cloud::financialservices::v1::GetEngineConfigRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::EngineConfig>>
  CreateEngineConfig(
      google::cloud::financialservices::v1::CreateEngineConfigRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreateEngineConfig(
      NoAwaitTag,
      google::cloud::financialservices::v1::CreateEngineConfigRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::EngineConfig>>
  CreateEngineConfig(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::financialservices::v1::EngineConfig>>
  UpdateEngineConfig(
      google::cloud::financialservices::v1::UpdateEngineConfigRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> UpdateEngineConfig(
      NoAwaitTag,
      google::cloud::financialservices::v1::UpdateEngineConfigRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::EngineConfig>>
  UpdateEngineConfig(google::longrunning::Operation const& operation);

  virtual future<StatusOr<
      google::cloud::financialservices::v1::ExportEngineConfigMetadataResponse>>
  ExportEngineConfigMetadata(
      google::cloud::financialservices::v1::
          ExportEngineConfigMetadataRequest const& request);

  virtual StatusOr<google::longrunning::Operation> ExportEngineConfigMetadata(
      NoAwaitTag, google::cloud::financialservices::v1::
                      ExportEngineConfigMetadataRequest const& request);

  virtual future<StatusOr<
      google::cloud::financialservices::v1::ExportEngineConfigMetadataResponse>>
  ExportEngineConfigMetadata(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteEngineConfig(
      google::cloud::financialservices::v1::DeleteEngineConfigRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> DeleteEngineConfig(
      NoAwaitTag,
      google::cloud::financialservices::v1::DeleteEngineConfigRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteEngineConfig(google::longrunning::Operation const& operation);

  virtual StatusOr<google::cloud::financialservices::v1::EngineVersion>
  GetEngineVersion(
      google::cloud::financialservices::v1::GetEngineVersionRequest const&
          request);

  virtual StreamRange<google::cloud::financialservices::v1::EngineVersion>
  ListEngineVersions(
      google::cloud::financialservices::v1::ListEngineVersionsRequest request);

  virtual StreamRange<google::cloud::financialservices::v1::PredictionResult>
  ListPredictionResults(
      google::cloud::financialservices::v1::ListPredictionResultsRequest
          request);

  virtual StatusOr<google::cloud::financialservices::v1::PredictionResult>
  GetPredictionResult(
      google::cloud::financialservices::v1::GetPredictionResultRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::PredictionResult>>
  CreatePredictionResult(
      google::cloud::financialservices::v1::CreatePredictionResultRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreatePredictionResult(
      NoAwaitTag,
      google::cloud::financialservices::v1::CreatePredictionResultRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::PredictionResult>>
  CreatePredictionResult(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::PredictionResult>>
  UpdatePredictionResult(
      google::cloud::financialservices::v1::UpdatePredictionResultRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> UpdatePredictionResult(
      NoAwaitTag,
      google::cloud::financialservices::v1::UpdatePredictionResultRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::PredictionResult>>
  UpdatePredictionResult(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::financialservices::v1::
                              ExportPredictionResultMetadataResponse>>
  ExportPredictionResultMetadata(
      google::cloud::financialservices::v1::
          ExportPredictionResultMetadataRequest const& request);

  virtual StatusOr<google::longrunning::Operation>
  ExportPredictionResultMetadata(
      NoAwaitTag, google::cloud::financialservices::v1::
                      ExportPredictionResultMetadataRequest const& request);

  virtual future<StatusOr<google::cloud::financialservices::v1::
                              ExportPredictionResultMetadataResponse>>
  ExportPredictionResultMetadata(
      google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeletePredictionResult(
      google::cloud::financialservices::v1::DeletePredictionResultRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> DeletePredictionResult(
      NoAwaitTag,
      google::cloud::financialservices::v1::DeletePredictionResultRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeletePredictionResult(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::financialservices::v1::BacktestResult>
  ListBacktestResults(
      google::cloud::financialservices::v1::ListBacktestResultsRequest request);

  virtual StatusOr<google::cloud::financialservices::v1::BacktestResult>
  GetBacktestResult(
      google::cloud::financialservices::v1::GetBacktestResultRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::BacktestResult>>
  CreateBacktestResult(
      google::cloud::financialservices::v1::CreateBacktestResultRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> CreateBacktestResult(
      NoAwaitTag,
      google::cloud::financialservices::v1::CreateBacktestResultRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::BacktestResult>>
  CreateBacktestResult(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::financialservices::v1::BacktestResult>>
  UpdateBacktestResult(
      google::cloud::financialservices::v1::UpdateBacktestResultRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> UpdateBacktestResult(
      NoAwaitTag,
      google::cloud::financialservices::v1::UpdateBacktestResultRequest const&
          request);

  virtual future<StatusOr<google::cloud::financialservices::v1::BacktestResult>>
  UpdateBacktestResult(google::longrunning::Operation const& operation);

  virtual future<StatusOr<google::cloud::financialservices::v1::
                              ExportBacktestResultMetadataResponse>>
  ExportBacktestResultMetadata(
      google::cloud::financialservices::v1::
          ExportBacktestResultMetadataRequest const& request);

  virtual StatusOr<google::longrunning::Operation> ExportBacktestResultMetadata(
      NoAwaitTag, google::cloud::financialservices::v1::
                      ExportBacktestResultMetadataRequest const& request);

  virtual future<StatusOr<google::cloud::financialservices::v1::
                              ExportBacktestResultMetadataResponse>>
  ExportBacktestResultMetadata(google::longrunning::Operation const& operation);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteBacktestResult(
      google::cloud::financialservices::v1::DeleteBacktestResultRequest const&
          request);

  virtual StatusOr<google::longrunning::Operation> DeleteBacktestResult(
      NoAwaitTag,
      google::cloud::financialservices::v1::DeleteBacktestResultRequest const&
          request);

  virtual future<
      StatusOr<google::cloud::financialservices::v1::OperationMetadata>>
  DeleteBacktestResult(google::longrunning::Operation const& operation);

  virtual StreamRange<google::cloud::location::Location> ListLocations(
      google::cloud::location::ListLocationsRequest request);

  virtual StatusOr<google::cloud::location::Location> GetLocation(
      google::cloud::location::GetLocationRequest const& request);

  virtual StreamRange<google::longrunning::Operation> ListOperations(
      google::longrunning::ListOperationsRequest request);

  virtual StatusOr<google::longrunning::Operation> GetOperation(
      google::longrunning::GetOperationRequest const& request);

  virtual Status DeleteOperation(
      google::longrunning::DeleteOperationRequest const& request);

  virtual Status CancelOperation(
      google::longrunning::CancelOperationRequest const& request);
};

/**
 * A factory function to construct an object of type `AMLConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of AMLClient.
 *
 * The optional @p options argument may be used to configure aspects of the
 * returned `AMLConnection`. Expected options are any of the types in
 * the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::UnifiedCredentialsOptionList`
 * - `google::cloud::financialservices_v1::AMLPolicyOptionList`
 *
 * @note Unexpected options will be ignored. To log unexpected options instead,
 *     set `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment.
 *
 * @param options (optional) Configure the `AMLConnection` created by
 * this function.
 */
std::shared_ptr<AMLConnection> MakeAMLConnection(Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace financialservices_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_FINANCIALSERVICES_V1_AML_CONNECTION_H
