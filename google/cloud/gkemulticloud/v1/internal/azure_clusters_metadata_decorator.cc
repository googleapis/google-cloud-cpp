// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gkemulticloud/v1/azure_service.proto

#include "google/cloud/gkemulticloud/v1/internal/azure_clusters_metadata_decorator.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/internal/url_encode.h"
#include "google/cloud/status_or.h"
#include <google/cloud/gkemulticloud/v1/azure_service.grpc.pb.h>
#include <memory>
#include <string>
#include <utility>
#include <vector>

namespace google {
namespace cloud {
namespace gkemulticloud_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

AzureClustersMetadata::AzureClustersMetadata(
    std::shared_ptr<AzureClustersStub> child,
    std::multimap<std::string, std::string> fixed_metadata,
    std::string api_client_header)
    : child_(std::move(child)),
      fixed_metadata_(std::move(fixed_metadata)),
      api_client_header_(
          api_client_header.empty()
              ? google::cloud::internal::GeneratedLibClientHeader()
              : std::move(api_client_header)) {}

future<StatusOr<google::longrunning::Operation>>
AzureClustersMetadata::AsyncCreateAzureClient(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::gkemulticloud::v1::CreateAzureClientRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->AsyncCreateAzureClient(cq, std::move(context),
                                        std::move(options), request);
}

StatusOr<google::longrunning::Operation>
AzureClustersMetadata::CreateAzureClient(
    grpc::ClientContext& context, Options options,
    google::cloud::gkemulticloud::v1::CreateAzureClientRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateAzureClient(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::AzureClient>
AzureClustersMetadata::GetAzureClient(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::GetAzureClientRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetAzureClient(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::ListAzureClientsResponse>
AzureClustersMetadata::ListAzureClients(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::ListAzureClientsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListAzureClients(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AzureClustersMetadata::AsyncDeleteAzureClient(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::gkemulticloud::v1::DeleteAzureClientRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncDeleteAzureClient(cq, std::move(context),
                                        std::move(options), request);
}

StatusOr<google::longrunning::Operation>
AzureClustersMetadata::DeleteAzureClient(
    grpc::ClientContext& context, Options options,
    google::cloud::gkemulticloud::v1::DeleteAzureClientRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteAzureClient(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AzureClustersMetadata::AsyncCreateAzureCluster(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::gkemulticloud::v1::CreateAzureClusterRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->AsyncCreateAzureCluster(cq, std::move(context),
                                         std::move(options), request);
}

StatusOr<google::longrunning::Operation>
AzureClustersMetadata::CreateAzureCluster(
    grpc::ClientContext& context, Options options,
    google::cloud::gkemulticloud::v1::CreateAzureClusterRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateAzureCluster(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AzureClustersMetadata::AsyncUpdateAzureCluster(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::gkemulticloud::v1::UpdateAzureClusterRequest const&
        request) {
  SetMetadata(
      *context, *options,
      absl::StrCat("azure_cluster.name=",
                   internal::UrlEncode(request.azure_cluster().name())));
  return child_->AsyncUpdateAzureCluster(cq, std::move(context),
                                         std::move(options), request);
}

StatusOr<google::longrunning::Operation>
AzureClustersMetadata::UpdateAzureCluster(
    grpc::ClientContext& context, Options options,
    google::cloud::gkemulticloud::v1::UpdateAzureClusterRequest const&
        request) {
  SetMetadata(
      context, options,
      absl::StrCat("azure_cluster.name=",
                   internal::UrlEncode(request.azure_cluster().name())));
  return child_->UpdateAzureCluster(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::AzureCluster>
AzureClustersMetadata::GetAzureCluster(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::GetAzureClusterRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetAzureCluster(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::ListAzureClustersResponse>
AzureClustersMetadata::ListAzureClusters(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::ListAzureClustersRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListAzureClusters(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AzureClustersMetadata::AsyncDeleteAzureCluster(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::gkemulticloud::v1::DeleteAzureClusterRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncDeleteAzureCluster(cq, std::move(context),
                                         std::move(options), request);
}

StatusOr<google::longrunning::Operation>
AzureClustersMetadata::DeleteAzureCluster(
    grpc::ClientContext& context, Options options,
    google::cloud::gkemulticloud::v1::DeleteAzureClusterRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteAzureCluster(context, options, request);
}

StatusOr<
    google::cloud::gkemulticloud::v1::GenerateAzureClusterAgentTokenResponse>
AzureClustersMetadata::GenerateAzureClusterAgentToken(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::
        GenerateAzureClusterAgentTokenRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("azure_cluster=",
                           internal::UrlEncode(request.azure_cluster())));
  return child_->GenerateAzureClusterAgentToken(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::GenerateAzureAccessTokenResponse>
AzureClustersMetadata::GenerateAzureAccessToken(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::GenerateAzureAccessTokenRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("azure_cluster=",
                           internal::UrlEncode(request.azure_cluster())));
  return child_->GenerateAzureAccessToken(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AzureClustersMetadata::AsyncCreateAzureNodePool(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::gkemulticloud::v1::CreateAzureNodePoolRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->AsyncCreateAzureNodePool(cq, std::move(context),
                                          std::move(options), request);
}

StatusOr<google::longrunning::Operation>
AzureClustersMetadata::CreateAzureNodePool(
    grpc::ClientContext& context, Options options,
    google::cloud::gkemulticloud::v1::CreateAzureNodePoolRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateAzureNodePool(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AzureClustersMetadata::AsyncUpdateAzureNodePool(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::gkemulticloud::v1::UpdateAzureNodePoolRequest const&
        request) {
  SetMetadata(
      *context, *options,
      absl::StrCat("azure_node_pool.name=",
                   internal::UrlEncode(request.azure_node_pool().name())));
  return child_->AsyncUpdateAzureNodePool(cq, std::move(context),
                                          std::move(options), request);
}

StatusOr<google::longrunning::Operation>
AzureClustersMetadata::UpdateAzureNodePool(
    grpc::ClientContext& context, Options options,
    google::cloud::gkemulticloud::v1::UpdateAzureNodePoolRequest const&
        request) {
  SetMetadata(
      context, options,
      absl::StrCat("azure_node_pool.name=",
                   internal::UrlEncode(request.azure_node_pool().name())));
  return child_->UpdateAzureNodePool(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::AzureNodePool>
AzureClustersMetadata::GetAzureNodePool(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::GetAzureNodePoolRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetAzureNodePool(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::ListAzureNodePoolsResponse>
AzureClustersMetadata::ListAzureNodePools(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::ListAzureNodePoolsRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListAzureNodePools(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AzureClustersMetadata::AsyncDeleteAzureNodePool(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::gkemulticloud::v1::DeleteAzureNodePoolRequest const&
        request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncDeleteAzureNodePool(cq, std::move(context),
                                          std::move(options), request);
}

StatusOr<google::longrunning::Operation>
AzureClustersMetadata::DeleteAzureNodePool(
    grpc::ClientContext& context, Options options,
    google::cloud::gkemulticloud::v1::DeleteAzureNodePoolRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteAzureNodePool(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::AzureOpenIdConfig>
AzureClustersMetadata::GetAzureOpenIdConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::GetAzureOpenIdConfigRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("azure_cluster=",
                           internal::UrlEncode(request.azure_cluster())));
  return child_->GetAzureOpenIdConfig(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::AzureJsonWebKeys>
AzureClustersMetadata::GetAzureJsonWebKeys(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::GetAzureJsonWebKeysRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("azure_cluster=",
                           internal::UrlEncode(request.azure_cluster())));
  return child_->GetAzureJsonWebKeys(context, options, request);
}

StatusOr<google::cloud::gkemulticloud::v1::AzureServerConfig>
AzureClustersMetadata::GetAzureServerConfig(
    grpc::ClientContext& context, Options const& options,
    google::cloud::gkemulticloud::v1::GetAzureServerConfigRequest const&
        request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetAzureServerConfig(context, options, request);
}

StatusOr<google::longrunning::ListOperationsResponse>
AzureClustersMetadata::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ListOperations(context, options, request);
}

StatusOr<google::longrunning::Operation> AzureClustersMetadata::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetOperation(context, options, request);
}

Status AzureClustersMetadata::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteOperation(context, options, request);
}

Status AzureClustersMetadata::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  SetMetadata(context, options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->CancelOperation(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
AzureClustersMetadata::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncGetOperation(cq, std::move(context), std::move(options),
                                   request);
}

future<Status> AzureClustersMetadata::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  SetMetadata(*context, *options,
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->AsyncCancelOperation(cq, std::move(context),
                                      std::move(options), request);
}

void AzureClustersMetadata::SetMetadata(grpc::ClientContext& context,
                                        Options const& options,
                                        std::string const& request_params) {
  context.AddMetadata("x-goog-request-params", request_params);
  SetMetadata(context, options);
}

void AzureClustersMetadata::SetMetadata(grpc::ClientContext& context,
                                        Options const& options) {
  google::cloud::internal::SetMetadata(context, options, fixed_metadata_,
                                       api_client_header_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gkemulticloud_v1_internal
}  // namespace cloud
}  // namespace google
