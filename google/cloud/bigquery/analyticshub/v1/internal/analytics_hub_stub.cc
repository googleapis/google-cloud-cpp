// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/analyticshub/v1/analyticshub.proto

#include "google/cloud/bigquery/analyticshub/v1/internal/analytics_hub_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/bigquery/analyticshub/v1/analyticshub.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace bigquery_analyticshub_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

AnalyticsHubServiceStub::~AnalyticsHubServiceStub() = default;

StatusOr<google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse>
DefaultAnalyticsHubServiceStub::ListDataExchanges(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::ListDataExchangesRequest const&
        request) {
  google::cloud::bigquery::analyticshub::v1::ListDataExchangesResponse response;
  auto status =
      grpc_stub_->ListDataExchanges(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<
    google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse>
DefaultAnalyticsHubServiceStub::ListOrgDataExchanges(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::
        ListOrgDataExchangesRequest const& request) {
  google::cloud::bigquery::analyticshub::v1::ListOrgDataExchangesResponse
      response;
  auto status =
      grpc_stub_->ListOrgDataExchanges(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::bigquery::analyticshub::v1::DataExchange>
DefaultAnalyticsHubServiceStub::GetDataExchange(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::GetDataExchangeRequest const&
        request) {
  google::cloud::bigquery::analyticshub::v1::DataExchange response;
  auto status =
      grpc_stub_->GetDataExchange(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::bigquery::analyticshub::v1::DataExchange>
DefaultAnalyticsHubServiceStub::CreateDataExchange(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::CreateDataExchangeRequest const&
        request) {
  google::cloud::bigquery::analyticshub::v1::DataExchange response;
  auto status =
      grpc_stub_->CreateDataExchange(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::bigquery::analyticshub::v1::DataExchange>
DefaultAnalyticsHubServiceStub::UpdateDataExchange(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::UpdateDataExchangeRequest const&
        request) {
  google::cloud::bigquery::analyticshub::v1::DataExchange response;
  auto status =
      grpc_stub_->UpdateDataExchange(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultAnalyticsHubServiceStub::DeleteDataExchange(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::DeleteDataExchangeRequest const&
        request) {
  google::protobuf::Empty response;
  auto status =
      grpc_stub_->DeleteDataExchange(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::bigquery::analyticshub::v1::ListListingsResponse>
DefaultAnalyticsHubServiceStub::ListListings(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::ListListingsRequest const&
        request) {
  google::cloud::bigquery::analyticshub::v1::ListListingsResponse response;
  auto status = grpc_stub_->ListListings(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::bigquery::analyticshub::v1::Listing>
DefaultAnalyticsHubServiceStub::GetListing(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::GetListingRequest const&
        request) {
  google::cloud::bigquery::analyticshub::v1::Listing response;
  auto status = grpc_stub_->GetListing(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::bigquery::analyticshub::v1::Listing>
DefaultAnalyticsHubServiceStub::CreateListing(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::CreateListingRequest const&
        request) {
  google::cloud::bigquery::analyticshub::v1::Listing response;
  auto status = grpc_stub_->CreateListing(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::bigquery::analyticshub::v1::Listing>
DefaultAnalyticsHubServiceStub::UpdateListing(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::UpdateListingRequest const&
        request) {
  google::cloud::bigquery::analyticshub::v1::Listing response;
  auto status = grpc_stub_->UpdateListing(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultAnalyticsHubServiceStub::DeleteListing(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::DeleteListingRequest const&
        request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteListing(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse>
DefaultAnalyticsHubServiceStub::SubscribeListing(
    grpc::ClientContext& client_context,
    google::cloud::bigquery::analyticshub::v1::SubscribeListingRequest const&
        request) {
  google::cloud::bigquery::analyticshub::v1::SubscribeListingResponse response;
  auto status =
      grpc_stub_->SubscribeListing(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::Policy> DefaultAnalyticsHubServiceStub::GetIamPolicy(
    grpc::ClientContext& client_context,
    google::iam::v1::GetIamPolicyRequest const& request) {
  google::iam::v1::Policy response;
  auto status = grpc_stub_->GetIamPolicy(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::Policy> DefaultAnalyticsHubServiceStub::SetIamPolicy(
    grpc::ClientContext& client_context,
    google::iam::v1::SetIamPolicyRequest const& request) {
  google::iam::v1::Policy response;
  auto status = grpc_stub_->SetIamPolicy(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DefaultAnalyticsHubServiceStub::TestIamPermissions(
    grpc::ClientContext& client_context,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  google::iam::v1::TestIamPermissionsResponse response;
  auto status =
      grpc_stub_->TestIamPermissions(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_analyticshub_v1_internal
}  // namespace cloud
}  // namespace google
