// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/datatransfer/v1/datatransfer.proto

#include "google/cloud/bigquery/data_transfer_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace bigquery {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

DataTransferServiceConnectionIdempotencyPolicy::
    ~DataTransferServiceConnectionIdempotencyPolicy() = default;

namespace {
class DefaultDataTransferServiceConnectionIdempotencyPolicy
    : public DataTransferServiceConnectionIdempotencyPolicy {
 public:
  ~DefaultDataTransferServiceConnectionIdempotencyPolicy() override = default;

  /// Create a new copy of this object.
  std::unique_ptr<DataTransferServiceConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<
        DefaultDataTransferServiceConnectionIdempotencyPolicy>(*this);
  }

  Idempotency GetDataSource(
      google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListDataSources(
      google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency CreateTransferConfig(
      google::cloud::bigquery::datatransfer::v1::
          CreateTransferConfigRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateTransferConfig(
      google::cloud::bigquery::datatransfer::v1::
          UpdateTransferConfigRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency DeleteTransferConfig(
      google::cloud::bigquery::datatransfer::v1::
          DeleteTransferConfigRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetTransferConfig(google::cloud::bigquery::datatransfer::v1::
                                    GetTransferConfigRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListTransferConfigs(
      google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ScheduleTransferRuns(
      google::cloud::bigquery::datatransfer::v1::
          ScheduleTransferRunsRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency StartManualTransferRuns(
      google::cloud::bigquery::datatransfer::v1::
          StartManualTransferRunsRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetTransferRun(
      google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency DeleteTransferRun(google::cloud::bigquery::datatransfer::v1::
                                    DeleteTransferRunRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListTransferRuns(
      google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency ListTransferLogs(
      google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency CheckValidCreds(
      google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency EnrollDataSources(google::cloud::bigquery::datatransfer::v1::
                                    EnrollDataSourcesRequest const&) override {
    return Idempotency::kNonIdempotent;
  }
};
}  // namespace

std::unique_ptr<DataTransferServiceConnectionIdempotencyPolicy>
MakeDefaultDataTransferServiceConnectionIdempotencyPolicy() {
  return absl::make_unique<
      DefaultDataTransferServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
