// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/datapolicies/v1/datapolicy.proto

#include "google/cloud/bigquery/datapolicies/v1/internal/data_policy_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_datapolicies_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DataPolicyServiceTracingStub::DataPolicyServiceTracingStub(
    std::shared_ptr<DataPolicyServiceStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::bigquery::datapolicies::v1::DataPolicy>
DataPolicyServiceTracingStub::CreateDataPolicy(
    grpc::ClientContext& context, Options const& options,
    google::cloud::bigquery::datapolicies::v1::CreateDataPolicyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.bigquery.datapolicies.v1.DataPolicyService",
      "CreateDataPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateDataPolicy(context, options, request));
}

StatusOr<google::cloud::bigquery::datapolicies::v1::DataPolicy>
DataPolicyServiceTracingStub::UpdateDataPolicy(
    grpc::ClientContext& context, Options const& options,
    google::cloud::bigquery::datapolicies::v1::UpdateDataPolicyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.bigquery.datapolicies.v1.DataPolicyService",
      "UpdateDataPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateDataPolicy(context, options, request));
}

StatusOr<google::cloud::bigquery::datapolicies::v1::DataPolicy>
DataPolicyServiceTracingStub::RenameDataPolicy(
    grpc::ClientContext& context, Options const& options,
    google::cloud::bigquery::datapolicies::v1::RenameDataPolicyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.bigquery.datapolicies.v1.DataPolicyService",
      "RenameDataPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->RenameDataPolicy(context, options, request));
}

Status DataPolicyServiceTracingStub::DeleteDataPolicy(
    grpc::ClientContext& context, Options const& options,
    google::cloud::bigquery::datapolicies::v1::DeleteDataPolicyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.bigquery.datapolicies.v1.DataPolicyService",
      "DeleteDataPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteDataPolicy(context, options, request));
}

StatusOr<google::cloud::bigquery::datapolicies::v1::DataPolicy>
DataPolicyServiceTracingStub::GetDataPolicy(
    grpc::ClientContext& context, Options const& options,
    google::cloud::bigquery::datapolicies::v1::GetDataPolicyRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.bigquery.datapolicies.v1.DataPolicyService",
      "GetDataPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetDataPolicy(context, options, request));
}

StatusOr<google::cloud::bigquery::datapolicies::v1::ListDataPoliciesResponse>
DataPolicyServiceTracingStub::ListDataPolicies(
    grpc::ClientContext& context, Options const& options,
    google::cloud::bigquery::datapolicies::v1::ListDataPoliciesRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.bigquery.datapolicies.v1.DataPolicyService",
      "ListDataPolicies");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListDataPolicies(context, options, request));
}

StatusOr<google::iam::v1::Policy> DataPolicyServiceTracingStub::GetIamPolicy(
    grpc::ClientContext& context, Options const& options,
    google::iam::v1::GetIamPolicyRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.bigquery.datapolicies.v1.DataPolicyService",
      "GetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetIamPolicy(context, options, request));
}

StatusOr<google::iam::v1::Policy> DataPolicyServiceTracingStub::SetIamPolicy(
    grpc::ClientContext& context, Options const& options,
    google::iam::v1::SetIamPolicyRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.bigquery.datapolicies.v1.DataPolicyService",
      "SetIamPolicy");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->SetIamPolicy(context, options, request));
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DataPolicyServiceTracingStub::TestIamPermissions(
    grpc::ClientContext& context, Options const& options,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.bigquery.datapolicies.v1.DataPolicyService",
      "TestIamPermissions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->TestIamPermissions(context, options, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<DataPolicyServiceStub> MakeDataPolicyServiceTracingStub(
    std::shared_ptr<DataPolicyServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<DataPolicyServiceTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_datapolicies_v1_internal
}  // namespace cloud
}  // namespace google
