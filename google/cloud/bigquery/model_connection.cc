// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/v2/model.proto

#include "google/cloud/bigquery/model_connection.h"
#include "google/cloud/bigquery/internal/model_connection_impl.h"
#include "google/cloud/bigquery/internal/model_option_defaults.h"
#include "google/cloud/bigquery/internal/model_stub_factory.h"
#include "google/cloud/bigquery/model_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace bigquery {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ModelServiceConnection::~ModelServiceConnection() = default;

StatusOr<google::cloud::bigquery::v2::Model> ModelServiceConnection::GetModel(
    google::cloud::bigquery::v2::GetModelRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::bigquery::v2::ListModelsResponse>
ModelServiceConnection::ListModels(
    google::cloud::bigquery::v2::ListModelsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::bigquery::v2::Model> ModelServiceConnection::PatchModel(
    google::cloud::bigquery::v2::PatchModelRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ModelServiceConnection::DeleteModel(
    google::cloud::bigquery::v2::DeleteModelRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<ModelServiceConnection> MakeModelServiceConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 ModelServicePolicyOptionList>(options,
                                                               __func__);
  options = bigquery_internal::ModelServiceDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = bigquery_internal::CreateDefaultModelServiceStub(background->cq(),
                                                               options);
  return std::make_shared<bigquery_internal::ModelServiceConnectionImpl>(
      std::move(background), std::move(stub), std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
