// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/reservation/v1/reservation.proto

#include "google/cloud/bigquery/reservation_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace bigquery {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

ReservationServiceConnectionIdempotencyPolicy::
    ~ReservationServiceConnectionIdempotencyPolicy() = default;

namespace {
class DefaultReservationServiceConnectionIdempotencyPolicy
    : public ReservationServiceConnectionIdempotencyPolicy {
 public:
  ~DefaultReservationServiceConnectionIdempotencyPolicy() override = default;

  /// Create a new copy of this object.
  std::unique_ptr<ReservationServiceConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<
        DefaultReservationServiceConnectionIdempotencyPolicy>(*this);
  }

  Idempotency CreateReservation(
      google::cloud::bigquery::reservation::v1::CreateReservationRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListReservations(
      google::cloud::bigquery::reservation::v1::ListReservationsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetReservation(
      google::cloud::bigquery::reservation::v1::GetReservationRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency DeleteReservation(
      google::cloud::bigquery::reservation::v1::DeleteReservationRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateReservation(
      google::cloud::bigquery::reservation::v1::UpdateReservationRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency CreateCapacityCommitment(
      google::cloud::bigquery::reservation::v1::
          CreateCapacityCommitmentRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListCapacityCommitments(
      google::cloud::bigquery::reservation::v1::ListCapacityCommitmentsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency GetCapacityCommitment(
      google::cloud::bigquery::reservation::v1::
          GetCapacityCommitmentRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency DeleteCapacityCommitment(
      google::cloud::bigquery::reservation::v1::
          DeleteCapacityCommitmentRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency UpdateCapacityCommitment(
      google::cloud::bigquery::reservation::v1::
          UpdateCapacityCommitmentRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency SplitCapacityCommitment(
      google::cloud::bigquery::reservation::v1::
          SplitCapacityCommitmentRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency MergeCapacityCommitments(
      google::cloud::bigquery::reservation::v1::
          MergeCapacityCommitmentsRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency CreateAssignment(
      google::cloud::bigquery::reservation::v1::CreateAssignmentRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency ListAssignments(
      google::cloud::bigquery::reservation::v1::ListAssignmentsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency DeleteAssignment(
      google::cloud::bigquery::reservation::v1::DeleteAssignmentRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency SearchAssignments(
      google::cloud::bigquery::reservation::v1::SearchAssignmentsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency SearchAllAssignments(
      google::cloud::bigquery::reservation::v1::SearchAllAssignmentsRequest)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency MoveAssignment(
      google::cloud::bigquery::reservation::v1::MoveAssignmentRequest const&)
      override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency GetBiReservation(
      google::cloud::bigquery::reservation::v1::GetBiReservationRequest const&)
      override {
    return Idempotency::kIdempotent;
  }

  Idempotency UpdateBiReservation(
      google::cloud::bigquery::reservation::v1::
          UpdateBiReservationRequest const&) override {
    return Idempotency::kNonIdempotent;
  }
};
}  // namespace

std::unique_ptr<ReservationServiceConnectionIdempotencyPolicy>
MakeDefaultReservationServiceConnectionIdempotencyPolicy() {
  return absl::make_unique<
      DefaultReservationServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
