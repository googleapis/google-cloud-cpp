// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/v2/model.proto

#include "google/cloud/bigquery/internal/model_metadata_decorator.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/status_or.h"
#include <google/cloud/bigquery/v2/model.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace bigquery_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ModelServiceMetadata::ModelServiceMetadata(
    std::shared_ptr<ModelServiceStub> child)
    : child_(std::move(child)),
      api_client_header_(
          google::cloud::internal::ApiClientHeader("generator")) {}

StatusOr<google::cloud::bigquery::v2::Model> ModelServiceMetadata::GetModel(
    grpc::ClientContext& context,
    google::cloud::bigquery::v2::GetModelRequest const& request) {
  SetMetadata(context, "model_id=" + request.model_id());
  return child_->GetModel(context, request);
}

StatusOr<google::cloud::bigquery::v2::ListModelsResponse>
ModelServiceMetadata::ListModels(
    grpc::ClientContext& context,
    google::cloud::bigquery::v2::ListModelsRequest const& request) {
  SetMetadata(context, "dataset_id=" + request.dataset_id());
  return child_->ListModels(context, request);
}

StatusOr<google::cloud::bigquery::v2::Model> ModelServiceMetadata::PatchModel(
    grpc::ClientContext& context,
    google::cloud::bigquery::v2::PatchModelRequest const& request) {
  SetMetadata(context, "model_id=" + request.model_id());
  return child_->PatchModel(context, request);
}

Status ModelServiceMetadata::DeleteModel(
    grpc::ClientContext& context,
    google::cloud::bigquery::v2::DeleteModelRequest const& request) {
  SetMetadata(context, "model_id=" + request.model_id());
  return child_->DeleteModel(context, request);
}

void ModelServiceMetadata::SetMetadata(grpc::ClientContext& context,
                                       std::string const& request_params) {
  context.AddMetadata("x-goog-request-params", request_params);
  SetMetadata(context);
}

void ModelServiceMetadata::SetMetadata(grpc::ClientContext& context) {
  context.AddMetadata("x-goog-api-client", api_client_header_);
  auto const& options = internal::CurrentOptions();
  if (options.has<UserProjectOption>()) {
    context.AddMetadata("x-goog-user-project",
                        options.get<UserProjectOption>());
  }
  if (options.has<AuthorityOption>()) {
    context.set_authority(options.get<AuthorityOption>());
  }
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_internal
}  // namespace cloud
}  // namespace google
