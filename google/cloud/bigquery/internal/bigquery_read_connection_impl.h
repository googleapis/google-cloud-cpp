// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/storage/v1/storage.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGQUERY_INTERNAL_BIGQUERY_READ_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGQUERY_INTERNAL_BIGQUERY_READ_CONNECTION_IMPL_H

#include "google/cloud/bigquery/bigquery_read_connection.h"
#include "google/cloud/bigquery/bigquery_read_connection_idempotency_policy.h"
#include "google/cloud/bigquery/bigquery_read_options.h"
#include "google/cloud/bigquery/internal/bigquery_read_retry_traits.h"
#include "google/cloud/bigquery/internal/bigquery_read_stub.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace bigquery_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

void BigQueryReadReadRowsStreamingUpdater(
    google::cloud::bigquery::storage::v1::ReadRowsResponse const& response,
    google::cloud::bigquery::storage::v1::ReadRowsRequest& request);

class BigQueryReadConnectionImpl : public bigquery::BigQueryReadConnection {
 public:
  ~BigQueryReadConnectionImpl() override = default;

  BigQueryReadConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<bigquery_internal::BigQueryReadStub> stub,
      Options options);

  Options options() override { return options_; }

  StatusOr<google::cloud::bigquery::storage::v1::ReadSession> CreateReadSession(
      google::cloud::bigquery::storage::v1::CreateReadSessionRequest const&
          request) override;

  StreamRange<google::cloud::bigquery::storage::v1::ReadRowsResponse> ReadRows(
      google::cloud::bigquery::storage::v1::ReadRowsRequest const& request)
      override;

  StatusOr<google::cloud::bigquery::storage::v1::SplitReadStreamResponse>
  SplitReadStream(
      google::cloud::bigquery::storage::v1::SplitReadStreamRequest const&
          request) override;

 private:
  std::unique_ptr<bigquery::BigQueryReadRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<bigquery::BigQueryReadRetryPolicyOption>()) {
      return options.get<bigquery::BigQueryReadRetryPolicyOption>()->clone();
    }
    return options_.get<bigquery::BigQueryReadRetryPolicyOption>()->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<bigquery::BigQueryReadBackoffPolicyOption>()) {
      return options.get<bigquery::BigQueryReadBackoffPolicyOption>()->clone();
    }
    return options_.get<bigquery::BigQueryReadBackoffPolicyOption>()->clone();
  }

  std::unique_ptr<bigquery::BigQueryReadConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options
            .has<bigquery::BigQueryReadConnectionIdempotencyPolicyOption>()) {
      return options
          .get<bigquery::BigQueryReadConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<bigquery::BigQueryReadConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<bigquery_internal::BigQueryReadStub> stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
namespace gcpcxxV1 = GOOGLE_CLOUD_CPP_NS;  // NOLINT(misc-unused-alias-decls)
}  // namespace bigquery_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGQUERY_INTERNAL_BIGQUERY_READ_CONNECTION_IMPL_H
