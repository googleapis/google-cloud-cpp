// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/storage/v1/storage.proto

#include "google/cloud/bigquery/internal/bigquery_read_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>

namespace google {
namespace cloud {
namespace bigquery_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

BigQueryReadTracingConnection::BigQueryReadTracingConnection(
    std::shared_ptr<bigquery::BigQueryReadConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::bigquery::storage::v1::ReadSession>
BigQueryReadTracingConnection::CreateReadSession(
    google::cloud::bigquery::storage::v1::CreateReadSessionRequest const&
        request) {
  auto span =
      internal::MakeSpan("bigquery::BigQueryReadConnection::CreateReadSession");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateReadSession(request));
}

StreamRange<google::cloud::bigquery::storage::v1::ReadRowsResponse>
BigQueryReadTracingConnection::ReadRows(
    google::cloud::bigquery::storage::v1::ReadRowsRequest const& request) {
  return child_->ReadRows(request);
}
StatusOr<google::cloud::bigquery::storage::v1::SplitReadStreamResponse>
BigQueryReadTracingConnection::SplitReadStream(
    google::cloud::bigquery::storage::v1::SplitReadStreamRequest const&
        request) {
  auto span =
      internal::MakeSpan("bigquery::BigQueryReadConnection::SplitReadStream");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->SplitReadStream(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
namespace gcpcxxV1 = GOOGLE_CLOUD_CPP_NS;  // NOLINT(misc-unused-alias-decls)
}  // namespace bigquery_internal
}  // namespace cloud
}  // namespace google
