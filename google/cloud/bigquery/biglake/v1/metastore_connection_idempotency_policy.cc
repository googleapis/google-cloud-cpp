// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/biglake/v1/metastore.proto

#include "google/cloud/bigquery/biglake/v1/metastore_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace bigquery_biglake_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

MetastoreServiceConnectionIdempotencyPolicy::
    ~MetastoreServiceConnectionIdempotencyPolicy() = default;

std::unique_ptr<MetastoreServiceConnectionIdempotencyPolicy>
MetastoreServiceConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<MetastoreServiceConnectionIdempotencyPolicy>(*this);
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::CreateCatalog(
    google::cloud::bigquery::biglake::v1::CreateCatalogRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::DeleteCatalog(
    google::cloud::bigquery::biglake::v1::DeleteCatalogRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::GetCatalog(
    google::cloud::bigquery::biglake::v1::GetCatalogRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::ListCatalogs(
    google::cloud::bigquery::biglake::v1::ListCatalogsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::CreateDatabase(
    google::cloud::bigquery::biglake::v1::CreateDatabaseRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::DeleteDatabase(
    google::cloud::bigquery::biglake::v1::DeleteDatabaseRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::UpdateDatabase(
    google::cloud::bigquery::biglake::v1::UpdateDatabaseRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::GetDatabase(
    google::cloud::bigquery::biglake::v1::GetDatabaseRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::ListDatabases(
    google::cloud::bigquery::biglake::v1::ListDatabasesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::CreateTable(
    google::cloud::bigquery::biglake::v1::CreateTableRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::DeleteTable(
    google::cloud::bigquery::biglake::v1::DeleteTableRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::UpdateTable(
    google::cloud::bigquery::biglake::v1::UpdateTableRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::RenameTable(
    google::cloud::bigquery::biglake::v1::RenameTableRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::GetTable(
    google::cloud::bigquery::biglake::v1::GetTableRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency MetastoreServiceConnectionIdempotencyPolicy::ListTables(
    google::cloud::bigquery::biglake::v1::ListTablesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

std::unique_ptr<MetastoreServiceConnectionIdempotencyPolicy>
MakeDefaultMetastoreServiceConnectionIdempotencyPolicy() {
  return std::make_unique<MetastoreServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_biglake_v1
}  // namespace cloud
}  // namespace google
