// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/bigtable/admin/v2/bigtable_table_admin.proto

#include "google/cloud/bigtable/admin/internal/bigtable_table_admin_tracing_stub.h"

namespace google {
namespace cloud {
namespace bigtable_admin_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

BigtableTableAdminTracingStub::BigtableTableAdminTracingStub(
    std::shared_ptr<BigtableTableAdminStub> child)
    : child_(std::move(child)) {}

StatusOr<google::bigtable::admin::v2::Table>
BigtableTableAdminTracingStub::CreateTable(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::CreateTableRequest const& request) {
  return child_->CreateTable(context, request);
}

StatusOr<google::bigtable::admin::v2::ListTablesResponse>
BigtableTableAdminTracingStub::ListTables(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::ListTablesRequest const& request) {
  return child_->ListTables(context, request);
}

StatusOr<google::bigtable::admin::v2::Table>
BigtableTableAdminTracingStub::GetTable(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::GetTableRequest const& request) {
  return child_->GetTable(context, request);
}

future<StatusOr<google::longrunning::Operation>>
BigtableTableAdminTracingStub::AsyncUpdateTable(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::bigtable::admin::v2::UpdateTableRequest const& request) {
  return child_->AsyncUpdateTable(cq, std::move(context), request);
}

Status BigtableTableAdminTracingStub::DeleteTable(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::DeleteTableRequest const& request) {
  return child_->DeleteTable(context, request);
}

future<StatusOr<google::longrunning::Operation>>
BigtableTableAdminTracingStub::AsyncUndeleteTable(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::bigtable::admin::v2::UndeleteTableRequest const& request) {
  return child_->AsyncUndeleteTable(cq, std::move(context), request);
}

StatusOr<google::bigtable::admin::v2::Table>
BigtableTableAdminTracingStub::ModifyColumnFamilies(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::ModifyColumnFamiliesRequest const& request) {
  return child_->ModifyColumnFamilies(context, request);
}

Status BigtableTableAdminTracingStub::DropRowRange(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::DropRowRangeRequest const& request) {
  return child_->DropRowRange(context, request);
}

StatusOr<google::bigtable::admin::v2::GenerateConsistencyTokenResponse>
BigtableTableAdminTracingStub::GenerateConsistencyToken(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::GenerateConsistencyTokenRequest const&
        request) {
  return child_->GenerateConsistencyToken(context, request);
}

StatusOr<google::bigtable::admin::v2::CheckConsistencyResponse>
BigtableTableAdminTracingStub::CheckConsistency(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::CheckConsistencyRequest const& request) {
  return child_->CheckConsistency(context, request);
}

future<StatusOr<google::longrunning::Operation>>
BigtableTableAdminTracingStub::AsyncCreateBackup(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::bigtable::admin::v2::CreateBackupRequest const& request) {
  return child_->AsyncCreateBackup(cq, std::move(context), request);
}

StatusOr<google::bigtable::admin::v2::Backup>
BigtableTableAdminTracingStub::GetBackup(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::GetBackupRequest const& request) {
  return child_->GetBackup(context, request);
}

StatusOr<google::bigtable::admin::v2::Backup>
BigtableTableAdminTracingStub::UpdateBackup(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::UpdateBackupRequest const& request) {
  return child_->UpdateBackup(context, request);
}

Status BigtableTableAdminTracingStub::DeleteBackup(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::DeleteBackupRequest const& request) {
  return child_->DeleteBackup(context, request);
}

StatusOr<google::bigtable::admin::v2::ListBackupsResponse>
BigtableTableAdminTracingStub::ListBackups(
    grpc::ClientContext& context,
    google::bigtable::admin::v2::ListBackupsRequest const& request) {
  return child_->ListBackups(context, request);
}

future<StatusOr<google::longrunning::Operation>>
BigtableTableAdminTracingStub::AsyncRestoreTable(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::bigtable::admin::v2::RestoreTableRequest const& request) {
  return child_->AsyncRestoreTable(cq, std::move(context), request);
}

StatusOr<google::iam::v1::Policy> BigtableTableAdminTracingStub::GetIamPolicy(
    grpc::ClientContext& context,
    google::iam::v1::GetIamPolicyRequest const& request) {
  return child_->GetIamPolicy(context, request);
}

StatusOr<google::iam::v1::Policy> BigtableTableAdminTracingStub::SetIamPolicy(
    grpc::ClientContext& context,
    google::iam::v1::SetIamPolicyRequest const& request) {
  return child_->SetIamPolicy(context, request);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
BigtableTableAdminTracingStub::TestIamPermissions(
    grpc::ClientContext& context,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  return child_->TestIamPermissions(context, request);
}

future<StatusOr<google::bigtable::admin::v2::CheckConsistencyResponse>>
BigtableTableAdminTracingStub::AsyncCheckConsistency(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::bigtable::admin::v2::CheckConsistencyRequest const& request) {
  return child_->AsyncCheckConsistency(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
BigtableTableAdminTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> BigtableTableAdminTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigtable_admin_internal
}  // namespace cloud
}  // namespace google
