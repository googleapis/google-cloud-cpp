// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dataproc/v1/workflow_templates.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DATAPROC_INTERNAL_WORKFLOW_TEMPLATE_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DATAPROC_INTERNAL_WORKFLOW_TEMPLATE_CONNECTION_IMPL_H

#include "google/cloud/dataproc/internal/workflow_template_retry_traits.h"
#include "google/cloud/dataproc/internal/workflow_template_stub.h"
#include "google/cloud/dataproc/workflow_template_connection.h"
#include "google/cloud/dataproc/workflow_template_connection_idempotency_policy.h"
#include "google/cloud/dataproc/workflow_template_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace dataproc_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class WorkflowTemplateServiceConnectionImpl
    : public dataproc::WorkflowTemplateServiceConnection {
 public:
  ~WorkflowTemplateServiceConnectionImpl() override = default;

  WorkflowTemplateServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<dataproc_internal::WorkflowTemplateServiceStub> stub,
      Options options);

  Options options() override { return options_; }

  StatusOr<google::cloud::dataproc::v1::WorkflowTemplate>
  CreateWorkflowTemplate(
      google::cloud::dataproc::v1::CreateWorkflowTemplateRequest const& request)
      override;

  StatusOr<google::cloud::dataproc::v1::WorkflowTemplate> GetWorkflowTemplate(
      google::cloud::dataproc::v1::GetWorkflowTemplateRequest const& request)
      override;

  future<StatusOr<google::cloud::dataproc::v1::WorkflowMetadata>>
  InstantiateWorkflowTemplate(
      google::cloud::dataproc::v1::InstantiateWorkflowTemplateRequest const&
          request) override;

  future<StatusOr<google::cloud::dataproc::v1::WorkflowMetadata>>
  InstantiateInlineWorkflowTemplate(
      google::cloud::dataproc::v1::
          InstantiateInlineWorkflowTemplateRequest const& request) override;

  StatusOr<google::cloud::dataproc::v1::WorkflowTemplate>
  UpdateWorkflowTemplate(
      google::cloud::dataproc::v1::UpdateWorkflowTemplateRequest const& request)
      override;

  StreamRange<google::cloud::dataproc::v1::WorkflowTemplate>
  ListWorkflowTemplates(
      google::cloud::dataproc::v1::ListWorkflowTemplatesRequest request)
      override;

  Status DeleteWorkflowTemplate(
      google::cloud::dataproc::v1::DeleteWorkflowTemplateRequest const& request)
      override;

 private:
  std::unique_ptr<dataproc::WorkflowTemplateServiceRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<dataproc::WorkflowTemplateServiceRetryPolicyOption>()) {
      return options.get<dataproc::WorkflowTemplateServiceRetryPolicyOption>()
          ->clone();
    }
    return options_.get<dataproc::WorkflowTemplateServiceRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<dataproc::WorkflowTemplateServiceBackoffPolicyOption>()) {
      return options
          .get<dataproc::WorkflowTemplateServiceBackoffPolicyOption>()
          ->clone();
    }
    return options_.get<dataproc::WorkflowTemplateServiceBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<dataproc::WorkflowTemplateServiceConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            dataproc::
                WorkflowTemplateServiceConnectionIdempotencyPolicyOption>()) {
      return options
          .get<dataproc::
                   WorkflowTemplateServiceConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<dataproc::
                 WorkflowTemplateServiceConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<PollingPolicy> polling_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<dataproc::WorkflowTemplateServicePollingPolicyOption>()) {
      return options
          .get<dataproc::WorkflowTemplateServicePollingPolicyOption>()
          ->clone();
    }
    return options_.get<dataproc::WorkflowTemplateServicePollingPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<dataproc_internal::WorkflowTemplateServiceStub> stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dataproc_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_DATAPROC_INTERNAL_WORKFLOW_TEMPLATE_CONNECTION_IMPL_H
