// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/dataproc/v1/workflow_templates.proto

#include "google/cloud/dataproc/internal/workflow_template_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/dataproc/v1/workflow_templates.grpc.pb.h>
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace dataproc_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

WorkflowTemplateServiceStub::~WorkflowTemplateServiceStub() = default;

StatusOr<google::cloud::dataproc::v1::WorkflowTemplate>
DefaultWorkflowTemplateServiceStub::CreateWorkflowTemplate(
    grpc::ClientContext& client_context,
    google::cloud::dataproc::v1::CreateWorkflowTemplateRequest const& request) {
  google::cloud::dataproc::v1::WorkflowTemplate response;
  auto status =
      grpc_stub_->CreateWorkflowTemplate(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::dataproc::v1::WorkflowTemplate>
DefaultWorkflowTemplateServiceStub::GetWorkflowTemplate(
    grpc::ClientContext& client_context,
    google::cloud::dataproc::v1::GetWorkflowTemplateRequest const& request) {
  google::cloud::dataproc::v1::WorkflowTemplate response;
  auto status =
      grpc_stub_->GetWorkflowTemplate(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultWorkflowTemplateServiceStub::AsyncInstantiateWorkflowTemplate(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataproc::v1::InstantiateWorkflowTemplateRequest const&
        request) {
  return cq.MakeUnaryRpc(
      [this](
          grpc::ClientContext* context,
          google::cloud::dataproc::v1::InstantiateWorkflowTemplateRequest const&
              request,
          grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncInstantiateWorkflowTemplate(context, request,
                                                            cq);
      },
      request, std::move(context));
}

future<StatusOr<google::longrunning::Operation>>
DefaultWorkflowTemplateServiceStub::AsyncInstantiateInlineWorkflowTemplate(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::dataproc::v1::InstantiateInlineWorkflowTemplateRequest const&
        request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::cloud::dataproc::v1::
                 InstantiateInlineWorkflowTemplateRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncInstantiateInlineWorkflowTemplate(context,
                                                                  request, cq);
      },
      request, std::move(context));
}

StatusOr<google::cloud::dataproc::v1::WorkflowTemplate>
DefaultWorkflowTemplateServiceStub::UpdateWorkflowTemplate(
    grpc::ClientContext& client_context,
    google::cloud::dataproc::v1::UpdateWorkflowTemplateRequest const& request) {
  google::cloud::dataproc::v1::WorkflowTemplate response;
  auto status =
      grpc_stub_->UpdateWorkflowTemplate(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::dataproc::v1::ListWorkflowTemplatesResponse>
DefaultWorkflowTemplateServiceStub::ListWorkflowTemplates(
    grpc::ClientContext& client_context,
    google::cloud::dataproc::v1::ListWorkflowTemplatesRequest const& request) {
  google::cloud::dataproc::v1::ListWorkflowTemplatesResponse response;
  auto status =
      grpc_stub_->ListWorkflowTemplates(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultWorkflowTemplateServiceStub::DeleteWorkflowTemplate(
    grpc::ClientContext& client_context,
    google::cloud::dataproc::v1::DeleteWorkflowTemplateRequest const& request) {
  google::protobuf::Empty response;
  auto status =
      grpc_stub_->DeleteWorkflowTemplate(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

future<StatusOr<google::longrunning::Operation>>
DefaultWorkflowTemplateServiceStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return cq.MakeUnaryRpc(
      [this](grpc::ClientContext* context,
             google::longrunning::GetOperationRequest const& request,
             grpc::CompletionQueue* cq) {
        return operations_->AsyncGetOperation(context, request, cq);
      },
      request, std::move(context));
}

future<Status> DefaultWorkflowTemplateServiceStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return cq
      .MakeUnaryRpc(
          [this](grpc::ClientContext* context,
                 google::longrunning::CancelOperationRequest const& request,
                 grpc::CompletionQueue* cq) {
            return operations_->AsyncCancelOperation(context, request, cq);
          },
          request, std::move(context))
      .then([](future<StatusOr<google::protobuf::Empty>> f) {
        return f.get().status();
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace dataproc_internal
}  // namespace cloud
}  // namespace google
