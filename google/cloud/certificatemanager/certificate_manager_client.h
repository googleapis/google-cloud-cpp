// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/certificatemanager/v1/certificate_manager.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CERTIFICATEMANAGER_CERTIFICATE_MANAGER_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CERTIFICATEMANAGER_CERTIFICATE_MANAGER_CLIENT_H

#include "google/cloud/certificatemanager/certificate_manager_connection.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <map>
#include <memory>

namespace google {
namespace cloud {
namespace certificatemanager {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// API Overview
///
/// Certificates Manager API allows customers to see and manage all their TLS
/// certificates.
///
/// Certificates Manager API service provides methods to manage certificates,
/// group them into collections, and create serving configuration that can be
/// easily applied to other Cloud resources e.g. Target Proxies.
///
/// Data Model
///
/// The Certificates Manager service exposes the following resources:
///
/// * `Certificate` that describes a single TLS certificate.
/// * `CertificateMap` that describes a collection of certificates that can be
/// attached to a target resource.
/// * `CertificateMapEntry` that describes a single configuration entry that
/// consists of a SNI and a group of certificates. It's a subresource of
/// CertificateMap.
///
/// Certificate, CertificateMap and CertificateMapEntry IDs
/// have to fully match the regexp `[a-z0-9-]{1,63}`. In other words,
/// - only lower case letters, digits, and hyphen are allowed
/// - length of the resource ID has to be in [1,63] range.
///
/// Provides methods to manage Cloud Certificate Manager entities.
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class CertificateManagerClient {
 public:
  explicit CertificateManagerClient(
      std::shared_ptr<CertificateManagerConnection> connection,
      Options opts = {});
  ~CertificateManagerClient();

  ///@{
  /// @name Copy and move support
  CertificateManagerClient(CertificateManagerClient const&) = default;
  CertificateManagerClient& operator=(CertificateManagerClient const&) =
      default;
  CertificateManagerClient(CertificateManagerClient&&) = default;
  CertificateManagerClient& operator=(CertificateManagerClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(CertificateManagerClient const& a,
                         CertificateManagerClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(CertificateManagerClient const& a,
                         CertificateManagerClient const& b) {
    return !(a == b);
  }
  ///@}

  ///
  /// Lists Certificates in a given project and location.
  ///
  /// @param parent  Required. The project and location from which the
  /// certificate should be
  ///  listed, specified in the format `projects/*/locations/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::Certificate,google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  /// [google.cloud.certificatemanager.v1.ListCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L354}
  /// [google.cloud.certificatemanager.v1.Certificate]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  StreamRange<google::cloud::certificatemanager::v1::Certificate>
  ListCertificates(std::string const& parent, Options opts = {});

  ///
  /// Lists Certificates in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::ListCertificatesRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L354}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::Certificate,google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  /// [google.cloud.certificatemanager.v1.ListCertificatesRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L354}
  /// [google.cloud.certificatemanager.v1.Certificate]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  StreamRange<google::cloud::certificatemanager::v1::Certificate>
  ListCertificates(
      google::cloud::certificatemanager::v1::ListCertificatesRequest request,
      Options opts = {});

  ///
  /// Gets details of a single Certificate.
  ///
  /// @param name  Required. A name of the certificate to describe. Must be in
  /// the format
  ///  `projects/*/locations/*/certificates/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::Certificate,google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  /// [google.cloud.certificatemanager.v1.GetCertificateRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L396}
  /// [google.cloud.certificatemanager.v1.Certificate]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  StatusOr<google::cloud::certificatemanager::v1::Certificate> GetCertificate(
      std::string const& name, Options opts = {});

  ///
  /// Gets details of a single Certificate.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::GetCertificateRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L396}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::Certificate,google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  /// [google.cloud.certificatemanager.v1.GetCertificateRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L396}
  /// [google.cloud.certificatemanager.v1.Certificate]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  StatusOr<google::cloud::certificatemanager::v1::Certificate> GetCertificate(
      google::cloud::certificatemanager::v1::GetCertificateRequest const&
          request,
      Options opts = {});

  ///
  /// Creates a new Certificate in a given project and location.
  ///
  /// @param parent  Required. The parent resource of the certificate. Must be
  /// in the format
  ///  `projects/*/locations/*`.
  /// @param certificate  Required. A definition of the certificate to create.
  /// @param certificate_id  Required. A user-provided name of the certificate.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::Certificate,google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  /// [google.cloud.certificatemanager.v1.CreateCertificateRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L408}
  /// [google.cloud.certificatemanager.v1.Certificate]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::Certificate>>
  CreateCertificate(
      std::string const& parent,
      google::cloud::certificatemanager::v1::Certificate const& certificate,
      std::string const& certificate_id, Options opts = {});

  ///
  /// Creates a new Certificate in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::CreateCertificateRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L408}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::Certificate,google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  /// [google.cloud.certificatemanager.v1.CreateCertificateRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L408}
  /// [google.cloud.certificatemanager.v1.Certificate]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::Certificate>>
  CreateCertificate(
      google::cloud::certificatemanager::v1::CreateCertificateRequest const&
          request,
      Options opts = {});

  ///
  /// Updates a Certificate.
  ///
  /// @param certificate  Required. A definition of the certificate to update.
  /// @param update_mask  Required. The update mask applies to the resource. For
  /// the `FieldMask`
  ///  definition, see
  ///  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::Certificate,google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  /// [google.cloud.certificatemanager.v1.UpdateCertificateRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L426}
  /// [google.cloud.certificatemanager.v1.Certificate]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::Certificate>>
  UpdateCertificate(
      google::cloud::certificatemanager::v1::Certificate const& certificate,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  ///
  /// Updates a Certificate.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::UpdateCertificateRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L426}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::Certificate,google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  /// [google.cloud.certificatemanager.v1.UpdateCertificateRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L426}
  /// [google.cloud.certificatemanager.v1.Certificate]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L775}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::Certificate>>
  UpdateCertificate(
      google::cloud::certificatemanager::v1::UpdateCertificateRequest const&
          request,
      Options opts = {});

  ///
  /// Deletes a single Certificate.
  ///
  /// @param name  Required. A name of the certificate to delete. Must be in the
  /// format
  ///  `projects/*/locations/*/certificates/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteCertificateRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L438}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteCertificate(std::string const& name, Options opts = {});

  ///
  /// Deletes a single Certificate.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::DeleteCertificateRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L438}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteCertificateRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L438}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteCertificate(
      google::cloud::certificatemanager::v1::DeleteCertificateRequest const&
          request,
      Options opts = {});

  ///
  /// Lists CertificateMaps in a given project and location.
  ///
  /// @param parent  Required. The project and location from which the
  /// certificate maps should
  ///  be listed, specified in the format `projects/*/locations/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMap,google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  /// [google.cloud.certificatemanager.v1.ListCertificateMapsRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L450}
  /// [google.cloud.certificatemanager.v1.CertificateMap]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  StreamRange<google::cloud::certificatemanager::v1::CertificateMap>
  ListCertificateMaps(std::string const& parent, Options opts = {});

  ///
  /// Lists CertificateMaps in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::ListCertificateMapsRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L450}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMap,google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  /// [google.cloud.certificatemanager.v1.ListCertificateMapsRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L450}
  /// [google.cloud.certificatemanager.v1.CertificateMap]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  StreamRange<google::cloud::certificatemanager::v1::CertificateMap>
  ListCertificateMaps(
      google::cloud::certificatemanager::v1::ListCertificateMapsRequest request,
      Options opts = {});

  ///
  /// Gets details of a single CertificateMap.
  ///
  /// @param name  Required. A name of the certificate map to describe. Must be
  /// in the format
  ///  `projects/*/locations/*/certificateMaps/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMap,google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  /// [google.cloud.certificatemanager.v1.GetCertificateMapRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L492}
  /// [google.cloud.certificatemanager.v1.CertificateMap]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  StatusOr<google::cloud::certificatemanager::v1::CertificateMap>
  GetCertificateMap(std::string const& name, Options opts = {});

  ///
  /// Gets details of a single CertificateMap.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::GetCertificateMapRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L492}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMap,google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  /// [google.cloud.certificatemanager.v1.GetCertificateMapRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L492}
  /// [google.cloud.certificatemanager.v1.CertificateMap]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  StatusOr<google::cloud::certificatemanager::v1::CertificateMap>
  GetCertificateMap(
      google::cloud::certificatemanager::v1::GetCertificateMapRequest const&
          request,
      Options opts = {});

  ///
  /// Creates a new CertificateMap in a given project and location.
  ///
  /// @param parent  Required. The parent resource of the certificate map. Must
  /// be in the format
  ///  `projects/*/locations/*`.
  /// @param certificate_map  Required. A definition of the certificate map to
  /// create.
  /// @param certificate_map_id  Required. A user-provided name of the
  /// certificate map.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMap,google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  /// [google.cloud.certificatemanager.v1.CreateCertificateMapRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L504}
  /// [google.cloud.certificatemanager.v1.CertificateMap]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::CertificateMap>>
  CreateCertificateMap(
      std::string const& parent,
      google::cloud::certificatemanager::v1::CertificateMap const&
          certificate_map,
      std::string const& certificate_map_id, Options opts = {});

  ///
  /// Creates a new CertificateMap in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::CreateCertificateMapRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L504}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMap,google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  /// [google.cloud.certificatemanager.v1.CreateCertificateMapRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L504}
  /// [google.cloud.certificatemanager.v1.CertificateMap]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::CertificateMap>>
  CreateCertificateMap(
      google::cloud::certificatemanager::v1::CreateCertificateMapRequest const&
          request,
      Options opts = {});

  ///
  /// Updates a CertificateMap.
  ///
  /// @param certificate_map  Required. A definition of the certificate map to
  /// update.
  /// @param update_mask  Required. The update mask applies to the resource. For
  /// the `FieldMask`
  ///  definition, see
  ///  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMap,google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  /// [google.cloud.certificatemanager.v1.UpdateCertificateMapRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L522}
  /// [google.cloud.certificatemanager.v1.CertificateMap]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::CertificateMap>>
  UpdateCertificateMap(
      google::cloud::certificatemanager::v1::CertificateMap const&
          certificate_map,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  ///
  /// Updates a CertificateMap.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::UpdateCertificateMapRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L522}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMap,google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  /// [google.cloud.certificatemanager.v1.UpdateCertificateMapRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L522}
  /// [google.cloud.certificatemanager.v1.CertificateMap]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L998}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::CertificateMap>>
  UpdateCertificateMap(
      google::cloud::certificatemanager::v1::UpdateCertificateMapRequest const&
          request,
      Options opts = {});

  ///
  /// Deletes a single CertificateMap. A Certificate Map can't be deleted
  /// if it contains Certificate Map Entries. Remove all the entries from
  /// the map before calling this method.
  ///
  /// @param name  Required. A name of the certificate map to delete. Must be in
  /// the format
  ///  `projects/*/locations/*/certificateMaps/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteCertificateMapRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L534}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteCertificateMap(std::string const& name, Options opts = {});

  ///
  /// Deletes a single CertificateMap. A Certificate Map can't be deleted
  /// if it contains Certificate Map Entries. Remove all the entries from
  /// the map before calling this method.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::DeleteCertificateMapRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L534}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteCertificateMapRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L534}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteCertificateMap(
      google::cloud::certificatemanager::v1::DeleteCertificateMapRequest const&
          request,
      Options opts = {});

  ///
  /// Lists CertificateMapEntries in a given project and location.
  ///
  /// @param parent  Required. The project, location and certificate map from
  /// which the
  ///  certificate map entries should be listed, specified in the format
  ///  `projects/*/locations/*/certificateMaps/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMapEntry,google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  /// [google.cloud.certificatemanager.v1.ListCertificateMapEntriesRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L546}
  /// [google.cloud.certificatemanager.v1.CertificateMapEntry]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  StreamRange<google::cloud::certificatemanager::v1::CertificateMapEntry>
  ListCertificateMapEntries(std::string const& parent, Options opts = {});

  ///
  /// Lists CertificateMapEntries in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::ListCertificateMapEntriesRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L546}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMapEntry,google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  /// [google.cloud.certificatemanager.v1.ListCertificateMapEntriesRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L546}
  /// [google.cloud.certificatemanager.v1.CertificateMapEntry]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  StreamRange<google::cloud::certificatemanager::v1::CertificateMapEntry>
  ListCertificateMapEntries(
      google::cloud::certificatemanager::v1::ListCertificateMapEntriesRequest
          request,
      Options opts = {});

  ///
  /// Gets details of a single CertificateMapEntry.
  ///
  /// @param name  Required. A name of the certificate map entry to describe.
  /// Must be in the
  ///  format
  ///  `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMapEntry,google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  /// [google.cloud.certificatemanager.v1.GetCertificateMapEntryRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L593}
  /// [google.cloud.certificatemanager.v1.CertificateMapEntry]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>
  GetCertificateMapEntry(std::string const& name, Options opts = {});

  ///
  /// Gets details of a single CertificateMapEntry.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::GetCertificateMapEntryRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L593}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMapEntry,google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  /// [google.cloud.certificatemanager.v1.GetCertificateMapEntryRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L593}
  /// [google.cloud.certificatemanager.v1.CertificateMapEntry]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>
  GetCertificateMapEntry(google::cloud::certificatemanager::v1::
                             GetCertificateMapEntryRequest const& request,
                         Options opts = {});

  ///
  /// Creates a new CertificateMapEntry in a given project and location.
  ///
  /// @param parent  Required. The parent resource of the certificate map entry.
  /// Must be in the
  ///  format `projects/*/locations/*/certificateMaps/*`.
  /// @param certificate_map_entry  Required. A definition of the certificate
  /// map entry to create.
  /// @param certificate_map_entry_id  Required. A user-provided name of the
  /// certificate map entry.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMapEntry,google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  /// [google.cloud.certificatemanager.v1.CreateCertificateMapEntryRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L605}
  /// [google.cloud.certificatemanager.v1.CertificateMapEntry]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>>
  CreateCertificateMapEntry(
      std::string const& parent,
      google::cloud::certificatemanager::v1::CertificateMapEntry const&
          certificate_map_entry,
      std::string const& certificate_map_entry_id, Options opts = {});

  ///
  /// Creates a new CertificateMapEntry in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::CreateCertificateMapEntryRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L605}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMapEntry,google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  /// [google.cloud.certificatemanager.v1.CreateCertificateMapEntryRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L605}
  /// [google.cloud.certificatemanager.v1.CertificateMapEntry]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>>
  CreateCertificateMapEntry(google::cloud::certificatemanager::v1::
                                CreateCertificateMapEntryRequest const& request,
                            Options opts = {});

  ///
  /// Updates a CertificateMapEntry.
  ///
  /// @param certificate_map_entry  Required. A definition of the certificate
  /// map entry to create map entry.
  /// @param update_mask  Required. The update mask applies to the resource. For
  /// the `FieldMask`
  ///  definition, see
  ///  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMapEntry,google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  /// [google.cloud.certificatemanager.v1.UpdateCertificateMapEntryRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L624}
  /// [google.cloud.certificatemanager.v1.CertificateMapEntry]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>>
  UpdateCertificateMapEntry(
      google::cloud::certificatemanager::v1::CertificateMapEntry const&
          certificate_map_entry,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  ///
  /// Updates a CertificateMapEntry.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::UpdateCertificateMapEntryRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L624}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateMapEntry,google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  /// [google.cloud.certificatemanager.v1.UpdateCertificateMapEntryRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L624}
  /// [google.cloud.certificatemanager.v1.CertificateMapEntry]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1061}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>>
  UpdateCertificateMapEntry(google::cloud::certificatemanager::v1::
                                UpdateCertificateMapEntryRequest const& request,
                            Options opts = {});

  ///
  /// Deletes a single CertificateMapEntry.
  ///
  /// @param name  Required. A name of the certificate map entry to delete. Must
  /// be in the
  ///  format
  ///  `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteCertificateMapEntryRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L637}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteCertificateMapEntry(std::string const& name, Options opts = {});

  ///
  /// Deletes a single CertificateMapEntry.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::DeleteCertificateMapEntryRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L637}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteCertificateMapEntryRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L637}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteCertificateMapEntry(google::cloud::certificatemanager::v1::
                                DeleteCertificateMapEntryRequest const& request,
                            Options opts = {});

  ///
  /// Lists DnsAuthorizations in a given project and location.
  ///
  /// @param parent  Required. The project and location from which the dns
  /// authorizations should
  ///  be listed, specified in the format `projects/*/locations/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::DnsAuthorization,google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  /// [google.cloud.certificatemanager.v1.ListDnsAuthorizationsRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L649}
  /// [google.cloud.certificatemanager.v1.DnsAuthorization]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  StreamRange<google::cloud::certificatemanager::v1::DnsAuthorization>
  ListDnsAuthorizations(std::string const& parent, Options opts = {});

  ///
  /// Lists DnsAuthorizations in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::ListDnsAuthorizationsRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L649}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::DnsAuthorization,google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  /// [google.cloud.certificatemanager.v1.ListDnsAuthorizationsRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L649}
  /// [google.cloud.certificatemanager.v1.DnsAuthorization]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  StreamRange<google::cloud::certificatemanager::v1::DnsAuthorization>
  ListDnsAuthorizations(
      google::cloud::certificatemanager::v1::ListDnsAuthorizationsRequest
          request,
      Options opts = {});

  ///
  /// Gets details of a single DnsAuthorization.
  ///
  /// @param name  Required. A name of the dns authorization to describe. Must
  /// be in the
  ///  format `projects/*/locations/*/dnsAuthorizations/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::DnsAuthorization,google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  /// [google.cloud.certificatemanager.v1.GetDnsAuthorizationRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L691}
  /// [google.cloud.certificatemanager.v1.DnsAuthorization]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>
  GetDnsAuthorization(std::string const& name, Options opts = {});

  ///
  /// Gets details of a single DnsAuthorization.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::GetDnsAuthorizationRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L691}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::DnsAuthorization,google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  /// [google.cloud.certificatemanager.v1.GetDnsAuthorizationRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L691}
  /// [google.cloud.certificatemanager.v1.DnsAuthorization]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>
  GetDnsAuthorization(
      google::cloud::certificatemanager::v1::GetDnsAuthorizationRequest const&
          request,
      Options opts = {});

  ///
  /// Creates a new DnsAuthorization in a given project and location.
  ///
  /// @param parent  Required. The parent resource of the dns authorization.
  /// Must be in the
  ///  format `projects/*/locations/*`.
  /// @param dns_authorization  Required. A definition of the dns authorization
  /// to create.
  /// @param dns_authorization_id  Required. A user-provided name of the dns
  /// authorization.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::DnsAuthorization,google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  /// [google.cloud.certificatemanager.v1.CreateDnsAuthorizationRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L703}
  /// [google.cloud.certificatemanager.v1.DnsAuthorization]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>>
  CreateDnsAuthorization(
      std::string const& parent,
      google::cloud::certificatemanager::v1::DnsAuthorization const&
          dns_authorization,
      std::string const& dns_authorization_id, Options opts = {});

  ///
  /// Creates a new DnsAuthorization in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::CreateDnsAuthorizationRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L703}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::DnsAuthorization,google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  /// [google.cloud.certificatemanager.v1.CreateDnsAuthorizationRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L703}
  /// [google.cloud.certificatemanager.v1.DnsAuthorization]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>>
  CreateDnsAuthorization(google::cloud::certificatemanager::v1::
                             CreateDnsAuthorizationRequest const& request,
                         Options opts = {});

  ///
  /// Updates a DnsAuthorization.
  ///
  /// @param dns_authorization  Required. A definition of the dns authorization
  /// to update.
  /// @param update_mask  Required. The update mask applies to the resource. For
  /// the `FieldMask`
  ///  definition, see
  ///  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::DnsAuthorization,google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  /// [google.cloud.certificatemanager.v1.UpdateDnsAuthorizationRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L722}
  /// [google.cloud.certificatemanager.v1.DnsAuthorization]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>>
  UpdateDnsAuthorization(
      google::cloud::certificatemanager::v1::DnsAuthorization const&
          dns_authorization,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  ///
  /// Updates a DnsAuthorization.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::UpdateDnsAuthorizationRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L722}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::DnsAuthorization,google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  /// [google.cloud.certificatemanager.v1.UpdateDnsAuthorizationRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L722}
  /// [google.cloud.certificatemanager.v1.DnsAuthorization]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L1120}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>>
  UpdateDnsAuthorization(google::cloud::certificatemanager::v1::
                             UpdateDnsAuthorizationRequest const& request,
                         Options opts = {});

  ///
  /// Deletes a single DnsAuthorization.
  ///
  /// @param name  Required. A name of the dns authorization to delete. Must be
  /// in the format
  ///  `projects/*/locations/*/dnsAuthorizations/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteDnsAuthorizationRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L735}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteDnsAuthorization(std::string const& name, Options opts = {});

  ///
  /// Deletes a single DnsAuthorization.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::DeleteDnsAuthorizationRequest,google/cloud/certificatemanager/v1/certificate_manager.proto#L735}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteDnsAuthorizationRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L735}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteDnsAuthorization(google::cloud::certificatemanager::v1::
                             DeleteDnsAuthorizationRequest const& request,
                         Options opts = {});

  ///
  /// Lists CertificateIssuanceConfigs in a given project and location.
  ///
  /// @param parent  Required. The project and location from which the
  /// certificate should be
  ///  listed, specified in the format `projects/*/locations/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateIssuanceConfig,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  /// [google.cloud.certificatemanager.v1.ListCertificateIssuanceConfigsRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L37}
  /// [google.cloud.certificatemanager.v1.CertificateIssuanceConfig]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  StreamRange<google::cloud::certificatemanager::v1::CertificateIssuanceConfig>
  ListCertificateIssuanceConfigs(std::string const& parent, Options opts = {});

  ///
  /// Lists CertificateIssuanceConfigs in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::ListCertificateIssuanceConfigsRequest,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L37}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateIssuanceConfig,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  /// [google.cloud.certificatemanager.v1.ListCertificateIssuanceConfigsRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L37}
  /// [google.cloud.certificatemanager.v1.CertificateIssuanceConfig]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  StreamRange<google::cloud::certificatemanager::v1::CertificateIssuanceConfig>
  ListCertificateIssuanceConfigs(
      google::cloud::certificatemanager::v1::
          ListCertificateIssuanceConfigsRequest request,
      Options opts = {});

  ///
  /// Gets details of a single CertificateIssuanceConfig.
  ///
  /// @param name  Required. A name of the certificate issuance config to
  /// describe. Must be in
  ///  the format `projects/*/locations/*/certificateIssuanceConfigs/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateIssuanceConfig,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  /// [google.cloud.certificatemanager.v1.GetCertificateIssuanceConfigRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L80}
  /// [google.cloud.certificatemanager.v1.CertificateIssuanceConfig]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  StatusOr<google::cloud::certificatemanager::v1::CertificateIssuanceConfig>
  GetCertificateIssuanceConfig(std::string const& name, Options opts = {});

  ///
  /// Gets details of a single CertificateIssuanceConfig.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::GetCertificateIssuanceConfigRequest,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L80}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateIssuanceConfig,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  /// [google.cloud.certificatemanager.v1.GetCertificateIssuanceConfigRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L80}
  /// [google.cloud.certificatemanager.v1.CertificateIssuanceConfig]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  StatusOr<google::cloud::certificatemanager::v1::CertificateIssuanceConfig>
  GetCertificateIssuanceConfig(
      google::cloud::certificatemanager::v1::
          GetCertificateIssuanceConfigRequest const& request,
      Options opts = {});

  ///
  /// Creates a new CertificateIssuanceConfig in a given project and location.
  ///
  /// @param parent  Required. The parent resource of the certificate issuance
  /// config. Must be
  ///  in the format `projects/*/locations/*`.
  /// @param certificate_issuance_config  Required. A definition of the
  /// certificate issuance config to create.
  /// @param certificate_issuance_config_id  Required. A user-provided name of
  /// the certificate config.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateIssuanceConfig,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  /// [google.cloud.certificatemanager.v1.CreateCertificateIssuanceConfigRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L92}
  /// [google.cloud.certificatemanager.v1.CertificateIssuanceConfig]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  future<StatusOr<
      google::cloud::certificatemanager::v1::CertificateIssuanceConfig>>
  CreateCertificateIssuanceConfig(
      std::string const& parent,
      google::cloud::certificatemanager::v1::CertificateIssuanceConfig const&
          certificate_issuance_config,
      std::string const& certificate_issuance_config_id, Options opts = {});

  ///
  /// Creates a new CertificateIssuanceConfig in a given project and location.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::CreateCertificateIssuanceConfigRequest,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L92}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::CertificateIssuanceConfig,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  /// [google.cloud.certificatemanager.v1.CreateCertificateIssuanceConfigRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L92}
  /// [google.cloud.certificatemanager.v1.CertificateIssuanceConfig]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L124}
  ///
  future<StatusOr<
      google::cloud::certificatemanager::v1::CertificateIssuanceConfig>>
  CreateCertificateIssuanceConfig(
      google::cloud::certificatemanager::v1::
          CreateCertificateIssuanceConfigRequest const& request,
      Options opts = {});

  ///
  /// Deletes a single CertificateIssuanceConfig.
  ///
  /// @param name  Required. A name of the certificate issuance config to
  /// delete. Must be in
  ///  the format `projects/*/locations/*/certificateIssuanceConfigs/*`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteCertificateIssuanceConfigRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L112}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteCertificateIssuanceConfig(std::string const& name, Options opts = {});

  ///
  /// Deletes a single CertificateIssuanceConfig.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::certificatemanager::v1::DeleteCertificateIssuanceConfigRequest,google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L112}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::certificatemanager::v1::OperationMetadata,google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  /// [google.cloud.certificatemanager.v1.DeleteCertificateIssuanceConfigRequest]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_issuance_config.proto#L112}
  /// [google.cloud.certificatemanager.v1.OperationMetadata]:
  /// @googleapis_reference_link{google/cloud/certificatemanager/v1/certificate_manager.proto#L747}
  ///
  future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
  DeleteCertificateIssuanceConfig(
      google::cloud::certificatemanager::v1::
          DeleteCertificateIssuanceConfigRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<CertificateManagerConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace certificatemanager
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CERTIFICATEMANAGER_CERTIFICATE_MANAGER_CLIENT_H
