// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/certificatemanager/v1/certificate_manager.proto

#include "google/cloud/certificatemanager/internal/certificate_manager_tracing_stub.h"

namespace google {
namespace cloud {
namespace certificatemanager_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

CertificateManagerTracingStub::CertificateManagerTracingStub(
    std::shared_ptr<CertificateManagerStub> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::certificatemanager::v1::ListCertificatesResponse>
CertificateManagerTracingStub::ListCertificates(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::ListCertificatesRequest const&
        request) {
  return child_->ListCertificates(context, request);
}

StatusOr<google::cloud::certificatemanager::v1::Certificate>
CertificateManagerTracingStub::GetCertificate(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::GetCertificateRequest const&
        request) {
  return child_->GetCertificate(context, request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncCreateCertificate(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::CreateCertificateRequest const&
        request) {
  return child_->AsyncCreateCertificate(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncUpdateCertificate(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::UpdateCertificateRequest const&
        request) {
  return child_->AsyncUpdateCertificate(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncDeleteCertificate(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::DeleteCertificateRequest const&
        request) {
  return child_->AsyncDeleteCertificate(cq, std::move(context), request);
}

StatusOr<google::cloud::certificatemanager::v1::ListCertificateMapsResponse>
CertificateManagerTracingStub::ListCertificateMaps(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::ListCertificateMapsRequest const&
        request) {
  return child_->ListCertificateMaps(context, request);
}

StatusOr<google::cloud::certificatemanager::v1::CertificateMap>
CertificateManagerTracingStub::GetCertificateMap(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::GetCertificateMapRequest const&
        request) {
  return child_->GetCertificateMap(context, request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncCreateCertificateMap(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::CreateCertificateMapRequest const&
        request) {
  return child_->AsyncCreateCertificateMap(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncUpdateCertificateMap(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::UpdateCertificateMapRequest const&
        request) {
  return child_->AsyncUpdateCertificateMap(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncDeleteCertificateMap(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::DeleteCertificateMapRequest const&
        request) {
  return child_->AsyncDeleteCertificateMap(cq, std::move(context), request);
}

StatusOr<
    google::cloud::certificatemanager::v1::ListCertificateMapEntriesResponse>
CertificateManagerTracingStub::ListCertificateMapEntries(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::
        ListCertificateMapEntriesRequest const& request) {
  return child_->ListCertificateMapEntries(context, request);
}

StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>
CertificateManagerTracingStub::GetCertificateMapEntry(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::GetCertificateMapEntryRequest const&
        request) {
  return child_->GetCertificateMapEntry(context, request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncCreateCertificateMapEntry(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::
        CreateCertificateMapEntryRequest const& request) {
  return child_->AsyncCreateCertificateMapEntry(cq, std::move(context),
                                                request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncUpdateCertificateMapEntry(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::
        UpdateCertificateMapEntryRequest const& request) {
  return child_->AsyncUpdateCertificateMapEntry(cq, std::move(context),
                                                request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncDeleteCertificateMapEntry(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::
        DeleteCertificateMapEntryRequest const& request) {
  return child_->AsyncDeleteCertificateMapEntry(cq, std::move(context),
                                                request);
}

StatusOr<google::cloud::certificatemanager::v1::ListDnsAuthorizationsResponse>
CertificateManagerTracingStub::ListDnsAuthorizations(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::ListDnsAuthorizationsRequest const&
        request) {
  return child_->ListDnsAuthorizations(context, request);
}

StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>
CertificateManagerTracingStub::GetDnsAuthorization(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::GetDnsAuthorizationRequest const&
        request) {
  return child_->GetDnsAuthorization(context, request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncCreateDnsAuthorization(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::CreateDnsAuthorizationRequest const&
        request) {
  return child_->AsyncCreateDnsAuthorization(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncUpdateDnsAuthorization(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::UpdateDnsAuthorizationRequest const&
        request) {
  return child_->AsyncUpdateDnsAuthorization(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncDeleteDnsAuthorization(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::DeleteDnsAuthorizationRequest const&
        request) {
  return child_->AsyncDeleteDnsAuthorization(cq, std::move(context), request);
}

StatusOr<google::cloud::certificatemanager::v1::
             ListCertificateIssuanceConfigsResponse>
CertificateManagerTracingStub::ListCertificateIssuanceConfigs(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::
        ListCertificateIssuanceConfigsRequest const& request) {
  return child_->ListCertificateIssuanceConfigs(context, request);
}

StatusOr<google::cloud::certificatemanager::v1::CertificateIssuanceConfig>
CertificateManagerTracingStub::GetCertificateIssuanceConfig(
    grpc::ClientContext& context,
    google::cloud::certificatemanager::v1::
        GetCertificateIssuanceConfigRequest const& request) {
  return child_->GetCertificateIssuanceConfig(context, request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncCreateCertificateIssuanceConfig(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::
        CreateCertificateIssuanceConfigRequest const& request) {
  return child_->AsyncCreateCertificateIssuanceConfig(cq, std::move(context),
                                                      request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncDeleteCertificateIssuanceConfig(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::certificatemanager::v1::
        DeleteCertificateIssuanceConfigRequest const& request) {
  return child_->AsyncDeleteCertificateIssuanceConfig(cq, std::move(context),
                                                      request);
}

future<StatusOr<google::longrunning::Operation>>
CertificateManagerTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> CertificateManagerTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace certificatemanager_internal
}  // namespace cloud
}  // namespace google
