// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/certificatemanager/v1/certificate_manager.proto

#include "google/cloud/certificatemanager/v1/internal/certificate_manager_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace certificatemanager_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

CertificateManagerTracingConnection::CertificateManagerTracingConnection(
    std::shared_ptr<certificatemanager_v1::CertificateManagerConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::certificatemanager::v1::Certificate>
CertificateManagerTracingConnection::ListCertificates(
    google::cloud::certificatemanager::v1::ListCertificatesRequest request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::ListCertificates");
  internal::OTelScope scope(span);
  auto sr = child_->ListCertificates(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::certificatemanager::v1::Certificate>(std::move(span),
                                                          std::move(sr));
}

StatusOr<google::cloud::certificatemanager::v1::Certificate>
CertificateManagerTracingConnection::GetCertificate(
    google::cloud::certificatemanager::v1::GetCertificateRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::GetCertificate");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetCertificate(request));
}

future<StatusOr<google::cloud::certificatemanager::v1::Certificate>>
CertificateManagerTracingConnection::CreateCertificate(
    google::cloud::certificatemanager::v1::CreateCertificateRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::CreateCertificate");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->CreateCertificate(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::CreateCertificate(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::CreateCertificateRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::CreateCertificate");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->CreateCertificate(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::Certificate>>
CertificateManagerTracingConnection::CreateCertificate(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::CreateCertificate");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->CreateCertificate(ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::Certificate>>
CertificateManagerTracingConnection::UpdateCertificate(
    google::cloud::certificatemanager::v1::UpdateCertificateRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::UpdateCertificate");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateCertificate(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::UpdateCertificate(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::UpdateCertificateRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::UpdateCertificate");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->UpdateCertificate(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::Certificate>>
CertificateManagerTracingConnection::UpdateCertificate(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::UpdateCertificate");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->UpdateCertificate(ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteCertificate(
    google::cloud::certificatemanager::v1::DeleteCertificateRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::DeleteCertificate");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteCertificate(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::DeleteCertificate(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::DeleteCertificateRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::DeleteCertificate");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->DeleteCertificate(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteCertificate(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::DeleteCertificate");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->DeleteCertificate(ExperimentalTag{}, operation));
}

StreamRange<google::cloud::certificatemanager::v1::CertificateMap>
CertificateManagerTracingConnection::ListCertificateMaps(
    google::cloud::certificatemanager::v1::ListCertificateMapsRequest request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "ListCertificateMaps");
  internal::OTelScope scope(span);
  auto sr = child_->ListCertificateMaps(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::certificatemanager::v1::CertificateMap>(std::move(span),
                                                             std::move(sr));
}

StatusOr<google::cloud::certificatemanager::v1::CertificateMap>
CertificateManagerTracingConnection::GetCertificateMap(
    google::cloud::certificatemanager::v1::GetCertificateMapRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::GetCertificateMap");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetCertificateMap(request));
}

future<StatusOr<google::cloud::certificatemanager::v1::CertificateMap>>
CertificateManagerTracingConnection::CreateCertificateMap(
    google::cloud::certificatemanager::v1::CreateCertificateMapRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateCertificateMap");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreateCertificateMap(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::CreateCertificateMap(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::CreateCertificateMapRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateCertificateMap");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->CreateCertificateMap(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::CertificateMap>>
CertificateManagerTracingConnection::CreateCertificateMap(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateCertificateMap");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->CreateCertificateMap(
                                                ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::CertificateMap>>
CertificateManagerTracingConnection::UpdateCertificateMap(
    google::cloud::certificatemanager::v1::UpdateCertificateMapRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "UpdateCertificateMap");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->UpdateCertificateMap(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::UpdateCertificateMap(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::UpdateCertificateMapRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "UpdateCertificateMap");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->UpdateCertificateMap(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::CertificateMap>>
CertificateManagerTracingConnection::UpdateCertificateMap(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "UpdateCertificateMap");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateCertificateMap(
                                                ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteCertificateMap(
    google::cloud::certificatemanager::v1::DeleteCertificateMapRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteCertificateMap");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeleteCertificateMap(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::DeleteCertificateMap(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::DeleteCertificateMapRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteCertificateMap");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->DeleteCertificateMap(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteCertificateMap(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteCertificateMap");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteCertificateMap(
                                                ExperimentalTag{}, operation));
}

StreamRange<google::cloud::certificatemanager::v1::CertificateMapEntry>
CertificateManagerTracingConnection::ListCertificateMapEntries(
    google::cloud::certificatemanager::v1::ListCertificateMapEntriesRequest
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "ListCertificateMapEntries");
  internal::OTelScope scope(span);
  auto sr = child_->ListCertificateMapEntries(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::certificatemanager::v1::CertificateMapEntry>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>
CertificateManagerTracingConnection::GetCertificateMapEntry(
    google::cloud::certificatemanager::v1::GetCertificateMapEntryRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "GetCertificateMapEntry");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetCertificateMapEntry(request));
}

future<StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>>
CertificateManagerTracingConnection::CreateCertificateMapEntry(
    google::cloud::certificatemanager::v1::
        CreateCertificateMapEntryRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateCertificateMapEntry");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreateCertificateMapEntry(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::CreateCertificateMapEntry(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::
        CreateCertificateMapEntryRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateCertificateMapEntry");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->CreateCertificateMapEntry(ExperimentalTag{}, NoAwaitTag{},
                                               request));
}

future<StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>>
CertificateManagerTracingConnection::CreateCertificateMapEntry(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateCertificateMapEntry");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->CreateCertificateMapEntry(
                                                ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>>
CertificateManagerTracingConnection::UpdateCertificateMapEntry(
    google::cloud::certificatemanager::v1::
        UpdateCertificateMapEntryRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "UpdateCertificateMapEntry");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->UpdateCertificateMapEntry(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::UpdateCertificateMapEntry(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::
        UpdateCertificateMapEntryRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "UpdateCertificateMapEntry");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->UpdateCertificateMapEntry(ExperimentalTag{}, NoAwaitTag{},
                                               request));
}

future<StatusOr<google::cloud::certificatemanager::v1::CertificateMapEntry>>
CertificateManagerTracingConnection::UpdateCertificateMapEntry(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "UpdateCertificateMapEntry");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateCertificateMapEntry(
                                                ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteCertificateMapEntry(
    google::cloud::certificatemanager::v1::
        DeleteCertificateMapEntryRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteCertificateMapEntry");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeleteCertificateMapEntry(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::DeleteCertificateMapEntry(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::
        DeleteCertificateMapEntryRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteCertificateMapEntry");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->DeleteCertificateMapEntry(ExperimentalTag{}, NoAwaitTag{},
                                               request));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteCertificateMapEntry(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteCertificateMapEntry");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteCertificateMapEntry(
                                                ExperimentalTag{}, operation));
}

StreamRange<google::cloud::certificatemanager::v1::DnsAuthorization>
CertificateManagerTracingConnection::ListDnsAuthorizations(
    google::cloud::certificatemanager::v1::ListDnsAuthorizationsRequest
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "ListDnsAuthorizations");
  internal::OTelScope scope(span);
  auto sr = child_->ListDnsAuthorizations(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::certificatemanager::v1::DnsAuthorization>(std::move(span),
                                                               std::move(sr));
}

StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>
CertificateManagerTracingConnection::GetDnsAuthorization(
    google::cloud::certificatemanager::v1::GetDnsAuthorizationRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "GetDnsAuthorization");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetDnsAuthorization(request));
}

future<StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>>
CertificateManagerTracingConnection::CreateDnsAuthorization(
    google::cloud::certificatemanager::v1::CreateDnsAuthorizationRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateDnsAuthorization");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreateDnsAuthorization(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::CreateDnsAuthorization(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::CreateDnsAuthorizationRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateDnsAuthorization");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->CreateDnsAuthorization(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>>
CertificateManagerTracingConnection::CreateDnsAuthorization(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateDnsAuthorization");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->CreateDnsAuthorization(
                                                ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>>
CertificateManagerTracingConnection::UpdateDnsAuthorization(
    google::cloud::certificatemanager::v1::UpdateDnsAuthorizationRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "UpdateDnsAuthorization");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->UpdateDnsAuthorization(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::UpdateDnsAuthorization(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::UpdateDnsAuthorizationRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "UpdateDnsAuthorization");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->UpdateDnsAuthorization(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::DnsAuthorization>>
CertificateManagerTracingConnection::UpdateDnsAuthorization(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "UpdateDnsAuthorization");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateDnsAuthorization(
                                                ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteDnsAuthorization(
    google::cloud::certificatemanager::v1::DeleteDnsAuthorizationRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteDnsAuthorization");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeleteDnsAuthorization(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::DeleteDnsAuthorization(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::DeleteDnsAuthorizationRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteDnsAuthorization");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->DeleteDnsAuthorization(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteDnsAuthorization(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteDnsAuthorization");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteDnsAuthorization(
                                                ExperimentalTag{}, operation));
}

StreamRange<google::cloud::certificatemanager::v1::CertificateIssuanceConfig>
CertificateManagerTracingConnection::ListCertificateIssuanceConfigs(
    google::cloud::certificatemanager::v1::ListCertificateIssuanceConfigsRequest
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "ListCertificateIssuanceConfigs");
  internal::OTelScope scope(span);
  auto sr = child_->ListCertificateIssuanceConfigs(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::certificatemanager::v1::CertificateIssuanceConfig>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::certificatemanager::v1::CertificateIssuanceConfig>
CertificateManagerTracingConnection::GetCertificateIssuanceConfig(
    google::cloud::certificatemanager::v1::
        GetCertificateIssuanceConfigRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "GetCertificateIssuanceConfig");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span,
                           child_->GetCertificateIssuanceConfig(request));
}

future<
    StatusOr<google::cloud::certificatemanager::v1::CertificateIssuanceConfig>>
CertificateManagerTracingConnection::CreateCertificateIssuanceConfig(
    google::cloud::certificatemanager::v1::
        CreateCertificateIssuanceConfigRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateCertificateIssuanceConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->CreateCertificateIssuanceConfig(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::CreateCertificateIssuanceConfig(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::
        CreateCertificateIssuanceConfigRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateCertificateIssuanceConfig");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->CreateCertificateIssuanceConfig(ExperimentalTag{},
                                                     NoAwaitTag{}, request));
}

future<
    StatusOr<google::cloud::certificatemanager::v1::CertificateIssuanceConfig>>
CertificateManagerTracingConnection::CreateCertificateIssuanceConfig(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "CreateCertificateIssuanceConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span),
      child_->CreateCertificateIssuanceConfig(ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteCertificateIssuanceConfig(
    google::cloud::certificatemanager::v1::
        DeleteCertificateIssuanceConfigRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteCertificateIssuanceConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span),
                           child_->DeleteCertificateIssuanceConfig(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::DeleteCertificateIssuanceConfig(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::
        DeleteCertificateIssuanceConfigRequest const& request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteCertificateIssuanceConfig");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span, child_->DeleteCertificateIssuanceConfig(ExperimentalTag{},
                                                     NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteCertificateIssuanceConfig(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::"
      "DeleteCertificateIssuanceConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span),
      child_->DeleteCertificateIssuanceConfig(ExperimentalTag{}, operation));
}

StreamRange<google::cloud::certificatemanager::v1::TrustConfig>
CertificateManagerTracingConnection::ListTrustConfigs(
    google::cloud::certificatemanager::v1::ListTrustConfigsRequest request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::ListTrustConfigs");
  internal::OTelScope scope(span);
  auto sr = child_->ListTrustConfigs(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::certificatemanager::v1::TrustConfig>(std::move(span),
                                                          std::move(sr));
}

StatusOr<google::cloud::certificatemanager::v1::TrustConfig>
CertificateManagerTracingConnection::GetTrustConfig(
    google::cloud::certificatemanager::v1::GetTrustConfigRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::GetTrustConfig");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetTrustConfig(request));
}

future<StatusOr<google::cloud::certificatemanager::v1::TrustConfig>>
CertificateManagerTracingConnection::CreateTrustConfig(
    google::cloud::certificatemanager::v1::CreateTrustConfigRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::CreateTrustConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->CreateTrustConfig(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::CreateTrustConfig(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::CreateTrustConfigRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::CreateTrustConfig");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->CreateTrustConfig(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::TrustConfig>>
CertificateManagerTracingConnection::CreateTrustConfig(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::CreateTrustConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->CreateTrustConfig(ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::TrustConfig>>
CertificateManagerTracingConnection::UpdateTrustConfig(
    google::cloud::certificatemanager::v1::UpdateTrustConfigRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::UpdateTrustConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->UpdateTrustConfig(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::UpdateTrustConfig(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::UpdateTrustConfigRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::UpdateTrustConfig");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->UpdateTrustConfig(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::TrustConfig>>
CertificateManagerTracingConnection::UpdateTrustConfig(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::UpdateTrustConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->UpdateTrustConfig(ExperimentalTag{}, operation));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteTrustConfig(
    google::cloud::certificatemanager::v1::DeleteTrustConfigRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::DeleteTrustConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(std::move(span), child_->DeleteTrustConfig(request));
}

StatusOr<google::longrunning::Operation>
CertificateManagerTracingConnection::DeleteTrustConfig(
    ExperimentalTag, NoAwaitTag,
    google::cloud::certificatemanager::v1::DeleteTrustConfigRequest const&
        request) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::DeleteTrustConfig");
  opentelemetry::trace::Scope scope(span);
  return internal::EndSpan(
      *span,
      child_->DeleteTrustConfig(ExperimentalTag{}, NoAwaitTag{}, request));
}

future<StatusOr<google::cloud::certificatemanager::v1::OperationMetadata>>
CertificateManagerTracingConnection::DeleteTrustConfig(
    ExperimentalTag, google::longrunning::Operation const& operation) {
  auto span = internal::MakeSpan(
      "certificatemanager_v1::CertificateManagerConnection::DeleteTrustConfig");
  internal::OTelScope scope(span);
  return internal::EndSpan(
      std::move(span), child_->DeleteTrustConfig(ExperimentalTag{}, operation));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<certificatemanager_v1::CertificateManagerConnection>
MakeCertificateManagerTracingConnection(
    std::shared_ptr<certificatemanager_v1::CertificateManagerConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn =
        std::make_shared<CertificateManagerTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace certificatemanager_v1_internal
}  // namespace cloud
}  // namespace google
