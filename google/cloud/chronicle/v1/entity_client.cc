// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/entity.proto

#include "google/cloud/chronicle/v1/entity_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace chronicle_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

EntityServiceClient::EntityServiceClient(
    std::shared_ptr<EntityServiceConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
EntityServiceClient::~EntityServiceClient() = default;

StatusOr<google::cloud::chronicle::v1::Watchlist>
EntityServiceClient::GetWatchlist(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::GetWatchlistRequest request;
  request.set_name(name);
  return connection_->GetWatchlist(request);
}

StatusOr<google::cloud::chronicle::v1::Watchlist>
EntityServiceClient::GetWatchlist(
    google::cloud::chronicle::v1::GetWatchlistRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetWatchlist(request);
}

StreamRange<google::cloud::chronicle::v1::Watchlist>
EntityServiceClient::ListWatchlists(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::ListWatchlistsRequest request;
  request.set_parent(parent);
  return connection_->ListWatchlists(request);
}

StreamRange<google::cloud::chronicle::v1::Watchlist>
EntityServiceClient::ListWatchlists(
    google::cloud::chronicle::v1::ListWatchlistsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListWatchlists(std::move(request));
}

StatusOr<google::cloud::chronicle::v1::Watchlist>
EntityServiceClient::CreateWatchlist(
    std::string const& parent,
    google::cloud::chronicle::v1::Watchlist const& watchlist,
    std::string const& watchlist_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::CreateWatchlistRequest request;
  request.set_parent(parent);
  *request.mutable_watchlist() = watchlist;
  request.set_watchlist_id(watchlist_id);
  return connection_->CreateWatchlist(request);
}

StatusOr<google::cloud::chronicle::v1::Watchlist>
EntityServiceClient::CreateWatchlist(
    google::cloud::chronicle::v1::CreateWatchlistRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateWatchlist(request);
}

StatusOr<google::cloud::chronicle::v1::Watchlist>
EntityServiceClient::UpdateWatchlist(
    google::cloud::chronicle::v1::Watchlist const& watchlist,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::UpdateWatchlistRequest request;
  *request.mutable_watchlist() = watchlist;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateWatchlist(request);
}

StatusOr<google::cloud::chronicle::v1::Watchlist>
EntityServiceClient::UpdateWatchlist(
    google::cloud::chronicle::v1::UpdateWatchlistRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateWatchlist(request);
}

Status EntityServiceClient::DeleteWatchlist(std::string const& name, bool force,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::DeleteWatchlistRequest request;
  request.set_name(name);
  request.set_force(force);
  return connection_->DeleteWatchlist(request);
}

Status EntityServiceClient::DeleteWatchlist(
    google::cloud::chronicle::v1::DeleteWatchlistRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteWatchlist(request);
}

StreamRange<google::longrunning::Operation> EntityServiceClient::ListOperations(
    std::string const& name, std::string const& filter, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::ListOperationsRequest request;
  request.set_name(name);
  request.set_filter(filter);
  return connection_->ListOperations(request);
}

StreamRange<google::longrunning::Operation> EntityServiceClient::ListOperations(
    google::longrunning::ListOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListOperations(std::move(request));
}

StatusOr<google::longrunning::Operation> EntityServiceClient::GetOperation(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation> EntityServiceClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

Status EntityServiceClient::DeleteOperation(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::DeleteOperationRequest request;
  request.set_name(name);
  return connection_->DeleteOperation(request);
}

Status EntityServiceClient::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteOperation(request);
}

Status EntityServiceClient::CancelOperation(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::CancelOperationRequest request;
  request.set_name(name);
  return connection_->CancelOperation(request);
}

Status EntityServiceClient::CancelOperation(
    google::longrunning::CancelOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1
}  // namespace cloud
}  // namespace google
