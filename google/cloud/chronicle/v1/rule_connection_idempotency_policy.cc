// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/rule.proto

#include "google/cloud/chronicle/v1/rule_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace chronicle_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

RuleServiceConnectionIdempotencyPolicy::
    ~RuleServiceConnectionIdempotencyPolicy() = default;

std::unique_ptr<RuleServiceConnectionIdempotencyPolicy>
RuleServiceConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<RuleServiceConnectionIdempotencyPolicy>(*this);
}

Idempotency RuleServiceConnectionIdempotencyPolicy::CreateRule(
    google::cloud::chronicle::v1::CreateRuleRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::GetRule(
    google::cloud::chronicle::v1::GetRuleRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::ListRules(
    google::cloud::chronicle::v1::ListRulesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::UpdateRule(
    google::cloud::chronicle::v1::UpdateRuleRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::DeleteRule(
    google::cloud::chronicle::v1::DeleteRuleRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::ListRuleRevisions(
    google::cloud::chronicle::v1::ListRuleRevisionsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::CreateRetrohunt(
    google::cloud::chronicle::v1::CreateRetrohuntRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::GetRetrohunt(
    google::cloud::chronicle::v1::GetRetrohuntRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::ListRetrohunts(
    google::cloud::chronicle::v1::ListRetrohuntsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::GetRuleDeployment(
    google::cloud::chronicle::v1::GetRuleDeploymentRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::ListRuleDeployments(
    google::cloud::chronicle::v1::ListRuleDeploymentsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::UpdateRuleDeployment(
    google::cloud::chronicle::v1::UpdateRuleDeploymentRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::ListOperations(
    google::longrunning::ListOperationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency RuleServiceConnectionIdempotencyPolicy::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<RuleServiceConnectionIdempotencyPolicy>
MakeDefaultRuleServiceConnectionIdempotencyPolicy() {
  return std::make_unique<RuleServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1
}  // namespace cloud
}  // namespace google
