// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/data_access_control.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CHRONICLE_V1_DATA_ACCESS_CONTROL_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CHRONICLE_V1_DATA_ACCESS_CONTROL_CLIENT_H

#include "google/cloud/chronicle/v1/data_access_control_connection.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>
#include <string>

namespace google {
namespace cloud {
namespace chronicle_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// DataAccessControlService exposes resources and endpoints related to data
/// access control.
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class DataAccessControlServiceClient {
 public:
  explicit DataAccessControlServiceClient(
      std::shared_ptr<DataAccessControlServiceConnection> connection,
      Options opts = {});
  ~DataAccessControlServiceClient();

  ///@{
  /// @name Copy and move support
  DataAccessControlServiceClient(DataAccessControlServiceClient const&) =
      default;
  DataAccessControlServiceClient& operator=(
      DataAccessControlServiceClient const&) = default;
  DataAccessControlServiceClient(DataAccessControlServiceClient&&) = default;
  DataAccessControlServiceClient& operator=(DataAccessControlServiceClient&&) =
      default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(DataAccessControlServiceClient const& a,
                         DataAccessControlServiceClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(DataAccessControlServiceClient const& a,
                         DataAccessControlServiceClient const& b) {
    return !(a == b);
  }
  ///@}

  // clang-format off
  ///
  /// Creates a data access label.
  /// Data access labels are applied to incoming event data and selected in data
  /// access scopes (another resource), and only users with scopes containing the
  /// label can see data with that label. Currently, the data access label
  /// resource only includes custom labels, which are labels that correspond
  /// to UDM queries over event data.
  ///
  /// @param parent  Required. The parent resource where this Data Access Label will be created.
  ///  Format: `projects/{project}/locations/{location}/instances/{instance}`
  /// @param data_access_label  Required. Data access label to create.
  /// @param data_access_label_id  Required. The ID to use for the data access label, which will become the
  ///  label's display name and the final component of the label's resource name.
  ///  The maximum number of characters should be 63. Regex pattern is as per AIP:
  ///  https://google.aip.dev/122#resource-id-segments
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessLabel])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.CreateDataAccessLabelRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L150}
  /// [google.cloud.chronicle.v1.DataAccessLabel]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L361}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessLabel> CreateDataAccessLabel(
      std::string const& parent,
      google::cloud::chronicle::v1::DataAccessLabel const& data_access_label,
      std::string const& data_access_label_id, Options opts = {});

  // clang-format off
  ///
  /// Creates a data access label.
  /// Data access labels are applied to incoming event data and selected in data
  /// access scopes (another resource), and only users with scopes containing the
  /// label can see data with that label. Currently, the data access label
  /// resource only includes custom labels, which are labels that correspond
  /// to UDM queries over event data.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.CreateDataAccessLabelRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessLabel])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.CreateDataAccessLabelRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L150}
  /// [google.cloud.chronicle.v1.DataAccessLabel]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L361}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessLabel> CreateDataAccessLabel(
      google::cloud::chronicle::v1::CreateDataAccessLabelRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Gets a data access label.
  ///
  /// @param name  Required. The ID of the data access label to retrieve.
  ///  Format:
  ///  `projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessLabel])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessLabel]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L361}
  /// [google.cloud.chronicle.v1.GetDataAccessLabelRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L172}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessLabel> GetDataAccessLabel(
      std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Gets a data access label.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.GetDataAccessLabelRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessLabel])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessLabel]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L361}
  /// [google.cloud.chronicle.v1.GetDataAccessLabelRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L172}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessLabel> GetDataAccessLabel(
      google::cloud::chronicle::v1::GetDataAccessLabelRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Lists all data access labels for the customer.
  ///
  /// @param parent  Required. The parent resource where this data access label will be created.
  ///  Format: `projects/{project}/locations/{location}/instances/{instance}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.cloud.chronicle.v1.DataAccessLabel], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessLabel]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L361}
  /// [google.cloud.chronicle.v1.ListDataAccessLabelsRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L185}
  ///
  // clang-format on
  StreamRange<google::cloud::chronicle::v1::DataAccessLabel>
  ListDataAccessLabels(std::string const& parent, Options opts = {});

  // clang-format off
  ///
  /// Lists all data access labels for the customer.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.ListDataAccessLabelsRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.cloud.chronicle.v1.DataAccessLabel], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessLabel]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L361}
  /// [google.cloud.chronicle.v1.ListDataAccessLabelsRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L185}
  ///
  // clang-format on
  StreamRange<google::cloud::chronicle::v1::DataAccessLabel>
  ListDataAccessLabels(
      google::cloud::chronicle::v1::ListDataAccessLabelsRequest request,
      Options opts = {});

  // clang-format off
  ///
  /// Updates a data access label.
  ///
  /// @param data_access_label  Required. The data access label to update.
  ///  @n
  ///  The label's `name` field is used to identify the label to update.
  ///  Format:
  ///  `projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}`
  /// @param update_mask  The list of fields to update. If not included, all fields with a non-empty
  ///  value will be overwritten. Currently, only the description and definition
  ///  fields are supported for update; an update call that attempts to update any
  ///  other fields will return INVALID_ARGUMENT.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessLabel])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessLabel]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L361}
  /// [google.cloud.chronicle.v1.UpdateDataAccessLabelRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L224}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessLabel> UpdateDataAccessLabel(
      google::cloud::chronicle::v1::DataAccessLabel const& data_access_label,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  // clang-format off
  ///
  /// Updates a data access label.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.UpdateDataAccessLabelRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessLabel])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessLabel]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L361}
  /// [google.cloud.chronicle.v1.UpdateDataAccessLabelRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L224}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessLabel> UpdateDataAccessLabel(
      google::cloud::chronicle::v1::UpdateDataAccessLabelRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Deletes a data access label. When a label is deleted, new
  /// data that enters in the system will not receive the label, but the label
  /// will not be removed from old data that still refers to it.
  ///
  /// @param name  Required. The ID of the data access label to delete.
  ///  Format:
  ///  `projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [`Status`] object. If the request failed, the
  ///     status contains the details of the failure.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DeleteDataAccessLabelRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L241}
  ///
  // clang-format on
  Status DeleteDataAccessLabel(std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Deletes a data access label. When a label is deleted, new
  /// data that enters in the system will not receive the label, but the label
  /// will not be removed from old data that still refers to it.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.DeleteDataAccessLabelRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [`Status`] object. If the request failed, the
  ///     status contains the details of the failure.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DeleteDataAccessLabelRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L241}
  ///
  // clang-format on
  Status DeleteDataAccessLabel(
      google::cloud::chronicle::v1::DeleteDataAccessLabelRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Creates a data access scope.
  /// Data access scope is a combination of allowed and denied labels attached
  /// to a permission group. If a scope has allowed labels A and B and denied
  /// labels C and D, then the group of people attached to the scope
  /// will have permissions to see all events labeled with A or B (or both) and
  /// not labeled with either C or D.
  ///
  /// @param parent  Required. The parent resource where this Data Access Scope will be created.
  ///  Format: `projects/{project}/locations/{location}/instances/{instance}`
  /// @param data_access_scope  Required. Data access scope to create.
  /// @param data_access_scope_id  Required. The user provided scope id which will become the last part of the
  ///  name of the scope resource. Needs to be compliant with
  ///  https://google.aip.dev/122
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessScope])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.CreateDataAccessScopeRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L254}
  /// [google.cloud.chronicle.v1.DataAccessScope]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L407}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessScope> CreateDataAccessScope(
      std::string const& parent,
      google::cloud::chronicle::v1::DataAccessScope const& data_access_scope,
      std::string const& data_access_scope_id, Options opts = {});

  // clang-format off
  ///
  /// Creates a data access scope.
  /// Data access scope is a combination of allowed and denied labels attached
  /// to a permission group. If a scope has allowed labels A and B and denied
  /// labels C and D, then the group of people attached to the scope
  /// will have permissions to see all events labeled with A or B (or both) and
  /// not labeled with either C or D.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.CreateDataAccessScopeRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessScope])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.CreateDataAccessScopeRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L254}
  /// [google.cloud.chronicle.v1.DataAccessScope]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L407}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessScope> CreateDataAccessScope(
      google::cloud::chronicle::v1::CreateDataAccessScopeRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Retrieves an existing data access scope.
  ///
  /// @param name  Required. The ID of the data access scope to retrieve.
  ///  Format:
  ///  `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessScope])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessScope]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L407}
  /// [google.cloud.chronicle.v1.GetDataAccessScopeRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L275}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessScope> GetDataAccessScope(
      std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Retrieves an existing data access scope.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.GetDataAccessScopeRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessScope])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessScope]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L407}
  /// [google.cloud.chronicle.v1.GetDataAccessScopeRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L275}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessScope> GetDataAccessScope(
      google::cloud::chronicle::v1::GetDataAccessScopeRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Lists all existing data access scopes for the customer.
  ///
  /// @param parent  Required. The parent resource where this data access scope will be created.
  ///  Format: `projects/{project}/locations/{location}/instances/{instance}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.cloud.chronicle.v1.DataAccessScope], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessScope]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L407}
  /// [google.cloud.chronicle.v1.ListDataAccessScopesRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L288}
  ///
  // clang-format on
  StreamRange<google::cloud::chronicle::v1::DataAccessScope>
  ListDataAccessScopes(std::string const& parent, Options opts = {});

  // clang-format off
  ///
  /// Lists all existing data access scopes for the customer.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.ListDataAccessScopesRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.cloud.chronicle.v1.DataAccessScope], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessScope]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L407}
  /// [google.cloud.chronicle.v1.ListDataAccessScopesRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L288}
  ///
  // clang-format on
  StreamRange<google::cloud::chronicle::v1::DataAccessScope>
  ListDataAccessScopes(
      google::cloud::chronicle::v1::ListDataAccessScopesRequest request,
      Options opts = {});

  // clang-format off
  ///
  /// Updates a data access scope.
  ///
  /// @param data_access_scope  Required. The data access scope to update.
  ///  @n
  ///  The scope's `name` field is used to identify the scope to update.
  ///  Format:
  ///  `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}`
  /// @param update_mask  The list of fields to update. If not included, all fields with a non-empty
  ///  value will be overwritten. Currently, only the description, the allowed
  ///  and denied labels list fields are supported for update;
  ///  an update call that attempts to update any
  ///  other fields will return INVALID_ARGUMENT.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessScope])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessScope]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L407}
  /// [google.cloud.chronicle.v1.UpdateDataAccessScopeRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L330}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessScope> UpdateDataAccessScope(
      google::cloud::chronicle::v1::DataAccessScope const& data_access_scope,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  // clang-format off
  ///
  /// Updates a data access scope.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.UpdateDataAccessScopeRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.chronicle.v1.DataAccessScope])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DataAccessScope]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L407}
  /// [google.cloud.chronicle.v1.UpdateDataAccessScopeRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L330}
  ///
  // clang-format on
  StatusOr<google::cloud::chronicle::v1::DataAccessScope> UpdateDataAccessScope(
      google::cloud::chronicle::v1::UpdateDataAccessScopeRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Deletes a data access scope.
  ///
  /// @param name  Required. The ID of the data access scope to delete.
  ///  Format:
  ///  `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [`Status`] object. If the request failed, the
  ///     status contains the details of the failure.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DeleteDataAccessScopeRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L348}
  ///
  // clang-format on
  Status DeleteDataAccessScope(std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Deletes a data access scope.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.chronicle.v1.DeleteDataAccessScopeRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [`Status`] object. If the request failed, the
  ///     status contains the details of the failure.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.chronicle.v1.DeleteDataAccessScopeRequest]: @googleapis_reference_link{google/cloud/chronicle/v1/data_access_control.proto#L348}
  ///
  // clang-format on
  Status DeleteDataAccessScope(
      google::cloud::chronicle::v1::DeleteDataAccessScopeRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Lists operations that match the specified filter in the request. If the
  /// server doesn't support this method, it returns `UNIMPLEMENTED`.
  ///
  /// @param name  The name of the operation's parent resource.
  /// @param filter  The standard list filter.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.longrunning.Operation], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.ListOperationsRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L167}
  /// [google.longrunning.Operation]: @googleapis_reference_link{google/longrunning/operations.proto#L121}
  ///
  // clang-format on
  StreamRange<google::longrunning::Operation> ListOperations(
      std::string const& name, std::string const& filter, Options opts = {});

  // clang-format off
  ///
  /// Lists operations that match the specified filter in the request. If the
  /// server doesn't support this method, it returns `UNIMPLEMENTED`.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.longrunning.ListOperationsRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.longrunning.Operation], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.ListOperationsRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L167}
  /// [google.longrunning.Operation]: @googleapis_reference_link{google/longrunning/operations.proto#L121}
  ///
  // clang-format on
  StreamRange<google::longrunning::Operation> ListOperations(
      google::longrunning::ListOperationsRequest request, Options opts = {});

  // clang-format off
  ///
  /// Gets the latest state of a long-running operation.  Clients can use this
  /// method to poll the operation result at intervals as recommended by the API
  /// service.
  ///
  /// @param name  The name of the operation resource.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.longrunning.Operation])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.GetOperationRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L160}
  /// [google.longrunning.Operation]: @googleapis_reference_link{google/longrunning/operations.proto#L121}
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> GetOperation(std::string const& name,
                                                        Options opts = {});

  // clang-format off
  ///
  /// Gets the latest state of a long-running operation.  Clients can use this
  /// method to poll the operation result at intervals as recommended by the API
  /// service.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.longrunning.GetOperationRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.longrunning.Operation])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.GetOperationRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L160}
  /// [google.longrunning.Operation]: @googleapis_reference_link{google/longrunning/operations.proto#L121}
  ///
  // clang-format on
  StatusOr<google::longrunning::Operation> GetOperation(
      google::longrunning::GetOperationRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Deletes a long-running operation. This method indicates that the client is
  /// no longer interested in the operation result. It does not cancel the
  /// operation. If the server doesn't support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.
  ///
  /// @param name  The name of the operation resource to be deleted.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [`Status`] object. If the request failed, the
  ///     status contains the details of the failure.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.DeleteOperationRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L200}
  ///
  // clang-format on
  Status DeleteOperation(std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Deletes a long-running operation. This method indicates that the client is
  /// no longer interested in the operation result. It does not cancel the
  /// operation. If the server doesn't support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.longrunning.DeleteOperationRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [`Status`] object. If the request failed, the
  ///     status contains the details of the failure.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.DeleteOperationRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L200}
  ///
  // clang-format on
  Status DeleteOperation(
      google::longrunning::DeleteOperationRequest const& request,
      Options opts = {});

  // clang-format off
  ///
  /// Starts asynchronous cancellation on a long-running operation.  The server
  /// makes a best effort to cancel the operation, but success is not
  /// guaranteed.  If the server doesn't support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
  /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
  /// other methods to check whether the cancellation succeeded or whether the
  /// operation completed despite cancellation. On successful cancellation,
  /// the operation is not deleted; instead, it becomes an operation with
  /// an [Operation.error][google.longrunning.Operation.error] value with a
  /// [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
  /// `Code.CANCELLED`.
  ///
  /// @param name  The name of the operation resource to be cancelled.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [`Status`] object. If the request failed, the
  ///     status contains the details of the failure.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.CancelOperationRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L193}
  /// [google.longrunning.Operation.error]: @googleapis_reference_link{google/longrunning/operations.proto#L144}
  /// [google.longrunning.Operations.GetOperation]: @googleapis_reference_link{google/longrunning/operations.proto#L70}
  /// [google.rpc.Status.code]: @googleapis_reference_link{google/rpc/status.proto#L38}
  ///
  // clang-format on
  Status CancelOperation(std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Starts asynchronous cancellation on a long-running operation.  The server
  /// makes a best effort to cancel the operation, but success is not
  /// guaranteed.  If the server doesn't support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
  /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
  /// other methods to check whether the cancellation succeeded or whether the
  /// operation completed despite cancellation. On successful cancellation,
  /// the operation is not deleted; instead, it becomes an operation with
  /// an [Operation.error][google.longrunning.Operation.error] value with a
  /// [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
  /// `Code.CANCELLED`.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.longrunning.CancelOperationRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [`Status`] object. If the request failed, the
  ///     status contains the details of the failure.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.longrunning.CancelOperationRequest]: @googleapis_reference_link{google/longrunning/operations.proto#L193}
  /// [google.longrunning.Operation.error]: @googleapis_reference_link{google/longrunning/operations.proto#L144}
  /// [google.longrunning.Operations.GetOperation]: @googleapis_reference_link{google/longrunning/operations.proto#L70}
  /// [google.rpc.Status.code]: @googleapis_reference_link{google/rpc/status.proto#L38}
  ///
  // clang-format on
  Status CancelOperation(
      google::longrunning::CancelOperationRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<DataAccessControlServiceConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CHRONICLE_V1_DATA_ACCESS_CONTROL_CLIENT_H
