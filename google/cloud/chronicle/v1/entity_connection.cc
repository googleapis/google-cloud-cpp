// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/entity.proto

#include "google/cloud/chronicle/v1/entity_connection.h"
#include "google/cloud/chronicle/v1/entity_options.h"
#include "google/cloud/chronicle/v1/internal/entity_connection_impl.h"
#include "google/cloud/chronicle/v1/internal/entity_option_defaults.h"
#include "google/cloud/chronicle/v1/internal/entity_stub_factory.h"
#include "google/cloud/chronicle/v1/internal/entity_tracing_connection.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace chronicle_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

EntityServiceConnection::~EntityServiceConnection() = default;

StatusOr<google::cloud::chronicle::v1::Watchlist>
EntityServiceConnection::GetWatchlist(
    google::cloud::chronicle::v1::GetWatchlistRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::chronicle::v1::Watchlist>
EntityServiceConnection::ListWatchlists(
    google::cloud::chronicle::v1::
        ListWatchlistsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::chronicle::v1::Watchlist>>();
}

StatusOr<google::cloud::chronicle::v1::Watchlist>
EntityServiceConnection::CreateWatchlist(
    google::cloud::chronicle::v1::CreateWatchlistRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::chronicle::v1::Watchlist>
EntityServiceConnection::UpdateWatchlist(
    google::cloud::chronicle::v1::UpdateWatchlistRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status EntityServiceConnection::DeleteWatchlist(
    google::cloud::chronicle::v1::DeleteWatchlistRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::longrunning::Operation>
EntityServiceConnection::ListOperations(
    google::longrunning::
        ListOperationsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::longrunning::Operation>>();
}

StatusOr<google::longrunning::Operation> EntityServiceConnection::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status EntityServiceConnection::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status EntityServiceConnection::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<EntityServiceConnection> MakeEntityServiceConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 EntityServicePolicyOptionList>(options,
                                                                __func__);
  options =
      chronicle_v1_internal::EntityServiceDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = chronicle_v1_internal::CreateDefaultEntityServiceStub(
      std::move(auth), options);
  return chronicle_v1_internal::MakeEntityServiceTracingConnection(
      std::make_shared<chronicle_v1_internal::EntityServiceConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1
}  // namespace cloud
}  // namespace google
