// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/reference_list.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CHRONICLE_V1_INTERNAL_REFERENCE_LIST_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CHRONICLE_V1_INTERNAL_REFERENCE_LIST_CONNECTION_IMPL_H

#include "google/cloud/chronicle/v1/internal/reference_list_retry_traits.h"
#include "google/cloud/chronicle/v1/internal/reference_list_stub.h"
#include "google/cloud/chronicle/v1/reference_list_connection.h"
#include "google/cloud/chronicle/v1/reference_list_connection_idempotency_policy.h"
#include "google/cloud/chronicle/v1/reference_list_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace chronicle_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class ReferenceListServiceConnectionImpl
    : public chronicle_v1::ReferenceListServiceConnection {
 public:
  ~ReferenceListServiceConnectionImpl() override = default;

  ReferenceListServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<chronicle_v1_internal::ReferenceListServiceStub> stub,
      Options options);

  Options options() override { return options_; }

  StatusOr<google::cloud::chronicle::v1::ReferenceList> GetReferenceList(
      google::cloud::chronicle::v1::GetReferenceListRequest const& request)
      override;

  StreamRange<google::cloud::chronicle::v1::ReferenceList> ListReferenceLists(
      google::cloud::chronicle::v1::ListReferenceListsRequest request) override;

  StatusOr<google::cloud::chronicle::v1::ReferenceList> CreateReferenceList(
      google::cloud::chronicle::v1::CreateReferenceListRequest const& request)
      override;

  StatusOr<google::cloud::chronicle::v1::ReferenceList> UpdateReferenceList(
      google::cloud::chronicle::v1::UpdateReferenceListRequest const& request)
      override;

  StreamRange<google::longrunning::Operation> ListOperations(
      google::longrunning::ListOperationsRequest request) override;

  StatusOr<google::longrunning::Operation> GetOperation(
      google::longrunning::GetOperationRequest const& request) override;

  Status DeleteOperation(
      google::longrunning::DeleteOperationRequest const& request) override;

  Status CancelOperation(
      google::longrunning::CancelOperationRequest const& request) override;

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<chronicle_v1_internal::ReferenceListServiceStub> stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_CHRONICLE_V1_INTERNAL_REFERENCE_LIST_CONNECTION_IMPL_H
