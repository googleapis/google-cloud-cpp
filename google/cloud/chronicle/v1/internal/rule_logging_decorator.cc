// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/rule.proto

#include "google/cloud/chronicle/v1/internal/rule_logging_decorator.h"
#include "google/cloud/internal/log_wrapper.h"
#include "google/cloud/status_or.h"
#include <google/cloud/chronicle/v1/rule.grpc.pb.h>
#include <memory>
#include <set>
#include <string>
#include <utility>

namespace google {
namespace cloud {
namespace chronicle_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RuleServiceLogging::RuleServiceLogging(std::shared_ptr<RuleServiceStub> child,
                                       TracingOptions tracing_options,
                                       std::set<std::string> const&)
    : child_(std::move(child)), tracing_options_(std::move(tracing_options)) {}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceLogging::CreateRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::CreateRuleRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::CreateRuleRequest const& request) {
        return child_->CreateRule(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceLogging::GetRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetRuleRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::GetRuleRequest const& request) {
        return child_->GetRule(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::chronicle::v1::ListRulesResponse>
RuleServiceLogging::ListRules(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRulesRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::ListRulesRequest const& request) {
        return child_->ListRules(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceLogging::UpdateRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::UpdateRuleRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::UpdateRuleRequest const& request) {
        return child_->UpdateRule(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

Status RuleServiceLogging::DeleteRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::DeleteRuleRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::DeleteRuleRequest const& request) {
        return child_->DeleteRule(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::chronicle::v1::ListRuleRevisionsResponse>
RuleServiceLogging::ListRuleRevisions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRuleRevisionsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::ListRuleRevisionsRequest const&
                 request) {
        return child_->ListRuleRevisions(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
RuleServiceLogging::AsyncCreateRetrohunt(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::chronicle::v1::CreateRetrohuntRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::cloud::chronicle::v1::CreateRetrohuntRequest const& request) {
        return child_->AsyncCreateRetrohunt(cq, std::move(context),
                                            std::move(options), request);
      },
      cq, std::move(context), std::move(options), request, __func__,
      tracing_options_);
}

StatusOr<google::longrunning::Operation> RuleServiceLogging::CreateRetrohunt(
    grpc::ClientContext& context, Options options,
    google::cloud::chronicle::v1::CreateRetrohuntRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::chronicle::v1::CreateRetrohuntRequest const& request) {
        return child_->CreateRetrohunt(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::chronicle::v1::Retrohunt>
RuleServiceLogging::GetRetrohunt(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetRetrohuntRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::GetRetrohuntRequest const& request) {
        return child_->GetRetrohunt(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::chronicle::v1::ListRetrohuntsResponse>
RuleServiceLogging::ListRetrohunts(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRetrohuntsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::chronicle::v1::ListRetrohuntsRequest const& request) {
        return child_->ListRetrohunts(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceLogging::GetRuleDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetRuleDeploymentRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::GetRuleDeploymentRequest const&
                 request) {
        return child_->GetRuleDeployment(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::chronicle::v1::ListRuleDeploymentsResponse>
RuleServiceLogging::ListRuleDeployments(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRuleDeploymentsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::ListRuleDeploymentsRequest const&
                 request) {
        return child_->ListRuleDeployments(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceLogging::UpdateRuleDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::UpdateRuleDeploymentRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::chronicle::v1::UpdateRuleDeploymentRequest const&
                 request) {
        return child_->UpdateRuleDeployment(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::longrunning::ListOperationsResponse>
RuleServiceLogging::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::ListOperationsRequest const& request) {
        return child_->ListOperations(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

StatusOr<google::longrunning::Operation> RuleServiceLogging::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::GetOperationRequest const& request) {
        return child_->GetOperation(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

Status RuleServiceLogging::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::DeleteOperationRequest const& request) {
        return child_->DeleteOperation(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

Status RuleServiceLogging::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::CancelOperationRequest const& request) {
        return child_->CancelOperation(context, options, request);
      },
      context, options, request, __func__, tracing_options_);
}

future<StatusOr<google::longrunning::Operation>>
RuleServiceLogging::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::cloud::internal::ImmutableOptions options,
             google::longrunning::GetOperationRequest const& request) {
        return child_->AsyncGetOperation(cq, std::move(context),
                                         std::move(options), request);
      },
      cq, std::move(context), std::move(options), request, __func__,
      tracing_options_);
}

future<Status> RuleServiceLogging::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  return google::cloud::internal::LogWrapper(
      [this](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::cloud::internal::ImmutableOptions options,
             google::longrunning::CancelOperationRequest const& request) {
        return child_->AsyncCancelOperation(cq, std::move(context),
                                            std::move(options), request);
      },
      cq, std::move(context), std::move(options), request, __func__,
      tracing_options_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1_internal
}  // namespace cloud
}  // namespace google
