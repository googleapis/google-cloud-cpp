// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/rule.proto

#include "google/cloud/chronicle/v1/internal/rule_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace chronicle_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

RuleServiceTracingStub::RuleServiceTracingStub(
    std::shared_ptr<RuleServiceStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceTracingStub::CreateRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::CreateRuleRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "CreateRule");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateRule(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceTracingStub::GetRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetRuleRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "GetRule");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetRule(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::ListRulesResponse>
RuleServiceTracingStub::ListRules(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRulesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "ListRules");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListRules(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceTracingStub::UpdateRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::UpdateRuleRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "UpdateRule");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateRule(context, options, request));
}

Status RuleServiceTracingStub::DeleteRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::DeleteRuleRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "DeleteRule");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteRule(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::ListRuleRevisionsResponse>
RuleServiceTracingStub::ListRuleRevisions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRuleRevisionsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "ListRuleRevisions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListRuleRevisions(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
RuleServiceTracingStub::AsyncCreateRetrohunt(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::chronicle::v1::CreateRetrohuntRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "CreateRetrohunt");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCreateRetrohunt(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

StatusOr<google::longrunning::Operation>
RuleServiceTracingStub::CreateRetrohunt(
    grpc::ClientContext& context, Options options,
    google::cloud::chronicle::v1::CreateRetrohuntRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "CreateRetrohunt");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateRetrohunt(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::Retrohunt>
RuleServiceTracingStub::GetRetrohunt(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetRetrohuntRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "GetRetrohunt");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetRetrohunt(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::ListRetrohuntsResponse>
RuleServiceTracingStub::ListRetrohunts(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRetrohuntsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "ListRetrohunts");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListRetrohunts(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceTracingStub::GetRuleDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetRuleDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "GetRuleDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetRuleDeployment(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::ListRuleDeploymentsResponse>
RuleServiceTracingStub::ListRuleDeployments(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRuleDeploymentsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "ListRuleDeployments");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListRuleDeployments(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceTracingStub::UpdateRuleDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::UpdateRuleDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "UpdateRuleDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateRuleDeployment(context, options, request));
}

StatusOr<google::longrunning::ListOperationsResponse>
RuleServiceTracingStub::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "ListOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListOperations(context, options, request));
}

StatusOr<google::longrunning::Operation> RuleServiceTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

Status RuleServiceTracingStub::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteOperation(context, options, request));
}

Status RuleServiceTracingStub::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.chronicle.v1.RuleService",
                                     "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CancelOperation(context, options, request));
}

future<StatusOr<google::longrunning::Operation>>
RuleServiceTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.longrunning.Operations", "GetOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f = child_->AsyncGetOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

future<Status> RuleServiceTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.longrunning.Operations",
                                     "CancelOperation");
  internal::OTelScope scope(span);
  internal::InjectTraceContext(*context, *propagator_);
  auto f =
      child_->AsyncCancelOperation(cq, context, std::move(options), request);
  return internal::EndSpan(std::move(context), std::move(span), std::move(f));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<RuleServiceStub> MakeRuleServiceTracingStub(
    std::shared_ptr<RuleServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<RuleServiceTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1_internal
}  // namespace cloud
}  // namespace google
