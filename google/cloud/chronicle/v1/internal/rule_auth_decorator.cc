// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/rule.proto

#include "google/cloud/chronicle/v1/internal/rule_auth_decorator.h"
#include <google/cloud/chronicle/v1/rule.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace chronicle_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RuleServiceAuth::RuleServiceAuth(
    std::shared_ptr<google::cloud::internal::GrpcAuthenticationStrategy> auth,
    std::shared_ptr<RuleServiceStub> child)
    : auth_(std::move(auth)), child_(std::move(child)) {}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceAuth::CreateRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::CreateRuleRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CreateRule(context, options, request);
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceAuth::GetRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetRuleRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetRule(context, options, request);
}

StatusOr<google::cloud::chronicle::v1::ListRulesResponse>
RuleServiceAuth::ListRules(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRulesRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListRules(context, options, request);
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceAuth::UpdateRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::UpdateRuleRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->UpdateRule(context, options, request);
}

Status RuleServiceAuth::DeleteRule(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::DeleteRuleRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteRule(context, options, request);
}

StatusOr<google::cloud::chronicle::v1::ListRuleRevisionsResponse>
RuleServiceAuth::ListRuleRevisions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRuleRevisionsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListRuleRevisions(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
RuleServiceAuth::AsyncCreateRetrohunt(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::cloud::chronicle::v1::CreateRetrohuntRequest const& request) {
  using ReturnType = StatusOr<google::longrunning::Operation>;
  return auth_->AsyncConfigureContext(std::move(context))
      .then([cq, child = child_, options = std::move(options),
             request](future<StatusOr<std::shared_ptr<grpc::ClientContext>>>
                          f) mutable {
        auto context = f.get();
        if (!context) {
          return make_ready_future(ReturnType(std::move(context).status()));
        }
        return child->AsyncCreateRetrohunt(cq, *std::move(context),
                                           std::move(options), request);
      });
}

StatusOr<google::longrunning::Operation> RuleServiceAuth::CreateRetrohunt(
    grpc::ClientContext& context, Options options,
    google::cloud::chronicle::v1::CreateRetrohuntRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CreateRetrohunt(context, options, request);
}

StatusOr<google::cloud::chronicle::v1::Retrohunt> RuleServiceAuth::GetRetrohunt(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetRetrohuntRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetRetrohunt(context, options, request);
}

StatusOr<google::cloud::chronicle::v1::ListRetrohuntsResponse>
RuleServiceAuth::ListRetrohunts(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRetrohuntsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListRetrohunts(context, options, request);
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceAuth::GetRuleDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetRuleDeploymentRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetRuleDeployment(context, options, request);
}

StatusOr<google::cloud::chronicle::v1::ListRuleDeploymentsResponse>
RuleServiceAuth::ListRuleDeployments(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListRuleDeploymentsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListRuleDeployments(context, options, request);
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceAuth::UpdateRuleDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::UpdateRuleDeploymentRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->UpdateRuleDeployment(context, options, request);
}

StatusOr<google::longrunning::ListOperationsResponse>
RuleServiceAuth::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListOperations(context, options, request);
}

StatusOr<google::longrunning::Operation> RuleServiceAuth::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetOperation(context, options, request);
}

Status RuleServiceAuth::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteOperation(context, options, request);
}

Status RuleServiceAuth::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CancelOperation(context, options, request);
}

future<StatusOr<google::longrunning::Operation>>
RuleServiceAuth::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::GetOperationRequest const& request) {
  using ReturnType = StatusOr<google::longrunning::Operation>;
  return auth_->AsyncConfigureContext(std::move(context))
      .then([cq, child = child_, options = std::move(options),
             request](future<StatusOr<std::shared_ptr<grpc::ClientContext>>>
                          f) mutable {
        auto context = f.get();
        if (!context) {
          return make_ready_future(ReturnType(std::move(context).status()));
        }
        return child->AsyncGetOperation(cq, *std::move(context),
                                        std::move(options), request);
      });
}

future<Status> RuleServiceAuth::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions options,
    google::longrunning::CancelOperationRequest const& request) {
  return auth_->AsyncConfigureContext(std::move(context))
      .then([cq, child = child_, options = std::move(options),
             request](future<StatusOr<std::shared_ptr<grpc::ClientContext>>>
                          f) mutable {
        auto context = f.get();
        if (!context) return make_ready_future(std::move(context).status());
        return child->AsyncCancelOperation(cq, *std::move(context),
                                           std::move(options), request);
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1_internal
}  // namespace cloud
}  // namespace google
