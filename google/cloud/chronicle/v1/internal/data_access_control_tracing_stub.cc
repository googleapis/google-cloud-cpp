// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/data_access_control.proto

#include "google/cloud/chronicle/v1/internal/data_access_control_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace chronicle_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

DataAccessControlServiceTracingStub::DataAccessControlServiceTracingStub(
    std::shared_ptr<DataAccessControlServiceStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::chronicle::v1::DataAccessLabel>
DataAccessControlServiceTracingStub::CreateDataAccessLabel(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::CreateDataAccessLabelRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "CreateDataAccessLabel");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateDataAccessLabel(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::DataAccessLabel>
DataAccessControlServiceTracingStub::GetDataAccessLabel(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetDataAccessLabelRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "GetDataAccessLabel");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetDataAccessLabel(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::ListDataAccessLabelsResponse>
DataAccessControlServiceTracingStub::ListDataAccessLabels(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListDataAccessLabelsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "ListDataAccessLabels");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListDataAccessLabels(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::DataAccessLabel>
DataAccessControlServiceTracingStub::UpdateDataAccessLabel(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::UpdateDataAccessLabelRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "UpdateDataAccessLabel");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateDataAccessLabel(context, options, request));
}

Status DataAccessControlServiceTracingStub::DeleteDataAccessLabel(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::DeleteDataAccessLabelRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "DeleteDataAccessLabel");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteDataAccessLabel(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::DataAccessScope>
DataAccessControlServiceTracingStub::CreateDataAccessScope(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::CreateDataAccessScopeRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "CreateDataAccessScope");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateDataAccessScope(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::DataAccessScope>
DataAccessControlServiceTracingStub::GetDataAccessScope(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::GetDataAccessScopeRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "GetDataAccessScope");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->GetDataAccessScope(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::ListDataAccessScopesResponse>
DataAccessControlServiceTracingStub::ListDataAccessScopes(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::ListDataAccessScopesRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "ListDataAccessScopes");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListDataAccessScopes(context, options, request));
}

StatusOr<google::cloud::chronicle::v1::DataAccessScope>
DataAccessControlServiceTracingStub::UpdateDataAccessScope(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::UpdateDataAccessScopeRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "UpdateDataAccessScope");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateDataAccessScope(context, options, request));
}

Status DataAccessControlServiceTracingStub::DeleteDataAccessScope(
    grpc::ClientContext& context, Options const& options,
    google::cloud::chronicle::v1::DeleteDataAccessScopeRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService",
      "DeleteDataAccessScope");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteDataAccessScope(context, options, request));
}

StatusOr<google::longrunning::ListOperationsResponse>
DataAccessControlServiceTracingStub::ListOperations(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::ListOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService", "ListOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListOperations(context, options, request));
}

StatusOr<google::longrunning::Operation>
DataAccessControlServiceTracingStub::GetOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::GetOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService", "GetOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetOperation(context, options, request));
}

Status DataAccessControlServiceTracingStub::DeleteOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::DeleteOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService", "DeleteOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteOperation(context, options, request));
}

Status DataAccessControlServiceTracingStub::CancelOperation(
    grpc::ClientContext& context, Options const& options,
    google::longrunning::CancelOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.chronicle.v1.DataAccessControlService", "CancelOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CancelOperation(context, options, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<DataAccessControlServiceStub>
MakeDataAccessControlServiceTracingStub(
    std::shared_ptr<DataAccessControlServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<DataAccessControlServiceTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1_internal
}  // namespace cloud
}  // namespace google
