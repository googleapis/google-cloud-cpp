// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/entity.proto

#include "google/cloud/chronicle/v1/internal/entity_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/chronicle/v1/entity.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace chronicle_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

EntityServiceStub::~EntityServiceStub() = default;

StatusOr<google::cloud::chronicle::v1::Watchlist>
DefaultEntityServiceStub::GetWatchlist(
    grpc::ClientContext& context, Options const&,
    google::cloud::chronicle::v1::GetWatchlistRequest const& request) {
  google::cloud::chronicle::v1::Watchlist response;
  auto status = grpc_stub_->GetWatchlist(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::chronicle::v1::ListWatchlistsResponse>
DefaultEntityServiceStub::ListWatchlists(
    grpc::ClientContext& context, Options const&,
    google::cloud::chronicle::v1::ListWatchlistsRequest const& request) {
  google::cloud::chronicle::v1::ListWatchlistsResponse response;
  auto status = grpc_stub_->ListWatchlists(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::chronicle::v1::Watchlist>
DefaultEntityServiceStub::CreateWatchlist(
    grpc::ClientContext& context, Options const&,
    google::cloud::chronicle::v1::CreateWatchlistRequest const& request) {
  google::cloud::chronicle::v1::Watchlist response;
  auto status = grpc_stub_->CreateWatchlist(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::chronicle::v1::Watchlist>
DefaultEntityServiceStub::UpdateWatchlist(
    grpc::ClientContext& context, Options const&,
    google::cloud::chronicle::v1::UpdateWatchlistRequest const& request) {
  google::cloud::chronicle::v1::Watchlist response;
  auto status = grpc_stub_->UpdateWatchlist(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultEntityServiceStub::DeleteWatchlist(
    grpc::ClientContext& context, Options const&,
    google::cloud::chronicle::v1::DeleteWatchlistRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteWatchlist(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::longrunning::ListOperationsResponse>
DefaultEntityServiceStub::ListOperations(
    grpc::ClientContext& context, Options const&,
    google::longrunning::ListOperationsRequest const& request) {
  google::longrunning::ListOperationsResponse response;
  auto status = operations_stub_->ListOperations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::Operation> DefaultEntityServiceStub::GetOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::GetOperationRequest const& request) {
  google::longrunning::Operation response;
  auto status = operations_stub_->GetOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultEntityServiceStub::DeleteOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::DeleteOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->DeleteOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

Status DefaultEntityServiceStub::CancelOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::CancelOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->CancelOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1_internal
}  // namespace cloud
}  // namespace google
