// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/reference_list.proto

#include "google/cloud/chronicle/v1/reference_list_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace chronicle_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ReferenceListServiceClient::ReferenceListServiceClient(
    std::shared_ptr<ReferenceListServiceConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
ReferenceListServiceClient::~ReferenceListServiceClient() = default;

StatusOr<google::cloud::chronicle::v1::ReferenceList>
ReferenceListServiceClient::GetReferenceList(std::string const& name,
                                             Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::GetReferenceListRequest request;
  request.set_name(name);
  return connection_->GetReferenceList(request);
}

StatusOr<google::cloud::chronicle::v1::ReferenceList>
ReferenceListServiceClient::GetReferenceList(
    google::cloud::chronicle::v1::GetReferenceListRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetReferenceList(request);
}

StreamRange<google::cloud::chronicle::v1::ReferenceList>
ReferenceListServiceClient::ListReferenceLists(std::string const& parent,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::ListReferenceListsRequest request;
  request.set_parent(parent);
  return connection_->ListReferenceLists(request);
}

StreamRange<google::cloud::chronicle::v1::ReferenceList>
ReferenceListServiceClient::ListReferenceLists(
    google::cloud::chronicle::v1::ListReferenceListsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListReferenceLists(std::move(request));
}

StatusOr<google::cloud::chronicle::v1::ReferenceList>
ReferenceListServiceClient::CreateReferenceList(
    std::string const& parent,
    google::cloud::chronicle::v1::ReferenceList const& reference_list,
    std::string const& reference_list_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::CreateReferenceListRequest request;
  request.set_parent(parent);
  *request.mutable_reference_list() = reference_list;
  request.set_reference_list_id(reference_list_id);
  return connection_->CreateReferenceList(request);
}

StatusOr<google::cloud::chronicle::v1::ReferenceList>
ReferenceListServiceClient::CreateReferenceList(
    google::cloud::chronicle::v1::CreateReferenceListRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateReferenceList(request);
}

StatusOr<google::cloud::chronicle::v1::ReferenceList>
ReferenceListServiceClient::UpdateReferenceList(
    google::cloud::chronicle::v1::ReferenceList const& reference_list,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::UpdateReferenceListRequest request;
  *request.mutable_reference_list() = reference_list;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateReferenceList(request);
}

StatusOr<google::cloud::chronicle::v1::ReferenceList>
ReferenceListServiceClient::UpdateReferenceList(
    google::cloud::chronicle::v1::UpdateReferenceListRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateReferenceList(request);
}

StreamRange<google::longrunning::Operation>
ReferenceListServiceClient::ListOperations(std::string const& name,
                                           std::string const& filter,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::ListOperationsRequest request;
  request.set_name(name);
  request.set_filter(filter);
  return connection_->ListOperations(request);
}

StreamRange<google::longrunning::Operation>
ReferenceListServiceClient::ListOperations(
    google::longrunning::ListOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListOperations(std::move(request));
}

StatusOr<google::longrunning::Operation>
ReferenceListServiceClient::GetOperation(std::string const& name,
                                         Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation>
ReferenceListServiceClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

Status ReferenceListServiceClient::DeleteOperation(std::string const& name,
                                                   Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::DeleteOperationRequest request;
  request.set_name(name);
  return connection_->DeleteOperation(request);
}

Status ReferenceListServiceClient::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteOperation(request);
}

Status ReferenceListServiceClient::CancelOperation(std::string const& name,
                                                   Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::CancelOperationRequest request;
  request.set_name(name);
  return connection_->CancelOperation(request);
}

Status ReferenceListServiceClient::CancelOperation(
    google::longrunning::CancelOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1
}  // namespace cloud
}  // namespace google
