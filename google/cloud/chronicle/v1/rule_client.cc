// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/chronicle/v1/rule.proto

#include "google/cloud/chronicle/v1/rule_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace chronicle_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RuleServiceClient::RuleServiceClient(
    std::shared_ptr<RuleServiceConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
RuleServiceClient::~RuleServiceClient() = default;

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceClient::CreateRule(
    std::string const& parent, google::cloud::chronicle::v1::Rule const& rule,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::CreateRuleRequest request;
  request.set_parent(parent);
  *request.mutable_rule() = rule;
  return connection_->CreateRule(request);
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceClient::CreateRule(
    google::cloud::chronicle::v1::CreateRuleRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateRule(request);
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceClient::GetRule(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::GetRuleRequest request;
  request.set_name(name);
  return connection_->GetRule(request);
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceClient::GetRule(
    google::cloud::chronicle::v1::GetRuleRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRule(request);
}

StreamRange<google::cloud::chronicle::v1::Rule> RuleServiceClient::ListRules(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::ListRulesRequest request;
  request.set_parent(parent);
  return connection_->ListRules(request);
}

StreamRange<google::cloud::chronicle::v1::Rule> RuleServiceClient::ListRules(
    google::cloud::chronicle::v1::ListRulesRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRules(std::move(request));
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceClient::UpdateRule(
    google::cloud::chronicle::v1::Rule const& rule,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::UpdateRuleRequest request;
  *request.mutable_rule() = rule;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateRule(request);
}

StatusOr<google::cloud::chronicle::v1::Rule> RuleServiceClient::UpdateRule(
    google::cloud::chronicle::v1::UpdateRuleRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRule(request);
}

Status RuleServiceClient::DeleteRule(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::DeleteRuleRequest request;
  request.set_name(name);
  return connection_->DeleteRule(request);
}

Status RuleServiceClient::DeleteRule(
    google::cloud::chronicle::v1::DeleteRuleRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteRule(request);
}

StreamRange<google::cloud::chronicle::v1::Rule>
RuleServiceClient::ListRuleRevisions(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::ListRuleRevisionsRequest request;
  request.set_name(name);
  return connection_->ListRuleRevisions(request);
}

StreamRange<google::cloud::chronicle::v1::Rule>
RuleServiceClient::ListRuleRevisions(
    google::cloud::chronicle::v1::ListRuleRevisionsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRuleRevisions(std::move(request));
}

future<StatusOr<google::cloud::chronicle::v1::Retrohunt>>
RuleServiceClient::CreateRetrohunt(
    std::string const& parent,
    google::cloud::chronicle::v1::Retrohunt const& retrohunt, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::CreateRetrohuntRequest request;
  request.set_parent(parent);
  *request.mutable_retrohunt() = retrohunt;
  return connection_->CreateRetrohunt(request);
}

StatusOr<google::longrunning::Operation> RuleServiceClient::CreateRetrohunt(
    NoAwaitTag, std::string const& parent,
    google::cloud::chronicle::v1::Retrohunt const& retrohunt, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::CreateRetrohuntRequest request;
  request.set_parent(parent);
  *request.mutable_retrohunt() = retrohunt;
  return connection_->CreateRetrohunt(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::chronicle::v1::Retrohunt>>
RuleServiceClient::CreateRetrohunt(
    google::cloud::chronicle::v1::CreateRetrohuntRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateRetrohunt(request);
}

StatusOr<google::longrunning::Operation> RuleServiceClient::CreateRetrohunt(
    NoAwaitTag,
    google::cloud::chronicle::v1::CreateRetrohuntRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateRetrohunt(NoAwaitTag{}, request);
}

future<StatusOr<google::cloud::chronicle::v1::Retrohunt>>
RuleServiceClient::CreateRetrohunt(
    google::longrunning::Operation const& operation, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateRetrohunt(operation);
}

StatusOr<google::cloud::chronicle::v1::Retrohunt>
RuleServiceClient::GetRetrohunt(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::GetRetrohuntRequest request;
  request.set_name(name);
  return connection_->GetRetrohunt(request);
}

StatusOr<google::cloud::chronicle::v1::Retrohunt>
RuleServiceClient::GetRetrohunt(
    google::cloud::chronicle::v1::GetRetrohuntRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRetrohunt(request);
}

StreamRange<google::cloud::chronicle::v1::Retrohunt>
RuleServiceClient::ListRetrohunts(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::ListRetrohuntsRequest request;
  request.set_parent(parent);
  return connection_->ListRetrohunts(request);
}

StreamRange<google::cloud::chronicle::v1::Retrohunt>
RuleServiceClient::ListRetrohunts(
    google::cloud::chronicle::v1::ListRetrohuntsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRetrohunts(std::move(request));
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceClient::GetRuleDeployment(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::GetRuleDeploymentRequest request;
  request.set_name(name);
  return connection_->GetRuleDeployment(request);
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceClient::GetRuleDeployment(
    google::cloud::chronicle::v1::GetRuleDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRuleDeployment(request);
}

StreamRange<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceClient::ListRuleDeployments(std::string const& parent,
                                       Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::ListRuleDeploymentsRequest request;
  request.set_parent(parent);
  return connection_->ListRuleDeployments(request);
}

StreamRange<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceClient::ListRuleDeployments(
    google::cloud::chronicle::v1::ListRuleDeploymentsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRuleDeployments(std::move(request));
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceClient::UpdateRuleDeployment(
    google::cloud::chronicle::v1::RuleDeployment const& rule_deployment,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::chronicle::v1::UpdateRuleDeploymentRequest request;
  *request.mutable_rule_deployment() = rule_deployment;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateRuleDeployment(request);
}

StatusOr<google::cloud::chronicle::v1::RuleDeployment>
RuleServiceClient::UpdateRuleDeployment(
    google::cloud::chronicle::v1::UpdateRuleDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRuleDeployment(request);
}

StreamRange<google::longrunning::Operation> RuleServiceClient::ListOperations(
    std::string const& name, std::string const& filter, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::ListOperationsRequest request;
  request.set_name(name);
  request.set_filter(filter);
  return connection_->ListOperations(request);
}

StreamRange<google::longrunning::Operation> RuleServiceClient::ListOperations(
    google::longrunning::ListOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListOperations(std::move(request));
}

StatusOr<google::longrunning::Operation> RuleServiceClient::GetOperation(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::GetOperationRequest request;
  request.set_name(name);
  return connection_->GetOperation(request);
}

StatusOr<google::longrunning::Operation> RuleServiceClient::GetOperation(
    google::longrunning::GetOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetOperation(request);
}

Status RuleServiceClient::DeleteOperation(std::string const& name,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::DeleteOperationRequest request;
  request.set_name(name);
  return connection_->DeleteOperation(request);
}

Status RuleServiceClient::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteOperation(request);
}

Status RuleServiceClient::CancelOperation(std::string const& name,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::longrunning::CancelOperationRequest request;
  request.set_name(name);
  return connection_->CancelOperation(request);
}

Status RuleServiceClient::CancelOperation(
    google::longrunning::CancelOperationRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CancelOperation(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace chronicle_v1
}  // namespace cloud
}  // namespace google
