// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/beyondcorp/clientgateways/v1/client_gateways_service.proto

#include "google/cloud/beyondcorp/clientgateways/v1/internal/client_gateways_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace beyondcorp_clientgateways_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ClientGatewaysServiceTracingStub::ClientGatewaysServiceTracingStub(
    std::shared_ptr<ClientGatewaysServiceStub> child)
    : child_(std::move(child)) {}

StatusOr<
    google::cloud::beyondcorp::clientgateways::v1::ListClientGatewaysResponse>
ClientGatewaysServiceTracingStub::ListClientGateways(
    grpc::ClientContext& context,
    google::cloud::beyondcorp::clientgateways::v1::
        ListClientGatewaysRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.beyondcorp.clientgateways.v1.ClientGatewaysService",
      "ListClientGateways");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->ListClientGateways(context, request));
}

StatusOr<google::cloud::beyondcorp::clientgateways::v1::ClientGateway>
ClientGatewaysServiceTracingStub::GetClientGateway(
    grpc::ClientContext& context,
    google::cloud::beyondcorp::clientgateways::v1::
        GetClientGatewayRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.beyondcorp.clientgateways.v1.ClientGatewaysService",
      "GetClientGateway");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, internal::CurrentOptions());
  return internal::EndSpan(context, *span,
                           child_->GetClientGateway(context, request));
}

future<StatusOr<google::longrunning::Operation>>
ClientGatewaysServiceTracingStub::AsyncCreateClientGateway(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::beyondcorp::clientgateways::v1::
        CreateClientGatewayRequest const& request) {
  return child_->AsyncCreateClientGateway(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
ClientGatewaysServiceTracingStub::AsyncDeleteClientGateway(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::cloud::beyondcorp::clientgateways::v1::
        DeleteClientGatewayRequest const& request) {
  return child_->AsyncDeleteClientGateway(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
ClientGatewaysServiceTracingStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> ClientGatewaysServiceTracingStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::unique_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<ClientGatewaysServiceStub> MakeClientGatewaysServiceTracingStub(
    std::shared_ptr<ClientGatewaysServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<ClientGatewaysServiceTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace beyondcorp_clientgateways_v1_internal
}  // namespace cloud
}  // namespace google
