// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/beyondcorp/appconnectors/v1/app_connectors_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BEYONDCORP_INTERNAL_APP_CONNECTORS_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BEYONDCORP_INTERNAL_APP_CONNECTORS_CONNECTION_IMPL_H

#include "google/cloud/beyondcorp/app_connectors_connection.h"
#include "google/cloud/beyondcorp/app_connectors_connection_idempotency_policy.h"
#include "google/cloud/beyondcorp/app_connectors_options.h"
#include "google/cloud/beyondcorp/internal/app_connectors_retry_traits.h"
#include "google/cloud/beyondcorp/internal/app_connectors_stub.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace beyondcorp_internal {

class AppConnectorsServiceConnectionImpl
    : public GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceConnection {
 public:
  ~AppConnectorsServiceConnectionImpl() override = default;

  AppConnectorsServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceStub> stub,
      Options options);

  Options options() override { return options_; }

  StreamRange<google::cloud::beyondcorp::appconnectors::v1::AppConnector>
  ListAppConnectors(
      google::cloud::beyondcorp::appconnectors::v1::ListAppConnectorsRequest
          request) override;

  StatusOr<google::cloud::beyondcorp::appconnectors::v1::AppConnector>
  GetAppConnector(google::cloud::beyondcorp::appconnectors::v1::
                      GetAppConnectorRequest const& request) override;

  future<StatusOr<google::cloud::beyondcorp::appconnectors::v1::AppConnector>>
  CreateAppConnector(google::cloud::beyondcorp::appconnectors::v1::
                         CreateAppConnectorRequest const& request) override;

  future<StatusOr<google::cloud::beyondcorp::appconnectors::v1::AppConnector>>
  UpdateAppConnector(google::cloud::beyondcorp::appconnectors::v1::
                         UpdateAppConnectorRequest const& request) override;

  future<StatusOr<google::cloud::beyondcorp::appconnectors::v1::
                      AppConnectorOperationMetadata>>
  DeleteAppConnector(google::cloud::beyondcorp::appconnectors::v1::
                         DeleteAppConnectorRequest const& request) override;

  future<StatusOr<google::cloud::beyondcorp::appconnectors::v1::AppConnector>>
  ReportStatus(
      google::cloud::beyondcorp::appconnectors::v1::ReportStatusRequest const&
          request) override;

 private:
  std::unique_ptr<GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceRetryPolicy>
  retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceRetryPolicyOption>()) {
      return options
          .get<GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceRetryPolicyOption>()
          ->clone();
    }
    return options_
        .get<GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceBackoffPolicyOption>()) {
      return options
          .get<GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceBackoffPolicyOption>()
          ->clone();
    }
    return options_
        .get<GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<
      GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options
            .has<GOOGLE_CLOUD_CPP_NS::
                     AppConnectorsServiceConnectionIdempotencyPolicyOption>()) {
      return options
          .get<GOOGLE_CLOUD_CPP_NS::
                   AppConnectorsServiceConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<GOOGLE_CLOUD_CPP_NS::
                 AppConnectorsServiceConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<PollingPolicy> polling_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<
            GOOGLE_CLOUD_CPP_NS::AppConnectorsServicePollingPolicyOption>()) {
      return options
          .get<GOOGLE_CLOUD_CPP_NS::AppConnectorsServicePollingPolicyOption>()
          ->clone();
    }
    return options_
        .get<GOOGLE_CLOUD_CPP_NS::AppConnectorsServicePollingPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<GOOGLE_CLOUD_CPP_NS::AppConnectorsServiceStub> stub_;
  Options options_;
};

}  // namespace beyondcorp_internal
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BEYONDCORP_INTERNAL_APP_CONNECTORS_CONNECTION_IMPL_H
