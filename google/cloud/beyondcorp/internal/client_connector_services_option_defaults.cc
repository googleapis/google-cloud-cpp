// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/beyondcorp/clientconnectorservices/v1/client_connector_services_service.proto

#include "google/cloud/beyondcorp/internal/client_connector_services_option_defaults.h"
#include "google/cloud/beyondcorp/client_connector_services_connection.h"
#include "google/cloud/beyondcorp/client_connector_services_options.h"
#include "google/cloud/internal/populate_common_options.h"
#include "google/cloud/internal/populate_grpc_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace beyondcorp_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

namespace {
auto constexpr kBackoffScaling = 2.0;
}  // namespace

Options ClientConnectorServicesServiceDefaultOptions(Options options) {
  options = google::cloud::internal::PopulateCommonOptions(
      std::move(options),
      "GOOGLE_CLOUD_CPP_CLIENT_CONNECTOR_SERVICES_SERVICE_ENDPOINT", "",
      "GOOGLE_CLOUD_CPP_CLIENT_CONNECTOR_SERVICES_SERVICE_AUTHORITY",
      "beyondcorp.googleapis.com");
  options =
      google::cloud::internal::PopulateGrpcOptions(std::move(options), "");
  if (!options.has<
          beyondcorp::ClientConnectorServicesServiceRetryPolicyOption>()) {
    options.set<beyondcorp::ClientConnectorServicesServiceRetryPolicyOption>(
        beyondcorp::ClientConnectorServicesServiceLimitedTimeRetryPolicy(
            std::chrono::minutes(30))
            .clone());
  }
  if (!options.has<
          beyondcorp::ClientConnectorServicesServiceBackoffPolicyOption>()) {
    options.set<beyondcorp::ClientConnectorServicesServiceBackoffPolicyOption>(
        ExponentialBackoffPolicy(std::chrono::seconds(1),
                                 std::chrono::minutes(5), kBackoffScaling)
            .clone());
  }
  if (!options.has<
          beyondcorp::ClientConnectorServicesServicePollingPolicyOption>()) {
    options.set<beyondcorp::ClientConnectorServicesServicePollingPolicyOption>(
        GenericPollingPolicy<
            beyondcorp::ClientConnectorServicesServiceRetryPolicyOption::Type,
            beyondcorp::ClientConnectorServicesServiceBackoffPolicyOption::
                Type>(
            options
                .get<beyondcorp::
                         ClientConnectorServicesServiceRetryPolicyOption>()
                ->clone(),
            options
                .get<beyondcorp::
                         ClientConnectorServicesServiceBackoffPolicyOption>()
                ->clone())
            .clone());
  }
  if (!options.has<
          beyondcorp::
              ClientConnectorServicesServiceConnectionIdempotencyPolicyOption>()) {
    options.set<
        beyondcorp::
            ClientConnectorServicesServiceConnectionIdempotencyPolicyOption>(
        beyondcorp::
            MakeDefaultClientConnectorServicesServiceConnectionIdempotencyPolicy());
  }

  return options;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace beyondcorp_internal
}  // namespace cloud
}  // namespace google
