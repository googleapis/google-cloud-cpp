// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source:
// google/cloud/beyondcorp/clientgateways/v1/client_gateways_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BEYONDCORP_CLIENT_GATEWAYS_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BEYONDCORP_CLIENT_GATEWAYS_CONNECTION_H

#include "google/cloud/beyondcorp/client_gateways_connection_idempotency_policy.h"
#include "google/cloud/beyondcorp/internal/client_gateways_retry_traits.h"
#include "google/cloud/beyondcorp/internal/client_gateways_stub.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace beyondcorp {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ClientGatewaysServiceRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        beyondcorp_internal::ClientGatewaysServiceRetryTraits>;

using ClientGatewaysServiceLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        beyondcorp_internal::ClientGatewaysServiceRetryTraits>;

using ClientGatewaysServiceLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        beyondcorp_internal::ClientGatewaysServiceRetryTraits>;

/**
 * The `ClientGatewaysServiceConnection` object for
 * `ClientGatewaysServiceClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `ClientGatewaysServiceClient`. This allows users to inject custom
 * behavior (e.g., with a Google Mock object) when writing tests that use
 * objects of type `ClientGatewaysServiceClient`.
 *
 * To create a concrete instance, see `MakeClientGatewaysServiceConnection()`.
 *
 * For mocking, see `beyondcorp_mocks::MockClientGatewaysServiceConnection`.
 */
class ClientGatewaysServiceConnection {
 public:
  virtual ~ClientGatewaysServiceConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StreamRange<
      google::cloud::beyondcorp::clientgateways::v1::ClientGateway>
  ListClientGateways(
      google::cloud::beyondcorp::clientgateways::v1::ListClientGatewaysRequest
          request);

  virtual StatusOr<google::cloud::beyondcorp::clientgateways::v1::ClientGateway>
  GetClientGateway(google::cloud::beyondcorp::clientgateways::v1::
                       GetClientGatewayRequest const& request);

  virtual future<
      StatusOr<google::cloud::beyondcorp::clientgateways::v1::ClientGateway>>
  CreateClientGateway(google::cloud::beyondcorp::clientgateways::v1::
                          CreateClientGatewayRequest const& request);

  virtual future<StatusOr<google::cloud::beyondcorp::clientgateways::v1::
                              ClientGatewayOperationMetadata>>
  DeleteClientGateway(google::cloud::beyondcorp::clientgateways::v1::
                          DeleteClientGatewayRequest const& request);
};

/**
 * A factory function to construct an object of type
 * `ClientGatewaysServiceConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of
 * ClientGatewaysServiceClient, and that class used instead.
 *
 * The optional @p opts argument may be used to configure aspects of the
 * returned `ClientGatewaysServiceConnection`. Expected options are any of the
 * types in the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::beyondcorp::ClientGatewaysServicePolicyOptionList`
 *
 * @note Unrecognized options will be ignored. To debug issues with options set
 *     `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment and unexpected
 *     options will be logged.
 *
 * @param options (optional) Configure the `ClientGatewaysServiceConnection`
 * created by this function.
 */
std::shared_ptr<ClientGatewaysServiceConnection>
MakeClientGatewaysServiceConnection(Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace beyondcorp
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace beyondcorp_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<beyondcorp::ClientGatewaysServiceConnection>
MakeClientGatewaysServiceConnection(
    std::shared_ptr<ClientGatewaysServiceStub> stub, Options options);

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace beyondcorp_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BEYONDCORP_CLIENT_GATEWAYS_CONNECTION_H
