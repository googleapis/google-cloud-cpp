// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/accessapproval/v1/accessapproval.proto

#include "google/cloud/accessapproval/access_approval_connection.h"
#include "google/cloud/accessapproval/access_approval_options.h"
#include "google/cloud/accessapproval/internal/access_approval_option_defaults.h"
#include "google/cloud/accessapproval/internal/access_approval_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace accessapproval {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

AccessApprovalConnection::~AccessApprovalConnection() = default;

StreamRange<google::cloud::accessapproval::v1::ApprovalRequest>
AccessApprovalConnection::ListApprovalRequests(
    google::cloud::accessapproval::v1::ListApprovalRequestsMessage request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::accessapproval::v1::ApprovalRequest>>(
      std::move(request),
      [](google::cloud::accessapproval::v1::
             ListApprovalRequestsMessage const&) {
        return StatusOr<
            google::cloud::accessapproval::v1::ListApprovalRequestsResponse>{};
      },
      [](google::cloud::accessapproval::v1::
             ListApprovalRequestsResponse const&) {
        return std::vector<
            google::cloud::accessapproval::v1::ApprovalRequest>();
      });
}

StatusOr<google::cloud::accessapproval::v1::ApprovalRequest>
AccessApprovalConnection::GetApprovalRequest(
    google::cloud::accessapproval::v1::GetApprovalRequestMessage const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::accessapproval::v1::ApprovalRequest>
AccessApprovalConnection::ApproveApprovalRequest(
    google::cloud::accessapproval::v1::ApproveApprovalRequestMessage const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::accessapproval::v1::ApprovalRequest>
AccessApprovalConnection::DismissApprovalRequest(
    google::cloud::accessapproval::v1::DismissApprovalRequestMessage const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::accessapproval::v1::AccessApprovalSettings>
AccessApprovalConnection::GetAccessApprovalSettings(
    google::cloud::accessapproval::v1::
        GetAccessApprovalSettingsMessage const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::accessapproval::v1::AccessApprovalSettings>
AccessApprovalConnection::UpdateAccessApprovalSettings(
    google::cloud::accessapproval::v1::
        UpdateAccessApprovalSettingsMessage const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status AccessApprovalConnection::DeleteAccessApprovalSettings(
    google::cloud::accessapproval::v1::
        DeleteAccessApprovalSettingsMessage const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

namespace {
class AccessApprovalConnectionImpl : public AccessApprovalConnection {
 public:
  AccessApprovalConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<accessapproval_internal::AccessApprovalStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<AccessApprovalRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<AccessApprovalBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<AccessApprovalConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~AccessApprovalConnectionImpl() override = default;

  StreamRange<google::cloud::accessapproval::v1::ApprovalRequest>
  ListApprovalRequests(
      google::cloud::accessapproval::v1::ListApprovalRequestsMessage request)
      override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<AccessApprovalRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListApprovalRequests(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::accessapproval::v1::ApprovalRequest>>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](google::cloud::accessapproval::v1::
                            ListApprovalRequestsMessage const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::accessapproval::v1::
                         ListApprovalRequestsMessage const& request) {
                return stub->ListApprovalRequests(context, request);
              },
              r, function_name);
        },
        [](google::cloud::accessapproval::v1::ListApprovalRequestsResponse r) {
          std::vector<google::cloud::accessapproval::v1::ApprovalRequest>
              result(r.approval_requests().size());
          auto& messages = *r.mutable_approval_requests();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::accessapproval::v1::ApprovalRequest>
  GetApprovalRequest(
      google::cloud::accessapproval::v1::GetApprovalRequestMessage const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetApprovalRequest(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::accessapproval::v1::GetApprovalRequestMessage const&
                request) {
          return stub_->GetApprovalRequest(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::accessapproval::v1::ApprovalRequest>
  ApproveApprovalRequest(
      google::cloud::accessapproval::v1::ApproveApprovalRequestMessage const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ApproveApprovalRequest(request),
        [this](grpc::ClientContext& context,
               google::cloud::accessapproval::v1::
                   ApproveApprovalRequestMessage const& request) {
          return stub_->ApproveApprovalRequest(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::accessapproval::v1::ApprovalRequest>
  DismissApprovalRequest(
      google::cloud::accessapproval::v1::DismissApprovalRequestMessage const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DismissApprovalRequest(request),
        [this](grpc::ClientContext& context,
               google::cloud::accessapproval::v1::
                   DismissApprovalRequestMessage const& request) {
          return stub_->DismissApprovalRequest(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::accessapproval::v1::AccessApprovalSettings>
  GetAccessApprovalSettings(
      google::cloud::accessapproval::v1::GetAccessApprovalSettingsMessage const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetAccessApprovalSettings(request),
        [this](grpc::ClientContext& context,
               google::cloud::accessapproval::v1::
                   GetAccessApprovalSettingsMessage const& request) {
          return stub_->GetAccessApprovalSettings(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::accessapproval::v1::AccessApprovalSettings>
  UpdateAccessApprovalSettings(
      google::cloud::accessapproval::v1::
          UpdateAccessApprovalSettingsMessage const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateAccessApprovalSettings(request),
        [this](grpc::ClientContext& context,
               google::cloud::accessapproval::v1::
                   UpdateAccessApprovalSettingsMessage const& request) {
          return stub_->UpdateAccessApprovalSettings(context, request);
        },
        request, __func__);
  }

  Status DeleteAccessApprovalSettings(
      google::cloud::accessapproval::v1::
          DeleteAccessApprovalSettingsMessage const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteAccessApprovalSettings(request),
        [this](grpc::ClientContext& context,
               google::cloud::accessapproval::v1::
                   DeleteAccessApprovalSettingsMessage const& request) {
          return stub_->DeleteAccessApprovalSettings(context, request);
        },
        request, __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<accessapproval_internal::AccessApprovalStub> stub_;
  std::unique_ptr<AccessApprovalRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<AccessApprovalConnectionIdempotencyPolicy>
      idempotency_policy_;
};
}  // namespace

std::shared_ptr<AccessApprovalConnection> MakeAccessApprovalConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 AccessApprovalPolicyOptionList>(options,
                                                                 __func__);
  options =
      accessapproval_internal::AccessApprovalDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = accessapproval_internal::CreateDefaultAccessApprovalStub(
      background->cq(), options);
  return std::make_shared<AccessApprovalConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace accessapproval
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace accessapproval_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<accessapproval::AccessApprovalConnection>
MakeAccessApprovalConnection(std::shared_ptr<AccessApprovalStub> stub,
                             Options options) {
  options = AccessApprovalDefaultOptions(std::move(options));
  return std::make_shared<accessapproval::AccessApprovalConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace accessapproval_internal
}  // namespace cloud
}  // namespace google
