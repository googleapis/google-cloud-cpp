// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/aiplatform/v1/featurestore_service.proto

#include "google/cloud/aiplatform/v1/internal/featurestore_metadata_decorator.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/status_or.h"
#include <google/cloud/aiplatform/v1/featurestore_service.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace aiplatform_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

FeaturestoreServiceMetadata::FeaturestoreServiceMetadata(
    std::shared_ptr<FeaturestoreServiceStub> child,
    std::multimap<std::string, std::string> fixed_metadata)
    : child_(std::move(child)),
      fixed_metadata_(std::move(fixed_metadata)),
      api_client_header_(
          google::cloud::internal::ApiClientHeader("generator")) {}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncCreateFeaturestore(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::CreateFeaturestoreRequest const& request) {
  SetMetadata(*context, absl::StrCat("parent=", request.parent()));
  return child_->AsyncCreateFeaturestore(cq, std::move(context), request);
}

StatusOr<google::cloud::aiplatform::v1::Featurestore>
FeaturestoreServiceMetadata::GetFeaturestore(
    grpc::ClientContext& context,
    google::cloud::aiplatform::v1::GetFeaturestoreRequest const& request) {
  SetMetadata(context, absl::StrCat("name=", request.name()));
  return child_->GetFeaturestore(context, request);
}

StatusOr<google::cloud::aiplatform::v1::ListFeaturestoresResponse>
FeaturestoreServiceMetadata::ListFeaturestores(
    grpc::ClientContext& context,
    google::cloud::aiplatform::v1::ListFeaturestoresRequest const& request) {
  SetMetadata(context, absl::StrCat("parent=", request.parent()));
  return child_->ListFeaturestores(context, request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncUpdateFeaturestore(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::UpdateFeaturestoreRequest const& request) {
  SetMetadata(*context, absl::StrCat("featurestore.name=",
                                     request.featurestore().name()));
  return child_->AsyncUpdateFeaturestore(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncDeleteFeaturestore(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::DeleteFeaturestoreRequest const& request) {
  SetMetadata(*context, absl::StrCat("name=", request.name()));
  return child_->AsyncDeleteFeaturestore(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncCreateEntityType(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::CreateEntityTypeRequest const& request) {
  SetMetadata(*context, absl::StrCat("parent=", request.parent()));
  return child_->AsyncCreateEntityType(cq, std::move(context), request);
}

StatusOr<google::cloud::aiplatform::v1::EntityType>
FeaturestoreServiceMetadata::GetEntityType(
    grpc::ClientContext& context,
    google::cloud::aiplatform::v1::GetEntityTypeRequest const& request) {
  SetMetadata(context, absl::StrCat("name=", request.name()));
  return child_->GetEntityType(context, request);
}

StatusOr<google::cloud::aiplatform::v1::ListEntityTypesResponse>
FeaturestoreServiceMetadata::ListEntityTypes(
    grpc::ClientContext& context,
    google::cloud::aiplatform::v1::ListEntityTypesRequest const& request) {
  SetMetadata(context, absl::StrCat("parent=", request.parent()));
  return child_->ListEntityTypes(context, request);
}

StatusOr<google::cloud::aiplatform::v1::EntityType>
FeaturestoreServiceMetadata::UpdateEntityType(
    grpc::ClientContext& context,
    google::cloud::aiplatform::v1::UpdateEntityTypeRequest const& request) {
  SetMetadata(context,
              absl::StrCat("entity_type.name=", request.entity_type().name()));
  return child_->UpdateEntityType(context, request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncDeleteEntityType(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::DeleteEntityTypeRequest const& request) {
  SetMetadata(*context, absl::StrCat("name=", request.name()));
  return child_->AsyncDeleteEntityType(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncCreateFeature(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::CreateFeatureRequest const& request) {
  SetMetadata(*context, absl::StrCat("parent=", request.parent()));
  return child_->AsyncCreateFeature(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncBatchCreateFeatures(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::BatchCreateFeaturesRequest const& request) {
  SetMetadata(*context, absl::StrCat("parent=", request.parent()));
  return child_->AsyncBatchCreateFeatures(cq, std::move(context), request);
}

StatusOr<google::cloud::aiplatform::v1::Feature>
FeaturestoreServiceMetadata::GetFeature(
    grpc::ClientContext& context,
    google::cloud::aiplatform::v1::GetFeatureRequest const& request) {
  SetMetadata(context, absl::StrCat("name=", request.name()));
  return child_->GetFeature(context, request);
}

StatusOr<google::cloud::aiplatform::v1::ListFeaturesResponse>
FeaturestoreServiceMetadata::ListFeatures(
    grpc::ClientContext& context,
    google::cloud::aiplatform::v1::ListFeaturesRequest const& request) {
  SetMetadata(context, absl::StrCat("parent=", request.parent()));
  return child_->ListFeatures(context, request);
}

StatusOr<google::cloud::aiplatform::v1::Feature>
FeaturestoreServiceMetadata::UpdateFeature(
    grpc::ClientContext& context,
    google::cloud::aiplatform::v1::UpdateFeatureRequest const& request) {
  SetMetadata(context, absl::StrCat("feature.name=", request.feature().name()));
  return child_->UpdateFeature(context, request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncDeleteFeature(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::DeleteFeatureRequest const& request) {
  SetMetadata(*context, absl::StrCat("name=", request.name()));
  return child_->AsyncDeleteFeature(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncImportFeatureValues(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::ImportFeatureValuesRequest const& request) {
  SetMetadata(*context, absl::StrCat("entity_type=", request.entity_type()));
  return child_->AsyncImportFeatureValues(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncBatchReadFeatureValues(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::BatchReadFeatureValuesRequest const&
        request) {
  SetMetadata(*context, absl::StrCat("featurestore=", request.featurestore()));
  return child_->AsyncBatchReadFeatureValues(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncExportFeatureValues(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::ExportFeatureValuesRequest const& request) {
  SetMetadata(*context, absl::StrCat("entity_type=", request.entity_type()));
  return child_->AsyncExportFeatureValues(cq, std::move(context), request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncDeleteFeatureValues(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::aiplatform::v1::DeleteFeatureValuesRequest const& request) {
  SetMetadata(*context, absl::StrCat("entity_type=", request.entity_type()));
  return child_->AsyncDeleteFeatureValues(cq, std::move(context), request);
}

StatusOr<google::cloud::aiplatform::v1::SearchFeaturesResponse>
FeaturestoreServiceMetadata::SearchFeatures(
    grpc::ClientContext& context,
    google::cloud::aiplatform::v1::SearchFeaturesRequest const& request) {
  SetMetadata(context, absl::StrCat("location=", request.location()));
  return child_->SearchFeatures(context, request);
}

future<StatusOr<google::longrunning::Operation>>
FeaturestoreServiceMetadata::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::longrunning::GetOperationRequest const& request) {
  SetMetadata(*context, "name=" + request.name());
  return child_->AsyncGetOperation(cq, std::move(context), request);
}

future<Status> FeaturestoreServiceMetadata::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::longrunning::CancelOperationRequest const& request) {
  SetMetadata(*context, "name=" + request.name());
  return child_->AsyncCancelOperation(cq, std::move(context), request);
}

void FeaturestoreServiceMetadata::SetMetadata(
    grpc::ClientContext& context, std::string const& request_params) {
  context.AddMetadata("x-goog-request-params", request_params);
  SetMetadata(context);
}

void FeaturestoreServiceMetadata::SetMetadata(grpc::ClientContext& context) {
  for (auto const& kv : fixed_metadata_) {
    context.AddMetadata(kv.first, kv.second);
  }
  context.AddMetadata("x-goog-api-client", api_client_header_);
  auto const& options = internal::CurrentOptions();
  if (options.has<UserProjectOption>()) {
    context.AddMetadata("x-goog-user-project",
                        options.get<UserProjectOption>());
  }
  auto const& authority = options.get<AuthorityOption>();
  if (!authority.empty()) context.set_authority(authority);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace aiplatform_v1_internal
}  // namespace cloud
}  // namespace google
