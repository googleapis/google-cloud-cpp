// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/aiplatform/v1/persistent_resource_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_AIPLATFORM_V1_PERSISTENT_RESOURCE_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_AIPLATFORM_V1_PERSISTENT_RESOURCE_CLIENT_H

#include "google/cloud/aiplatform/v1/persistent_resource_connection.h"
#include "google/cloud/experimental_tag.h"
#include "google/cloud/future.h"
#include "google/cloud/no_await_tag.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <map>
#include <memory>
#include <string>

namespace google {
namespace cloud {
namespace aiplatform_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// A service for managing Vertex AI's machine learning PersistentResource.
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class PersistentResourceServiceClient {
 public:
  explicit PersistentResourceServiceClient(
      std::shared_ptr<PersistentResourceServiceConnection> connection,
      Options opts = {});
  ~PersistentResourceServiceClient();

  ///@{
  /// @name Copy and move support
  PersistentResourceServiceClient(PersistentResourceServiceClient const&) =
      default;
  PersistentResourceServiceClient& operator=(
      PersistentResourceServiceClient const&) = default;
  PersistentResourceServiceClient(PersistentResourceServiceClient&&) = default;
  PersistentResourceServiceClient& operator=(
      PersistentResourceServiceClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(PersistentResourceServiceClient const& a,
                         PersistentResourceServiceClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(PersistentResourceServiceClient const& a,
                         PersistentResourceServiceClient const& b) {
    return !(a == b);
  }
  ///@}

  // clang-format off
  ///
  /// Creates a PersistentResource.
  ///
  /// @param parent  Required. The resource name of the Location to create the
  ///  PersistentResource in. Format: `projects/{project}/locations/{location}`
  /// @param persistent_resource  Required. The PersistentResource to create.
  /// @param persistent_resource_id  Required. The ID to use for the PersistentResource, which become the final
  ///  component of the PersistentResource's resource name.
  ///  @n
  ///  The maximum length is 63 characters, and valid characters
  ///  are `/^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$/`.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.cloud.aiplatform.v1.PersistentResource] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.CreatePersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L120}
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  ///
  // clang-format on
  future<StatusOr<google::cloud::aiplatform::v1::PersistentResource>>
  CreatePersistentResource(
      std::string const& parent,
      google::cloud::aiplatform::v1::PersistentResource const&
          persistent_resource,
      std::string const& persistent_resource_id, Options opts = {});

  StatusOr<google::longrunning::Operation> CreatePersistentResource(
      ExperimentalTag, NoAwaitTag, std::string const& parent,
      google::cloud::aiplatform::v1::PersistentResource const&
          persistent_resource,
      std::string const& persistent_resource_id, Options opts = {});

  // clang-format off
  ///
  /// Creates a PersistentResource.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.aiplatform.v1.CreatePersistentResourceRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.cloud.aiplatform.v1.PersistentResource] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.CreatePersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L120}
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  ///
  // clang-format on
  future<StatusOr<google::cloud::aiplatform::v1::PersistentResource>>
  CreatePersistentResource(
      google::cloud::aiplatform::v1::CreatePersistentResourceRequest const&
          request,
      Options opts = {});

  StatusOr<google::longrunning::Operation> CreatePersistentResource(
      ExperimentalTag, NoAwaitTag,
      google::cloud::aiplatform::v1::CreatePersistentResourceRequest const&
          request,
      Options opts = {});

  future<StatusOr<google::cloud::aiplatform::v1::PersistentResource>>
  CreatePersistentResource(ExperimentalTag,
                           google::longrunning::Operation const& operation,
                           Options opts = {});

  // clang-format off
  ///
  /// Gets a PersistentResource.
  ///
  /// @param name  Required. The name of the PersistentResource resource.
  ///  Format:
  ///  `projects/{project_id_or_number}/locations/{location_id}/persistentResources/{persistent_resource_id}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.aiplatform.v1.PersistentResource])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.GetPersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L171}
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  ///
  // clang-format on
  StatusOr<google::cloud::aiplatform::v1::PersistentResource>
  GetPersistentResource(std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Gets a PersistentResource.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.aiplatform.v1.GetPersistentResourceRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.aiplatform.v1.PersistentResource])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.GetPersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L171}
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  ///
  // clang-format on
  StatusOr<google::cloud::aiplatform::v1::PersistentResource>
  GetPersistentResource(
      google::cloud::aiplatform::v1::GetPersistentResourceRequest const&
          request,
      Options opts = {});

  // clang-format off
  ///
  /// Lists PersistentResources in a Location.
  ///
  /// @param parent  Required. The resource name of the Location to list the PersistentResources
  ///  from. Format: `projects/{project}/locations/{location}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.cloud.aiplatform.v1.PersistentResource], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.ListPersistentResourcesRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L184}
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  ///
  // clang-format on
  StreamRange<google::cloud::aiplatform::v1::PersistentResource>
  ListPersistentResources(std::string const& parent, Options opts = {});

  // clang-format off
  ///
  /// Lists PersistentResources in a Location.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.aiplatform.v1.ListPersistentResourcesRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return a [StreamRange](@ref google::cloud::StreamRange)
  ///     to iterate of the results. See the documentation of this type for
  ///     details. In brief, this class has `begin()` and `end()` member
  ///     functions returning a iterator class meeting the
  ///     [input iterator requirements]. The value type for this iterator is a
  ///     [`StatusOr`] as the iteration may fail even after some values are
  ///     retrieved successfully, for example, if there is a network disconnect.
  ///     An empty set of results does not indicate an error, it indicates
  ///     that there are no resources meeting the request criteria.
  ///     On a successful iteration the `StatusOr<T>` contains elements of type
  ///     [google.cloud.aiplatform.v1.PersistentResource], or rather,
  ///     the C++ class generated by Protobuf from that type. Please consult the
  ///     Protobuf documentation for details on the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.ListPersistentResourcesRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L184}
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  ///
  // clang-format on
  StreamRange<google::cloud::aiplatform::v1::PersistentResource>
  ListPersistentResources(
      google::cloud::aiplatform::v1::ListPersistentResourcesRequest request,
      Options opts = {});

  // clang-format off
  ///
  /// Deletes a PersistentResource.
  ///
  /// @param name  Required. The name of the PersistentResource to be deleted.
  ///  Format:
  ///  `projects/{project}/locations/{location}/persistentResources/{persistent_resource}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.cloud.aiplatform.v1.DeleteOperationMetadata] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.DeleteOperationMetadata]: @googleapis_reference_link{google/cloud/aiplatform/v1/operation.proto#L52}
  /// [google.cloud.aiplatform.v1.DeletePersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L218}
  ///
  // clang-format on
  future<StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>
  DeletePersistentResource(std::string const& name, Options opts = {});

  StatusOr<google::longrunning::Operation> DeletePersistentResource(
      ExperimentalTag, NoAwaitTag, std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Deletes a PersistentResource.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.aiplatform.v1.DeletePersistentResourceRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.cloud.aiplatform.v1.DeleteOperationMetadata] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.DeleteOperationMetadata]: @googleapis_reference_link{google/cloud/aiplatform/v1/operation.proto#L52}
  /// [google.cloud.aiplatform.v1.DeletePersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L218}
  ///
  // clang-format on
  future<StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>
  DeletePersistentResource(
      google::cloud::aiplatform::v1::DeletePersistentResourceRequest const&
          request,
      Options opts = {});

  StatusOr<google::longrunning::Operation> DeletePersistentResource(
      ExperimentalTag, NoAwaitTag,
      google::cloud::aiplatform::v1::DeletePersistentResourceRequest const&
          request,
      Options opts = {});

  future<StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>
  DeletePersistentResource(ExperimentalTag,
                           google::longrunning::Operation const& operation,
                           Options opts = {});

  // clang-format off
  ///
  /// Updates a PersistentResource.
  ///
  /// @param persistent_resource  Required. The PersistentResource to update.
  ///  @n
  ///  The PersistentResource's `name` field is used to identify the
  ///  PersistentResource to update. Format:
  ///  `projects/{project}/locations/{location}/persistentResources/{persistent_resource}`
  /// @param update_mask  Required. Specify the fields to be overwritten in the PersistentResource by
  ///  the update method.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.cloud.aiplatform.v1.PersistentResource] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  /// [google.cloud.aiplatform.v1.UpdatePersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L231}
  ///
  // clang-format on
  future<StatusOr<google::cloud::aiplatform::v1::PersistentResource>>
  UpdatePersistentResource(
      google::cloud::aiplatform::v1::PersistentResource const&
          persistent_resource,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  StatusOr<google::longrunning::Operation> UpdatePersistentResource(
      ExperimentalTag, NoAwaitTag,
      google::cloud::aiplatform::v1::PersistentResource const&
          persistent_resource,
      google::protobuf::FieldMask const& update_mask, Options opts = {});

  // clang-format off
  ///
  /// Updates a PersistentResource.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.aiplatform.v1.UpdatePersistentResourceRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.cloud.aiplatform.v1.PersistentResource] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  /// [google.cloud.aiplatform.v1.UpdatePersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L231}
  ///
  // clang-format on
  future<StatusOr<google::cloud::aiplatform::v1::PersistentResource>>
  UpdatePersistentResource(
      google::cloud::aiplatform::v1::UpdatePersistentResourceRequest const&
          request,
      Options opts = {});

  StatusOr<google::longrunning::Operation> UpdatePersistentResource(
      ExperimentalTag, NoAwaitTag,
      google::cloud::aiplatform::v1::UpdatePersistentResourceRequest const&
          request,
      Options opts = {});

  future<StatusOr<google::cloud::aiplatform::v1::PersistentResource>>
  UpdatePersistentResource(ExperimentalTag,
                           google::longrunning::Operation const& operation,
                           Options opts = {});

  // clang-format off
  ///
  /// Reboots a PersistentResource.
  ///
  /// @param name  Required. The name of the PersistentResource resource.
  ///  Format:
  ///  `projects/{project_id_or_number}/locations/{location_id}/persistentResources/{persistent_resource_id}`
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.cloud.aiplatform.v1.PersistentResource] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  /// [google.cloud.aiplatform.v1.RebootPersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L248}
  ///
  // clang-format on
  future<StatusOr<google::cloud::aiplatform::v1::PersistentResource>>
  RebootPersistentResource(std::string const& name, Options opts = {});

  StatusOr<google::longrunning::Operation> RebootPersistentResource(
      ExperimentalTag, NoAwaitTag, std::string const& name, Options opts = {});

  // clang-format off
  ///
  /// Reboots a PersistentResource.
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.aiplatform.v1.RebootPersistentResourceRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return A [`future`] that becomes satisfied when the LRO
  ///     ([Long Running Operation]) completes or the polling policy in effect
  ///     for this call is exhausted. The future is satisfied with an error if
  ///     the LRO completes with an error or the polling policy is exhausted.
  ///     In this case the [`StatusOr`] returned by the future contains the
  ///     error. If the LRO completes successfully the value of the future
  ///     contains the LRO's result. For this RPC the result is a
  ///     [google.cloud.aiplatform.v1.PersistentResource] proto message.
  ///     The C++ class representing this message is created by Protobuf, using
  ///     the [Protobuf mapping rules].
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [Long Running Operation]: https://google.aip.dev/151
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.aiplatform.v1.PersistentResource]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource.proto#L38}
  /// [google.cloud.aiplatform.v1.RebootPersistentResourceRequest]: @googleapis_reference_link{google/cloud/aiplatform/v1/persistent_resource_service.proto#L248}
  ///
  // clang-format on
  future<StatusOr<google::cloud::aiplatform::v1::PersistentResource>>
  RebootPersistentResource(
      google::cloud::aiplatform::v1::RebootPersistentResourceRequest const&
          request,
      Options opts = {});

  StatusOr<google::longrunning::Operation> RebootPersistentResource(
      ExperimentalTag, NoAwaitTag,
      google::cloud::aiplatform::v1::RebootPersistentResourceRequest const&
          request,
      Options opts = {});

  future<StatusOr<google::cloud::aiplatform::v1::PersistentResource>>
  RebootPersistentResource(ExperimentalTag,
                           google::longrunning::Operation const& operation,
                           Options opts = {});

 private:
  std::shared_ptr<PersistentResourceServiceConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace aiplatform_v1
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_AIPLATFORM_V1_PERSISTENT_RESOURCE_CLIENT_H
