// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/aiplatform/v1/notebook_service.proto

#include "google/cloud/aiplatform/v1/notebook_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace aiplatform_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

NotebookServiceClient::NotebookServiceClient(
    std::shared_ptr<NotebookServiceConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
NotebookServiceClient::~NotebookServiceClient() = default;

future<StatusOr<google::cloud::aiplatform::v1::NotebookRuntimeTemplate>>
NotebookServiceClient::CreateNotebookRuntimeTemplate(
    std::string const& parent,
    google::cloud::aiplatform::v1::NotebookRuntimeTemplate const&
        notebook_runtime_template,
    std::string const& notebook_runtime_template_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::CreateNotebookRuntimeTemplateRequest request;
  request.set_parent(parent);
  *request.mutable_notebook_runtime_template() = notebook_runtime_template;
  request.set_notebook_runtime_template_id(notebook_runtime_template_id);
  return connection_->CreateNotebookRuntimeTemplate(request);
}

future<StatusOr<google::cloud::aiplatform::v1::NotebookRuntimeTemplate>>
NotebookServiceClient::CreateNotebookRuntimeTemplate(
    google::cloud::aiplatform::v1::CreateNotebookRuntimeTemplateRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateNotebookRuntimeTemplate(request);
}

StatusOr<google::cloud::aiplatform::v1::NotebookRuntimeTemplate>
NotebookServiceClient::GetNotebookRuntimeTemplate(std::string const& name,
                                                  Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::GetNotebookRuntimeTemplateRequest request;
  request.set_name(name);
  return connection_->GetNotebookRuntimeTemplate(request);
}

StatusOr<google::cloud::aiplatform::v1::NotebookRuntimeTemplate>
NotebookServiceClient::GetNotebookRuntimeTemplate(
    google::cloud::aiplatform::v1::GetNotebookRuntimeTemplateRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetNotebookRuntimeTemplate(request);
}

StreamRange<google::cloud::aiplatform::v1::NotebookRuntimeTemplate>
NotebookServiceClient::ListNotebookRuntimeTemplates(std::string const& parent,
                                                    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::ListNotebookRuntimeTemplatesRequest request;
  request.set_parent(parent);
  return connection_->ListNotebookRuntimeTemplates(request);
}

StreamRange<google::cloud::aiplatform::v1::NotebookRuntimeTemplate>
NotebookServiceClient::ListNotebookRuntimeTemplates(
    google::cloud::aiplatform::v1::ListNotebookRuntimeTemplatesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListNotebookRuntimeTemplates(std::move(request));
}

future<StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>
NotebookServiceClient::DeleteNotebookRuntimeTemplate(std::string const& name,
                                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::DeleteNotebookRuntimeTemplateRequest request;
  request.set_name(name);
  return connection_->DeleteNotebookRuntimeTemplate(request);
}

future<StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>
NotebookServiceClient::DeleteNotebookRuntimeTemplate(
    google::cloud::aiplatform::v1::DeleteNotebookRuntimeTemplateRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteNotebookRuntimeTemplate(request);
}

future<StatusOr<google::cloud::aiplatform::v1::NotebookRuntime>>
NotebookServiceClient::AssignNotebookRuntime(
    std::string const& parent, std::string const& notebook_runtime_template,
    google::cloud::aiplatform::v1::NotebookRuntime const& notebook_runtime,
    std::string const& notebook_runtime_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::AssignNotebookRuntimeRequest request;
  request.set_parent(parent);
  request.set_notebook_runtime_template(notebook_runtime_template);
  *request.mutable_notebook_runtime() = notebook_runtime;
  request.set_notebook_runtime_id(notebook_runtime_id);
  return connection_->AssignNotebookRuntime(request);
}

future<StatusOr<google::cloud::aiplatform::v1::NotebookRuntime>>
NotebookServiceClient::AssignNotebookRuntime(
    google::cloud::aiplatform::v1::AssignNotebookRuntimeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->AssignNotebookRuntime(request);
}

StatusOr<google::cloud::aiplatform::v1::NotebookRuntime>
NotebookServiceClient::GetNotebookRuntime(std::string const& name,
                                          Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::GetNotebookRuntimeRequest request;
  request.set_name(name);
  return connection_->GetNotebookRuntime(request);
}

StatusOr<google::cloud::aiplatform::v1::NotebookRuntime>
NotebookServiceClient::GetNotebookRuntime(
    google::cloud::aiplatform::v1::GetNotebookRuntimeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetNotebookRuntime(request);
}

StreamRange<google::cloud::aiplatform::v1::NotebookRuntime>
NotebookServiceClient::ListNotebookRuntimes(std::string const& parent,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::ListNotebookRuntimesRequest request;
  request.set_parent(parent);
  return connection_->ListNotebookRuntimes(request);
}

StreamRange<google::cloud::aiplatform::v1::NotebookRuntime>
NotebookServiceClient::ListNotebookRuntimes(
    google::cloud::aiplatform::v1::ListNotebookRuntimesRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListNotebookRuntimes(std::move(request));
}

future<StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>
NotebookServiceClient::DeleteNotebookRuntime(std::string const& name,
                                             Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::DeleteNotebookRuntimeRequest request;
  request.set_name(name);
  return connection_->DeleteNotebookRuntime(request);
}

future<StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>
NotebookServiceClient::DeleteNotebookRuntime(
    google::cloud::aiplatform::v1::DeleteNotebookRuntimeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteNotebookRuntime(request);
}

future<StatusOr<google::cloud::aiplatform::v1::UpgradeNotebookRuntimeResponse>>
NotebookServiceClient::UpgradeNotebookRuntime(std::string const& name,
                                              Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::UpgradeNotebookRuntimeRequest request;
  request.set_name(name);
  return connection_->UpgradeNotebookRuntime(request);
}

future<StatusOr<google::cloud::aiplatform::v1::UpgradeNotebookRuntimeResponse>>
NotebookServiceClient::UpgradeNotebookRuntime(
    google::cloud::aiplatform::v1::UpgradeNotebookRuntimeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpgradeNotebookRuntime(request);
}

future<StatusOr<google::cloud::aiplatform::v1::StartNotebookRuntimeResponse>>
NotebookServiceClient::StartNotebookRuntime(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::aiplatform::v1::StartNotebookRuntimeRequest request;
  request.set_name(name);
  return connection_->StartNotebookRuntime(request);
}

future<StatusOr<google::cloud::aiplatform::v1::StartNotebookRuntimeResponse>>
NotebookServiceClient::StartNotebookRuntime(
    google::cloud::aiplatform::v1::StartNotebookRuntimeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->StartNotebookRuntime(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace aiplatform_v1
}  // namespace cloud
}  // namespace google
