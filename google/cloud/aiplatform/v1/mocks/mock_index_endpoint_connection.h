// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/aiplatform/v1/index_endpoint_service.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_AIPLATFORM_V1_MOCKS_MOCK_INDEX_ENDPOINT_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_AIPLATFORM_V1_MOCKS_MOCK_INDEX_ENDPOINT_CONNECTION_H

#include "google/cloud/aiplatform/v1/index_endpoint_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace aiplatform_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `IndexEndpointServiceConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `IndexEndpointServiceClient`. To do
 * so, construct an object of type `IndexEndpointServiceClient` with an instance
 * of this class. Then use the Google Test framework functions to program the
 * behavior of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @googleapis_dev_link{bigquery,bigquery-read-mock.html}
 */
class MockIndexEndpointServiceConnection
    : public aiplatform_v1::IndexEndpointServiceConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(future<StatusOr<google::cloud::aiplatform::v1::IndexEndpoint>>,
              CreateIndexEndpoint,
              (google::cloud::aiplatform::v1::CreateIndexEndpointRequest const&
                   request),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::aiplatform::v1::IndexEndpoint>, GetIndexEndpoint,
      (google::cloud::aiplatform::v1::GetIndexEndpointRequest const& request),
      (override));

  MOCK_METHOD(
      StreamRange<google::cloud::aiplatform::v1::IndexEndpoint>,
      ListIndexEndpoints,
      (google::cloud::aiplatform::v1::ListIndexEndpointsRequest request),
      (override));

  MOCK_METHOD(StatusOr<google::cloud::aiplatform::v1::IndexEndpoint>,
              UpdateIndexEndpoint,
              (google::cloud::aiplatform::v1::UpdateIndexEndpointRequest const&
                   request),
              (override));

  MOCK_METHOD(
      future<StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>,
      DeleteIndexEndpoint,
      (google::cloud::aiplatform::v1::DeleteIndexEndpointRequest const&
           request),
      (override));

  MOCK_METHOD(
      future<StatusOr<google::cloud::aiplatform::v1::DeployIndexResponse>>,
      DeployIndex,
      (google::cloud::aiplatform::v1::DeployIndexRequest const& request),
      (override));

  MOCK_METHOD(
      future<StatusOr<google::cloud::aiplatform::v1::UndeployIndexResponse>>,
      UndeployIndex,
      (google::cloud::aiplatform::v1::UndeployIndexRequest const& request),
      (override));

  MOCK_METHOD(
      future<
          StatusOr<google::cloud::aiplatform::v1::MutateDeployedIndexResponse>>,
      MutateDeployedIndex,
      (google::cloud::aiplatform::v1::MutateDeployedIndexRequest const&
           request),
      (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace aiplatform_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_AIPLATFORM_V1_MOCKS_MOCK_INDEX_ENDPOINT_CONNECTION_H
