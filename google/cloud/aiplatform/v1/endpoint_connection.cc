// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/aiplatform/v1/endpoint_service.proto

#include "google/cloud/aiplatform/v1/endpoint_connection.h"
#include "google/cloud/aiplatform/v1/endpoint_options.h"
#include "google/cloud/aiplatform/v1/internal/endpoint_connection_impl.h"
#include "google/cloud/aiplatform/v1/internal/endpoint_option_defaults.h"
#include "google/cloud/aiplatform/v1/internal/endpoint_stub_factory.h"
#include "google/cloud/aiplatform/v1/internal/endpoint_tracing_connection.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>

namespace google {
namespace cloud {
namespace aiplatform_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

EndpointServiceConnection::~EndpointServiceConnection() = default;

future<StatusOr<google::cloud::aiplatform::v1::Endpoint>>
EndpointServiceConnection::CreateEndpoint(
    google::cloud::aiplatform::v1::CreateEndpointRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::aiplatform::v1::Endpoint>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::cloud::aiplatform::v1::Endpoint>
EndpointServiceConnection::GetEndpoint(
    google::cloud::aiplatform::v1::GetEndpointRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::aiplatform::v1::Endpoint>
EndpointServiceConnection::ListEndpoints(
    google::cloud::aiplatform::v1::
        ListEndpointsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::aiplatform::v1::Endpoint>>();
}

StatusOr<google::cloud::aiplatform::v1::Endpoint>
EndpointServiceConnection::UpdateEndpoint(
    google::cloud::aiplatform::v1::UpdateEndpointRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>
EndpointServiceConnection::DeleteEndpoint(
    google::cloud::aiplatform::v1::DeleteEndpointRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::aiplatform::v1::DeleteOperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::aiplatform::v1::DeployModelResponse>>
EndpointServiceConnection::DeployModel(
    google::cloud::aiplatform::v1::DeployModelRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::aiplatform::v1::DeployModelResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::aiplatform::v1::UndeployModelResponse>>
EndpointServiceConnection::UndeployModel(
    google::cloud::aiplatform::v1::UndeployModelRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::aiplatform::v1::UndeployModelResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::aiplatform::v1::MutateDeployedModelResponse>>
EndpointServiceConnection::MutateDeployedModel(
    google::cloud::aiplatform::v1::MutateDeployedModelRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::aiplatform::v1::MutateDeployedModelResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

std::shared_ptr<EndpointServiceConnection> MakeEndpointServiceConnection(
    std::string const& location, Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 EndpointServicePolicyOptionList>(options,
                                                                  __func__);
  options = aiplatform_v1_internal::EndpointServiceDefaultOptions(
      location, std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub = aiplatform_v1_internal::CreateDefaultEndpointServiceStub(
      std::move(auth), options);
  return aiplatform_v1_internal::MakeEndpointServiceTracingConnection(
      std::make_shared<aiplatform_v1_internal::EndpointServiceConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace aiplatform_v1
}  // namespace cloud
}  // namespace google
