// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/apihub_service.proto

#include "google/cloud/apihub/v1/api_hub_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ApiHubClient::ApiHubClient(std::shared_ptr<ApiHubConnection> connection,
                           Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
ApiHubClient::~ApiHubClient() = default;

StatusOr<google::cloud::apihub::v1::Api> ApiHubClient::CreateApi(
    std::string const& parent, google::cloud::apihub::v1::Api const& api,
    std::string const& api_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::CreateApiRequest request;
  request.set_parent(parent);
  *request.mutable_api() = api;
  request.set_api_id(api_id);
  return connection_->CreateApi(request);
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubClient::CreateApi(
    google::cloud::apihub::v1::CreateApiRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateApi(request);
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubClient::GetApi(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetApiRequest request;
  request.set_name(name);
  return connection_->GetApi(request);
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubClient::GetApi(
    google::cloud::apihub::v1::GetApiRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetApi(request);
}

StreamRange<google::cloud::apihub::v1::Api> ApiHubClient::ListApis(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::ListApisRequest request;
  request.set_parent(parent);
  return connection_->ListApis(request);
}

StreamRange<google::cloud::apihub::v1::Api> ApiHubClient::ListApis(
    google::cloud::apihub::v1::ListApisRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListApis(std::move(request));
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubClient::UpdateApi(
    google::cloud::apihub::v1::Api const& api,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::UpdateApiRequest request;
  *request.mutable_api() = api;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateApi(request);
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubClient::UpdateApi(
    google::cloud::apihub::v1::UpdateApiRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateApi(request);
}

Status ApiHubClient::DeleteApi(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::DeleteApiRequest request;
  request.set_name(name);
  return connection_->DeleteApi(request);
}

Status ApiHubClient::DeleteApi(
    google::cloud::apihub::v1::DeleteApiRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteApi(request);
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubClient::CreateVersion(
    std::string const& parent,
    google::cloud::apihub::v1::Version const& version,
    std::string const& version_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::CreateVersionRequest request;
  request.set_parent(parent);
  *request.mutable_version() = version;
  request.set_version_id(version_id);
  return connection_->CreateVersion(request);
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubClient::CreateVersion(
    google::cloud::apihub::v1::CreateVersionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateVersion(request);
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubClient::GetVersion(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetVersionRequest request;
  request.set_name(name);
  return connection_->GetVersion(request);
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubClient::GetVersion(
    google::cloud::apihub::v1::GetVersionRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetVersion(request);
}

StreamRange<google::cloud::apihub::v1::Version> ApiHubClient::ListVersions(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::ListVersionsRequest request;
  request.set_parent(parent);
  return connection_->ListVersions(request);
}

StreamRange<google::cloud::apihub::v1::Version> ApiHubClient::ListVersions(
    google::cloud::apihub::v1::ListVersionsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListVersions(std::move(request));
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubClient::UpdateVersion(
    google::cloud::apihub::v1::Version const& version,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::UpdateVersionRequest request;
  *request.mutable_version() = version;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateVersion(request);
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubClient::UpdateVersion(
    google::cloud::apihub::v1::UpdateVersionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateVersion(request);
}

Status ApiHubClient::DeleteVersion(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::DeleteVersionRequest request;
  request.set_name(name);
  return connection_->DeleteVersion(request);
}

Status ApiHubClient::DeleteVersion(
    google::cloud::apihub::v1::DeleteVersionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteVersion(request);
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubClient::CreateSpec(
    std::string const& parent, google::cloud::apihub::v1::Spec const& spec,
    std::string const& spec_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::CreateSpecRequest request;
  request.set_parent(parent);
  *request.mutable_spec() = spec;
  request.set_spec_id(spec_id);
  return connection_->CreateSpec(request);
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubClient::CreateSpec(
    google::cloud::apihub::v1::CreateSpecRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateSpec(request);
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubClient::GetSpec(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetSpecRequest request;
  request.set_name(name);
  return connection_->GetSpec(request);
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubClient::GetSpec(
    google::cloud::apihub::v1::GetSpecRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetSpec(request);
}

StatusOr<google::cloud::apihub::v1::SpecContents> ApiHubClient::GetSpecContents(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetSpecContentsRequest request;
  request.set_name(name);
  return connection_->GetSpecContents(request);
}

StatusOr<google::cloud::apihub::v1::SpecContents> ApiHubClient::GetSpecContents(
    google::cloud::apihub::v1::GetSpecContentsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetSpecContents(request);
}

StreamRange<google::cloud::apihub::v1::Spec> ApiHubClient::ListSpecs(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::ListSpecsRequest request;
  request.set_parent(parent);
  return connection_->ListSpecs(request);
}

StreamRange<google::cloud::apihub::v1::Spec> ApiHubClient::ListSpecs(
    google::cloud::apihub::v1::ListSpecsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListSpecs(std::move(request));
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubClient::UpdateSpec(
    google::cloud::apihub::v1::Spec const& spec,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::UpdateSpecRequest request;
  *request.mutable_spec() = spec;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateSpec(request);
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubClient::UpdateSpec(
    google::cloud::apihub::v1::UpdateSpecRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateSpec(request);
}

Status ApiHubClient::DeleteSpec(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::DeleteSpecRequest request;
  request.set_name(name);
  return connection_->DeleteSpec(request);
}

Status ApiHubClient::DeleteSpec(
    google::cloud::apihub::v1::DeleteSpecRequest const& request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteSpec(request);
}

StatusOr<google::cloud::apihub::v1::ApiOperation> ApiHubClient::GetApiOperation(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetApiOperationRequest request;
  request.set_name(name);
  return connection_->GetApiOperation(request);
}

StatusOr<google::cloud::apihub::v1::ApiOperation> ApiHubClient::GetApiOperation(
    google::cloud::apihub::v1::GetApiOperationRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetApiOperation(request);
}

StreamRange<google::cloud::apihub::v1::ApiOperation>
ApiHubClient::ListApiOperations(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::ListApiOperationsRequest request;
  request.set_parent(parent);
  return connection_->ListApiOperations(request);
}

StreamRange<google::cloud::apihub::v1::ApiOperation>
ApiHubClient::ListApiOperations(
    google::cloud::apihub::v1::ListApiOperationsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListApiOperations(std::move(request));
}

StatusOr<google::cloud::apihub::v1::Definition> ApiHubClient::GetDefinition(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetDefinitionRequest request;
  request.set_name(name);
  return connection_->GetDefinition(request);
}

StatusOr<google::cloud::apihub::v1::Definition> ApiHubClient::GetDefinition(
    google::cloud::apihub::v1::GetDefinitionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetDefinition(request);
}

StatusOr<google::cloud::apihub::v1::Deployment> ApiHubClient::CreateDeployment(
    std::string const& parent,
    google::cloud::apihub::v1::Deployment const& deployment,
    std::string const& deployment_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::CreateDeploymentRequest request;
  request.set_parent(parent);
  *request.mutable_deployment() = deployment;
  request.set_deployment_id(deployment_id);
  return connection_->CreateDeployment(request);
}

StatusOr<google::cloud::apihub::v1::Deployment> ApiHubClient::CreateDeployment(
    google::cloud::apihub::v1::CreateDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateDeployment(request);
}

StatusOr<google::cloud::apihub::v1::Deployment> ApiHubClient::GetDeployment(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetDeploymentRequest request;
  request.set_name(name);
  return connection_->GetDeployment(request);
}

StatusOr<google::cloud::apihub::v1::Deployment> ApiHubClient::GetDeployment(
    google::cloud::apihub::v1::GetDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetDeployment(request);
}

StreamRange<google::cloud::apihub::v1::Deployment>
ApiHubClient::ListDeployments(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::ListDeploymentsRequest request;
  request.set_parent(parent);
  return connection_->ListDeployments(request);
}

StreamRange<google::cloud::apihub::v1::Deployment>
ApiHubClient::ListDeployments(
    google::cloud::apihub::v1::ListDeploymentsRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListDeployments(std::move(request));
}

StatusOr<google::cloud::apihub::v1::Deployment> ApiHubClient::UpdateDeployment(
    google::cloud::apihub::v1::Deployment const& deployment,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::UpdateDeploymentRequest request;
  *request.mutable_deployment() = deployment;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateDeployment(request);
}

StatusOr<google::cloud::apihub::v1::Deployment> ApiHubClient::UpdateDeployment(
    google::cloud::apihub::v1::UpdateDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateDeployment(request);
}

Status ApiHubClient::DeleteDeployment(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::DeleteDeploymentRequest request;
  request.set_name(name);
  return connection_->DeleteDeployment(request);
}

Status ApiHubClient::DeleteDeployment(
    google::cloud::apihub::v1::DeleteDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteDeployment(request);
}

StatusOr<google::cloud::apihub::v1::Attribute> ApiHubClient::CreateAttribute(
    std::string const& parent,
    google::cloud::apihub::v1::Attribute const& attribute,
    std::string const& attribute_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::CreateAttributeRequest request;
  request.set_parent(parent);
  *request.mutable_attribute() = attribute;
  request.set_attribute_id(attribute_id);
  return connection_->CreateAttribute(request);
}

StatusOr<google::cloud::apihub::v1::Attribute> ApiHubClient::CreateAttribute(
    google::cloud::apihub::v1::CreateAttributeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateAttribute(request);
}

StatusOr<google::cloud::apihub::v1::Attribute> ApiHubClient::GetAttribute(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetAttributeRequest request;
  request.set_name(name);
  return connection_->GetAttribute(request);
}

StatusOr<google::cloud::apihub::v1::Attribute> ApiHubClient::GetAttribute(
    google::cloud::apihub::v1::GetAttributeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetAttribute(request);
}

StatusOr<google::cloud::apihub::v1::Attribute> ApiHubClient::UpdateAttribute(
    google::cloud::apihub::v1::Attribute const& attribute,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::UpdateAttributeRequest request;
  *request.mutable_attribute() = attribute;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateAttribute(request);
}

StatusOr<google::cloud::apihub::v1::Attribute> ApiHubClient::UpdateAttribute(
    google::cloud::apihub::v1::UpdateAttributeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateAttribute(request);
}

Status ApiHubClient::DeleteAttribute(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::DeleteAttributeRequest request;
  request.set_name(name);
  return connection_->DeleteAttribute(request);
}

Status ApiHubClient::DeleteAttribute(
    google::cloud::apihub::v1::DeleteAttributeRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteAttribute(request);
}

StreamRange<google::cloud::apihub::v1::Attribute> ApiHubClient::ListAttributes(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::ListAttributesRequest request;
  request.set_parent(parent);
  return connection_->ListAttributes(request);
}

StreamRange<google::cloud::apihub::v1::Attribute> ApiHubClient::ListAttributes(
    google::cloud::apihub::v1::ListAttributesRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListAttributes(std::move(request));
}

StreamRange<google::cloud::apihub::v1::SearchResult>
ApiHubClient::SearchResources(std::string const& location,
                              std::string const& query, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::SearchResourcesRequest request;
  request.set_location(location);
  request.set_query(query);
  return connection_->SearchResources(request);
}

StreamRange<google::cloud::apihub::v1::SearchResult>
ApiHubClient::SearchResources(
    google::cloud::apihub::v1::SearchResourcesRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SearchResources(std::move(request));
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubClient::CreateExternalApi(
    std::string const& parent,
    google::cloud::apihub::v1::ExternalApi const& external_api,
    std::string const& external_api_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::CreateExternalApiRequest request;
  request.set_parent(parent);
  *request.mutable_external_api() = external_api;
  request.set_external_api_id(external_api_id);
  return connection_->CreateExternalApi(request);
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubClient::CreateExternalApi(
    google::cloud::apihub::v1::CreateExternalApiRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateExternalApi(request);
}

StatusOr<google::cloud::apihub::v1::ExternalApi> ApiHubClient::GetExternalApi(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetExternalApiRequest request;
  request.set_name(name);
  return connection_->GetExternalApi(request);
}

StatusOr<google::cloud::apihub::v1::ExternalApi> ApiHubClient::GetExternalApi(
    google::cloud::apihub::v1::GetExternalApiRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetExternalApi(request);
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubClient::UpdateExternalApi(
    google::cloud::apihub::v1::ExternalApi const& external_api,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::UpdateExternalApiRequest request;
  *request.mutable_external_api() = external_api;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateExternalApi(request);
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubClient::UpdateExternalApi(
    google::cloud::apihub::v1::UpdateExternalApiRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateExternalApi(request);
}

Status ApiHubClient::DeleteExternalApi(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::DeleteExternalApiRequest request;
  request.set_name(name);
  return connection_->DeleteExternalApi(request);
}

Status ApiHubClient::DeleteExternalApi(
    google::cloud::apihub::v1::DeleteExternalApiRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteExternalApi(request);
}

StreamRange<google::cloud::apihub::v1::ExternalApi>
ApiHubClient::ListExternalApis(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::ListExternalApisRequest request;
  request.set_parent(parent);
  return connection_->ListExternalApis(request);
}

StreamRange<google::cloud::apihub::v1::ExternalApi>
ApiHubClient::ListExternalApis(
    google::cloud::apihub::v1::ListExternalApisRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListExternalApis(std::move(request));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1
}  // namespace cloud
}  // namespace google
