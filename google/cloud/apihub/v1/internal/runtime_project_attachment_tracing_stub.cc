// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/runtime_project_attachment_service.proto

#include "google/cloud/apihub/v1/internal/runtime_project_attachment_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

RuntimeProjectAttachmentServiceTracingStub::
    RuntimeProjectAttachmentServiceTracingStub(
        std::shared_ptr<RuntimeProjectAttachmentServiceStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::apihub::v1::RuntimeProjectAttachment>
RuntimeProjectAttachmentServiceTracingStub::CreateRuntimeProjectAttachment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::CreateRuntimeProjectAttachmentRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.apihub.v1.RuntimeProjectAttachmentService",
      "CreateRuntimeProjectAttachment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->CreateRuntimeProjectAttachment(context, options, request));
}

StatusOr<google::cloud::apihub::v1::RuntimeProjectAttachment>
RuntimeProjectAttachmentServiceTracingStub::GetRuntimeProjectAttachment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetRuntimeProjectAttachmentRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.apihub.v1.RuntimeProjectAttachmentService",
      "GetRuntimeProjectAttachment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->GetRuntimeProjectAttachment(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ListRuntimeProjectAttachmentsResponse>
RuntimeProjectAttachmentServiceTracingStub::ListRuntimeProjectAttachments(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::ListRuntimeProjectAttachmentsRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.apihub.v1.RuntimeProjectAttachmentService",
      "ListRuntimeProjectAttachments");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->ListRuntimeProjectAttachments(context, options, request));
}

Status
RuntimeProjectAttachmentServiceTracingStub::DeleteRuntimeProjectAttachment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::DeleteRuntimeProjectAttachmentRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.apihub.v1.RuntimeProjectAttachmentService",
      "DeleteRuntimeProjectAttachment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->DeleteRuntimeProjectAttachment(context, options, request));
}

StatusOr<google::cloud::apihub::v1::LookupRuntimeProjectAttachmentResponse>
RuntimeProjectAttachmentServiceTracingStub::LookupRuntimeProjectAttachment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::LookupRuntimeProjectAttachmentRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.apihub.v1.RuntimeProjectAttachmentService",
      "LookupRuntimeProjectAttachment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span,
      child_->LookupRuntimeProjectAttachment(context, options, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<RuntimeProjectAttachmentServiceStub>
MakeRuntimeProjectAttachmentServiceTracingStub(
    std::shared_ptr<RuntimeProjectAttachmentServiceStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<RuntimeProjectAttachmentServiceTracingStub>(
      std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1_internal
}  // namespace cloud
}  // namespace google
