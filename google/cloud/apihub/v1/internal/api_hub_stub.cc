// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/apihub_service.proto

#include "google/cloud/apihub/v1/internal/api_hub_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/apihub/v1/apihub_service.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ApiHubStub::~ApiHubStub() = default;

StatusOr<google::cloud::apihub::v1::Api> DefaultApiHubStub::CreateApi(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::CreateApiRequest const& request) {
  google::cloud::apihub::v1::Api response;
  auto status = grpc_stub_->CreateApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Api> DefaultApiHubStub::GetApi(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::GetApiRequest const& request) {
  google::cloud::apihub::v1::Api response;
  auto status = grpc_stub_->GetApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::ListApisResponse>
DefaultApiHubStub::ListApis(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::ListApisRequest const& request) {
  google::cloud::apihub::v1::ListApisResponse response;
  auto status = grpc_stub_->ListApis(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Api> DefaultApiHubStub::UpdateApi(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::UpdateApiRequest const& request) {
  google::cloud::apihub::v1::Api response;
  auto status = grpc_stub_->UpdateApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultApiHubStub::DeleteApi(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::DeleteApiRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apihub::v1::Version> DefaultApiHubStub::CreateVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::CreateVersionRequest const& request) {
  google::cloud::apihub::v1::Version response;
  auto status = grpc_stub_->CreateVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Version> DefaultApiHubStub::GetVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::GetVersionRequest const& request) {
  google::cloud::apihub::v1::Version response;
  auto status = grpc_stub_->GetVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::ListVersionsResponse>
DefaultApiHubStub::ListVersions(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::ListVersionsRequest const& request) {
  google::cloud::apihub::v1::ListVersionsResponse response;
  auto status = grpc_stub_->ListVersions(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Version> DefaultApiHubStub::UpdateVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::UpdateVersionRequest const& request) {
  google::cloud::apihub::v1::Version response;
  auto status = grpc_stub_->UpdateVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultApiHubStub::DeleteVersion(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::DeleteVersionRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apihub::v1::Spec> DefaultApiHubStub::CreateSpec(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::CreateSpecRequest const& request) {
  google::cloud::apihub::v1::Spec response;
  auto status = grpc_stub_->CreateSpec(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Spec> DefaultApiHubStub::GetSpec(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::GetSpecRequest const& request) {
  google::cloud::apihub::v1::Spec response;
  auto status = grpc_stub_->GetSpec(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::SpecContents>
DefaultApiHubStub::GetSpecContents(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::GetSpecContentsRequest const& request) {
  google::cloud::apihub::v1::SpecContents response;
  auto status = grpc_stub_->GetSpecContents(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::ListSpecsResponse>
DefaultApiHubStub::ListSpecs(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::ListSpecsRequest const& request) {
  google::cloud::apihub::v1::ListSpecsResponse response;
  auto status = grpc_stub_->ListSpecs(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Spec> DefaultApiHubStub::UpdateSpec(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::UpdateSpecRequest const& request) {
  google::cloud::apihub::v1::Spec response;
  auto status = grpc_stub_->UpdateSpec(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultApiHubStub::DeleteSpec(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::DeleteSpecRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteSpec(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apihub::v1::ApiOperation>
DefaultApiHubStub::GetApiOperation(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::GetApiOperationRequest const& request) {
  google::cloud::apihub::v1::ApiOperation response;
  auto status = grpc_stub_->GetApiOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::ListApiOperationsResponse>
DefaultApiHubStub::ListApiOperations(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::ListApiOperationsRequest const& request) {
  google::cloud::apihub::v1::ListApiOperationsResponse response;
  auto status = grpc_stub_->ListApiOperations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Definition>
DefaultApiHubStub::GetDefinition(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::GetDefinitionRequest const& request) {
  google::cloud::apihub::v1::Definition response;
  auto status = grpc_stub_->GetDefinition(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Deployment>
DefaultApiHubStub::CreateDeployment(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::CreateDeploymentRequest const& request) {
  google::cloud::apihub::v1::Deployment response;
  auto status = grpc_stub_->CreateDeployment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Deployment>
DefaultApiHubStub::GetDeployment(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::GetDeploymentRequest const& request) {
  google::cloud::apihub::v1::Deployment response;
  auto status = grpc_stub_->GetDeployment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::ListDeploymentsResponse>
DefaultApiHubStub::ListDeployments(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::ListDeploymentsRequest const& request) {
  google::cloud::apihub::v1::ListDeploymentsResponse response;
  auto status = grpc_stub_->ListDeployments(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Deployment>
DefaultApiHubStub::UpdateDeployment(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::UpdateDeploymentRequest const& request) {
  google::cloud::apihub::v1::Deployment response;
  auto status = grpc_stub_->UpdateDeployment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultApiHubStub::DeleteDeployment(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::DeleteDeploymentRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteDeployment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apihub::v1::Attribute>
DefaultApiHubStub::CreateAttribute(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::CreateAttributeRequest const& request) {
  google::cloud::apihub::v1::Attribute response;
  auto status = grpc_stub_->CreateAttribute(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Attribute> DefaultApiHubStub::GetAttribute(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::GetAttributeRequest const& request) {
  google::cloud::apihub::v1::Attribute response;
  auto status = grpc_stub_->GetAttribute(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::Attribute>
DefaultApiHubStub::UpdateAttribute(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::UpdateAttributeRequest const& request) {
  google::cloud::apihub::v1::Attribute response;
  auto status = grpc_stub_->UpdateAttribute(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultApiHubStub::DeleteAttribute(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::DeleteAttributeRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteAttribute(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apihub::v1::ListAttributesResponse>
DefaultApiHubStub::ListAttributes(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::ListAttributesRequest const& request) {
  google::cloud::apihub::v1::ListAttributesResponse response;
  auto status = grpc_stub_->ListAttributes(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::SearchResourcesResponse>
DefaultApiHubStub::SearchResources(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::SearchResourcesRequest const& request) {
  google::cloud::apihub::v1::SearchResourcesResponse response;
  auto status = grpc_stub_->SearchResources(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
DefaultApiHubStub::CreateExternalApi(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::CreateExternalApiRequest const& request) {
  google::cloud::apihub::v1::ExternalApi response;
  auto status = grpc_stub_->CreateExternalApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
DefaultApiHubStub::GetExternalApi(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::GetExternalApiRequest const& request) {
  google::cloud::apihub::v1::ExternalApi response;
  auto status = grpc_stub_->GetExternalApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
DefaultApiHubStub::UpdateExternalApi(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::UpdateExternalApiRequest const& request) {
  google::cloud::apihub::v1::ExternalApi response;
  auto status = grpc_stub_->UpdateExternalApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultApiHubStub::DeleteExternalApi(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::DeleteExternalApiRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteExternalApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apihub::v1::ListExternalApisResponse>
DefaultApiHubStub::ListExternalApis(
    grpc::ClientContext& context, Options const&,
    google::cloud::apihub::v1::ListExternalApisRequest const& request) {
  google::cloud::apihub::v1::ListExternalApisResponse response;
  auto status = grpc_stub_->ListExternalApis(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1_internal
}  // namespace cloud
}  // namespace google
