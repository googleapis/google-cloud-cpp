// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/apihub_service.proto

#include "google/cloud/apihub/v1/internal/api_hub_connection_impl.h"
#include "google/cloud/apihub/v1/internal/api_hub_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace {

std::unique_ptr<apihub_v1::ApiHubRetryPolicy> retry_policy(
    Options const& options) {
  return options.get<apihub_v1::ApiHubRetryPolicyOption>()->clone();
}

std::unique_ptr<BackoffPolicy> backoff_policy(Options const& options) {
  return options.get<apihub_v1::ApiHubBackoffPolicyOption>()->clone();
}

std::unique_ptr<apihub_v1::ApiHubConnectionIdempotencyPolicy>
idempotency_policy(Options const& options) {
  return options.get<apihub_v1::ApiHubConnectionIdempotencyPolicyOption>()
      ->clone();
}

}  // namespace

ApiHubConnectionImpl::ApiHubConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<apihub_v1_internal::ApiHubStub> stub, Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      ApiHubConnection::options())) {}

StatusOr<google::cloud::apihub::v1::Api> ApiHubConnectionImpl::CreateApi(
    google::cloud::apihub::v1::CreateApiRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateApi(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::CreateApiRequest const& request) {
        return stub_->CreateApi(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubConnectionImpl::GetApi(
    google::cloud::apihub::v1::GetApiRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetApi(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetApiRequest const& request) {
        return stub_->GetApi(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::apihub::v1::Api> ApiHubConnectionImpl::ListApis(
    google::cloud::apihub::v1::ListApisRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListApis(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::apihub::v1::Api>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<apihub_v1::ApiHubRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::apihub::v1::ListApisRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::apihub::v1::ListApisRequest const& request) {
              return stub->ListApis(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::apihub::v1::ListApisResponse r) {
        std::vector<google::cloud::apihub::v1::Api> result(r.apis().size());
        auto& messages = *r.mutable_apis();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubConnectionImpl::UpdateApi(
    google::cloud::apihub::v1::UpdateApiRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateApi(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::UpdateApiRequest const& request) {
        return stub_->UpdateApi(context, options, request);
      },
      *current, request, __func__);
}

Status ApiHubConnectionImpl::DeleteApi(
    google::cloud::apihub::v1::DeleteApiRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteApi(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::DeleteApiRequest const& request) {
        return stub_->DeleteApi(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Version>
ApiHubConnectionImpl::CreateVersion(
    google::cloud::apihub::v1::CreateVersionRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::CreateVersionRequest const& request) {
        return stub_->CreateVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubConnectionImpl::GetVersion(
    google::cloud::apihub::v1::GetVersionRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetVersionRequest const& request) {
        return stub_->GetVersion(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::apihub::v1::Version>
ApiHubConnectionImpl::ListVersions(
    google::cloud::apihub::v1::ListVersionsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListVersions(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::apihub::v1::Version>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<apihub_v1::ApiHubRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::apihub::v1::ListVersionsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context, Options const& options,
                google::cloud::apihub::v1::ListVersionsRequest const& request) {
              return stub->ListVersions(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::apihub::v1::ListVersionsResponse r) {
        std::vector<google::cloud::apihub::v1::Version> result(
            r.versions().size());
        auto& messages = *r.mutable_versions();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::apihub::v1::Version>
ApiHubConnectionImpl::UpdateVersion(
    google::cloud::apihub::v1::UpdateVersionRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::UpdateVersionRequest const& request) {
        return stub_->UpdateVersion(context, options, request);
      },
      *current, request, __func__);
}

Status ApiHubConnectionImpl::DeleteVersion(
    google::cloud::apihub::v1::DeleteVersionRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteVersion(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::DeleteVersionRequest const& request) {
        return stub_->DeleteVersion(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubConnectionImpl::CreateSpec(
    google::cloud::apihub::v1::CreateSpecRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateSpec(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::CreateSpecRequest const& request) {
        return stub_->CreateSpec(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubConnectionImpl::GetSpec(
    google::cloud::apihub::v1::GetSpecRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetSpec(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetSpecRequest const& request) {
        return stub_->GetSpec(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::SpecContents>
ApiHubConnectionImpl::GetSpecContents(
    google::cloud::apihub::v1::GetSpecContentsRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetSpecContents(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetSpecContentsRequest const& request) {
        return stub_->GetSpecContents(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::apihub::v1::Spec> ApiHubConnectionImpl::ListSpecs(
    google::cloud::apihub::v1::ListSpecsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListSpecs(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::apihub::v1::Spec>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<apihub_v1::ApiHubRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::apihub::v1::ListSpecsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::apihub::v1::ListSpecsRequest const& request) {
              return stub->ListSpecs(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::apihub::v1::ListSpecsResponse r) {
        std::vector<google::cloud::apihub::v1::Spec> result(r.specs().size());
        auto& messages = *r.mutable_specs();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubConnectionImpl::UpdateSpec(
    google::cloud::apihub::v1::UpdateSpecRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateSpec(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::UpdateSpecRequest const& request) {
        return stub_->UpdateSpec(context, options, request);
      },
      *current, request, __func__);
}

Status ApiHubConnectionImpl::DeleteSpec(
    google::cloud::apihub::v1::DeleteSpecRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteSpec(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::DeleteSpecRequest const& request) {
        return stub_->DeleteSpec(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::ApiOperation>
ApiHubConnectionImpl::GetApiOperation(
    google::cloud::apihub::v1::GetApiOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetApiOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetApiOperationRequest const& request) {
        return stub_->GetApiOperation(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::apihub::v1::ApiOperation>
ApiHubConnectionImpl::ListApiOperations(
    google::cloud::apihub::v1::ListApiOperationsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListApiOperations(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::apihub::v1::ApiOperation>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<apihub_v1::ApiHubRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::apihub::v1::ListApiOperationsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::apihub::v1::ListApiOperationsRequest const&
                       request) {
              return stub->ListApiOperations(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::apihub::v1::ListApiOperationsResponse r) {
        std::vector<google::cloud::apihub::v1::ApiOperation> result(
            r.api_operations().size());
        auto& messages = *r.mutable_api_operations();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::apihub::v1::Definition>
ApiHubConnectionImpl::GetDefinition(
    google::cloud::apihub::v1::GetDefinitionRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetDefinition(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetDefinitionRequest const& request) {
        return stub_->GetDefinition(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Deployment>
ApiHubConnectionImpl::CreateDeployment(
    google::cloud::apihub::v1::CreateDeploymentRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateDeployment(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::apihub::v1::CreateDeploymentRequest const& request) {
        return stub_->CreateDeployment(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Deployment>
ApiHubConnectionImpl::GetDeployment(
    google::cloud::apihub::v1::GetDeploymentRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetDeployment(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetDeploymentRequest const& request) {
        return stub_->GetDeployment(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::apihub::v1::Deployment>
ApiHubConnectionImpl::ListDeployments(
    google::cloud::apihub::v1::ListDeploymentsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListDeployments(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::apihub::v1::Deployment>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<apihub_v1::ApiHubRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::apihub::v1::ListDeploymentsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::apihub::v1::ListDeploymentsRequest const&
                       request) {
              return stub->ListDeployments(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::apihub::v1::ListDeploymentsResponse r) {
        std::vector<google::cloud::apihub::v1::Deployment> result(
            r.deployments().size());
        auto& messages = *r.mutable_deployments();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::apihub::v1::Deployment>
ApiHubConnectionImpl::UpdateDeployment(
    google::cloud::apihub::v1::UpdateDeploymentRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateDeployment(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::apihub::v1::UpdateDeploymentRequest const& request) {
        return stub_->UpdateDeployment(context, options, request);
      },
      *current, request, __func__);
}

Status ApiHubConnectionImpl::DeleteDeployment(
    google::cloud::apihub::v1::DeleteDeploymentRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteDeployment(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::apihub::v1::DeleteDeploymentRequest const& request) {
        return stub_->DeleteDeployment(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Attribute>
ApiHubConnectionImpl::CreateAttribute(
    google::cloud::apihub::v1::CreateAttributeRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateAttribute(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::CreateAttributeRequest const& request) {
        return stub_->CreateAttribute(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Attribute>
ApiHubConnectionImpl::GetAttribute(
    google::cloud::apihub::v1::GetAttributeRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetAttribute(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetAttributeRequest const& request) {
        return stub_->GetAttribute(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::Attribute>
ApiHubConnectionImpl::UpdateAttribute(
    google::cloud::apihub::v1::UpdateAttributeRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateAttribute(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::UpdateAttributeRequest const& request) {
        return stub_->UpdateAttribute(context, options, request);
      },
      *current, request, __func__);
}

Status ApiHubConnectionImpl::DeleteAttribute(
    google::cloud::apihub::v1::DeleteAttributeRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteAttribute(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::DeleteAttributeRequest const& request) {
        return stub_->DeleteAttribute(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::apihub::v1::Attribute>
ApiHubConnectionImpl::ListAttributes(
    google::cloud::apihub::v1::ListAttributesRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListAttributes(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::apihub::v1::Attribute>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<apihub_v1::ApiHubRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::apihub::v1::ListAttributesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::apihub::v1::ListAttributesRequest const&
                       request) {
              return stub->ListAttributes(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::apihub::v1::ListAttributesResponse r) {
        std::vector<google::cloud::apihub::v1::Attribute> result(
            r.attributes().size());
        auto& messages = *r.mutable_attributes();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StreamRange<google::cloud::apihub::v1::SearchResult>
ApiHubConnectionImpl::SearchResources(
    google::cloud::apihub::v1::SearchResourcesRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->SearchResources(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::apihub::v1::SearchResult>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<apihub_v1::ApiHubRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::apihub::v1::SearchResourcesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::apihub::v1::SearchResourcesRequest const&
                       request) {
              return stub->SearchResources(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::apihub::v1::SearchResourcesResponse r) {
        std::vector<google::cloud::apihub::v1::SearchResult> result(
            r.search_results().size());
        auto& messages = *r.mutable_search_results();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubConnectionImpl::CreateExternalApi(
    google::cloud::apihub::v1::CreateExternalApiRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateExternalApi(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::apihub::v1::CreateExternalApiRequest const& request) {
        return stub_->CreateExternalApi(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubConnectionImpl::GetExternalApi(
    google::cloud::apihub::v1::GetExternalApiRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetExternalApi(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetExternalApiRequest const& request) {
        return stub_->GetExternalApi(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubConnectionImpl::UpdateExternalApi(
    google::cloud::apihub::v1::UpdateExternalApiRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateExternalApi(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::apihub::v1::UpdateExternalApiRequest const& request) {
        return stub_->UpdateExternalApi(context, options, request);
      },
      *current, request, __func__);
}

Status ApiHubConnectionImpl::DeleteExternalApi(
    google::cloud::apihub::v1::DeleteExternalApiRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteExternalApi(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::apihub::v1::DeleteExternalApiRequest const& request) {
        return stub_->DeleteExternalApi(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::apihub::v1::ExternalApi>
ApiHubConnectionImpl::ListExternalApis(
    google::cloud::apihub::v1::ListExternalApisRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListExternalApis(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::apihub::v1::ExternalApi>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<apihub_v1::ApiHubRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::apihub::v1::ListExternalApisRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::apihub::v1::ListExternalApisRequest const&
                       request) {
              return stub->ListExternalApis(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::apihub::v1::ListExternalApisResponse r) {
        std::vector<google::cloud::apihub::v1::ExternalApi> result(
            r.external_apis().size());
        auto& messages = *r.mutable_external_apis();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1_internal
}  // namespace cloud
}  // namespace google
