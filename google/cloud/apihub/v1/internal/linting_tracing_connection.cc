// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/linting_service.proto

#include "google/cloud/apihub/v1/internal/linting_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

LintingServiceTracingConnection::LintingServiceTracingConnection(
    std::shared_ptr<apihub_v1::LintingServiceConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::apihub::v1::StyleGuide>
LintingServiceTracingConnection::GetStyleGuide(
    google::cloud::apihub::v1::GetStyleGuideRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::LintingServiceConnection::GetStyleGuide");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetStyleGuide(request));
}

StatusOr<google::cloud::apihub::v1::StyleGuide>
LintingServiceTracingConnection::UpdateStyleGuide(
    google::cloud::apihub::v1::UpdateStyleGuideRequest const& request) {
  auto span = internal::MakeSpan(
      "apihub_v1::LintingServiceConnection::UpdateStyleGuide");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateStyleGuide(request));
}

StatusOr<google::cloud::apihub::v1::StyleGuideContents>
LintingServiceTracingConnection::GetStyleGuideContents(
    google::cloud::apihub::v1::GetStyleGuideContentsRequest const& request) {
  auto span = internal::MakeSpan(
      "apihub_v1::LintingServiceConnection::GetStyleGuideContents");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetStyleGuideContents(request));
}

Status LintingServiceTracingConnection::LintSpec(
    google::cloud::apihub::v1::LintSpecRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::LintingServiceConnection::LintSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->LintSpec(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<apihub_v1::LintingServiceConnection>
MakeLintingServiceTracingConnection(
    std::shared_ptr<apihub_v1::LintingServiceConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<LintingServiceTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1_internal
}  // namespace cloud
}  // namespace google
