// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/linting_service.proto

#include "google/cloud/apihub/v1/internal/linting_connection_impl.h"
#include "google/cloud/apihub/v1/internal/linting_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace {

std::unique_ptr<apihub_v1::LintingServiceRetryPolicy> retry_policy(
    Options const& options) {
  return options.get<apihub_v1::LintingServiceRetryPolicyOption>()->clone();
}

std::unique_ptr<BackoffPolicy> backoff_policy(Options const& options) {
  return options.get<apihub_v1::LintingServiceBackoffPolicyOption>()->clone();
}

std::unique_ptr<apihub_v1::LintingServiceConnectionIdempotencyPolicy>
idempotency_policy(Options const& options) {
  return options
      .get<apihub_v1::LintingServiceConnectionIdempotencyPolicyOption>()
      ->clone();
}

}  // namespace

LintingServiceConnectionImpl::LintingServiceConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<apihub_v1_internal::LintingServiceStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      LintingServiceConnection::options())) {}

StatusOr<google::cloud::apihub::v1::StyleGuide>
LintingServiceConnectionImpl::GetStyleGuide(
    google::cloud::apihub::v1::GetStyleGuideRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetStyleGuide(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetStyleGuideRequest const& request) {
        return stub_->GetStyleGuide(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::StyleGuide>
LintingServiceConnectionImpl::UpdateStyleGuide(
    google::cloud::apihub::v1::UpdateStyleGuideRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateStyleGuide(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::apihub::v1::UpdateStyleGuideRequest const& request) {
        return stub_->UpdateStyleGuide(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::apihub::v1::StyleGuideContents>
LintingServiceConnectionImpl::GetStyleGuideContents(
    google::cloud::apihub::v1::GetStyleGuideContentsRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetStyleGuideContents(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::GetStyleGuideContentsRequest const&
                 request) {
        return stub_->GetStyleGuideContents(context, options, request);
      },
      *current, request, __func__);
}

Status LintingServiceConnectionImpl::LintSpec(
    google::cloud::apihub::v1::LintSpecRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->LintSpec(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::apihub::v1::LintSpecRequest const& request) {
        return stub_->LintSpec(context, options, request);
      },
      *current, request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1_internal
}  // namespace cloud
}  // namespace google
