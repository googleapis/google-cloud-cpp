// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/apihub_service.proto

#include "google/cloud/apihub/v1/internal/api_hub_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ApiHubTracingConnection::ApiHubTracingConnection(
    std::shared_ptr<apihub_v1::ApiHubConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::apihub::v1::Api> ApiHubTracingConnection::CreateApi(
    google::cloud::apihub::v1::CreateApiRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::CreateApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateApi(request));
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubTracingConnection::GetApi(
    google::cloud::apihub::v1::GetApiRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::GetApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetApi(request));
}

StreamRange<google::cloud::apihub::v1::Api> ApiHubTracingConnection::ListApis(
    google::cloud::apihub::v1::ListApisRequest request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::ListApis");
  internal::OTelScope scope(span);
  auto sr = child_->ListApis(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::apihub::v1::Api>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubTracingConnection::UpdateApi(
    google::cloud::apihub::v1::UpdateApiRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::UpdateApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateApi(request));
}

Status ApiHubTracingConnection::DeleteApi(
    google::cloud::apihub::v1::DeleteApiRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::DeleteApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteApi(request));
}

StatusOr<google::cloud::apihub::v1::Version>
ApiHubTracingConnection::CreateVersion(
    google::cloud::apihub::v1::CreateVersionRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::CreateVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateVersion(request));
}

StatusOr<google::cloud::apihub::v1::Version>
ApiHubTracingConnection::GetVersion(
    google::cloud::apihub::v1::GetVersionRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::GetVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetVersion(request));
}

StreamRange<google::cloud::apihub::v1::Version>
ApiHubTracingConnection::ListVersions(
    google::cloud::apihub::v1::ListVersionsRequest request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::ListVersions");
  internal::OTelScope scope(span);
  auto sr = child_->ListVersions(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::apihub::v1::Version>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::apihub::v1::Version>
ApiHubTracingConnection::UpdateVersion(
    google::cloud::apihub::v1::UpdateVersionRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::UpdateVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateVersion(request));
}

Status ApiHubTracingConnection::DeleteVersion(
    google::cloud::apihub::v1::DeleteVersionRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::DeleteVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteVersion(request));
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubTracingConnection::CreateSpec(
    google::cloud::apihub::v1::CreateSpecRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::CreateSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateSpec(request));
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubTracingConnection::GetSpec(
    google::cloud::apihub::v1::GetSpecRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::GetSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetSpec(request));
}

StatusOr<google::cloud::apihub::v1::SpecContents>
ApiHubTracingConnection::GetSpecContents(
    google::cloud::apihub::v1::GetSpecContentsRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::GetSpecContents");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetSpecContents(request));
}

StreamRange<google::cloud::apihub::v1::Spec> ApiHubTracingConnection::ListSpecs(
    google::cloud::apihub::v1::ListSpecsRequest request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::ListSpecs");
  internal::OTelScope scope(span);
  auto sr = child_->ListSpecs(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::apihub::v1::Spec>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubTracingConnection::UpdateSpec(
    google::cloud::apihub::v1::UpdateSpecRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::UpdateSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateSpec(request));
}

Status ApiHubTracingConnection::DeleteSpec(
    google::cloud::apihub::v1::DeleteSpecRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::DeleteSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteSpec(request));
}

StatusOr<google::cloud::apihub::v1::ApiOperation>
ApiHubTracingConnection::GetApiOperation(
    google::cloud::apihub::v1::GetApiOperationRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::GetApiOperation");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetApiOperation(request));
}

StreamRange<google::cloud::apihub::v1::ApiOperation>
ApiHubTracingConnection::ListApiOperations(
    google::cloud::apihub::v1::ListApiOperationsRequest request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::ListApiOperations");
  internal::OTelScope scope(span);
  auto sr = child_->ListApiOperations(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apihub::v1::ApiOperation>(std::move(span), std::move(sr));
}

StatusOr<google::cloud::apihub::v1::Definition>
ApiHubTracingConnection::GetDefinition(
    google::cloud::apihub::v1::GetDefinitionRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::GetDefinition");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetDefinition(request));
}

StatusOr<google::cloud::apihub::v1::Deployment>
ApiHubTracingConnection::CreateDeployment(
    google::cloud::apihub::v1::CreateDeploymentRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::CreateDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateDeployment(request));
}

StatusOr<google::cloud::apihub::v1::Deployment>
ApiHubTracingConnection::GetDeployment(
    google::cloud::apihub::v1::GetDeploymentRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::GetDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetDeployment(request));
}

StreamRange<google::cloud::apihub::v1::Deployment>
ApiHubTracingConnection::ListDeployments(
    google::cloud::apihub::v1::ListDeploymentsRequest request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::ListDeployments");
  internal::OTelScope scope(span);
  auto sr = child_->ListDeployments(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::apihub::v1::Deployment>(
      std::move(span), std::move(sr));
}

StatusOr<google::cloud::apihub::v1::Deployment>
ApiHubTracingConnection::UpdateDeployment(
    google::cloud::apihub::v1::UpdateDeploymentRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::UpdateDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateDeployment(request));
}

Status ApiHubTracingConnection::DeleteDeployment(
    google::cloud::apihub::v1::DeleteDeploymentRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::DeleteDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteDeployment(request));
}

StatusOr<google::cloud::apihub::v1::Attribute>
ApiHubTracingConnection::CreateAttribute(
    google::cloud::apihub::v1::CreateAttributeRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::CreateAttribute");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateAttribute(request));
}

StatusOr<google::cloud::apihub::v1::Attribute>
ApiHubTracingConnection::GetAttribute(
    google::cloud::apihub::v1::GetAttributeRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::GetAttribute");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetAttribute(request));
}

StatusOr<google::cloud::apihub::v1::Attribute>
ApiHubTracingConnection::UpdateAttribute(
    google::cloud::apihub::v1::UpdateAttributeRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::UpdateAttribute");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateAttribute(request));
}

Status ApiHubTracingConnection::DeleteAttribute(
    google::cloud::apihub::v1::DeleteAttributeRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::DeleteAttribute");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteAttribute(request));
}

StreamRange<google::cloud::apihub::v1::Attribute>
ApiHubTracingConnection::ListAttributes(
    google::cloud::apihub::v1::ListAttributesRequest request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::ListAttributes");
  internal::OTelScope scope(span);
  auto sr = child_->ListAttributes(std::move(request));
  return internal::MakeTracedStreamRange<google::cloud::apihub::v1::Attribute>(
      std::move(span), std::move(sr));
}

StreamRange<google::cloud::apihub::v1::SearchResult>
ApiHubTracingConnection::SearchResources(
    google::cloud::apihub::v1::SearchResourcesRequest request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::SearchResources");
  internal::OTelScope scope(span);
  auto sr = child_->SearchResources(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apihub::v1::SearchResult>(std::move(span), std::move(sr));
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubTracingConnection::CreateExternalApi(
    google::cloud::apihub::v1::CreateExternalApiRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::CreateExternalApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateExternalApi(request));
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubTracingConnection::GetExternalApi(
    google::cloud::apihub::v1::GetExternalApiRequest const& request) {
  auto span = internal::MakeSpan("apihub_v1::ApiHubConnection::GetExternalApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetExternalApi(request));
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubTracingConnection::UpdateExternalApi(
    google::cloud::apihub::v1::UpdateExternalApiRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::UpdateExternalApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateExternalApi(request));
}

Status ApiHubTracingConnection::DeleteExternalApi(
    google::cloud::apihub::v1::DeleteExternalApiRequest const& request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::DeleteExternalApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteExternalApi(request));
}

StreamRange<google::cloud::apihub::v1::ExternalApi>
ApiHubTracingConnection::ListExternalApis(
    google::cloud::apihub::v1::ListExternalApisRequest request) {
  auto span =
      internal::MakeSpan("apihub_v1::ApiHubConnection::ListExternalApis");
  internal::OTelScope scope(span);
  auto sr = child_->ListExternalApis(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apihub::v1::ExternalApi>(std::move(span), std::move(sr));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<apihub_v1::ApiHubConnection> MakeApiHubTracingConnection(
    std::shared_ptr<apihub_v1::ApiHubConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<ApiHubTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1_internal
}  // namespace cloud
}  // namespace google
