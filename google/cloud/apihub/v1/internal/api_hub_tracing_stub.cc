// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/apihub_service.proto

#include "google/cloud/apihub/v1/internal/api_hub_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ApiHubTracingStub::ApiHubTracingStub(std::shared_ptr<ApiHubStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::apihub::v1::Api> ApiHubTracingStub::CreateApi(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::CreateApiRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "CreateApi");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateApi(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubTracingStub::GetApi(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetApiRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "GetApi");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetApi(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ListApisResponse>
ApiHubTracingStub::ListApis(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::ListApisRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "ListApis");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListApis(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Api> ApiHubTracingStub::UpdateApi(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::UpdateApiRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "UpdateApi");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateApi(context, options, request));
}

Status ApiHubTracingStub::DeleteApi(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::DeleteApiRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "DeleteApi");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteApi(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubTracingStub::CreateVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::CreateVersionRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "CreateVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateVersion(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubTracingStub::GetVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetVersionRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "GetVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetVersion(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ListVersionsResponse>
ApiHubTracingStub::ListVersions(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::ListVersionsRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "ListVersions");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListVersions(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Version> ApiHubTracingStub::UpdateVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::UpdateVersionRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "UpdateVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateVersion(context, options, request));
}

Status ApiHubTracingStub::DeleteVersion(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::DeleteVersionRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "DeleteVersion");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteVersion(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubTracingStub::CreateSpec(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::CreateSpecRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "CreateSpec");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateSpec(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubTracingStub::GetSpec(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetSpecRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "GetSpec");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetSpec(context, options, request));
}

StatusOr<google::cloud::apihub::v1::SpecContents>
ApiHubTracingStub::GetSpecContents(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetSpecContentsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "GetSpecContents");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetSpecContents(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ListSpecsResponse>
ApiHubTracingStub::ListSpecs(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::ListSpecsRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "ListSpecs");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListSpecs(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Spec> ApiHubTracingStub::UpdateSpec(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::UpdateSpecRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "UpdateSpec");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateSpec(context, options, request));
}

Status ApiHubTracingStub::DeleteSpec(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::DeleteSpecRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "DeleteSpec");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteSpec(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ApiOperation>
ApiHubTracingStub::GetApiOperation(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetApiOperationRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "GetApiOperation");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetApiOperation(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ListApiOperationsResponse>
ApiHubTracingStub::ListApiOperations(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::ListApiOperationsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "ListApiOperations");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->ListApiOperations(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Definition>
ApiHubTracingStub::GetDefinition(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetDefinitionRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "GetDefinition");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetDefinition(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Deployment>
ApiHubTracingStub::CreateDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::CreateDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "CreateDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateDeployment(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Deployment>
ApiHubTracingStub::GetDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetDeploymentRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "GetDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetDeployment(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ListDeploymentsResponse>
ApiHubTracingStub::ListDeployments(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::ListDeploymentsRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "ListDeployments");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListDeployments(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Deployment>
ApiHubTracingStub::UpdateDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::UpdateDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "UpdateDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateDeployment(context, options, request));
}

Status ApiHubTracingStub::DeleteDeployment(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::DeleteDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "DeleteDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteDeployment(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Attribute>
ApiHubTracingStub::CreateAttribute(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::CreateAttributeRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "CreateAttribute");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateAttribute(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Attribute> ApiHubTracingStub::GetAttribute(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetAttributeRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "GetAttribute");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetAttribute(context, options, request));
}

StatusOr<google::cloud::apihub::v1::Attribute>
ApiHubTracingStub::UpdateAttribute(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::UpdateAttributeRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "UpdateAttribute");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UpdateAttribute(context, options, request));
}

Status ApiHubTracingStub::DeleteAttribute(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::DeleteAttributeRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "DeleteAttribute");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteAttribute(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ListAttributesResponse>
ApiHubTracingStub::ListAttributes(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::ListAttributesRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "ListAttributes");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListAttributes(context, options, request));
}

StatusOr<google::cloud::apihub::v1::SearchResourcesResponse>
ApiHubTracingStub::SearchResources(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::SearchResourcesRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "SearchResources");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->SearchResources(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubTracingStub::CreateExternalApi(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::CreateExternalApiRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "CreateExternalApi");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->CreateExternalApi(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubTracingStub::GetExternalApi(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::GetExternalApiRequest const& request) {
  auto span =
      internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub", "GetExternalApi");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetExternalApi(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ExternalApi>
ApiHubTracingStub::UpdateExternalApi(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::UpdateExternalApiRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "UpdateExternalApi");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->UpdateExternalApi(context, options, request));
}

Status ApiHubTracingStub::DeleteExternalApi(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::DeleteExternalApiRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "DeleteExternalApi");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(
      context, *span, child_->DeleteExternalApi(context, options, request));
}

StatusOr<google::cloud::apihub::v1::ListExternalApisResponse>
ApiHubTracingStub::ListExternalApis(
    grpc::ClientContext& context, Options const& options,
    google::cloud::apihub::v1::ListExternalApisRequest const& request) {
  auto span = internal::MakeSpanGrpc("google.cloud.apihub.v1.ApiHub",
                                     "ListExternalApis");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListExternalApis(context, options, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<ApiHubStub> MakeApiHubTracingStub(
    std::shared_ptr<ApiHubStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<ApiHubTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1_internal
}  // namespace cloud
}  // namespace google
