// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/apihub_service.proto

#include "google/cloud/apihub/v1/api_hub_dependencies_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ApiHubDependenciesClient::ApiHubDependenciesClient(
    std::shared_ptr<ApiHubDependenciesConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
ApiHubDependenciesClient::~ApiHubDependenciesClient() = default;

StatusOr<google::cloud::apihub::v1::Dependency>
ApiHubDependenciesClient::CreateDependency(
    std::string const& parent,
    google::cloud::apihub::v1::Dependency const& dependency,
    std::string const& dependency_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::CreateDependencyRequest request;
  request.set_parent(parent);
  *request.mutable_dependency() = dependency;
  request.set_dependency_id(dependency_id);
  return connection_->CreateDependency(request);
}

StatusOr<google::cloud::apihub::v1::Dependency>
ApiHubDependenciesClient::CreateDependency(
    google::cloud::apihub::v1::CreateDependencyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateDependency(request);
}

StatusOr<google::cloud::apihub::v1::Dependency>
ApiHubDependenciesClient::GetDependency(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::GetDependencyRequest request;
  request.set_name(name);
  return connection_->GetDependency(request);
}

StatusOr<google::cloud::apihub::v1::Dependency>
ApiHubDependenciesClient::GetDependency(
    google::cloud::apihub::v1::GetDependencyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetDependency(request);
}

StatusOr<google::cloud::apihub::v1::Dependency>
ApiHubDependenciesClient::UpdateDependency(
    google::cloud::apihub::v1::Dependency const& dependency,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::UpdateDependencyRequest request;
  *request.mutable_dependency() = dependency;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateDependency(request);
}

StatusOr<google::cloud::apihub::v1::Dependency>
ApiHubDependenciesClient::UpdateDependency(
    google::cloud::apihub::v1::UpdateDependencyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateDependency(request);
}

Status ApiHubDependenciesClient::DeleteDependency(std::string const& name,
                                                  Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::DeleteDependencyRequest request;
  request.set_name(name);
  return connection_->DeleteDependency(request);
}

Status ApiHubDependenciesClient::DeleteDependency(
    google::cloud::apihub::v1::DeleteDependencyRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteDependency(request);
}

StreamRange<google::cloud::apihub::v1::Dependency>
ApiHubDependenciesClient::ListDependencies(std::string const& parent,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apihub::v1::ListDependenciesRequest request;
  request.set_parent(parent);
  return connection_->ListDependencies(request);
}

StreamRange<google::cloud::apihub::v1::Dependency>
ApiHubDependenciesClient::ListDependencies(
    google::cloud::apihub::v1::ListDependenciesRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListDependencies(std::move(request));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1
}  // namespace cloud
}  // namespace google
