// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apihub/v1/runtime_project_attachment_service.proto

#include "google/cloud/apihub/v1/runtime_project_attachment_connection.h"
#include "google/cloud/apihub/v1/internal/runtime_project_attachment_connection_impl.h"
#include "google/cloud/apihub/v1/internal/runtime_project_attachment_option_defaults.h"
#include "google/cloud/apihub/v1/internal/runtime_project_attachment_stub_factory.h"
#include "google/cloud/apihub/v1/internal/runtime_project_attachment_tracing_connection.h"
#include "google/cloud/apihub/v1/runtime_project_attachment_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/unified_grpc_credentials.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apihub_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RuntimeProjectAttachmentServiceConnection::
    ~RuntimeProjectAttachmentServiceConnection() = default;

StatusOr<google::cloud::apihub::v1::RuntimeProjectAttachment>
RuntimeProjectAttachmentServiceConnection::CreateRuntimeProjectAttachment(
    google::cloud::apihub::v1::CreateRuntimeProjectAttachmentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::apihub::v1::RuntimeProjectAttachment>
RuntimeProjectAttachmentServiceConnection::GetRuntimeProjectAttachment(
    google::cloud::apihub::v1::GetRuntimeProjectAttachmentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::apihub::v1::RuntimeProjectAttachment>
RuntimeProjectAttachmentServiceConnection::ListRuntimeProjectAttachments(
    google::cloud::apihub::v1::
        ListRuntimeProjectAttachmentsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::apihub::v1::RuntimeProjectAttachment>>();
}

Status
RuntimeProjectAttachmentServiceConnection::DeleteRuntimeProjectAttachment(
    google::cloud::apihub::v1::DeleteRuntimeProjectAttachmentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::apihub::v1::LookupRuntimeProjectAttachmentResponse>
RuntimeProjectAttachmentServiceConnection::LookupRuntimeProjectAttachment(
    google::cloud::apihub::v1::LookupRuntimeProjectAttachmentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<RuntimeProjectAttachmentServiceConnection>
MakeRuntimeProjectAttachmentServiceConnection(Options options) {
  internal::CheckExpectedOptions<
      CommonOptionList, GrpcOptionList, UnifiedCredentialsOptionList,
      RuntimeProjectAttachmentServicePolicyOptionList>(options, __func__);
  options = apihub_v1_internal::RuntimeProjectAttachmentServiceDefaultOptions(
      std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto auth = internal::CreateAuthenticationStrategy(background->cq(), options);
  auto stub =
      apihub_v1_internal::CreateDefaultRuntimeProjectAttachmentServiceStub(
          std::move(auth), options);
  return apihub_v1_internal::
      MakeRuntimeProjectAttachmentServiceTracingConnection(
          std::make_shared<apihub_v1_internal::
                               RuntimeProjectAttachmentServiceConnectionImpl>(
              std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apihub_v1
}  // namespace cloud
}  // namespace google
