// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/storagetransfer/v1/transfer.proto

#include "google/cloud/storagetransfer/storage_transfer_connection.h"
#include "google/cloud/storagetransfer/internal/storage_transfer_option_defaults.h"
#include "google/cloud/storagetransfer/internal/storage_transfer_stub_factory.h"
#include "google/cloud/storagetransfer/storage_transfer_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace storagetransfer {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

StorageTransferServiceConnection::~StorageTransferServiceConnection() = default;

StatusOr<google::storagetransfer::v1::GoogleServiceAccount>
StorageTransferServiceConnection::GetGoogleServiceAccount(
    google::storagetransfer::v1::GetGoogleServiceAccountRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::storagetransfer::v1::TransferJob>
StorageTransferServiceConnection::CreateTransferJob(
    google::storagetransfer::v1::CreateTransferJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::storagetransfer::v1::TransferJob>
StorageTransferServiceConnection::UpdateTransferJob(
    google::storagetransfer::v1::UpdateTransferJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::storagetransfer::v1::TransferJob>
StorageTransferServiceConnection::GetTransferJob(
    google::storagetransfer::v1::GetTransferJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::storagetransfer::v1::TransferJob>
StorageTransferServiceConnection::ListTransferJobs(
    google::storagetransfer::v1::ListTransferJobsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::storagetransfer::v1::TransferJob>>(
      std::move(request),
      [](google::storagetransfer::v1::ListTransferJobsRequest const&) {
        return StatusOr<
            google::storagetransfer::v1::ListTransferJobsResponse>{};
      },
      [](google::storagetransfer::v1::ListTransferJobsResponse const&) {
        return std::vector<google::storagetransfer::v1::TransferJob>();
      });
}

Status StorageTransferServiceConnection::PauseTransferOperation(
    google::storagetransfer::v1::PauseTransferOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status StorageTransferServiceConnection::ResumeTransferOperation(
    google::storagetransfer::v1::ResumeTransferOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::storagetransfer::v1::TransferOperation>>
StorageTransferServiceConnection::RunTransferJob(
    google::storagetransfer::v1::RunTransferJobRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::storagetransfer::v1::TransferOperation>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

namespace {
class StorageTransferServiceConnectionImpl
    : public StorageTransferServiceConnection {
 public:
  StorageTransferServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<storagetransfer_internal::StorageTransferServiceStub>
          stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<StorageTransferServiceRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<StorageTransferServiceBackoffPolicyOption>()->clone()),
        polling_policy_prototype_(
            options.get<StorageTransferServicePollingPolicyOption>()->clone()),
        idempotency_policy_(
            options
                .get<StorageTransferServiceConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~StorageTransferServiceConnectionImpl() override = default;

  StatusOr<google::storagetransfer::v1::GoogleServiceAccount>
  GetGoogleServiceAccount(
      google::storagetransfer::v1::GetGoogleServiceAccountRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetGoogleServiceAccount(request),
        [this](
            grpc::ClientContext& context,
            google::storagetransfer::v1::GetGoogleServiceAccountRequest const&
                request) {
          return stub_->GetGoogleServiceAccount(context, request);
        },
        request, __func__);
  }

  StatusOr<google::storagetransfer::v1::TransferJob> CreateTransferJob(
      google::storagetransfer::v1::CreateTransferJobRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateTransferJob(request),
        [this](grpc::ClientContext& context,
               google::storagetransfer::v1::CreateTransferJobRequest const&
                   request) {
          return stub_->CreateTransferJob(context, request);
        },
        request, __func__);
  }

  StatusOr<google::storagetransfer::v1::TransferJob> UpdateTransferJob(
      google::storagetransfer::v1::UpdateTransferJobRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateTransferJob(request),
        [this](grpc::ClientContext& context,
               google::storagetransfer::v1::UpdateTransferJobRequest const&
                   request) {
          return stub_->UpdateTransferJob(context, request);
        },
        request, __func__);
  }

  StatusOr<google::storagetransfer::v1::TransferJob> GetTransferJob(
      google::storagetransfer::v1::GetTransferJobRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetTransferJob(request),
        [this](
            grpc::ClientContext& context,
            google::storagetransfer::v1::GetTransferJobRequest const& request) {
          return stub_->GetTransferJob(context, request);
        },
        request, __func__);
  }

  StreamRange<google::storagetransfer::v1::TransferJob> ListTransferJobs(
      google::storagetransfer::v1::ListTransferJobsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<StorageTransferServiceRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListTransferJobs(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::storagetransfer::v1::TransferJob>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::storagetransfer::v1::ListTransferJobsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::storagetransfer::v1::ListTransferJobsRequest const&
                         request) {
                return stub->ListTransferJobs(context, request);
              },
              r, function_name);
        },
        [](google::storagetransfer::v1::ListTransferJobsResponse r) {
          std::vector<google::storagetransfer::v1::TransferJob> result(
              r.transfer_jobs().size());
          auto& messages = *r.mutable_transfer_jobs();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  Status PauseTransferOperation(
      google::storagetransfer::v1::PauseTransferOperationRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->PauseTransferOperation(request),
        [this](grpc::ClientContext& context,
               google::storagetransfer::v1::PauseTransferOperationRequest const&
                   request) {
          return stub_->PauseTransferOperation(context, request);
        },
        request, __func__);
  }

  Status ResumeTransferOperation(
      google::storagetransfer::v1::ResumeTransferOperationRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ResumeTransferOperation(request),
        [this](
            grpc::ClientContext& context,
            google::storagetransfer::v1::ResumeTransferOperationRequest const&
                request) {
          return stub_->ResumeTransferOperation(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::storagetransfer::v1::TransferOperation>>
  RunTransferJob(google::storagetransfer::v1::RunTransferJobRequest const&
                     request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::storagetransfer::v1::TransferOperation>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::storagetransfer::v1::RunTransferJobRequest const& request) {
          return stub->AsyncRunTransferJob(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::storagetransfer::v1::TransferOperation>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->RunTransferJob(request),
        polling_policy_prototype_->clone(), __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<storagetransfer_internal::StorageTransferServiceStub> stub_;
  std::unique_ptr<StorageTransferServiceRetryPolicy const>
      retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<PollingPolicy const> polling_policy_prototype_;
  std::unique_ptr<StorageTransferServiceConnectionIdempotencyPolicy>
      idempotency_policy_;
};
}  // namespace

std::shared_ptr<StorageTransferServiceConnection>
MakeStorageTransferServiceConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 StorageTransferServicePolicyOptionList>(
      options, __func__);
  options = storagetransfer_internal::StorageTransferServiceDefaultOptions(
      std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = storagetransfer_internal::CreateDefaultStorageTransferServiceStub(
      background->cq(), options);
  return std::make_shared<StorageTransferServiceConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace storagetransfer
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace storagetransfer_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<storagetransfer::StorageTransferServiceConnection>
MakeStorageTransferServiceConnection(
    std::shared_ptr<StorageTransferServiceStub> stub, Options options) {
  options = StorageTransferServiceDefaultOptions(std::move(options));
  return std::make_shared<
      storagetransfer::StorageTransferServiceConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace storagetransfer_internal
}  // namespace cloud
}  // namespace google
