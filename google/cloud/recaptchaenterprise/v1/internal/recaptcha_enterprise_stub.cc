// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/recaptchaenterprise/v1/recaptchaenterprise.proto

#include "google/cloud/recaptchaenterprise/v1/internal/recaptcha_enterprise_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/recaptchaenterprise/v1/recaptchaenterprise.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace recaptchaenterprise_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RecaptchaEnterpriseServiceStub::~RecaptchaEnterpriseServiceStub() = default;

StatusOr<google::cloud::recaptchaenterprise::v1::Assessment>
DefaultRecaptchaEnterpriseServiceStub::CreateAssessment(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::CreateAssessmentRequest const&
        request) {
  google::cloud::recaptchaenterprise::v1::Assessment response;
  auto status =
      grpc_stub_->CreateAssessment(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::recaptchaenterprise::v1::AnnotateAssessmentResponse>
DefaultRecaptchaEnterpriseServiceStub::AnnotateAssessment(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::AnnotateAssessmentRequest const&
        request) {
  google::cloud::recaptchaenterprise::v1::AnnotateAssessmentResponse response;
  auto status =
      grpc_stub_->AnnotateAssessment(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::recaptchaenterprise::v1::Key>
DefaultRecaptchaEnterpriseServiceStub::CreateKey(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::CreateKeyRequest const& request) {
  google::cloud::recaptchaenterprise::v1::Key response;
  auto status = grpc_stub_->CreateKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::recaptchaenterprise::v1::ListKeysResponse>
DefaultRecaptchaEnterpriseServiceStub::ListKeys(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::ListKeysRequest const& request) {
  google::cloud::recaptchaenterprise::v1::ListKeysResponse response;
  auto status = grpc_stub_->ListKeys(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<
    google::cloud::recaptchaenterprise::v1::RetrieveLegacySecretKeyResponse>
DefaultRecaptchaEnterpriseServiceStub::RetrieveLegacySecretKey(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::
        RetrieveLegacySecretKeyRequest const& request) {
  google::cloud::recaptchaenterprise::v1::RetrieveLegacySecretKeyResponse
      response;
  auto status =
      grpc_stub_->RetrieveLegacySecretKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::recaptchaenterprise::v1::Key>
DefaultRecaptchaEnterpriseServiceStub::GetKey(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::GetKeyRequest const& request) {
  google::cloud::recaptchaenterprise::v1::Key response;
  auto status = grpc_stub_->GetKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::recaptchaenterprise::v1::Key>
DefaultRecaptchaEnterpriseServiceStub::UpdateKey(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::UpdateKeyRequest const& request) {
  google::cloud::recaptchaenterprise::v1::Key response;
  auto status = grpc_stub_->UpdateKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultRecaptchaEnterpriseServiceStub::DeleteKey(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::DeleteKeyRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::recaptchaenterprise::v1::Key>
DefaultRecaptchaEnterpriseServiceStub::MigrateKey(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::MigrateKeyRequest const& request) {
  google::cloud::recaptchaenterprise::v1::Key response;
  auto status = grpc_stub_->MigrateKey(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::recaptchaenterprise::v1::Metrics>
DefaultRecaptchaEnterpriseServiceStub::GetMetrics(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::GetMetricsRequest const& request) {
  google::cloud::recaptchaenterprise::v1::Metrics response;
  auto status = grpc_stub_->GetMetrics(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<
    google::cloud::recaptchaenterprise::v1::ListRelatedAccountGroupsResponse>
DefaultRecaptchaEnterpriseServiceStub::ListRelatedAccountGroups(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::
        ListRelatedAccountGroupsRequest const& request) {
  google::cloud::recaptchaenterprise::v1::ListRelatedAccountGroupsResponse
      response;
  auto status =
      grpc_stub_->ListRelatedAccountGroups(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::recaptchaenterprise::v1::
             ListRelatedAccountGroupMembershipsResponse>
DefaultRecaptchaEnterpriseServiceStub::ListRelatedAccountGroupMemberships(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::
        ListRelatedAccountGroupMembershipsRequest const& request) {
  google::cloud::recaptchaenterprise::v1::
      ListRelatedAccountGroupMembershipsResponse response;
  auto status = grpc_stub_->ListRelatedAccountGroupMemberships(
      &client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::recaptchaenterprise::v1::
             SearchRelatedAccountGroupMembershipsResponse>
DefaultRecaptchaEnterpriseServiceStub::SearchRelatedAccountGroupMemberships(
    grpc::ClientContext& client_context,
    google::cloud::recaptchaenterprise::v1::
        SearchRelatedAccountGroupMembershipsRequest const& request) {
  google::cloud::recaptchaenterprise::v1::
      SearchRelatedAccountGroupMembershipsResponse response;
  auto status = grpc_stub_->SearchRelatedAccountGroupMemberships(
      &client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace recaptchaenterprise_v1_internal
}  // namespace cloud
}  // namespace google
