// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/optimization/v1/fleet_routing.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_OPTIMIZATION_FLEET_ROUTING_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_OPTIMIZATION_FLEET_ROUTING_CONNECTION_H

#include "google/cloud/optimization/fleet_routing_connection_idempotency_policy.h"
#include "google/cloud/optimization/internal/fleet_routing_retry_traits.h"
#include "google/cloud/optimization/internal/fleet_routing_stub.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace optimization {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using FleetRoutingRetryPolicy =
    ::google::cloud::internal::TraitBasedRetryPolicy<
        optimization_internal::FleetRoutingRetryTraits>;

using FleetRoutingLimitedTimeRetryPolicy =
    ::google::cloud::internal::LimitedTimeRetryPolicy<
        optimization_internal::FleetRoutingRetryTraits>;

using FleetRoutingLimitedErrorCountRetryPolicy =
    ::google::cloud::internal::LimitedErrorCountRetryPolicy<
        optimization_internal::FleetRoutingRetryTraits>;

/**
 * The `FleetRoutingConnection` object for `FleetRoutingClient`.
 *
 * This interface defines virtual methods for each of the user-facing overload
 * sets in `FleetRoutingClient`. This allows users to inject custom behavior
 * (e.g., with a Google Mock object) when writing tests that use objects of type
 * `FleetRoutingClient`.
 *
 * To create a concrete instance, see `MakeFleetRoutingConnection()`.
 *
 * For mocking, see `optimization_mocks::MockFleetRoutingConnection`.
 */
class FleetRoutingConnection {
 public:
  virtual ~FleetRoutingConnection() = 0;

  virtual Options options() { return Options{}; }

  virtual StatusOr<google::cloud::optimization::v1::OptimizeToursResponse>
  OptimizeTours(
      google::cloud::optimization::v1::OptimizeToursRequest const& request);

  virtual future<
      StatusOr<google::cloud::optimization::v1::BatchOptimizeToursResponse>>
  BatchOptimizeTours(
      google::cloud::optimization::v1::BatchOptimizeToursRequest const&
          request);
};

/**
 * A factory function to construct an object of type `FleetRoutingConnection`.
 *
 * The returned connection object should not be used directly; instead it
 * should be passed as an argument to the constructor of FleetRoutingClient,
 * and that class used instead.
 *
 * The optional @p opts argument may be used to configure aspects of the
 * returned `FleetRoutingConnection`. Expected options are any of the types in
 * the following option lists:
 *
 * - `google::cloud::CommonOptionList`
 * - `google::cloud::GrpcOptionList`
 * - `google::cloud::optimization::FleetRoutingPolicyOptionList`
 *
 * @note Unrecognized options will be ignored. To debug issues with options set
 *     `GOOGLE_CLOUD_CPP_ENABLE_CLOG=yes` in the environment and unexpected
 *     options will be logged.
 *
 * @param options (optional) Configure the `FleetRoutingConnection` created by
 * this function.
 */
std::shared_ptr<FleetRoutingConnection> MakeFleetRoutingConnection(
    Options options = {});

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace optimization
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_OPTIMIZATION_FLEET_ROUTING_CONNECTION_H
