// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/networkconnectivity/v1/hub.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_NETWORKCONNECTIVITY_INTERNAL_HUB_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_NETWORKCONNECTIVITY_INTERNAL_HUB_CONNECTION_IMPL_H

#include "google/cloud/networkconnectivity/hub_connection.h"
#include "google/cloud/networkconnectivity/hub_connection_idempotency_policy.h"
#include "google/cloud/networkconnectivity/hub_options.h"
#include "google/cloud/networkconnectivity/internal/hub_retry_traits.h"
#include "google/cloud/networkconnectivity/internal/hub_stub.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/stream_range.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace networkconnectivity_internal {

class HubServiceConnectionImpl
    : public GOOGLE_CLOUD_CPP_NS::HubServiceConnection {
 public:
  ~HubServiceConnectionImpl() override = default;

  HubServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<GOOGLE_CLOUD_CPP_NS::HubServiceStub> stub,
      Options options);

  Options options() override { return options_; }

  StreamRange<google::cloud::networkconnectivity::v1::Hub> ListHubs(
      google::cloud::networkconnectivity::v1::ListHubsRequest request) override;

  StatusOr<google::cloud::networkconnectivity::v1::Hub> GetHub(
      google::cloud::networkconnectivity::v1::GetHubRequest const& request)
      override;

  future<StatusOr<google::cloud::networkconnectivity::v1::Hub>> CreateHub(
      google::cloud::networkconnectivity::v1::CreateHubRequest const& request)
      override;

  future<StatusOr<google::cloud::networkconnectivity::v1::Hub>> UpdateHub(
      google::cloud::networkconnectivity::v1::UpdateHubRequest const& request)
      override;

  future<StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>
  DeleteHub(google::cloud::networkconnectivity::v1::DeleteHubRequest const&
                request) override;

  StreamRange<google::cloud::networkconnectivity::v1::Spoke> ListSpokes(
      google::cloud::networkconnectivity::v1::ListSpokesRequest request)
      override;

  StatusOr<google::cloud::networkconnectivity::v1::Spoke> GetSpoke(
      google::cloud::networkconnectivity::v1::GetSpokeRequest const& request)
      override;

  future<StatusOr<google::cloud::networkconnectivity::v1::Spoke>> CreateSpoke(
      google::cloud::networkconnectivity::v1::CreateSpokeRequest const& request)
      override;

  future<StatusOr<google::cloud::networkconnectivity::v1::Spoke>> UpdateSpoke(
      google::cloud::networkconnectivity::v1::UpdateSpokeRequest const& request)
      override;

  future<StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>
  DeleteSpoke(google::cloud::networkconnectivity::v1::DeleteSpokeRequest const&
                  request) override;

 private:
  std::unique_ptr<GOOGLE_CLOUD_CPP_NS::HubServiceRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<GOOGLE_CLOUD_CPP_NS::HubServiceRetryPolicyOption>()) {
      return options.get<GOOGLE_CLOUD_CPP_NS::HubServiceRetryPolicyOption>()
          ->clone();
    }
    return options_.get<GOOGLE_CLOUD_CPP_NS::HubServiceRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<GOOGLE_CLOUD_CPP_NS::HubServiceBackoffPolicyOption>()) {
      return options.get<GOOGLE_CLOUD_CPP_NS::HubServiceBackoffPolicyOption>()
          ->clone();
    }
    return options_.get<GOOGLE_CLOUD_CPP_NS::HubServiceBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<GOOGLE_CLOUD_CPP_NS::HubServiceConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<GOOGLE_CLOUD_CPP_NS::
                        HubServiceConnectionIdempotencyPolicyOption>()) {
      return options
          .get<GOOGLE_CLOUD_CPP_NS::
                   HubServiceConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<GOOGLE_CLOUD_CPP_NS::HubServiceConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<PollingPolicy> polling_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<GOOGLE_CLOUD_CPP_NS::HubServicePollingPolicyOption>()) {
      return options.get<GOOGLE_CLOUD_CPP_NS::HubServicePollingPolicyOption>()
          ->clone();
    }
    return options_.get<GOOGLE_CLOUD_CPP_NS::HubServicePollingPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<GOOGLE_CLOUD_CPP_NS::HubServiceStub> stub_;
  Options options_;
};

}  // namespace networkconnectivity_internal
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_NETWORKCONNECTIVITY_INTERNAL_HUB_CONNECTION_IMPL_H
