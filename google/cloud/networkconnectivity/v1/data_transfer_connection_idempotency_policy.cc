// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/networkconnectivity/v1/data_transfer.proto

#include "google/cloud/networkconnectivity/v1/data_transfer_connection_idempotency_policy.h"
#include <memory>

namespace google {
namespace cloud {
namespace networkconnectivity_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

DataTransferServiceConnectionIdempotencyPolicy::
    ~DataTransferServiceConnectionIdempotencyPolicy() = default;

std::unique_ptr<DataTransferServiceConnectionIdempotencyPolicy>
DataTransferServiceConnectionIdempotencyPolicy::clone() const {
  return std::make_unique<DataTransferServiceConnectionIdempotencyPolicy>(
      *this);
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::
    ListMulticloudDataTransferConfigs(
        google::cloud::networkconnectivity::v1::
            ListMulticloudDataTransferConfigsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency
DataTransferServiceConnectionIdempotencyPolicy::GetMulticloudDataTransferConfig(
    google::cloud::networkconnectivity::v1::
        GetMulticloudDataTransferConfigRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::
    CreateMulticloudDataTransferConfig(
        google::cloud::networkconnectivity::v1::
            CreateMulticloudDataTransferConfigRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::
    UpdateMulticloudDataTransferConfig(
        google::cloud::networkconnectivity::v1::
            UpdateMulticloudDataTransferConfigRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::
    DeleteMulticloudDataTransferConfig(
        google::cloud::networkconnectivity::v1::
            DeleteMulticloudDataTransferConfigRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::ListDestinations(
    google::cloud::networkconnectivity::v1::
        ListDestinationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::GetDestination(
    google::cloud::networkconnectivity::v1::GetDestinationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::CreateDestination(
    google::cloud::networkconnectivity::v1::CreateDestinationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::UpdateDestination(
    google::cloud::networkconnectivity::v1::UpdateDestinationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::DeleteDestination(
    google::cloud::networkconnectivity::v1::DeleteDestinationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::
    GetMulticloudDataTransferSupportedService(
        google::cloud::networkconnectivity::v1::
            GetMulticloudDataTransferSupportedServiceRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::
    ListMulticloudDataTransferSupportedServices(
        google::cloud::networkconnectivity::v1::
            ListMulticloudDataTransferSupportedServicesRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::ListLocations(
    google::cloud::location::ListLocationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::GetLocation(
    google::cloud::location::GetLocationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::SetIamPolicy(
    google::iam::v1::SetIamPolicyRequest const& request) {
  return request.policy().etag().empty() ? Idempotency::kNonIdempotent
                                         : Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::GetIamPolicy(
    google::iam::v1::GetIamPolicyRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::TestIamPermissions(
    google::iam::v1::TestIamPermissionsRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::ListOperations(
    google::longrunning::ListOperationsRequest) {  // NOLINT
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::GetOperation(
    google::longrunning::GetOperationRequest const&) {
  return Idempotency::kIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::DeleteOperation(
    google::longrunning::DeleteOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

Idempotency DataTransferServiceConnectionIdempotencyPolicy::CancelOperation(
    google::longrunning::CancelOperationRequest const&) {
  return Idempotency::kNonIdempotent;
}

std::unique_ptr<DataTransferServiceConnectionIdempotencyPolicy>
MakeDefaultDataTransferServiceConnectionIdempotencyPolicy() {
  return std::make_unique<DataTransferServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace networkconnectivity_v1
}  // namespace cloud
}  // namespace google
