// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/networkconnectivity/v1/data_transfer.proto

#include "google/cloud/networkconnectivity/v1/internal/data_transfer_connection_impl.h"
#include "google/cloud/networkconnectivity/v1/internal/data_transfer_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace networkconnectivity_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN
namespace {

std::unique_ptr<networkconnectivity_v1::DataTransferServiceRetryPolicy>
retry_policy(Options const& options) {
  return options
      .get<networkconnectivity_v1::DataTransferServiceRetryPolicyOption>()
      ->clone();
}

std::unique_ptr<BackoffPolicy> backoff_policy(Options const& options) {
  return options
      .get<networkconnectivity_v1::DataTransferServiceBackoffPolicyOption>()
      ->clone();
}

std::unique_ptr<
    networkconnectivity_v1::DataTransferServiceConnectionIdempotencyPolicy>
idempotency_policy(Options const& options) {
  return options
      .get<networkconnectivity_v1::
               DataTransferServiceConnectionIdempotencyPolicyOption>()
      ->clone();
}

std::unique_ptr<PollingPolicy> polling_policy(Options const& options) {
  return options
      .get<networkconnectivity_v1::DataTransferServicePollingPolicyOption>()
      ->clone();
}

}  // namespace

DataTransferServiceConnectionImpl::DataTransferServiceConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<networkconnectivity_v1_internal::DataTransferServiceStub>
        stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(
          std::move(options), DataTransferServiceConnection::options())) {}

StreamRange<
    google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>
DataTransferServiceConnectionImpl::ListMulticloudDataTransferConfigs(
    google::cloud::networkconnectivity::v1::
        ListMulticloudDataTransferConfigsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency =
      idempotency_policy(*current)->ListMulticloudDataTransferConfigs(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<StreamRange<
      google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<
           networkconnectivity_v1::DataTransferServiceRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::networkconnectivity::v1::
              ListMulticloudDataTransferConfigsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context, Options const& options,
                google::cloud::networkconnectivity::v1::
                    ListMulticloudDataTransferConfigsRequest const& request) {
              return stub->ListMulticloudDataTransferConfigs(context, options,
                                                             request);
            },
            options, r, function_name);
      },
      [](google::cloud::networkconnectivity::v1::
             ListMulticloudDataTransferConfigsResponse r) {
        std::vector<google::cloud::networkconnectivity::v1::
                        MulticloudDataTransferConfig>
            result(r.multicloud_data_transfer_configs().size());
        auto& messages = *r.mutable_multicloud_data_transfer_configs();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>
DataTransferServiceConnectionImpl::GetMulticloudDataTransferConfig(
    google::cloud::networkconnectivity::v1::
        GetMulticloudDataTransferConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetMulticloudDataTransferConfig(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::networkconnectivity::v1::
                 GetMulticloudDataTransferConfigRequest const& request) {
        return stub_->GetMulticloudDataTransferConfig(context, options,
                                                      request);
      },
      *current, request, __func__);
}

future<StatusOr<
    google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>>
DataTransferServiceConnectionImpl::CreateMulticloudDataTransferConfig(
    google::cloud::networkconnectivity::v1::
        CreateMulticloudDataTransferConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto request_copy = request;
  auto const idempotent =
      idempotency_policy(*current)->CreateMulticloudDataTransferConfig(
          request_copy);
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>(
      background_->cq(), current, std::move(request_copy),
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::cloud::networkconnectivity::v1::
              CreateMulticloudDataTransferConfigRequest const& request) {
        return stub->AsyncCreateMulticloudDataTransferConfig(
            cq, std::move(context), std::move(options), request);
      },
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>,
      retry_policy(*current), backoff_policy(*current), idempotent,
      polling_policy(*current), __func__);
}

StatusOr<google::longrunning::Operation>
DataTransferServiceConnectionImpl::CreateMulticloudDataTransferConfig(
    NoAwaitTag, google::cloud::networkconnectivity::v1::
                    CreateMulticloudDataTransferConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateMulticloudDataTransferConfig(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::networkconnectivity::v1::
                 CreateMulticloudDataTransferConfigRequest const& request) {
        return stub_->CreateMulticloudDataTransferConfig(context, options,
                                                         request);
      },
      *current, request, __func__);
}

future<StatusOr<
    google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>>
DataTransferServiceConnectionImpl::CreateMulticloudDataTransferConfig(
    google::longrunning::Operation const& operation) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  if (!operation.metadata()
           .Is<typename google::cloud::networkconnectivity::v1::
                   OperationMetadata>()) {
    return make_ready_future<StatusOr<
        google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>>(
        internal::InvalidArgumentError(
            "operation does not correspond to "
            "CreateMulticloudDataTransferConfig",
            GCP_ERROR_INFO().WithMetadata("operation",
                                          operation.metadata().DebugString())));
  }

  return google::cloud::internal::AsyncAwaitLongRunningOperation<
      google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>(
      background_->cq(), current, operation,
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>,
      polling_policy(*current), __func__);
}

future<StatusOr<
    google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>>
DataTransferServiceConnectionImpl::UpdateMulticloudDataTransferConfig(
    google::cloud::networkconnectivity::v1::
        UpdateMulticloudDataTransferConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto request_copy = request;
  auto const idempotent =
      idempotency_policy(*current)->UpdateMulticloudDataTransferConfig(
          request_copy);
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>(
      background_->cq(), current, std::move(request_copy),
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::cloud::networkconnectivity::v1::
              UpdateMulticloudDataTransferConfigRequest const& request) {
        return stub->AsyncUpdateMulticloudDataTransferConfig(
            cq, std::move(context), std::move(options), request);
      },
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>,
      retry_policy(*current), backoff_policy(*current), idempotent,
      polling_policy(*current), __func__);
}

StatusOr<google::longrunning::Operation>
DataTransferServiceConnectionImpl::UpdateMulticloudDataTransferConfig(
    NoAwaitTag, google::cloud::networkconnectivity::v1::
                    UpdateMulticloudDataTransferConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateMulticloudDataTransferConfig(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::networkconnectivity::v1::
                 UpdateMulticloudDataTransferConfigRequest const& request) {
        return stub_->UpdateMulticloudDataTransferConfig(context, options,
                                                         request);
      },
      *current, request, __func__);
}

future<StatusOr<
    google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>>
DataTransferServiceConnectionImpl::UpdateMulticloudDataTransferConfig(
    google::longrunning::Operation const& operation) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  if (!operation.metadata()
           .Is<typename google::cloud::networkconnectivity::v1::
                   OperationMetadata>()) {
    return make_ready_future<StatusOr<
        google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>>(
        internal::InvalidArgumentError(
            "operation does not correspond to "
            "UpdateMulticloudDataTransferConfig",
            GCP_ERROR_INFO().WithMetadata("operation",
                                          operation.metadata().DebugString())));
  }

  return google::cloud::internal::AsyncAwaitLongRunningOperation<
      google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>(
      background_->cq(), current, operation,
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>,
      polling_policy(*current), __func__);
}

future<StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>
DataTransferServiceConnectionImpl::DeleteMulticloudDataTransferConfig(
    google::cloud::networkconnectivity::v1::
        DeleteMulticloudDataTransferConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto request_copy = request;
  auto const idempotent =
      idempotency_policy(*current)->DeleteMulticloudDataTransferConfig(
          request_copy);
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::networkconnectivity::v1::OperationMetadata>(
      background_->cq(), current, std::move(request_copy),
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::cloud::networkconnectivity::v1::
              DeleteMulticloudDataTransferConfigRequest const& request) {
        return stub->AsyncDeleteMulticloudDataTransferConfig(
            cq, std::move(context), std::move(options), request);
      },
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultMetadata<
          google::cloud::networkconnectivity::v1::OperationMetadata>,
      retry_policy(*current), backoff_policy(*current), idempotent,
      polling_policy(*current), __func__);
}

StatusOr<google::longrunning::Operation>
DataTransferServiceConnectionImpl::DeleteMulticloudDataTransferConfig(
    NoAwaitTag, google::cloud::networkconnectivity::v1::
                    DeleteMulticloudDataTransferConfigRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteMulticloudDataTransferConfig(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::networkconnectivity::v1::
                 DeleteMulticloudDataTransferConfigRequest const& request) {
        return stub_->DeleteMulticloudDataTransferConfig(context, options,
                                                         request);
      },
      *current, request, __func__);
}

future<StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>
DataTransferServiceConnectionImpl::DeleteMulticloudDataTransferConfig(
    google::longrunning::Operation const& operation) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  if (!operation.metadata()
           .Is<typename google::cloud::networkconnectivity::v1::
                   OperationMetadata>()) {
    return make_ready_future<
        StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>(
        internal::InvalidArgumentError(
            "operation does not correspond to "
            "DeleteMulticloudDataTransferConfig",
            GCP_ERROR_INFO().WithMetadata("operation",
                                          operation.metadata().DebugString())));
  }

  return google::cloud::internal::AsyncAwaitLongRunningOperation<
      google::cloud::networkconnectivity::v1::OperationMetadata>(
      background_->cq(), current, operation,
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultMetadata<
          google::cloud::networkconnectivity::v1::OperationMetadata>,
      polling_policy(*current), __func__);
}

StreamRange<google::cloud::networkconnectivity::v1::Destination>
DataTransferServiceConnectionImpl::ListDestinations(
    google::cloud::networkconnectivity::v1::ListDestinationsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListDestinations(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::networkconnectivity::v1::Destination>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<
           networkconnectivity_v1::DataTransferServiceRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::networkconnectivity::v1::ListDestinationsRequest const&
              r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::networkconnectivity::v1::
                       ListDestinationsRequest const& request) {
              return stub->ListDestinations(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::networkconnectivity::v1::ListDestinationsResponse r) {
        std::vector<google::cloud::networkconnectivity::v1::Destination> result(
            r.destinations().size());
        auto& messages = *r.mutable_destinations();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::networkconnectivity::v1::Destination>
DataTransferServiceConnectionImpl::GetDestination(
    google::cloud::networkconnectivity::v1::GetDestinationRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetDestination(request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::networkconnectivity::v1::GetDestinationRequest const&
              request) {
        return stub_->GetDestination(context, options, request);
      },
      *current, request, __func__);
}

future<StatusOr<google::cloud::networkconnectivity::v1::Destination>>
DataTransferServiceConnectionImpl::CreateDestination(
    google::cloud::networkconnectivity::v1::CreateDestinationRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto request_copy = request;
  auto const idempotent =
      idempotency_policy(*current)->CreateDestination(request_copy);
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::networkconnectivity::v1::Destination>(
      background_->cq(), current, std::move(request_copy),
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::cloud::networkconnectivity::v1::
                         CreateDestinationRequest const& request) {
        return stub->AsyncCreateDestination(cq, std::move(context),
                                            std::move(options), request);
      },
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::networkconnectivity::v1::Destination>,
      retry_policy(*current), backoff_policy(*current), idempotent,
      polling_policy(*current), __func__);
}

StatusOr<google::longrunning::Operation>
DataTransferServiceConnectionImpl::CreateDestination(
    NoAwaitTag,
    google::cloud::networkconnectivity::v1::CreateDestinationRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CreateDestination(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::networkconnectivity::v1::
                 CreateDestinationRequest const& request) {
        return stub_->CreateDestination(context, options, request);
      },
      *current, request, __func__);
}

future<StatusOr<google::cloud::networkconnectivity::v1::Destination>>
DataTransferServiceConnectionImpl::CreateDestination(
    google::longrunning::Operation const& operation) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  if (!operation.metadata()
           .Is<typename google::cloud::networkconnectivity::v1::
                   OperationMetadata>()) {
    return make_ready_future<
        StatusOr<google::cloud::networkconnectivity::v1::Destination>>(
        internal::InvalidArgumentError(
            "operation does not correspond to CreateDestination",
            GCP_ERROR_INFO().WithMetadata("operation",
                                          operation.metadata().DebugString())));
  }

  return google::cloud::internal::AsyncAwaitLongRunningOperation<
      google::cloud::networkconnectivity::v1::Destination>(
      background_->cq(), current, operation,
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::networkconnectivity::v1::Destination>,
      polling_policy(*current), __func__);
}

future<StatusOr<google::cloud::networkconnectivity::v1::Destination>>
DataTransferServiceConnectionImpl::UpdateDestination(
    google::cloud::networkconnectivity::v1::UpdateDestinationRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto request_copy = request;
  auto const idempotent =
      idempotency_policy(*current)->UpdateDestination(request_copy);
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::networkconnectivity::v1::Destination>(
      background_->cq(), current, std::move(request_copy),
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::cloud::networkconnectivity::v1::
                         UpdateDestinationRequest const& request) {
        return stub->AsyncUpdateDestination(cq, std::move(context),
                                            std::move(options), request);
      },
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::networkconnectivity::v1::Destination>,
      retry_policy(*current), backoff_policy(*current), idempotent,
      polling_policy(*current), __func__);
}

StatusOr<google::longrunning::Operation>
DataTransferServiceConnectionImpl::UpdateDestination(
    NoAwaitTag,
    google::cloud::networkconnectivity::v1::UpdateDestinationRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateDestination(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::networkconnectivity::v1::
                 UpdateDestinationRequest const& request) {
        return stub_->UpdateDestination(context, options, request);
      },
      *current, request, __func__);
}

future<StatusOr<google::cloud::networkconnectivity::v1::Destination>>
DataTransferServiceConnectionImpl::UpdateDestination(
    google::longrunning::Operation const& operation) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  if (!operation.metadata()
           .Is<typename google::cloud::networkconnectivity::v1::
                   OperationMetadata>()) {
    return make_ready_future<
        StatusOr<google::cloud::networkconnectivity::v1::Destination>>(
        internal::InvalidArgumentError(
            "operation does not correspond to UpdateDestination",
            GCP_ERROR_INFO().WithMetadata("operation",
                                          operation.metadata().DebugString())));
  }

  return google::cloud::internal::AsyncAwaitLongRunningOperation<
      google::cloud::networkconnectivity::v1::Destination>(
      background_->cq(), current, operation,
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::networkconnectivity::v1::Destination>,
      polling_policy(*current), __func__);
}

future<StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>
DataTransferServiceConnectionImpl::DeleteDestination(
    google::cloud::networkconnectivity::v1::DeleteDestinationRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto request_copy = request;
  auto const idempotent =
      idempotency_policy(*current)->DeleteDestination(request_copy);
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::networkconnectivity::v1::OperationMetadata>(
      background_->cq(), current, std::move(request_copy),
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::cloud::networkconnectivity::v1::
                         DeleteDestinationRequest const& request) {
        return stub->AsyncDeleteDestination(cq, std::move(context),
                                            std::move(options), request);
      },
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultMetadata<
          google::cloud::networkconnectivity::v1::OperationMetadata>,
      retry_policy(*current), backoff_policy(*current), idempotent,
      polling_policy(*current), __func__);
}

StatusOr<google::longrunning::Operation>
DataTransferServiceConnectionImpl::DeleteDestination(
    NoAwaitTag,
    google::cloud::networkconnectivity::v1::DeleteDestinationRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteDestination(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::networkconnectivity::v1::
                 DeleteDestinationRequest const& request) {
        return stub_->DeleteDestination(context, options, request);
      },
      *current, request, __func__);
}

future<StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>
DataTransferServiceConnectionImpl::DeleteDestination(
    google::longrunning::Operation const& operation) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  if (!operation.metadata()
           .Is<typename google::cloud::networkconnectivity::v1::
                   OperationMetadata>()) {
    return make_ready_future<
        StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>(
        internal::InvalidArgumentError(
            "operation does not correspond to DeleteDestination",
            GCP_ERROR_INFO().WithMetadata("operation",
                                          operation.metadata().DebugString())));
  }

  return google::cloud::internal::AsyncAwaitLongRunningOperation<
      google::cloud::networkconnectivity::v1::OperationMetadata>(
      background_->cq(), current, operation,
      [stub = stub_](google::cloud::CompletionQueue& cq,
                     std::shared_ptr<grpc::ClientContext> context,
                     google::cloud::internal::ImmutableOptions options,
                     google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context),
                                       std::move(options), request);
      },
      [stub = stub_](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::internal::ImmutableOptions options,
          google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context),
                                          std::move(options), request);
      },
      &google::cloud::internal::ExtractLongRunningResultMetadata<
          google::cloud::networkconnectivity::v1::OperationMetadata>,
      polling_policy(*current), __func__);
}

StatusOr<google::cloud::networkconnectivity::v1::
             MulticloudDataTransferSupportedService>
DataTransferServiceConnectionImpl::GetMulticloudDataTransferSupportedService(
    google::cloud::networkconnectivity::v1::
        GetMulticloudDataTransferSupportedServiceRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetMulticloudDataTransferSupportedService(
          request),
      [this](
          grpc::ClientContext& context, Options const& options,
          google::cloud::networkconnectivity::v1::
              GetMulticloudDataTransferSupportedServiceRequest const& request) {
        return stub_->GetMulticloudDataTransferSupportedService(
            context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::cloud::networkconnectivity::v1::
                MulticloudDataTransferSupportedService>
DataTransferServiceConnectionImpl::ListMulticloudDataTransferSupportedServices(
    google::cloud::networkconnectivity::v1::
        ListMulticloudDataTransferSupportedServicesRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency =
      idempotency_policy(*current)->ListMulticloudDataTransferSupportedServices(
          request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::networkconnectivity::v1::
                      MulticloudDataTransferSupportedService>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<
           networkconnectivity_v1::DataTransferServiceRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::networkconnectivity::v1::
              ListMulticloudDataTransferSupportedServicesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::cloud::networkconnectivity::v1::
                       ListMulticloudDataTransferSupportedServicesRequest const&
                           request) {
              return stub->ListMulticloudDataTransferSupportedServices(
                  context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::networkconnectivity::v1::
             ListMulticloudDataTransferSupportedServicesResponse r) {
        std::vector<google::cloud::networkconnectivity::v1::
                        MulticloudDataTransferSupportedService>
            result(r.multicloud_data_transfer_supported_services().size());
        auto& messages =
            *r.mutable_multicloud_data_transfer_supported_services();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StreamRange<google::cloud::location::Location>
DataTransferServiceConnectionImpl::ListLocations(
    google::cloud::location::ListLocationsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListLocations(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::location::Location>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<
           networkconnectivity_v1::DataTransferServiceRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::cloud::location::ListLocationsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](
                grpc::ClientContext& context, Options const& options,
                google::cloud::location::ListLocationsRequest const& request) {
              return stub->ListLocations(context, options, request);
            },
            options, r, function_name);
      },
      [](google::cloud::location::ListLocationsResponse r) {
        std::vector<google::cloud::location::Location> result(
            r.locations().size());
        auto& messages = *r.mutable_locations();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::location::Location>
DataTransferServiceConnectionImpl::GetLocation(
    google::cloud::location::GetLocationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetLocation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::cloud::location::GetLocationRequest const& request) {
        return stub_->GetLocation(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::iam::v1::Policy>
DataTransferServiceConnectionImpl::SetIamPolicy(
    google::iam::v1::SetIamPolicyRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->SetIamPolicy(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::iam::v1::SetIamPolicyRequest const& request) {
        return stub_->SetIamPolicy(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::iam::v1::Policy>
DataTransferServiceConnectionImpl::GetIamPolicy(
    google::iam::v1::GetIamPolicyRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetIamPolicy(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::iam::v1::GetIamPolicyRequest const& request) {
        return stub_->GetIamPolicy(context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DataTransferServiceConnectionImpl::TestIamPermissions(
    google::iam::v1::TestIamPermissionsRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->TestIamPermissions(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::iam::v1::TestIamPermissionsRequest const& request) {
        return stub_->TestIamPermissions(context, options, request);
      },
      *current, request, __func__);
}

StreamRange<google::longrunning::Operation>
DataTransferServiceConnectionImpl::ListOperations(
    google::longrunning::ListOperationsRequest request) {
  request.clear_page_token();
  auto current = google::cloud::internal::SaveCurrentOptions();
  auto idempotency = idempotency_policy(*current)->ListOperations(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::longrunning::Operation>>(
      current, std::move(request),
      [idempotency, function_name, stub = stub_,
       retry = std::shared_ptr<
           networkconnectivity_v1::DataTransferServiceRetryPolicy>(
           retry_policy(*current)),
       backoff = std::shared_ptr<BackoffPolicy>(backoff_policy(*current))](
          Options const& options,
          google::longrunning::ListOperationsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context, Options const& options,
                   google::longrunning::ListOperationsRequest const& request) {
              return stub->ListOperations(context, options, request);
            },
            options, r, function_name);
      },
      [](google::longrunning::ListOperationsResponse r) {
        std::vector<google::longrunning::Operation> result(
            r.operations().size());
        auto& messages = *r.mutable_operations();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::longrunning::Operation>
DataTransferServiceConnectionImpl::GetOperation(
    google::longrunning::GetOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::GetOperationRequest const& request) {
        return stub_->GetOperation(context, options, request);
      },
      *current, request, __func__);
}

Status DataTransferServiceConnectionImpl::DeleteOperation(
    google::longrunning::DeleteOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::DeleteOperationRequest const& request) {
        return stub_->DeleteOperation(context, options, request);
      },
      *current, request, __func__);
}

Status DataTransferServiceConnectionImpl::CancelOperation(
    google::longrunning::CancelOperationRequest const& request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::internal::RetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->CancelOperation(request),
      [this](grpc::ClientContext& context, Options const& options,
             google::longrunning::CancelOperationRequest const& request) {
        return stub_->CancelOperation(context, options, request);
      },
      *current, request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace networkconnectivity_v1_internal
}  // namespace cloud
}  // namespace google
