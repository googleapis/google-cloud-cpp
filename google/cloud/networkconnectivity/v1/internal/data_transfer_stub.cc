// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/networkconnectivity/v1/data_transfer.proto

#include "google/cloud/networkconnectivity/v1/internal/data_transfer_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/networkconnectivity/v1/data_transfer.grpc.pb.h>
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace networkconnectivity_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DataTransferServiceStub::~DataTransferServiceStub() = default;

StatusOr<google::cloud::networkconnectivity::v1::
             ListMulticloudDataTransferConfigsResponse>
DefaultDataTransferServiceStub::ListMulticloudDataTransferConfigs(
    grpc::ClientContext& context, Options const&,
    google::cloud::networkconnectivity::v1::
        ListMulticloudDataTransferConfigsRequest const& request) {
  google::cloud::networkconnectivity::v1::
      ListMulticloudDataTransferConfigsResponse response;
  auto status = grpc_stub_->ListMulticloudDataTransferConfigs(&context, request,
                                                              &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig>
DefaultDataTransferServiceStub::GetMulticloudDataTransferConfig(
    grpc::ClientContext& context, Options const&,
    google::cloud::networkconnectivity::v1::
        GetMulticloudDataTransferConfigRequest const& request) {
  google::cloud::networkconnectivity::v1::MulticloudDataTransferConfig response;
  auto status =
      grpc_stub_->GetMulticloudDataTransferConfig(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultDataTransferServiceStub::AsyncCreateMulticloudDataTransferConfig(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::networkconnectivity::v1::
        CreateMulticloudDataTransferConfigRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::networkconnectivity::v1::
          CreateMulticloudDataTransferConfigRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::networkconnectivity::v1::
                 CreateMulticloudDataTransferConfigRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateMulticloudDataTransferConfig(context,
                                                                   request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultDataTransferServiceStub::CreateMulticloudDataTransferConfig(
    grpc::ClientContext& context, Options,
    google::cloud::networkconnectivity::v1::
        CreateMulticloudDataTransferConfigRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateMulticloudDataTransferConfig(
      &context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultDataTransferServiceStub::AsyncUpdateMulticloudDataTransferConfig(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::networkconnectivity::v1::
        UpdateMulticloudDataTransferConfigRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::networkconnectivity::v1::
          UpdateMulticloudDataTransferConfigRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::networkconnectivity::v1::
                 UpdateMulticloudDataTransferConfigRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateMulticloudDataTransferConfig(context,
                                                                   request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultDataTransferServiceStub::UpdateMulticloudDataTransferConfig(
    grpc::ClientContext& context, Options,
    google::cloud::networkconnectivity::v1::
        UpdateMulticloudDataTransferConfigRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateMulticloudDataTransferConfig(
      &context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultDataTransferServiceStub::AsyncDeleteMulticloudDataTransferConfig(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::networkconnectivity::v1::
        DeleteMulticloudDataTransferConfigRequest const& request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::networkconnectivity::v1::
          DeleteMulticloudDataTransferConfigRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::networkconnectivity::v1::
                 DeleteMulticloudDataTransferConfigRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteMulticloudDataTransferConfig(context,
                                                                   request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultDataTransferServiceStub::DeleteMulticloudDataTransferConfig(
    grpc::ClientContext& context, Options,
    google::cloud::networkconnectivity::v1::
        DeleteMulticloudDataTransferConfigRequest const& request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteMulticloudDataTransferConfig(
      &context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::networkconnectivity::v1::ListDestinationsResponse>
DefaultDataTransferServiceStub::ListDestinations(
    grpc::ClientContext& context, Options const&,
    google::cloud::networkconnectivity::v1::ListDestinationsRequest const&
        request) {
  google::cloud::networkconnectivity::v1::ListDestinationsResponse response;
  auto status = grpc_stub_->ListDestinations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::networkconnectivity::v1::Destination>
DefaultDataTransferServiceStub::GetDestination(
    grpc::ClientContext& context, Options const&,
    google::cloud::networkconnectivity::v1::GetDestinationRequest const&
        request) {
  google::cloud::networkconnectivity::v1::Destination response;
  auto status = grpc_stub_->GetDestination(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultDataTransferServiceStub::AsyncCreateDestination(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::networkconnectivity::v1::CreateDestinationRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::networkconnectivity::v1::CreateDestinationRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::networkconnectivity::v1::
                 CreateDestinationRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncCreateDestination(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultDataTransferServiceStub::CreateDestination(
    grpc::ClientContext& context, Options,
    google::cloud::networkconnectivity::v1::CreateDestinationRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->CreateDestination(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultDataTransferServiceStub::AsyncUpdateDestination(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::networkconnectivity::v1::UpdateDestinationRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::networkconnectivity::v1::UpdateDestinationRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::networkconnectivity::v1::
                 UpdateDestinationRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncUpdateDestination(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultDataTransferServiceStub::UpdateDestination(
    grpc::ClientContext& context, Options,
    google::cloud::networkconnectivity::v1::UpdateDestinationRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->UpdateDestination(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

future<StatusOr<google::longrunning::Operation>>
DefaultDataTransferServiceStub::AsyncDeleteDestination(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    google::cloud::internal::ImmutableOptions,
    google::cloud::networkconnectivity::v1::DeleteDestinationRequest const&
        request) {
  return internal::MakeUnaryRpcImpl<
      google::cloud::networkconnectivity::v1::DeleteDestinationRequest,
      google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::cloud::networkconnectivity::v1::
                 DeleteDestinationRequest const& request,
             grpc::CompletionQueue* cq) {
        return grpc_stub_->AsyncDeleteDestination(context, request, cq);
      },
      request, std::move(context));
}

StatusOr<google::longrunning::Operation>
DefaultDataTransferServiceStub::DeleteDestination(
    grpc::ClientContext& context, Options,
    google::cloud::networkconnectivity::v1::DeleteDestinationRequest const&
        request) {
  google::longrunning::Operation response;
  auto status = grpc_stub_->DeleteDestination(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::networkconnectivity::v1::
             MulticloudDataTransferSupportedService>
DefaultDataTransferServiceStub::GetMulticloudDataTransferSupportedService(
    grpc::ClientContext& context, Options const&,
    google::cloud::networkconnectivity::v1::
        GetMulticloudDataTransferSupportedServiceRequest const& request) {
  google::cloud::networkconnectivity::v1::MulticloudDataTransferSupportedService
      response;
  auto status = grpc_stub_->GetMulticloudDataTransferSupportedService(
      &context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::networkconnectivity::v1::
             ListMulticloudDataTransferSupportedServicesResponse>
DefaultDataTransferServiceStub::ListMulticloudDataTransferSupportedServices(
    grpc::ClientContext& context, Options const&,
    google::cloud::networkconnectivity::v1::
        ListMulticloudDataTransferSupportedServicesRequest const& request) {
  google::cloud::networkconnectivity::v1::
      ListMulticloudDataTransferSupportedServicesResponse response;
  auto status = grpc_stub_->ListMulticloudDataTransferSupportedServices(
      &context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::ListLocationsResponse>
DefaultDataTransferServiceStub::ListLocations(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::ListLocationsRequest const& request) {
  google::cloud::location::ListLocationsResponse response;
  auto status = locations_stub_->ListLocations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::location::Location>
DefaultDataTransferServiceStub::GetLocation(
    grpc::ClientContext& context, Options const&,
    google::cloud::location::GetLocationRequest const& request) {
  google::cloud::location::Location response;
  auto status = locations_stub_->GetLocation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::Policy> DefaultDataTransferServiceStub::SetIamPolicy(
    grpc::ClientContext& context, Options const&,
    google::iam::v1::SetIamPolicyRequest const& request) {
  google::iam::v1::Policy response;
  auto status = iampolicy_stub_->SetIamPolicy(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::Policy> DefaultDataTransferServiceStub::GetIamPolicy(
    grpc::ClientContext& context, Options const&,
    google::iam::v1::GetIamPolicyRequest const& request) {
  google::iam::v1::Policy response;
  auto status = iampolicy_stub_->GetIamPolicy(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
DefaultDataTransferServiceStub::TestIamPermissions(
    grpc::ClientContext& context, Options const&,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  google::iam::v1::TestIamPermissionsResponse response;
  auto status =
      iampolicy_stub_->TestIamPermissions(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::ListOperationsResponse>
DefaultDataTransferServiceStub::ListOperations(
    grpc::ClientContext& context, Options const&,
    google::longrunning::ListOperationsRequest const& request) {
  google::longrunning::ListOperationsResponse response;
  auto status = operations_stub_->ListOperations(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::longrunning::Operation>
DefaultDataTransferServiceStub::GetOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::GetOperationRequest const& request) {
  google::longrunning::Operation response;
  auto status = operations_stub_->GetOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultDataTransferServiceStub::DeleteOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::DeleteOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->DeleteOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

Status DefaultDataTransferServiceStub::CancelOperation(
    grpc::ClientContext& context, Options const&,
    google::longrunning::CancelOperationRequest const& request) {
  google::protobuf::Empty response;
  auto status = operations_stub_->CancelOperation(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

future<StatusOr<google::longrunning::Operation>>
DefaultDataTransferServiceStub::AsyncGetOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    // NOLINTNEXTLINE(performance-unnecessary-value-param)
    google::cloud::internal::ImmutableOptions,
    google::longrunning::GetOperationRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::longrunning::GetOperationRequest,
                                    google::longrunning::Operation>(
      cq,
      [this](grpc::ClientContext* context,
             google::longrunning::GetOperationRequest const& request,
             grpc::CompletionQueue* cq) {
        return operations_stub_->AsyncGetOperation(context, request, cq);
      },
      request, std::move(context));
}

future<Status> DefaultDataTransferServiceStub::AsyncCancelOperation(
    google::cloud::CompletionQueue& cq,
    std::shared_ptr<grpc::ClientContext> context,
    // NOLINTNEXTLINE(performance-unnecessary-value-param)
    google::cloud::internal::ImmutableOptions,
    google::longrunning::CancelOperationRequest const& request) {
  return internal::MakeUnaryRpcImpl<google::longrunning::CancelOperationRequest,
                                    google::protobuf::Empty>(
             cq,
             [this](grpc::ClientContext* context,
                    google::longrunning::CancelOperationRequest const& request,
                    grpc::CompletionQueue* cq) {
               return operations_stub_->AsyncCancelOperation(context, request,
                                                             cq);
             },
             request, std::move(context))
      .then([](future<StatusOr<google::protobuf::Empty>> f) {
        return f.get().status();
      });
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace networkconnectivity_v1_internal
}  // namespace cloud
}  // namespace google
