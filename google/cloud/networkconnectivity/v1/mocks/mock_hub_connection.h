// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/networkconnectivity/v1/hub.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_NETWORKCONNECTIVITY_V1_MOCKS_MOCK_HUB_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_NETWORKCONNECTIVITY_V1_MOCKS_MOCK_HUB_CONNECTION_H

#include "google/cloud/networkconnectivity/v1/hub_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace networkconnectivity_v1_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `HubServiceConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `HubServiceClient`. To do so,
 * construct an object of type `HubServiceClient` with an instance of this
 * class. Then use the Google Test framework functions to program the behavior
 * of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockHubServiceConnection
    : public networkconnectivity_v1::HubServiceConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD((StreamRange<google::cloud::networkconnectivity::v1::Hub>),
              ListHubs,
              (google::cloud::networkconnectivity::v1::ListHubsRequest request),
              (override));

  MOCK_METHOD(
      StatusOr<google::cloud::networkconnectivity::v1::Hub>, GetHub,
      (google::cloud::networkconnectivity::v1::GetHubRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateHub(Matcher<google::cloud::networkconnectivity::v1::CreateHubRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::networkconnectivity::v1::Hub>>, CreateHub,
      (google::cloud::networkconnectivity::v1::CreateHubRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateHub(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, CreateHub,
      (NoAwaitTag,
       google::cloud::networkconnectivity::v1::CreateHubRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateHub(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::networkconnectivity::v1::Hub>>,
              CreateHub, (google::longrunning::Operation const& operation),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateHub(Matcher<google::cloud::networkconnectivity::v1::UpdateHubRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<google::cloud::networkconnectivity::v1::Hub>>, UpdateHub,
      (google::cloud::networkconnectivity::v1::UpdateHubRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateHub(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, UpdateHub,
      (NoAwaitTag,
       google::cloud::networkconnectivity::v1::UpdateHubRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateHub(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::networkconnectivity::v1::Hub>>,
              UpdateHub, (google::longrunning::Operation const& operation),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteHub(Matcher<google::cloud::networkconnectivity::v1::DeleteHubRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>,
      DeleteHub,
      (google::cloud::networkconnectivity::v1::DeleteHubRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteHub(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, DeleteHub,
      (NoAwaitTag,
       google::cloud::networkconnectivity::v1::DeleteHubRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteHub(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>,
      DeleteHub, (google::longrunning::Operation const& operation), (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::networkconnectivity::v1::Spoke>),
      ListHubSpokes,
      (google::cloud::networkconnectivity::v1::ListHubSpokesRequest request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::networkconnectivity::v1::HubStatusEntry>),
      QueryHubStatus,
      (google::cloud::networkconnectivity::v1::QueryHubStatusRequest request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::networkconnectivity::v1::Spoke>), ListSpokes,
      (google::cloud::networkconnectivity::v1::ListSpokesRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::networkconnectivity::v1::Spoke>, GetSpoke,
      (google::cloud::networkconnectivity::v1::GetSpokeRequest const& request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// CreateSpoke(Matcher<google::cloud::networkconnectivity::v1::CreateSpokeRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::networkconnectivity::v1::Spoke>>,
              CreateSpoke,
              (google::cloud::networkconnectivity::v1::CreateSpokeRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, CreateSpoke(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, CreateSpoke,
              (NoAwaitTag,
               google::cloud::networkconnectivity::v1::CreateSpokeRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, CreateSpoke(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::networkconnectivity::v1::Spoke>>,
              CreateSpoke, (google::longrunning::Operation const& operation),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateSpoke(Matcher<google::cloud::networkconnectivity::v1::UpdateSpokeRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::networkconnectivity::v1::Spoke>>,
              UpdateSpoke,
              (google::cloud::networkconnectivity::v1::UpdateSpokeRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateSpoke(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, UpdateSpoke,
              (NoAwaitTag,
               google::cloud::networkconnectivity::v1::UpdateSpokeRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateSpoke(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::networkconnectivity::v1::Spoke>>,
              UpdateSpoke, (google::longrunning::Operation const& operation),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// RejectHubSpoke(Matcher<google::cloud::networkconnectivity::v1::RejectHubSpokeRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::cloud::networkconnectivity::v1::RejectHubSpokeResponse>>,
      RejectHubSpoke,
      (google::cloud::networkconnectivity::v1::RejectHubSpokeRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, RejectHubSpoke(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, RejectHubSpoke,
      (NoAwaitTag,
       google::cloud::networkconnectivity::v1::RejectHubSpokeRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, RejectHubSpoke(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::cloud::networkconnectivity::v1::RejectHubSpokeResponse>>,
      RejectHubSpoke, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// AcceptHubSpoke(Matcher<google::cloud::networkconnectivity::v1::AcceptHubSpokeRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::cloud::networkconnectivity::v1::AcceptHubSpokeResponse>>,
      AcceptHubSpoke,
      (google::cloud::networkconnectivity::v1::AcceptHubSpokeRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, AcceptHubSpoke(_, _))
  /// @endcode
  MOCK_METHOD(
      StatusOr<google::longrunning::Operation>, AcceptHubSpoke,
      (NoAwaitTag,
       google::cloud::networkconnectivity::v1::AcceptHubSpokeRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, AcceptHubSpoke(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<StatusOr<
          google::cloud::networkconnectivity::v1::AcceptHubSpokeResponse>>,
      AcceptHubSpoke, (google::longrunning::Operation const& operation),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// DeleteSpoke(Matcher<google::cloud::networkconnectivity::v1::DeleteSpokeRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>,
      DeleteSpoke,
      (google::cloud::networkconnectivity::v1::DeleteSpokeRequest const&
           request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, DeleteSpoke(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, DeleteSpoke,
              (NoAwaitTag,
               google::cloud::networkconnectivity::v1::DeleteSpokeRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, DeleteSpoke(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(
      future<
          StatusOr<google::cloud::networkconnectivity::v1::OperationMetadata>>,
      DeleteSpoke, (google::longrunning::Operation const& operation),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::networkconnectivity::v1::RouteTable>,
      GetRouteTable,
      (google::cloud::networkconnectivity::v1::GetRouteTableRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::networkconnectivity::v1::Route>, GetRoute,
      (google::cloud::networkconnectivity::v1::GetRouteRequest const& request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::networkconnectivity::v1::Route>), ListRoutes,
      (google::cloud::networkconnectivity::v1::ListRoutesRequest request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::networkconnectivity::v1::RouteTable>),
      ListRouteTables,
      (google::cloud::networkconnectivity::v1::ListRouteTablesRequest request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::networkconnectivity::v1::Group>, GetGroup,
      (google::cloud::networkconnectivity::v1::GetGroupRequest const& request),
      (override));

  MOCK_METHOD(
      (StreamRange<google::cloud::networkconnectivity::v1::Group>), ListGroups,
      (google::cloud::networkconnectivity::v1::ListGroupsRequest request),
      (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock,
  /// UpdateGroup(Matcher<google::cloud::networkconnectivity::v1::UpdateGroupRequest
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::networkconnectivity::v1::Group>>,
              UpdateGroup,
              (google::cloud::networkconnectivity::v1::UpdateGroupRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// EXPECT_CALL(*mock, UpdateGroup(_, _))
  /// @endcode
  MOCK_METHOD(StatusOr<google::longrunning::Operation>, UpdateGroup,
              (NoAwaitTag,
               google::cloud::networkconnectivity::v1::UpdateGroupRequest const&
                   request),
              (override));

  /// To disambiguate calls, use:
  ///
  /// @code
  /// using ::testing::_;
  /// using ::testing::Matcher;
  /// EXPECT_CALL(*mock, UpdateGroup(Matcher<google::longrunning::Operation
  /// const&>(_)))
  /// @endcode
  MOCK_METHOD(future<StatusOr<google::cloud::networkconnectivity::v1::Group>>,
              UpdateGroup, (google::longrunning::Operation const& operation),
              (override));

  MOCK_METHOD((StreamRange<google::cloud::location::Location>), ListLocations,
              (google::cloud::location::ListLocationsRequest request),
              (override));

  MOCK_METHOD(StatusOr<google::cloud::location::Location>, GetLocation,
              (google::cloud::location::GetLocationRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>, SetIamPolicy,
              (google::iam::v1::SetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::Policy>, GetIamPolicy,
              (google::iam::v1::GetIamPolicyRequest const& request),
              (override));

  MOCK_METHOD(StatusOr<google::iam::v1::TestIamPermissionsResponse>,
              TestIamPermissions,
              (google::iam::v1::TestIamPermissionsRequest const& request),
              (override));

  MOCK_METHOD((StreamRange<google::longrunning::Operation>), ListOperations,
              (google::longrunning::ListOperationsRequest request), (override));

  MOCK_METHOD(StatusOr<google::longrunning::Operation>, GetOperation,
              (google::longrunning::GetOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, DeleteOperation,
              (google::longrunning::DeleteOperationRequest const& request),
              (override));

  MOCK_METHOD(Status, CancelOperation,
              (google::longrunning::CancelOperationRequest const& request),
              (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace networkconnectivity_v1_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_NETWORKCONNECTIVITY_V1_MOCKS_MOCK_HUB_CONNECTION_H
