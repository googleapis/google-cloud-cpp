// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/vmmigration/v1/vmmigration.proto

#include "google/cloud/vmmigration/vm_migration_connection.h"
#include "google/cloud/vmmigration/internal/vm_migration_option_defaults.h"
#include "google/cloud/vmmigration/internal/vm_migration_stub_factory.h"
#include "google/cloud/vmmigration/vm_migration_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace vmmigration {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

VmMigrationConnection::~VmMigrationConnection() = default;

StreamRange<google::cloud::vmmigration::v1::Source>
VmMigrationConnection::ListSources(
    google::cloud::vmmigration::v1::ListSourcesRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::vmmigration::v1::Source>>(
      std::move(request),
      [](google::cloud::vmmigration::v1::ListSourcesRequest const&) {
        return StatusOr<google::cloud::vmmigration::v1::ListSourcesResponse>{};
      },
      [](google::cloud::vmmigration::v1::ListSourcesResponse const&) {
        return std::vector<google::cloud::vmmigration::v1::Source>();
      });
}

StatusOr<google::cloud::vmmigration::v1::Source>
VmMigrationConnection::GetSource(
    google::cloud::vmmigration::v1::GetSourceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::vmmigration::v1::Source>>
VmMigrationConnection::CreateSource(
    google::cloud::vmmigration::v1::CreateSourceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::Source>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::Source>>
VmMigrationConnection::UpdateSource(
    google::cloud::vmmigration::v1::UpdateSourceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::Source>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
VmMigrationConnection::DeleteSource(
    google::cloud::vmmigration::v1::DeleteSourceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::cloud::vmmigration::v1::FetchInventoryResponse>
VmMigrationConnection::FetchInventory(
    google::cloud::vmmigration::v1::FetchInventoryRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::vmmigration::v1::UtilizationReport>
VmMigrationConnection::ListUtilizationReports(
    google::cloud::vmmigration::v1::ListUtilizationReportsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::vmmigration::v1::UtilizationReport>>(
      std::move(request),
      [](google::cloud::vmmigration::v1::ListUtilizationReportsRequest const&) {
        return StatusOr<
            google::cloud::vmmigration::v1::ListUtilizationReportsResponse>{};
      },
      [](google::cloud::vmmigration::v1::
             ListUtilizationReportsResponse const&) {
        return std::vector<google::cloud::vmmigration::v1::UtilizationReport>();
      });
}

StatusOr<google::cloud::vmmigration::v1::UtilizationReport>
VmMigrationConnection::GetUtilizationReport(
    google::cloud::vmmigration::v1::GetUtilizationReportRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::vmmigration::v1::UtilizationReport>>
VmMigrationConnection::CreateUtilizationReport(
    google::cloud::vmmigration::v1::CreateUtilizationReportRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::UtilizationReport>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
VmMigrationConnection::DeleteUtilizationReport(
    google::cloud::vmmigration::v1::DeleteUtilizationReportRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::vmmigration::v1::DatacenterConnector>
VmMigrationConnection::ListDatacenterConnectors(
    google::cloud::vmmigration::v1::ListDatacenterConnectorsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::vmmigration::v1::DatacenterConnector>>(
      std::move(request),
      [](google::cloud::vmmigration::v1::
             ListDatacenterConnectorsRequest const&) {
        return StatusOr<
            google::cloud::vmmigration::v1::ListDatacenterConnectorsResponse>{};
      },
      [](google::cloud::vmmigration::v1::
             ListDatacenterConnectorsResponse const&) {
        return std::vector<
            google::cloud::vmmigration::v1::DatacenterConnector>();
      });
}

StatusOr<google::cloud::vmmigration::v1::DatacenterConnector>
VmMigrationConnection::GetDatacenterConnector(
    google::cloud::vmmigration::v1::GetDatacenterConnectorRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::vmmigration::v1::DatacenterConnector>>
VmMigrationConnection::CreateDatacenterConnector(
    google::cloud::vmmigration::v1::CreateDatacenterConnectorRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::DatacenterConnector>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
VmMigrationConnection::DeleteDatacenterConnector(
    google::cloud::vmmigration::v1::DeleteDatacenterConnectorRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::MigratingVm>>
VmMigrationConnection::CreateMigratingVm(
    google::cloud::vmmigration::v1::CreateMigratingVmRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::MigratingVm>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::vmmigration::v1::MigratingVm>
VmMigrationConnection::ListMigratingVms(
    google::cloud::vmmigration::v1::ListMigratingVmsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::vmmigration::v1::MigratingVm>>(
      std::move(request),
      [](google::cloud::vmmigration::v1::ListMigratingVmsRequest const&) {
        return StatusOr<
            google::cloud::vmmigration::v1::ListMigratingVmsResponse>{};
      },
      [](google::cloud::vmmigration::v1::ListMigratingVmsResponse const&) {
        return std::vector<google::cloud::vmmigration::v1::MigratingVm>();
      });
}

StatusOr<google::cloud::vmmigration::v1::MigratingVm>
VmMigrationConnection::GetMigratingVm(
    google::cloud::vmmigration::v1::GetMigratingVmRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::vmmigration::v1::MigratingVm>>
VmMigrationConnection::UpdateMigratingVm(
    google::cloud::vmmigration::v1::UpdateMigratingVmRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::MigratingVm>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
VmMigrationConnection::DeleteMigratingVm(
    google::cloud::vmmigration::v1::DeleteMigratingVmRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::StartMigrationResponse>>
VmMigrationConnection::StartMigration(
    google::cloud::vmmigration::v1::StartMigrationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::StartMigrationResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::ResumeMigrationResponse>>
VmMigrationConnection::ResumeMigration(
    google::cloud::vmmigration::v1::ResumeMigrationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::ResumeMigrationResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::PauseMigrationResponse>>
VmMigrationConnection::PauseMigration(
    google::cloud::vmmigration::v1::PauseMigrationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::PauseMigrationResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::FinalizeMigrationResponse>>
VmMigrationConnection::FinalizeMigration(
    google::cloud::vmmigration::v1::FinalizeMigrationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::FinalizeMigrationResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::CloneJob>>
VmMigrationConnection::CreateCloneJob(
    google::cloud::vmmigration::v1::CreateCloneJobRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::CloneJob>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::CancelCloneJobResponse>>
VmMigrationConnection::CancelCloneJob(
    google::cloud::vmmigration::v1::CancelCloneJobRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::CancelCloneJobResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::vmmigration::v1::CloneJob>
VmMigrationConnection::ListCloneJobs(
    google::cloud::vmmigration::v1::ListCloneJobsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::vmmigration::v1::CloneJob>>(
      std::move(request),
      [](google::cloud::vmmigration::v1::ListCloneJobsRequest const&) {
        return StatusOr<
            google::cloud::vmmigration::v1::ListCloneJobsResponse>{};
      },
      [](google::cloud::vmmigration::v1::ListCloneJobsResponse const&) {
        return std::vector<google::cloud::vmmigration::v1::CloneJob>();
      });
}

StatusOr<google::cloud::vmmigration::v1::CloneJob>
VmMigrationConnection::GetCloneJob(
    google::cloud::vmmigration::v1::GetCloneJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::vmmigration::v1::CutoverJob>>
VmMigrationConnection::CreateCutoverJob(
    google::cloud::vmmigration::v1::CreateCutoverJobRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::CutoverJob>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::CancelCutoverJobResponse>>
VmMigrationConnection::CancelCutoverJob(
    google::cloud::vmmigration::v1::CancelCutoverJobRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::CancelCutoverJobResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::vmmigration::v1::CutoverJob>
VmMigrationConnection::ListCutoverJobs(
    google::cloud::vmmigration::v1::ListCutoverJobsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::vmmigration::v1::CutoverJob>>(
      std::move(request),
      [](google::cloud::vmmigration::v1::ListCutoverJobsRequest const&) {
        return StatusOr<
            google::cloud::vmmigration::v1::ListCutoverJobsResponse>{};
      },
      [](google::cloud::vmmigration::v1::ListCutoverJobsResponse const&) {
        return std::vector<google::cloud::vmmigration::v1::CutoverJob>();
      });
}

StatusOr<google::cloud::vmmigration::v1::CutoverJob>
VmMigrationConnection::GetCutoverJob(
    google::cloud::vmmigration::v1::GetCutoverJobRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::vmmigration::v1::Group>
VmMigrationConnection::ListGroups(
    google::cloud::vmmigration::v1::ListGroupsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::vmmigration::v1::Group>>(
      std::move(request),
      [](google::cloud::vmmigration::v1::ListGroupsRequest const&) {
        return StatusOr<google::cloud::vmmigration::v1::ListGroupsResponse>{};
      },
      [](google::cloud::vmmigration::v1::ListGroupsResponse const&) {
        return std::vector<google::cloud::vmmigration::v1::Group>();
      });
}

StatusOr<google::cloud::vmmigration::v1::Group> VmMigrationConnection::GetGroup(
    google::cloud::vmmigration::v1::GetGroupRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::vmmigration::v1::Group>>
VmMigrationConnection::CreateGroup(
    google::cloud::vmmigration::v1::CreateGroupRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::Group>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::Group>>
VmMigrationConnection::UpdateGroup(
    google::cloud::vmmigration::v1::UpdateGroupRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::Group>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
VmMigrationConnection::DeleteGroup(
    google::cloud::vmmigration::v1::DeleteGroupRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::AddGroupMigrationResponse>>
VmMigrationConnection::AddGroupMigration(
    google::cloud::vmmigration::v1::AddGroupMigrationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::AddGroupMigrationResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::RemoveGroupMigrationResponse>>
VmMigrationConnection::RemoveGroupMigration(
    google::cloud::vmmigration::v1::RemoveGroupMigrationRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::RemoveGroupMigrationResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StreamRange<google::cloud::vmmigration::v1::TargetProject>
VmMigrationConnection::ListTargetProjects(
    google::cloud::vmmigration::v1::ListTargetProjectsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::vmmigration::v1::TargetProject>>(
      std::move(request),
      [](google::cloud::vmmigration::v1::ListTargetProjectsRequest const&) {
        return StatusOr<
            google::cloud::vmmigration::v1::ListTargetProjectsResponse>{};
      },
      [](google::cloud::vmmigration::v1::ListTargetProjectsResponse const&) {
        return std::vector<google::cloud::vmmigration::v1::TargetProject>();
      });
}

StatusOr<google::cloud::vmmigration::v1::TargetProject>
VmMigrationConnection::GetTargetProject(
    google::cloud::vmmigration::v1::GetTargetProjectRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::vmmigration::v1::TargetProject>>
VmMigrationConnection::CreateTargetProject(
    google::cloud::vmmigration::v1::CreateTargetProjectRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::TargetProject>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::TargetProject>>
VmMigrationConnection::UpdateTargetProject(
    google::cloud::vmmigration::v1::UpdateTargetProjectRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::TargetProject>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
VmMigrationConnection::DeleteTargetProject(
    google::cloud::vmmigration::v1::DeleteTargetProjectRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

namespace {
class VmMigrationConnectionImpl : public VmMigrationConnection {
 public:
  VmMigrationConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<vmmigration_internal::VmMigrationStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<VmMigrationRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<VmMigrationBackoffPolicyOption>()->clone()),
        polling_policy_prototype_(
            options.get<VmMigrationPollingPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<VmMigrationConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~VmMigrationConnectionImpl() override = default;

  StreamRange<google::cloud::vmmigration::v1::Source> ListSources(
      google::cloud::vmmigration::v1::ListSourcesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<VmMigrationRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListSources(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::vmmigration::v1::Source>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::vmmigration::v1::ListSourcesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::vmmigration::v1::ListSourcesRequest const&
                         request) {
                return stub->ListSources(context, request);
              },
              r, function_name);
        },
        [](google::cloud::vmmigration::v1::ListSourcesResponse r) {
          std::vector<google::cloud::vmmigration::v1::Source> result(
              r.sources().size());
          auto& messages = *r.mutable_sources();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::vmmigration::v1::Source> GetSource(
      google::cloud::vmmigration::v1::GetSourceRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetSource(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::vmmigration::v1::GetSourceRequest const& request) {
          return stub_->GetSource(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::Source>> CreateSource(
      google::cloud::vmmigration::v1::CreateSourceRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::Source>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::CreateSourceRequest const&
                   request) {
          return stub->AsyncCreateSource(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::Source>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateSource(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::Source>> UpdateSource(
      google::cloud::vmmigration::v1::UpdateSourceRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::Source>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::UpdateSourceRequest const&
                   request) {
          return stub->AsyncUpdateSource(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::Source>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateSource(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
  DeleteSource(google::cloud::vmmigration::v1::DeleteSourceRequest const&
                   request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::OperationMetadata>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::DeleteSourceRequest const&
                   request) {
          return stub->AsyncDeleteSource(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::cloud::vmmigration::v1::OperationMetadata>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteSource(request),
        polling_policy_prototype_->clone(), __func__);
  }

  StatusOr<google::cloud::vmmigration::v1::FetchInventoryResponse>
  FetchInventory(google::cloud::vmmigration::v1::FetchInventoryRequest const&
                     request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->FetchInventory(request),
        [this](grpc::ClientContext& context,
               google::cloud::vmmigration::v1::FetchInventoryRequest const&
                   request) { return stub_->FetchInventory(context, request); },
        request, __func__);
  }

  StreamRange<google::cloud::vmmigration::v1::UtilizationReport>
  ListUtilizationReports(
      google::cloud::vmmigration::v1::ListUtilizationReportsRequest request)
      override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<VmMigrationRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListUtilizationReports(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::vmmigration::v1::UtilizationReport>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::vmmigration::v1::ListUtilizationReportsRequest const&
                r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::vmmigration::v1::
                         ListUtilizationReportsRequest const& request) {
                return stub->ListUtilizationReports(context, request);
              },
              r, function_name);
        },
        [](google::cloud::vmmigration::v1::ListUtilizationReportsResponse r) {
          std::vector<google::cloud::vmmigration::v1::UtilizationReport> result(
              r.utilization_reports().size());
          auto& messages = *r.mutable_utilization_reports();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::vmmigration::v1::UtilizationReport>
  GetUtilizationReport(
      google::cloud::vmmigration::v1::GetUtilizationReportRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetUtilizationReport(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::vmmigration::v1::GetUtilizationReportRequest const&
                request) {
          return stub_->GetUtilizationReport(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::UtilizationReport>>
  CreateUtilizationReport(
      google::cloud::vmmigration::v1::CreateUtilizationReportRequest const&
          request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::UtilizationReport>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::
                   CreateUtilizationReportRequest const& request) {
          return stub->AsyncCreateUtilizationReport(cq, std::move(context),
                                                    request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::UtilizationReport>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateUtilizationReport(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
  DeleteUtilizationReport(
      google::cloud::vmmigration::v1::DeleteUtilizationReportRequest const&
          request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::OperationMetadata>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::
                   DeleteUtilizationReportRequest const& request) {
          return stub->AsyncDeleteUtilizationReport(cq, std::move(context),
                                                    request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::cloud::vmmigration::v1::OperationMetadata>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteUtilizationReport(request),
        polling_policy_prototype_->clone(), __func__);
  }

  StreamRange<google::cloud::vmmigration::v1::DatacenterConnector>
  ListDatacenterConnectors(
      google::cloud::vmmigration::v1::ListDatacenterConnectorsRequest request)
      override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<VmMigrationRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListDatacenterConnectors(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::vmmigration::v1::DatacenterConnector>>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](google::cloud::vmmigration::v1::
                            ListDatacenterConnectorsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::vmmigration::v1::
                         ListDatacenterConnectorsRequest const& request) {
                return stub->ListDatacenterConnectors(context, request);
              },
              r, function_name);
        },
        [](google::cloud::vmmigration::v1::ListDatacenterConnectorsResponse r) {
          std::vector<google::cloud::vmmigration::v1::DatacenterConnector>
              result(r.datacenter_connectors().size());
          auto& messages = *r.mutable_datacenter_connectors();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::vmmigration::v1::DatacenterConnector>
  GetDatacenterConnector(
      google::cloud::vmmigration::v1::GetDatacenterConnectorRequest const&
          request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetDatacenterConnector(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::vmmigration::v1::GetDatacenterConnectorRequest const&
                request) {
          return stub_->GetDatacenterConnector(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::DatacenterConnector>>
  CreateDatacenterConnector(
      google::cloud::vmmigration::v1::CreateDatacenterConnectorRequest const&
          request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::DatacenterConnector>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::
                   CreateDatacenterConnectorRequest const& request) {
          return stub->AsyncCreateDatacenterConnector(cq, std::move(context),
                                                      request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::DatacenterConnector>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateDatacenterConnector(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
  DeleteDatacenterConnector(
      google::cloud::vmmigration::v1::DeleteDatacenterConnectorRequest const&
          request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::OperationMetadata>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::
                   DeleteDatacenterConnectorRequest const& request) {
          return stub->AsyncDeleteDatacenterConnector(cq, std::move(context),
                                                      request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::cloud::vmmigration::v1::OperationMetadata>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteDatacenterConnector(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::MigratingVm>>
  CreateMigratingVm(
      google::cloud::vmmigration::v1::CreateMigratingVmRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::MigratingVm>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::CreateMigratingVmRequest const&
                   request) {
          return stub->AsyncCreateMigratingVm(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::MigratingVm>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateMigratingVm(request),
        polling_policy_prototype_->clone(), __func__);
  }

  StreamRange<google::cloud::vmmigration::v1::MigratingVm> ListMigratingVms(
      google::cloud::vmmigration::v1::ListMigratingVmsRequest request)
      override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<VmMigrationRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListMigratingVms(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::vmmigration::v1::MigratingVm>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::vmmigration::v1::ListMigratingVmsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  google::cloud::vmmigration::v1::ListMigratingVmsRequest const&
                      request) {
                return stub->ListMigratingVms(context, request);
              },
              r, function_name);
        },
        [](google::cloud::vmmigration::v1::ListMigratingVmsResponse r) {
          std::vector<google::cloud::vmmigration::v1::MigratingVm> result(
              r.migrating_vms().size());
          auto& messages = *r.mutable_migrating_vms();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::vmmigration::v1::MigratingVm> GetMigratingVm(
      google::cloud::vmmigration::v1::GetMigratingVmRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetMigratingVm(request),
        [this](grpc::ClientContext& context,
               google::cloud::vmmigration::v1::GetMigratingVmRequest const&
                   request) { return stub_->GetMigratingVm(context, request); },
        request, __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::MigratingVm>>
  UpdateMigratingVm(
      google::cloud::vmmigration::v1::UpdateMigratingVmRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::MigratingVm>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::UpdateMigratingVmRequest const&
                   request) {
          return stub->AsyncUpdateMigratingVm(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::MigratingVm>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateMigratingVm(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
  DeleteMigratingVm(
      google::cloud::vmmigration::v1::DeleteMigratingVmRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::OperationMetadata>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::DeleteMigratingVmRequest const&
                   request) {
          return stub->AsyncDeleteMigratingVm(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::cloud::vmmigration::v1::OperationMetadata>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteMigratingVm(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::StartMigrationResponse>>
  StartMigration(google::cloud::vmmigration::v1::StartMigrationRequest const&
                     request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::StartMigrationResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::StartMigrationRequest const&
                   request) {
          return stub->AsyncStartMigration(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::StartMigrationResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->StartMigration(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::ResumeMigrationResponse>>
  ResumeMigration(google::cloud::vmmigration::v1::ResumeMigrationRequest const&
                      request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::ResumeMigrationResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::ResumeMigrationRequest const&
                   request) {
          return stub->AsyncResumeMigration(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::ResumeMigrationResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ResumeMigration(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::PauseMigrationResponse>>
  PauseMigration(google::cloud::vmmigration::v1::PauseMigrationRequest const&
                     request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::PauseMigrationResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::PauseMigrationRequest const&
                   request) {
          return stub->AsyncPauseMigration(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::PauseMigrationResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->PauseMigration(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::FinalizeMigrationResponse>>
  FinalizeMigration(
      google::cloud::vmmigration::v1::FinalizeMigrationRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::FinalizeMigrationResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::FinalizeMigrationRequest const&
                   request) {
          return stub->AsyncFinalizeMigration(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::FinalizeMigrationResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->FinalizeMigration(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::CloneJob>> CreateCloneJob(
      google::cloud::vmmigration::v1::CreateCloneJobRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::CloneJob>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::CreateCloneJobRequest const&
                   request) {
          return stub->AsyncCreateCloneJob(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::CloneJob>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateCloneJob(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::CancelCloneJobResponse>>
  CancelCloneJob(google::cloud::vmmigration::v1::CancelCloneJobRequest const&
                     request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::CancelCloneJobResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::CancelCloneJobRequest const&
                   request) {
          return stub->AsyncCancelCloneJob(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::CancelCloneJobResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CancelCloneJob(request),
        polling_policy_prototype_->clone(), __func__);
  }

  StreamRange<google::cloud::vmmigration::v1::CloneJob> ListCloneJobs(
      google::cloud::vmmigration::v1::ListCloneJobsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<VmMigrationRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListCloneJobs(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::vmmigration::v1::CloneJob>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::vmmigration::v1::ListCloneJobsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::vmmigration::v1::ListCloneJobsRequest const&
                         request) {
                return stub->ListCloneJobs(context, request);
              },
              r, function_name);
        },
        [](google::cloud::vmmigration::v1::ListCloneJobsResponse r) {
          std::vector<google::cloud::vmmigration::v1::CloneJob> result(
              r.clone_jobs().size());
          auto& messages = *r.mutable_clone_jobs();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::vmmigration::v1::CloneJob> GetCloneJob(
      google::cloud::vmmigration::v1::GetCloneJobRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetCloneJob(request),
        [this](
            grpc::ClientContext& context,
            google::cloud::vmmigration::v1::GetCloneJobRequest const& request) {
          return stub_->GetCloneJob(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::CutoverJob>> CreateCutoverJob(
      google::cloud::vmmigration::v1::CreateCutoverJobRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::CutoverJob>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::CreateCutoverJobRequest const&
                   request) {
          return stub->AsyncCreateCutoverJob(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::CutoverJob>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateCutoverJob(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::CancelCutoverJobResponse>>
  CancelCutoverJob(
      google::cloud::vmmigration::v1::CancelCutoverJobRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::CancelCutoverJobResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::CancelCutoverJobRequest const&
                   request) {
          return stub->AsyncCancelCutoverJob(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::CancelCutoverJobResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CancelCutoverJob(request),
        polling_policy_prototype_->clone(), __func__);
  }

  StreamRange<google::cloud::vmmigration::v1::CutoverJob> ListCutoverJobs(
      google::cloud::vmmigration::v1::ListCutoverJobsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<VmMigrationRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListCutoverJobs(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::vmmigration::v1::CutoverJob>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::vmmigration::v1::ListCutoverJobsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  google::cloud::vmmigration::v1::ListCutoverJobsRequest const&
                      request) {
                return stub->ListCutoverJobs(context, request);
              },
              r, function_name);
        },
        [](google::cloud::vmmigration::v1::ListCutoverJobsResponse r) {
          std::vector<google::cloud::vmmigration::v1::CutoverJob> result(
              r.cutover_jobs().size());
          auto& messages = *r.mutable_cutover_jobs();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::vmmigration::v1::CutoverJob> GetCutoverJob(
      google::cloud::vmmigration::v1::GetCutoverJobRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetCutoverJob(request),
        [this](grpc::ClientContext& context,
               google::cloud::vmmigration::v1::GetCutoverJobRequest const&
                   request) { return stub_->GetCutoverJob(context, request); },
        request, __func__);
  }

  StreamRange<google::cloud::vmmigration::v1::Group> ListGroups(
      google::cloud::vmmigration::v1::ListGroupsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<VmMigrationRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListGroups(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::vmmigration::v1::Group>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::vmmigration::v1::ListGroupsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::vmmigration::v1::ListGroupsRequest const&
                         request) {
                return stub->ListGroups(context, request);
              },
              r, function_name);
        },
        [](google::cloud::vmmigration::v1::ListGroupsResponse r) {
          std::vector<google::cloud::vmmigration::v1::Group> result(
              r.groups().size());
          auto& messages = *r.mutable_groups();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::vmmigration::v1::Group> GetGroup(
      google::cloud::vmmigration::v1::GetGroupRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetGroup(request),
        [this](grpc::ClientContext& context,
               google::cloud::vmmigration::v1::GetGroupRequest const& request) {
          return stub_->GetGroup(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::Group>> CreateGroup(
      google::cloud::vmmigration::v1::CreateGroupRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::Group>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::vmmigration::v1::CreateGroupRequest const& request) {
          return stub->AsyncCreateGroup(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::Group>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateGroup(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::Group>> UpdateGroup(
      google::cloud::vmmigration::v1::UpdateGroupRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::Group>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::vmmigration::v1::UpdateGroupRequest const& request) {
          return stub->AsyncUpdateGroup(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::Group>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateGroup(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
  DeleteGroup(google::cloud::vmmigration::v1::DeleteGroupRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::OperationMetadata>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::vmmigration::v1::DeleteGroupRequest const& request) {
          return stub->AsyncDeleteGroup(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::cloud::vmmigration::v1::OperationMetadata>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteGroup(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::AddGroupMigrationResponse>>
  AddGroupMigration(
      google::cloud::vmmigration::v1::AddGroupMigrationRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::AddGroupMigrationResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::AddGroupMigrationRequest const&
                   request) {
          return stub->AsyncAddGroupMigration(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::AddGroupMigrationResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->AddGroupMigration(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::RemoveGroupMigrationResponse>>
  RemoveGroupMigration(
      google::cloud::vmmigration::v1::RemoveGroupMigrationRequest const&
          request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::RemoveGroupMigrationResponse>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::vmmigration::v1::RemoveGroupMigrationRequest const&
                request) {
          return stub->AsyncRemoveGroupMigration(cq, std::move(context),
                                                 request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::RemoveGroupMigrationResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->RemoveGroupMigration(request),
        polling_policy_prototype_->clone(), __func__);
  }

  StreamRange<google::cloud::vmmigration::v1::TargetProject> ListTargetProjects(
      google::cloud::vmmigration::v1::ListTargetProjectsRequest request)
      override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<VmMigrationRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListTargetProjects(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::vmmigration::v1::TargetProject>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::vmmigration::v1::ListTargetProjectsRequest const&
                r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::vmmigration::v1::
                         ListTargetProjectsRequest const& request) {
                return stub->ListTargetProjects(context, request);
              },
              r, function_name);
        },
        [](google::cloud::vmmigration::v1::ListTargetProjectsResponse r) {
          std::vector<google::cloud::vmmigration::v1::TargetProject> result(
              r.target_projects().size());
          auto& messages = *r.mutable_target_projects();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::vmmigration::v1::TargetProject> GetTargetProject(
      google::cloud::vmmigration::v1::GetTargetProjectRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetTargetProject(request),
        [this](grpc::ClientContext& context,
               google::cloud::vmmigration::v1::GetTargetProjectRequest const&
                   request) {
          return stub_->GetTargetProject(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::TargetProject>>
  CreateTargetProject(
      google::cloud::vmmigration::v1::CreateTargetProjectRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::TargetProject>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::CreateTargetProjectRequest const&
                   request) {
          return stub->AsyncCreateTargetProject(cq, std::move(context),
                                                request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::TargetProject>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateTargetProject(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::TargetProject>>
  UpdateTargetProject(
      google::cloud::vmmigration::v1::UpdateTargetProjectRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::TargetProject>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::UpdateTargetProjectRequest const&
                   request) {
          return stub->AsyncUpdateTargetProject(cq, std::move(context),
                                                request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::vmmigration::v1::TargetProject>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateTargetProject(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::vmmigration::v1::OperationMetadata>>
  DeleteTargetProject(
      google::cloud::vmmigration::v1::DeleteTargetProjectRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::vmmigration::v1::OperationMetadata>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::vmmigration::v1::DeleteTargetProjectRequest const&
                   request) {
          return stub->AsyncDeleteTargetProject(cq, std::move(context),
                                                request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::cloud::vmmigration::v1::OperationMetadata>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteTargetProject(request),
        polling_policy_prototype_->clone(), __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<vmmigration_internal::VmMigrationStub> stub_;
  std::unique_ptr<VmMigrationRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<PollingPolicy const> polling_policy_prototype_;
  std::unique_ptr<VmMigrationConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<VmMigrationConnection> MakeVmMigrationConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 VmMigrationPolicyOptionList>(options,
                                                              __func__);
  options = vmmigration_internal::VmMigrationDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = vmmigration_internal::CreateDefaultVmMigrationStub(
      background->cq(), options);
  return std::make_shared<VmMigrationConnectionImpl>(std::move(background),
                                                     std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace vmmigration
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace vmmigration_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<vmmigration::VmMigrationConnection> MakeVmMigrationConnection(
    std::shared_ptr<VmMigrationStub> stub, Options options) {
  options = VmMigrationDefaultOptions(std::move(options));
  return std::make_shared<vmmigration::VmMigrationConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace vmmigration_internal
}  // namespace cloud
}  // namespace google
