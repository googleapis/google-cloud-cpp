// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/api/servicecontrol/v1/service_controller.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SERVICECONTROL_INTERNAL_SERVICE_CONTROLLER_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SERVICECONTROL_INTERNAL_SERVICE_CONTROLLER_CONNECTION_IMPL_H

#include "google/cloud/servicecontrol/internal/service_controller_retry_traits.h"
#include "google/cloud/servicecontrol/internal/service_controller_stub.h"
#include "google/cloud/servicecontrol/service_controller_connection.h"
#include "google/cloud/servicecontrol/service_controller_connection_idempotency_policy.h"
#include "google/cloud/servicecontrol/service_controller_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace servicecontrol_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class ServiceControllerConnectionImpl
    : public servicecontrol::ServiceControllerConnection {
 public:
  ~ServiceControllerConnectionImpl() override = default;

  ServiceControllerConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<servicecontrol_internal::ServiceControllerStub> stub,
      Options const& options);

  StatusOr<google::api::servicecontrol::v1::CheckResponse> Check(
      google::api::servicecontrol::v1::CheckRequest const& request) override;

  StatusOr<google::api::servicecontrol::v1::ReportResponse> Report(
      google::api::servicecontrol::v1::ReportRequest const& request) override;

 private:
  std::unique_ptr<servicecontrol::ServiceControllerRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<servicecontrol::ServiceControllerRetryPolicyOption>()) {
      return options.get<servicecontrol::ServiceControllerRetryPolicyOption>()
          ->clone();
    }
    return retry_policy_prototype_->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<servicecontrol::ServiceControllerBackoffPolicyOption>()) {
      return options
          .get<servicecontrol::ServiceControllerBackoffPolicyOption>()
          ->clone();
    }
    return backoff_policy_prototype_->clone();
  }

  std::unique_ptr<servicecontrol::ServiceControllerConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<servicecontrol::
                        ServiceControllerConnectionIdempotencyPolicyOption>()) {
      return options
          .get<servicecontrol::
                   ServiceControllerConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return idempotency_policy_->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<servicecontrol_internal::ServiceControllerStub> stub_;
  std::unique_ptr<servicecontrol::ServiceControllerRetryPolicy const>
      retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<servicecontrol::ServiceControllerConnectionIdempotencyPolicy>
      idempotency_policy_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace servicecontrol_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SERVICECONTROL_INTERNAL_SERVICE_CONTROLLER_CONNECTION_IMPL_H
