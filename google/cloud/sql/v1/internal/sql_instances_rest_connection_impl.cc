// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/sql/v1/cloud_sql_instances.proto

#include "google/cloud/sql/v1/internal/sql_instances_rest_connection_impl.h"
#include "google/cloud/sql/v1/internal/sql_instances_rest_stub_factory.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace sql_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SqlInstancesServiceRestConnectionImpl::SqlInstancesServiceRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<sql_v1_internal::SqlInstancesServiceRestStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(
          std::move(options), SqlInstancesServiceConnection::options())) {}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::AddServerCa(
    google::cloud::sql::v1::SqlInstancesAddServerCaRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->AddServerCa(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesAddServerCaRequest const&
                 request) { return stub_->AddServerCa(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Clone(
    google::cloud::sql::v1::SqlInstancesCloneRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Clone(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesCloneRequest const& request) {
        return stub_->Clone(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Delete(
    google::cloud::sql::v1::SqlInstancesDeleteRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Delete(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesDeleteRequest const& request) {
        return stub_->Delete(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::DemoteMaster(
    google::cloud::sql::v1::SqlInstancesDemoteMasterRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DemoteMaster(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesDemoteMasterRequest const&
                 request) {
        return stub_->DemoteMaster(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Export(
    google::cloud::sql::v1::SqlInstancesExportRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Export(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesExportRequest const& request) {
        return stub_->Export(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Failover(
    google::cloud::sql::v1::SqlInstancesFailoverRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Failover(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::sql::v1::SqlInstancesFailoverRequest const& request) {
        return stub_->Failover(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Reencrypt(
    google::cloud::sql::v1::SqlInstancesReencryptRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->Reencrypt(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::sql::v1::SqlInstancesReencryptRequest const& request) {
        return stub_->Reencrypt(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::DatabaseInstance>
SqlInstancesServiceRestConnectionImpl::Get(
    google::cloud::sql::v1::SqlInstancesGetRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Get(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesGetRequest const& request) {
        return stub_->Get(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Import(
    google::cloud::sql::v1::SqlInstancesImportRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Import(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesImportRequest const& request) {
        return stub_->Import(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Insert(
    google::cloud::sql::v1::SqlInstancesInsertRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Insert(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesInsertRequest const& request) {
        return stub_->Insert(rest_context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::sql::v1::DatabaseInstance>
SqlInstancesServiceRestConnectionImpl::List(
    google::cloud::sql::v1::SqlInstancesListRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry = std::shared_ptr<sql_v1::SqlInstancesServiceRetryPolicy const>(
      retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->List(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::sql::v1::DatabaseInstance>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::sql::v1::SqlInstancesListRequest const& r) {
        return google::cloud::rest_internal::RestRetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](rest_internal::RestContext& rest_context,
                   google::cloud::sql::v1::SqlInstancesListRequest const&
                       request) { return stub->List(rest_context, request); },
            r, function_name);
      },
      [](google::cloud::sql::v1::InstancesListResponse r) {
        std::vector<google::cloud::sql::v1::DatabaseInstance> result(
            r.items().size());
        auto& messages = *r.mutable_items();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::sql::v1::InstancesListServerCasResponse>
SqlInstancesServiceRestConnectionImpl::ListServerCas(
    google::cloud::sql::v1::SqlInstancesListServerCasRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ListServerCas(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesListServerCasRequest const&
                 request) {
        return stub_->ListServerCas(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Patch(
    google::cloud::sql::v1::SqlInstancesPatchRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Patch(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesPatchRequest const& request) {
        return stub_->Patch(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::PromoteReplica(
    google::cloud::sql::v1::SqlInstancesPromoteReplicaRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->PromoteReplica(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesPromoteReplicaRequest const&
                 request) {
        return stub_->PromoteReplica(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::ResetSslConfig(
    google::cloud::sql::v1::SqlInstancesResetSslConfigRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ResetSslConfig(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesResetSslConfigRequest const&
                 request) {
        return stub_->ResetSslConfig(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Restart(
    google::cloud::sql::v1::SqlInstancesRestartRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Restart(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::sql::v1::SqlInstancesRestartRequest const& request) {
        return stub_->Restart(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::RestoreBackup(
    google::cloud::sql::v1::SqlInstancesRestoreBackupRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->RestoreBackup(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesRestoreBackupRequest const&
                 request) {
        return stub_->RestoreBackup(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::RotateServerCa(
    google::cloud::sql::v1::SqlInstancesRotateServerCaRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->RotateServerCa(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesRotateServerCaRequest const&
                 request) {
        return stub_->RotateServerCa(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::StartReplica(
    google::cloud::sql::v1::SqlInstancesStartReplicaRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->StartReplica(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesStartReplicaRequest const&
                 request) {
        return stub_->StartReplica(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::StopReplica(
    google::cloud::sql::v1::SqlInstancesStopReplicaRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->StopReplica(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesStopReplicaRequest const&
                 request) { return stub_->StopReplica(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::TruncateLog(
    google::cloud::sql::v1::SqlInstancesTruncateLogRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->TruncateLog(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesTruncateLogRequest const&
                 request) { return stub_->TruncateLog(rest_context, request); },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::Update(
    google::cloud::sql::v1::SqlInstancesUpdateRequest const& request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Update(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesUpdateRequest const& request) {
        return stub_->Update(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::SslCert>
SqlInstancesServiceRestConnectionImpl::CreateEphemeral(
    google::cloud::sql::v1::SqlInstancesCreateEphemeralCertRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateEphemeral(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::sql::v1::SqlInstancesCreateEphemeralCertRequest const&
              request) {
        return stub_->CreateEphemeral(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::RescheduleMaintenance(
    google::cloud::sql::v1::SqlInstancesRescheduleMaintenanceRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->RescheduleMaintenance(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::
                 SqlInstancesRescheduleMaintenanceRequest const& request) {
        return stub_->RescheduleMaintenance(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::SqlInstancesVerifyExternalSyncSettingsResponse>
SqlInstancesServiceRestConnectionImpl::VerifyExternalSyncSettings(
    google::cloud::sql::v1::SqlInstancesVerifyExternalSyncSettingsRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->VerifyExternalSyncSettings(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::
                 SqlInstancesVerifyExternalSyncSettingsRequest const& request) {
        return stub_->VerifyExternalSyncSettings(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::StartExternalSync(
    google::cloud::sql::v1::SqlInstancesStartExternalSyncRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->StartExternalSync(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesStartExternalSyncRequest const&
                 request) {
        return stub_->StartExternalSync(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::PerformDiskShrink(
    google::cloud::sql::v1::SqlInstancesPerformDiskShrinkRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->PerformDiskShrink(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesPerformDiskShrinkRequest const&
                 request) {
        return stub_->PerformDiskShrink(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::SqlInstancesGetDiskShrinkConfigResponse>
SqlInstancesServiceRestConnectionImpl::GetDiskShrinkConfig(
    google::cloud::sql::v1::SqlInstancesGetDiskShrinkConfigRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetDiskShrinkConfig(request),
      [this](
          rest_internal::RestContext& rest_context,
          google::cloud::sql::v1::SqlInstancesGetDiskShrinkConfigRequest const&
              request) {
        return stub_->GetDiskShrinkConfig(rest_context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceRestConnectionImpl::ResetReplicaSize(
    google::cloud::sql::v1::SqlInstancesResetReplicaSizeRequest const&
        request) {
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ResetReplicaSize(request),
      [this](rest_internal::RestContext& rest_context,
             google::cloud::sql::v1::SqlInstancesResetReplicaSizeRequest const&
                 request) {
        return stub_->ResetReplicaSize(rest_context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace sql_v1_internal
}  // namespace cloud
}  // namespace google
